#!/usr/bin/env python

Import("env")

import os
import sys
import json
from datetime import datetime

template_header_boilerplate = """// GENERATED FILE - DO NOT EDIT.
// Generated by {script_name}
//
// Copyright {copyright_year} The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
"""

inputs = [ 'master_source.metal', 'blit.metal', 'clear.metal', 'gen_indices.metal', 'metal_common.h', 'godot_common.h' ]
outputs = ['compiled/mtl_default_shaders.inc', 'compiled/mtl_default_shaders_src_autogen.inc']


def build_mtl(target, source, env):
    folder = 'drivers/metal/shaders'

    if not os.path.exists(folder):
        print('Error: Cannot find "%s" folder.' % folder)
        Exit(1)

    if not os.path.exists(folder + '/compiled'):
        print('Create default compiled directory ...')
        os.makedirs(folder + '/compiled')

    print('Compiling macos version of default shaders ...')
    os.system('xcrun -sdk macosx metal "{0}"/master_source.metal -mmacosx-version-min=10.13 -c -o "{0}"/compiled/default.air'.format(folder))
    os.system('xcrun -sdk macosx metallib "{0}"/compiled/default.air -o "{0}"/compiled/default.metallib'.format(folder))

    print('Compiling ios version of default shaders ...')
    os.system('xcrun -sdk iphoneos metal "{0}"/master_source.metal -mios-version-min=11.0 -c -o "{0}"/compiled/default.ios.air'.format(folder))
    os.system('xcrun -sdk iphoneos metallib "{0}"/compiled/default.ios.air -o "{0}"/compiled/default.ios.metallib'.format(folder))

    print('Compiling ios simulator version of default shaders ...')
    os.system('xcrun -sdk iphonesimulator metal "{0}"/master_source.metal -c -o "{0}"/compiled/default.ios_sim.air'.format(folder))
    os.system('xcrun -sdk iphonesimulator metallib "{0}"/compiled/default.ios_sim.air -o "{0}"/compiled/default.ios_sim.metallib'.format(folder))

    boilerplate_code = template_header_boilerplate.format(
        script_name=sys.argv[0], copyright_year=datetime.today().year)

    os.system("echo \"{0}\" > \"{1}\"/compiled/mtl_default_shaders.inc".format(boilerplate_code, folder))
    os.system('echo "// Compiled binary for Metal default shaders.\n\n" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))
    os.system('echo "#include <TargetConditionals.h>\n\n" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))

    # Mac version
    os.system('echo "#if TARGET_OS_OSX || TARGET_OS_MACCATALYST\n" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))

    os.system('echo "constexpr" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))
    os.system('xxd -i "{0}"/compiled/default.metallib >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))

    # iOS simulator version
    os.system('echo "\n#elif TARGET_OS_SIMULATOR  // TARGET_OS_OSX || TARGET_OS_MACCATALYST\n" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))

    os.system('echo "#define compiled_default_metallib     compiled_default_ios_sim_metallib" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))
    os.system('echo "#define compiled_default_metallib_len compiled_default_ios_sim_metallib_len\n" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))
    os.system('echo "constexpr" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))
    os.system('xxd -i "{0}"/compiled/default.ios_sim.metallib >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))

    # iOS version
    os.system('echo "\n#elif TARGET_OS_IOS  // TARGET_OS_OSX || TARGET_OS_MACCATALYST\n" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))

    os.system('echo "#define compiled_default_metallib     compiled_default_ios_metallib" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))
    os.system('echo "#define compiled_default_metallib_len compiled_default_ios_metallib_len\n" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))
    os.system('echo "constexpr" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))
    os.system('xxd -i "{0}"/compiled/default.ios.metallib >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))

    os.system('echo "#endif  // TARGET_OS_OSX || TARGET_OS_MACCATALYST\n" >> "{0}"/compiled/mtl_default_shaders.inc'.format(folder))

    # Write full source string for debug purpose
    os.system('echo \"{0}\" > "{1}"/compiled/mtl_default_shaders_src_autogen.inc'.format(boilerplate_code, folder))
    os.system('echo "// C++ string version of Metal default shaders for debug purpose.\n\n" >> "{0}"/compiled/mtl_default_shaders_src_autogen.inc'.format(folder))
    os.system('echo "\n\nconstexpr char default_metallib_src[] = R\\"(" >> "{0}"/compiled/mtl_default_shaders_src_autogen.inc'.format(folder))
    os.system('echo "#include <metal_stdlib>" >> "{0}"/compiled/mtl_default_shaders_src_autogen.inc'.format(folder))
    os.system('echo "#include <simd/simd.h>" >> "{0}"/compiled/mtl_default_shaders_src_autogen.inc'.format(folder))
    os.system('clang -xc++ -E -DSKIP_STD_HEADERS "{0}"/master_source.metal >> "{0}"/compiled/mtl_default_shaders_src_autogen.inc'.format(folder))
    os.system('echo ")\\";" >> "{0}"/compiled/mtl_default_shaders_src_autogen.inc'.format(folder))


env.Command(outputs, inputs, build_mtl)
