// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#undef assert
#pragma push_macro("assert")
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[119]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace server {
class AuthenticateRequest;
class AuthenticateRequestDefaultTypeInternal;
extern AuthenticateRequestDefaultTypeInternal _AuthenticateRequest_default_instance_;
class AuthenticateRequest_Email;
class AuthenticateRequest_EmailDefaultTypeInternal;
extern AuthenticateRequest_EmailDefaultTypeInternal _AuthenticateRequest_Email_default_instance_;
class AuthenticateRequest_GameCenter;
class AuthenticateRequest_GameCenterDefaultTypeInternal;
extern AuthenticateRequest_GameCenterDefaultTypeInternal _AuthenticateRequest_GameCenter_default_instance_;
class AuthenticateResponse;
class AuthenticateResponseDefaultTypeInternal;
extern AuthenticateResponseDefaultTypeInternal _AuthenticateResponse_default_instance_;
class AuthenticateResponse_Error;
class AuthenticateResponse_ErrorDefaultTypeInternal;
extern AuthenticateResponse_ErrorDefaultTypeInternal _AuthenticateResponse_Error_default_instance_;
class AuthenticateResponse_Session;
class AuthenticateResponse_SessionDefaultTypeInternal;
extern AuthenticateResponse_SessionDefaultTypeInternal _AuthenticateResponse_Session_default_instance_;
class Envelope;
class EnvelopeDefaultTypeInternal;
extern EnvelopeDefaultTypeInternal _Envelope_default_instance_;
class Error;
class ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Friend;
class FriendDefaultTypeInternal;
extern FriendDefaultTypeInternal _Friend_default_instance_;
class Group;
class GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class GroupUser;
class GroupUserDefaultTypeInternal;
extern GroupUserDefaultTypeInternal _GroupUser_default_instance_;
class Heartbeat;
class HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class Leaderboard;
class LeaderboardDefaultTypeInternal;
extern LeaderboardDefaultTypeInternal _Leaderboard_default_instance_;
class LeaderboardRecord;
class LeaderboardRecordDefaultTypeInternal;
extern LeaderboardRecordDefaultTypeInternal _LeaderboardRecord_default_instance_;
class Logout;
class LogoutDefaultTypeInternal;
extern LogoutDefaultTypeInternal _Logout_default_instance_;
class Match;
class MatchDefaultTypeInternal;
extern MatchDefaultTypeInternal _Match_default_instance_;
class MatchData;
class MatchDataDefaultTypeInternal;
extern MatchDataDefaultTypeInternal _MatchData_default_instance_;
class MatchDataSend;
class MatchDataSendDefaultTypeInternal;
extern MatchDataSendDefaultTypeInternal _MatchDataSend_default_instance_;
class MatchPresence;
class MatchPresenceDefaultTypeInternal;
extern MatchPresenceDefaultTypeInternal _MatchPresence_default_instance_;
class MatchmakeFilter;
class MatchmakeFilterDefaultTypeInternal;
extern MatchmakeFilterDefaultTypeInternal _MatchmakeFilter_default_instance_;
class MatchmakeFilter_RangeFilter;
class MatchmakeFilter_RangeFilterDefaultTypeInternal;
extern MatchmakeFilter_RangeFilterDefaultTypeInternal _MatchmakeFilter_RangeFilter_default_instance_;
class MatchmakeFilter_TermFilter;
class MatchmakeFilter_TermFilterDefaultTypeInternal;
extern MatchmakeFilter_TermFilterDefaultTypeInternal _MatchmakeFilter_TermFilter_default_instance_;
class MatchmakeMatched;
class MatchmakeMatchedDefaultTypeInternal;
extern MatchmakeMatchedDefaultTypeInternal _MatchmakeMatched_default_instance_;
class MatchmakeMatched_UserProperty;
class MatchmakeMatched_UserPropertyDefaultTypeInternal;
extern MatchmakeMatched_UserPropertyDefaultTypeInternal _MatchmakeMatched_UserProperty_default_instance_;
class Notification;
class NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class Notifications;
class NotificationsDefaultTypeInternal;
extern NotificationsDefaultTypeInternal _Notifications_default_instance_;
class PropertyPair;
class PropertyPairDefaultTypeInternal;
extern PropertyPairDefaultTypeInternal _PropertyPair_default_instance_;
class PropertyPair_StringSet;
class PropertyPair_StringSetDefaultTypeInternal;
extern PropertyPair_StringSetDefaultTypeInternal _PropertyPair_StringSet_default_instance_;
class Self;
class SelfDefaultTypeInternal;
extern SelfDefaultTypeInternal _Self_default_instance_;
class TFriends;
class TFriendsDefaultTypeInternal;
extern TFriendsDefaultTypeInternal _TFriends_default_instance_;
class TFriendsAdd;
class TFriendsAddDefaultTypeInternal;
extern TFriendsAddDefaultTypeInternal _TFriendsAdd_default_instance_;
class TFriendsAdd_FriendsAdd;
class TFriendsAdd_FriendsAddDefaultTypeInternal;
extern TFriendsAdd_FriendsAddDefaultTypeInternal _TFriendsAdd_FriendsAdd_default_instance_;
class TFriendsBlock;
class TFriendsBlockDefaultTypeInternal;
extern TFriendsBlockDefaultTypeInternal _TFriendsBlock_default_instance_;
class TFriendsList;
class TFriendsListDefaultTypeInternal;
extern TFriendsListDefaultTypeInternal _TFriendsList_default_instance_;
class TFriendsRemove;
class TFriendsRemoveDefaultTypeInternal;
extern TFriendsRemoveDefaultTypeInternal _TFriendsRemove_default_instance_;
class TGroupUsers;
class TGroupUsersDefaultTypeInternal;
extern TGroupUsersDefaultTypeInternal _TGroupUsers_default_instance_;
class TGroupUsersAdd;
class TGroupUsersAddDefaultTypeInternal;
extern TGroupUsersAddDefaultTypeInternal _TGroupUsersAdd_default_instance_;
class TGroupUsersAdd_GroupUserAdd;
class TGroupUsersAdd_GroupUserAddDefaultTypeInternal;
extern TGroupUsersAdd_GroupUserAddDefaultTypeInternal _TGroupUsersAdd_GroupUserAdd_default_instance_;
class TGroupUsersKick;
class TGroupUsersKickDefaultTypeInternal;
extern TGroupUsersKickDefaultTypeInternal _TGroupUsersKick_default_instance_;
class TGroupUsersKick_GroupUserKick;
class TGroupUsersKick_GroupUserKickDefaultTypeInternal;
extern TGroupUsersKick_GroupUserKickDefaultTypeInternal _TGroupUsersKick_GroupUserKick_default_instance_;
class TGroupUsersList;
class TGroupUsersListDefaultTypeInternal;
extern TGroupUsersListDefaultTypeInternal _TGroupUsersList_default_instance_;
class TGroupUsersPromote;
class TGroupUsersPromoteDefaultTypeInternal;
extern TGroupUsersPromoteDefaultTypeInternal _TGroupUsersPromote_default_instance_;
class TGroupUsersPromote_GroupUserPromote;
class TGroupUsersPromote_GroupUserPromoteDefaultTypeInternal;
extern TGroupUsersPromote_GroupUserPromoteDefaultTypeInternal _TGroupUsersPromote_GroupUserPromote_default_instance_;
class TGroups;
class TGroupsDefaultTypeInternal;
extern TGroupsDefaultTypeInternal _TGroups_default_instance_;
class TGroupsCreate;
class TGroupsCreateDefaultTypeInternal;
extern TGroupsCreateDefaultTypeInternal _TGroupsCreate_default_instance_;
class TGroupsCreate_GroupCreate;
class TGroupsCreate_GroupCreateDefaultTypeInternal;
extern TGroupsCreate_GroupCreateDefaultTypeInternal _TGroupsCreate_GroupCreate_default_instance_;
class TGroupsFetch;
class TGroupsFetchDefaultTypeInternal;
extern TGroupsFetchDefaultTypeInternal _TGroupsFetch_default_instance_;
class TGroupsFetch_GroupFetch;
class TGroupsFetch_GroupFetchDefaultTypeInternal;
extern TGroupsFetch_GroupFetchDefaultTypeInternal _TGroupsFetch_GroupFetch_default_instance_;
class TGroupsJoin;
class TGroupsJoinDefaultTypeInternal;
extern TGroupsJoinDefaultTypeInternal _TGroupsJoin_default_instance_;
class TGroupsLeave;
class TGroupsLeaveDefaultTypeInternal;
extern TGroupsLeaveDefaultTypeInternal _TGroupsLeave_default_instance_;
class TGroupsList;
class TGroupsListDefaultTypeInternal;
extern TGroupsListDefaultTypeInternal _TGroupsList_default_instance_;
class TGroupsRemove;
class TGroupsRemoveDefaultTypeInternal;
extern TGroupsRemoveDefaultTypeInternal _TGroupsRemove_default_instance_;
class TGroupsSelf;
class TGroupsSelfDefaultTypeInternal;
extern TGroupsSelfDefaultTypeInternal _TGroupsSelf_default_instance_;
class TGroupsSelfList;
class TGroupsSelfListDefaultTypeInternal;
extern TGroupsSelfListDefaultTypeInternal _TGroupsSelfList_default_instance_;
class TGroupsSelf_GroupSelf;
class TGroupsSelf_GroupSelfDefaultTypeInternal;
extern TGroupsSelf_GroupSelfDefaultTypeInternal _TGroupsSelf_GroupSelf_default_instance_;
class TGroupsUpdate;
class TGroupsUpdateDefaultTypeInternal;
extern TGroupsUpdateDefaultTypeInternal _TGroupsUpdate_default_instance_;
class TGroupsUpdate_GroupUpdate;
class TGroupsUpdate_GroupUpdateDefaultTypeInternal;
extern TGroupsUpdate_GroupUpdateDefaultTypeInternal _TGroupsUpdate_GroupUpdate_default_instance_;
class TLeaderboardRecords;
class TLeaderboardRecordsDefaultTypeInternal;
extern TLeaderboardRecordsDefaultTypeInternal _TLeaderboardRecords_default_instance_;
class TLeaderboardRecordsFetch;
class TLeaderboardRecordsFetchDefaultTypeInternal;
extern TLeaderboardRecordsFetchDefaultTypeInternal _TLeaderboardRecordsFetch_default_instance_;
class TLeaderboardRecordsList;
class TLeaderboardRecordsListDefaultTypeInternal;
extern TLeaderboardRecordsListDefaultTypeInternal _TLeaderboardRecordsList_default_instance_;
class TLeaderboardRecordsList_Owners;
class TLeaderboardRecordsList_OwnersDefaultTypeInternal;
extern TLeaderboardRecordsList_OwnersDefaultTypeInternal _TLeaderboardRecordsList_Owners_default_instance_;
class TLeaderboardRecordsWrite;
class TLeaderboardRecordsWriteDefaultTypeInternal;
extern TLeaderboardRecordsWriteDefaultTypeInternal _TLeaderboardRecordsWrite_default_instance_;
class TLeaderboardRecordsWrite_LeaderboardRecordWrite;
class TLeaderboardRecordsWrite_LeaderboardRecordWriteDefaultTypeInternal;
extern TLeaderboardRecordsWrite_LeaderboardRecordWriteDefaultTypeInternal _TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_;
class TLeaderboards;
class TLeaderboardsDefaultTypeInternal;
extern TLeaderboardsDefaultTypeInternal _TLeaderboards_default_instance_;
class TLeaderboardsList;
class TLeaderboardsListDefaultTypeInternal;
extern TLeaderboardsListDefaultTypeInternal _TLeaderboardsList_default_instance_;
class TLink;
class TLinkDefaultTypeInternal;
extern TLinkDefaultTypeInternal _TLink_default_instance_;
class TMatch;
class TMatchDefaultTypeInternal;
extern TMatchDefaultTypeInternal _TMatch_default_instance_;
class TMatchCreate;
class TMatchCreateDefaultTypeInternal;
extern TMatchCreateDefaultTypeInternal _TMatchCreate_default_instance_;
class TMatches;
class TMatchesDefaultTypeInternal;
extern TMatchesDefaultTypeInternal _TMatches_default_instance_;
class TMatchesJoin;
class TMatchesJoinDefaultTypeInternal;
extern TMatchesJoinDefaultTypeInternal _TMatchesJoin_default_instance_;
class TMatchesJoin_MatchJoin;
class TMatchesJoin_MatchJoinDefaultTypeInternal;
extern TMatchesJoin_MatchJoinDefaultTypeInternal _TMatchesJoin_MatchJoin_default_instance_;
class TMatchesLeave;
class TMatchesLeaveDefaultTypeInternal;
extern TMatchesLeaveDefaultTypeInternal _TMatchesLeave_default_instance_;
class TMatchmakeAdd;
class TMatchmakeAddDefaultTypeInternal;
extern TMatchmakeAddDefaultTypeInternal _TMatchmakeAdd_default_instance_;
class TMatchmakeRemove;
class TMatchmakeRemoveDefaultTypeInternal;
extern TMatchmakeRemoveDefaultTypeInternal _TMatchmakeRemove_default_instance_;
class TMatchmakeTicket;
class TMatchmakeTicketDefaultTypeInternal;
extern TMatchmakeTicketDefaultTypeInternal _TMatchmakeTicket_default_instance_;
class TNotifications;
class TNotificationsDefaultTypeInternal;
extern TNotificationsDefaultTypeInternal _TNotifications_default_instance_;
class TNotificationsList;
class TNotificationsListDefaultTypeInternal;
extern TNotificationsListDefaultTypeInternal _TNotificationsList_default_instance_;
class TNotificationsRemove;
class TNotificationsRemoveDefaultTypeInternal;
extern TNotificationsRemoveDefaultTypeInternal _TNotificationsRemove_default_instance_;
class TPurchaseRecord;
class TPurchaseRecordDefaultTypeInternal;
extern TPurchaseRecordDefaultTypeInternal _TPurchaseRecord_default_instance_;
class TPurchaseValidation;
class TPurchaseValidationDefaultTypeInternal;
extern TPurchaseValidationDefaultTypeInternal _TPurchaseValidation_default_instance_;
class TPurchaseValidation_ApplePurchase;
class TPurchaseValidation_ApplePurchaseDefaultTypeInternal;
extern TPurchaseValidation_ApplePurchaseDefaultTypeInternal _TPurchaseValidation_ApplePurchase_default_instance_;
class TPurchaseValidation_GooglePurchase;
class TPurchaseValidation_GooglePurchaseDefaultTypeInternal;
extern TPurchaseValidation_GooglePurchaseDefaultTypeInternal _TPurchaseValidation_GooglePurchase_default_instance_;
class TRpc;
class TRpcDefaultTypeInternal;
extern TRpcDefaultTypeInternal _TRpc_default_instance_;
class TSelf;
class TSelfDefaultTypeInternal;
extern TSelfDefaultTypeInternal _TSelf_default_instance_;
class TSelfFetch;
class TSelfFetchDefaultTypeInternal;
extern TSelfFetchDefaultTypeInternal _TSelfFetch_default_instance_;
class TSelfUpdate;
class TSelfUpdateDefaultTypeInternal;
extern TSelfUpdateDefaultTypeInternal _TSelfUpdate_default_instance_;
class TStorageData;
class TStorageDataDefaultTypeInternal;
extern TStorageDataDefaultTypeInternal _TStorageData_default_instance_;
class TStorageData_StorageData;
class TStorageData_StorageDataDefaultTypeInternal;
extern TStorageData_StorageDataDefaultTypeInternal _TStorageData_StorageData_default_instance_;
class TStorageFetch;
class TStorageFetchDefaultTypeInternal;
extern TStorageFetchDefaultTypeInternal _TStorageFetch_default_instance_;
class TStorageFetch_StorageKey;
class TStorageFetch_StorageKeyDefaultTypeInternal;
extern TStorageFetch_StorageKeyDefaultTypeInternal _TStorageFetch_StorageKey_default_instance_;
class TStorageKeys;
class TStorageKeysDefaultTypeInternal;
extern TStorageKeysDefaultTypeInternal _TStorageKeys_default_instance_;
class TStorageKeys_StorageKey;
class TStorageKeys_StorageKeyDefaultTypeInternal;
extern TStorageKeys_StorageKeyDefaultTypeInternal _TStorageKeys_StorageKey_default_instance_;
class TStorageList;
class TStorageListDefaultTypeInternal;
extern TStorageListDefaultTypeInternal _TStorageList_default_instance_;
class TStorageRemove;
class TStorageRemoveDefaultTypeInternal;
extern TStorageRemoveDefaultTypeInternal _TStorageRemove_default_instance_;
class TStorageRemove_StorageKey;
class TStorageRemove_StorageKeyDefaultTypeInternal;
extern TStorageRemove_StorageKeyDefaultTypeInternal _TStorageRemove_StorageKey_default_instance_;
class TStorageUpdate;
class TStorageUpdateDefaultTypeInternal;
extern TStorageUpdateDefaultTypeInternal _TStorageUpdate_default_instance_;
class TStorageUpdate_StorageUpdate;
class TStorageUpdate_StorageUpdateDefaultTypeInternal;
extern TStorageUpdate_StorageUpdateDefaultTypeInternal _TStorageUpdate_StorageUpdate_default_instance_;
class TStorageUpdate_StorageUpdate_StorageKey;
class TStorageUpdate_StorageUpdate_StorageKeyDefaultTypeInternal;
extern TStorageUpdate_StorageUpdate_StorageKeyDefaultTypeInternal _TStorageUpdate_StorageUpdate_StorageKey_default_instance_;
class TStorageUpdate_StorageUpdate_UpdateOp;
class TStorageUpdate_StorageUpdate_UpdateOpDefaultTypeInternal;
extern TStorageUpdate_StorageUpdate_UpdateOpDefaultTypeInternal _TStorageUpdate_StorageUpdate_UpdateOp_default_instance_;
class TStorageWrite;
class TStorageWriteDefaultTypeInternal;
extern TStorageWriteDefaultTypeInternal _TStorageWrite_default_instance_;
class TStorageWrite_StorageData;
class TStorageWrite_StorageDataDefaultTypeInternal;
extern TStorageWrite_StorageDataDefaultTypeInternal _TStorageWrite_StorageData_default_instance_;
class TTopicMessageAck;
class TTopicMessageAckDefaultTypeInternal;
extern TTopicMessageAckDefaultTypeInternal _TTopicMessageAck_default_instance_;
class TTopicMessageSend;
class TTopicMessageSendDefaultTypeInternal;
extern TTopicMessageSendDefaultTypeInternal _TTopicMessageSend_default_instance_;
class TTopicMessages;
class TTopicMessagesDefaultTypeInternal;
extern TTopicMessagesDefaultTypeInternal _TTopicMessages_default_instance_;
class TTopicMessagesList;
class TTopicMessagesListDefaultTypeInternal;
extern TTopicMessagesListDefaultTypeInternal _TTopicMessagesList_default_instance_;
class TTopics;
class TTopicsDefaultTypeInternal;
extern TTopicsDefaultTypeInternal _TTopics_default_instance_;
class TTopicsJoin;
class TTopicsJoinDefaultTypeInternal;
extern TTopicsJoinDefaultTypeInternal _TTopicsJoin_default_instance_;
class TTopicsJoin_TopicJoin;
class TTopicsJoin_TopicJoinDefaultTypeInternal;
extern TTopicsJoin_TopicJoinDefaultTypeInternal _TTopicsJoin_TopicJoin_default_instance_;
class TTopicsLeave;
class TTopicsLeaveDefaultTypeInternal;
extern TTopicsLeaveDefaultTypeInternal _TTopicsLeave_default_instance_;
class TTopics_Topic;
class TTopics_TopicDefaultTypeInternal;
extern TTopics_TopicDefaultTypeInternal _TTopics_Topic_default_instance_;
class TUnlink;
class TUnlinkDefaultTypeInternal;
extern TUnlinkDefaultTypeInternal _TUnlink_default_instance_;
class TUsers;
class TUsersDefaultTypeInternal;
extern TUsersDefaultTypeInternal _TUsers_default_instance_;
class TUsersFetch;
class TUsersFetchDefaultTypeInternal;
extern TUsersFetchDefaultTypeInternal _TUsersFetch_default_instance_;
class TUsersFetch_UsersFetch;
class TUsersFetch_UsersFetchDefaultTypeInternal;
extern TUsersFetch_UsersFetchDefaultTypeInternal _TUsersFetch_UsersFetch_default_instance_;
class TopicId;
class TopicIdDefaultTypeInternal;
extern TopicIdDefaultTypeInternal _TopicId_default_instance_;
class TopicMessage;
class TopicMessageDefaultTypeInternal;
extern TopicMessageDefaultTypeInternal _TopicMessage_default_instance_;
class TopicPresence;
class TopicPresenceDefaultTypeInternal;
extern TopicPresenceDefaultTypeInternal _TopicPresence_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserPresence;
class UserPresenceDefaultTypeInternal;
extern UserPresenceDefaultTypeInternal _UserPresence_default_instance_;
}  // namespace server
PROTOBUF_NAMESPACE_OPEN
template<> ::server::AuthenticateRequest* Arena::CreateMaybeMessage<::server::AuthenticateRequest>(Arena*);
template<> ::server::AuthenticateRequest_Email* Arena::CreateMaybeMessage<::server::AuthenticateRequest_Email>(Arena*);
template<> ::server::AuthenticateRequest_GameCenter* Arena::CreateMaybeMessage<::server::AuthenticateRequest_GameCenter>(Arena*);
template<> ::server::AuthenticateResponse* Arena::CreateMaybeMessage<::server::AuthenticateResponse>(Arena*);
template<> ::server::AuthenticateResponse_Error* Arena::CreateMaybeMessage<::server::AuthenticateResponse_Error>(Arena*);
template<> ::server::AuthenticateResponse_Session* Arena::CreateMaybeMessage<::server::AuthenticateResponse_Session>(Arena*);
template<> ::server::Envelope* Arena::CreateMaybeMessage<::server::Envelope>(Arena*);
template<> ::server::Error* Arena::CreateMaybeMessage<::server::Error>(Arena*);
template<> ::server::Friend* Arena::CreateMaybeMessage<::server::Friend>(Arena*);
template<> ::server::Group* Arena::CreateMaybeMessage<::server::Group>(Arena*);
template<> ::server::GroupUser* Arena::CreateMaybeMessage<::server::GroupUser>(Arena*);
template<> ::server::Heartbeat* Arena::CreateMaybeMessage<::server::Heartbeat>(Arena*);
template<> ::server::Leaderboard* Arena::CreateMaybeMessage<::server::Leaderboard>(Arena*);
template<> ::server::LeaderboardRecord* Arena::CreateMaybeMessage<::server::LeaderboardRecord>(Arena*);
template<> ::server::Logout* Arena::CreateMaybeMessage<::server::Logout>(Arena*);
template<> ::server::Match* Arena::CreateMaybeMessage<::server::Match>(Arena*);
template<> ::server::MatchData* Arena::CreateMaybeMessage<::server::MatchData>(Arena*);
template<> ::server::MatchDataSend* Arena::CreateMaybeMessage<::server::MatchDataSend>(Arena*);
template<> ::server::MatchPresence* Arena::CreateMaybeMessage<::server::MatchPresence>(Arena*);
template<> ::server::MatchmakeFilter* Arena::CreateMaybeMessage<::server::MatchmakeFilter>(Arena*);
template<> ::server::MatchmakeFilter_RangeFilter* Arena::CreateMaybeMessage<::server::MatchmakeFilter_RangeFilter>(Arena*);
template<> ::server::MatchmakeFilter_TermFilter* Arena::CreateMaybeMessage<::server::MatchmakeFilter_TermFilter>(Arena*);
template<> ::server::MatchmakeMatched* Arena::CreateMaybeMessage<::server::MatchmakeMatched>(Arena*);
template<> ::server::MatchmakeMatched_UserProperty* Arena::CreateMaybeMessage<::server::MatchmakeMatched_UserProperty>(Arena*);
template<> ::server::Notification* Arena::CreateMaybeMessage<::server::Notification>(Arena*);
template<> ::server::Notifications* Arena::CreateMaybeMessage<::server::Notifications>(Arena*);
template<> ::server::PropertyPair* Arena::CreateMaybeMessage<::server::PropertyPair>(Arena*);
template<> ::server::PropertyPair_StringSet* Arena::CreateMaybeMessage<::server::PropertyPair_StringSet>(Arena*);
template<> ::server::Self* Arena::CreateMaybeMessage<::server::Self>(Arena*);
template<> ::server::TFriends* Arena::CreateMaybeMessage<::server::TFriends>(Arena*);
template<> ::server::TFriendsAdd* Arena::CreateMaybeMessage<::server::TFriendsAdd>(Arena*);
template<> ::server::TFriendsAdd_FriendsAdd* Arena::CreateMaybeMessage<::server::TFriendsAdd_FriendsAdd>(Arena*);
template<> ::server::TFriendsBlock* Arena::CreateMaybeMessage<::server::TFriendsBlock>(Arena*);
template<> ::server::TFriendsList* Arena::CreateMaybeMessage<::server::TFriendsList>(Arena*);
template<> ::server::TFriendsRemove* Arena::CreateMaybeMessage<::server::TFriendsRemove>(Arena*);
template<> ::server::TGroupUsers* Arena::CreateMaybeMessage<::server::TGroupUsers>(Arena*);
template<> ::server::TGroupUsersAdd* Arena::CreateMaybeMessage<::server::TGroupUsersAdd>(Arena*);
template<> ::server::TGroupUsersAdd_GroupUserAdd* Arena::CreateMaybeMessage<::server::TGroupUsersAdd_GroupUserAdd>(Arena*);
template<> ::server::TGroupUsersKick* Arena::CreateMaybeMessage<::server::TGroupUsersKick>(Arena*);
template<> ::server::TGroupUsersKick_GroupUserKick* Arena::CreateMaybeMessage<::server::TGroupUsersKick_GroupUserKick>(Arena*);
template<> ::server::TGroupUsersList* Arena::CreateMaybeMessage<::server::TGroupUsersList>(Arena*);
template<> ::server::TGroupUsersPromote* Arena::CreateMaybeMessage<::server::TGroupUsersPromote>(Arena*);
template<> ::server::TGroupUsersPromote_GroupUserPromote* Arena::CreateMaybeMessage<::server::TGroupUsersPromote_GroupUserPromote>(Arena*);
template<> ::server::TGroups* Arena::CreateMaybeMessage<::server::TGroups>(Arena*);
template<> ::server::TGroupsCreate* Arena::CreateMaybeMessage<::server::TGroupsCreate>(Arena*);
template<> ::server::TGroupsCreate_GroupCreate* Arena::CreateMaybeMessage<::server::TGroupsCreate_GroupCreate>(Arena*);
template<> ::server::TGroupsFetch* Arena::CreateMaybeMessage<::server::TGroupsFetch>(Arena*);
template<> ::server::TGroupsFetch_GroupFetch* Arena::CreateMaybeMessage<::server::TGroupsFetch_GroupFetch>(Arena*);
template<> ::server::TGroupsJoin* Arena::CreateMaybeMessage<::server::TGroupsJoin>(Arena*);
template<> ::server::TGroupsLeave* Arena::CreateMaybeMessage<::server::TGroupsLeave>(Arena*);
template<> ::server::TGroupsList* Arena::CreateMaybeMessage<::server::TGroupsList>(Arena*);
template<> ::server::TGroupsRemove* Arena::CreateMaybeMessage<::server::TGroupsRemove>(Arena*);
template<> ::server::TGroupsSelf* Arena::CreateMaybeMessage<::server::TGroupsSelf>(Arena*);
template<> ::server::TGroupsSelfList* Arena::CreateMaybeMessage<::server::TGroupsSelfList>(Arena*);
template<> ::server::TGroupsSelf_GroupSelf* Arena::CreateMaybeMessage<::server::TGroupsSelf_GroupSelf>(Arena*);
template<> ::server::TGroupsUpdate* Arena::CreateMaybeMessage<::server::TGroupsUpdate>(Arena*);
template<> ::server::TGroupsUpdate_GroupUpdate* Arena::CreateMaybeMessage<::server::TGroupsUpdate_GroupUpdate>(Arena*);
template<> ::server::TLeaderboardRecords* Arena::CreateMaybeMessage<::server::TLeaderboardRecords>(Arena*);
template<> ::server::TLeaderboardRecordsFetch* Arena::CreateMaybeMessage<::server::TLeaderboardRecordsFetch>(Arena*);
template<> ::server::TLeaderboardRecordsList* Arena::CreateMaybeMessage<::server::TLeaderboardRecordsList>(Arena*);
template<> ::server::TLeaderboardRecordsList_Owners* Arena::CreateMaybeMessage<::server::TLeaderboardRecordsList_Owners>(Arena*);
template<> ::server::TLeaderboardRecordsWrite* Arena::CreateMaybeMessage<::server::TLeaderboardRecordsWrite>(Arena*);
template<> ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* Arena::CreateMaybeMessage<::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite>(Arena*);
template<> ::server::TLeaderboards* Arena::CreateMaybeMessage<::server::TLeaderboards>(Arena*);
template<> ::server::TLeaderboardsList* Arena::CreateMaybeMessage<::server::TLeaderboardsList>(Arena*);
template<> ::server::TLink* Arena::CreateMaybeMessage<::server::TLink>(Arena*);
template<> ::server::TMatch* Arena::CreateMaybeMessage<::server::TMatch>(Arena*);
template<> ::server::TMatchCreate* Arena::CreateMaybeMessage<::server::TMatchCreate>(Arena*);
template<> ::server::TMatches* Arena::CreateMaybeMessage<::server::TMatches>(Arena*);
template<> ::server::TMatchesJoin* Arena::CreateMaybeMessage<::server::TMatchesJoin>(Arena*);
template<> ::server::TMatchesJoin_MatchJoin* Arena::CreateMaybeMessage<::server::TMatchesJoin_MatchJoin>(Arena*);
template<> ::server::TMatchesLeave* Arena::CreateMaybeMessage<::server::TMatchesLeave>(Arena*);
template<> ::server::TMatchmakeAdd* Arena::CreateMaybeMessage<::server::TMatchmakeAdd>(Arena*);
template<> ::server::TMatchmakeRemove* Arena::CreateMaybeMessage<::server::TMatchmakeRemove>(Arena*);
template<> ::server::TMatchmakeTicket* Arena::CreateMaybeMessage<::server::TMatchmakeTicket>(Arena*);
template<> ::server::TNotifications* Arena::CreateMaybeMessage<::server::TNotifications>(Arena*);
template<> ::server::TNotificationsList* Arena::CreateMaybeMessage<::server::TNotificationsList>(Arena*);
template<> ::server::TNotificationsRemove* Arena::CreateMaybeMessage<::server::TNotificationsRemove>(Arena*);
template<> ::server::TPurchaseRecord* Arena::CreateMaybeMessage<::server::TPurchaseRecord>(Arena*);
template<> ::server::TPurchaseValidation* Arena::CreateMaybeMessage<::server::TPurchaseValidation>(Arena*);
template<> ::server::TPurchaseValidation_ApplePurchase* Arena::CreateMaybeMessage<::server::TPurchaseValidation_ApplePurchase>(Arena*);
template<> ::server::TPurchaseValidation_GooglePurchase* Arena::CreateMaybeMessage<::server::TPurchaseValidation_GooglePurchase>(Arena*);
template<> ::server::TRpc* Arena::CreateMaybeMessage<::server::TRpc>(Arena*);
template<> ::server::TSelf* Arena::CreateMaybeMessage<::server::TSelf>(Arena*);
template<> ::server::TSelfFetch* Arena::CreateMaybeMessage<::server::TSelfFetch>(Arena*);
template<> ::server::TSelfUpdate* Arena::CreateMaybeMessage<::server::TSelfUpdate>(Arena*);
template<> ::server::TStorageData* Arena::CreateMaybeMessage<::server::TStorageData>(Arena*);
template<> ::server::TStorageData_StorageData* Arena::CreateMaybeMessage<::server::TStorageData_StorageData>(Arena*);
template<> ::server::TStorageFetch* Arena::CreateMaybeMessage<::server::TStorageFetch>(Arena*);
template<> ::server::TStorageFetch_StorageKey* Arena::CreateMaybeMessage<::server::TStorageFetch_StorageKey>(Arena*);
template<> ::server::TStorageKeys* Arena::CreateMaybeMessage<::server::TStorageKeys>(Arena*);
template<> ::server::TStorageKeys_StorageKey* Arena::CreateMaybeMessage<::server::TStorageKeys_StorageKey>(Arena*);
template<> ::server::TStorageList* Arena::CreateMaybeMessage<::server::TStorageList>(Arena*);
template<> ::server::TStorageRemove* Arena::CreateMaybeMessage<::server::TStorageRemove>(Arena*);
template<> ::server::TStorageRemove_StorageKey* Arena::CreateMaybeMessage<::server::TStorageRemove_StorageKey>(Arena*);
template<> ::server::TStorageUpdate* Arena::CreateMaybeMessage<::server::TStorageUpdate>(Arena*);
template<> ::server::TStorageUpdate_StorageUpdate* Arena::CreateMaybeMessage<::server::TStorageUpdate_StorageUpdate>(Arena*);
template<> ::server::TStorageUpdate_StorageUpdate_StorageKey* Arena::CreateMaybeMessage<::server::TStorageUpdate_StorageUpdate_StorageKey>(Arena*);
template<> ::server::TStorageUpdate_StorageUpdate_UpdateOp* Arena::CreateMaybeMessage<::server::TStorageUpdate_StorageUpdate_UpdateOp>(Arena*);
template<> ::server::TStorageWrite* Arena::CreateMaybeMessage<::server::TStorageWrite>(Arena*);
template<> ::server::TStorageWrite_StorageData* Arena::CreateMaybeMessage<::server::TStorageWrite_StorageData>(Arena*);
template<> ::server::TTopicMessageAck* Arena::CreateMaybeMessage<::server::TTopicMessageAck>(Arena*);
template<> ::server::TTopicMessageSend* Arena::CreateMaybeMessage<::server::TTopicMessageSend>(Arena*);
template<> ::server::TTopicMessages* Arena::CreateMaybeMessage<::server::TTopicMessages>(Arena*);
template<> ::server::TTopicMessagesList* Arena::CreateMaybeMessage<::server::TTopicMessagesList>(Arena*);
template<> ::server::TTopics* Arena::CreateMaybeMessage<::server::TTopics>(Arena*);
template<> ::server::TTopicsJoin* Arena::CreateMaybeMessage<::server::TTopicsJoin>(Arena*);
template<> ::server::TTopicsJoin_TopicJoin* Arena::CreateMaybeMessage<::server::TTopicsJoin_TopicJoin>(Arena*);
template<> ::server::TTopicsLeave* Arena::CreateMaybeMessage<::server::TTopicsLeave>(Arena*);
template<> ::server::TTopics_Topic* Arena::CreateMaybeMessage<::server::TTopics_Topic>(Arena*);
template<> ::server::TUnlink* Arena::CreateMaybeMessage<::server::TUnlink>(Arena*);
template<> ::server::TUsers* Arena::CreateMaybeMessage<::server::TUsers>(Arena*);
template<> ::server::TUsersFetch* Arena::CreateMaybeMessage<::server::TUsersFetch>(Arena*);
template<> ::server::TUsersFetch_UsersFetch* Arena::CreateMaybeMessage<::server::TUsersFetch_UsersFetch>(Arena*);
template<> ::server::TopicId* Arena::CreateMaybeMessage<::server::TopicId>(Arena*);
template<> ::server::TopicMessage* Arena::CreateMaybeMessage<::server::TopicMessage>(Arena*);
template<> ::server::TopicPresence* Arena::CreateMaybeMessage<::server::TopicPresence>(Arena*);
template<> ::server::User* Arena::CreateMaybeMessage<::server::User>(Arena*);
template<> ::server::UserPresence* Arena::CreateMaybeMessage<::server::UserPresence>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace server {

enum Error_Code : int {
  Error_Code_RUNTIME_EXCEPTION = 0,
  Error_Code_UNRECOGNIZED_PAYLOAD = 1,
  Error_Code_MISSING_PAYLOAD = 2,
  Error_Code_BAD_INPUT = 3,
  Error_Code_AUTH_ERROR = 4,
  Error_Code_USER_NOT_FOUND = 5,
  Error_Code_USER_REGISTER_INUSE = 6,
  Error_Code_USER_LINK_INUSE = 7,
  Error_Code_USER_LINK_PROVIDER_UNAVAILABLE = 8,
  Error_Code_USER_UNLINK_DISALLOWED = 9,
  Error_Code_USER_HANDLE_INUSE = 10,
  Error_Code_GROUP_NAME_INUSE = 11,
  Error_Code_GROUP_LAST_ADMIN = 12,
  Error_Code_STORAGE_REJECTED = 13,
  Error_Code_MATCH_NOT_FOUND = 14,
  Error_Code_RUNTIME_FUNCTION_NOT_FOUND = 15,
  Error_Code_RUNTIME_FUNCTION_EXCEPTION = 16,
  Error_Code_Error_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Error_Code_Error_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Error_Code_IsValid(int value);
constexpr Error_Code Error_Code_Code_MIN = Error_Code_RUNTIME_EXCEPTION;
constexpr Error_Code Error_Code_Code_MAX = Error_Code_RUNTIME_FUNCTION_EXCEPTION;
constexpr int Error_Code_Code_ARRAYSIZE = Error_Code_Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Code_descriptor();
template<typename T>
inline const std::string& Error_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_Code_descriptor(), enum_t_value);
}
inline bool Error_Code_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_Code>(
    Error_Code_descriptor(), name, value);
}
enum TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode : int {
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_ADD = 0,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_APPEND = 1,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COPY = 2,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INCR = 3,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INIT = 4,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_MERGE = 5,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_MOVE = 6,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_PATCH = 7,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_REMOVE = 8,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_REPLACE = 9,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_TEST = 10,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COMPARE = 11,
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_IsValid(int value);
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MIN = TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_ADD;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MAX = TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COMPARE;
constexpr int TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_ARRAYSIZE = TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor();
template<typename T>
inline const std::string& TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor(), enum_t_value);
}
inline bool TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode>(
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor(), name, value);
}
enum StoragePermissionRead : int {
  NO_READ = 0,
  OWNER_READ = 1,
  PUBLIC_READ = 2,
  StoragePermissionRead_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StoragePermissionRead_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StoragePermissionRead_IsValid(int value);
constexpr StoragePermissionRead StoragePermissionRead_MIN = NO_READ;
constexpr StoragePermissionRead StoragePermissionRead_MAX = PUBLIC_READ;
constexpr int StoragePermissionRead_ARRAYSIZE = StoragePermissionRead_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoragePermissionRead_descriptor();
template<typename T>
inline const std::string& StoragePermissionRead_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoragePermissionRead>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoragePermissionRead_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StoragePermissionRead_descriptor(), enum_t_value);
}
inline bool StoragePermissionRead_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoragePermissionRead* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StoragePermissionRead>(
    StoragePermissionRead_descriptor(), name, value);
}
enum StoragePermissionWrite : int {
  NO_WRITE = 0,
  OWNER_WRITE = 1,
  StoragePermissionWrite_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StoragePermissionWrite_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StoragePermissionWrite_IsValid(int value);
constexpr StoragePermissionWrite StoragePermissionWrite_MIN = NO_WRITE;
constexpr StoragePermissionWrite StoragePermissionWrite_MAX = OWNER_WRITE;
constexpr int StoragePermissionWrite_ARRAYSIZE = StoragePermissionWrite_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoragePermissionWrite_descriptor();
template<typename T>
inline const std::string& StoragePermissionWrite_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoragePermissionWrite>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoragePermissionWrite_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StoragePermissionWrite_descriptor(), enum_t_value);
}
inline bool StoragePermissionWrite_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoragePermissionWrite* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StoragePermissionWrite>(
    StoragePermissionWrite_descriptor(), name, value);
}
// ===================================================================

class Heartbeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Heartbeat& default_instance();

  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const final {
    return CreateMaybeMessage<Heartbeat>(nullptr);
  }

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Error PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  virtual ~Error();

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Error& default_instance();

  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return CreateMaybeMessage<Error>(nullptr);
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Error_Code Code;
  static constexpr Code RUNTIME_EXCEPTION =
    Error_Code_RUNTIME_EXCEPTION;
  static constexpr Code UNRECOGNIZED_PAYLOAD =
    Error_Code_UNRECOGNIZED_PAYLOAD;
  static constexpr Code MISSING_PAYLOAD =
    Error_Code_MISSING_PAYLOAD;
  static constexpr Code BAD_INPUT =
    Error_Code_BAD_INPUT;
  static constexpr Code AUTH_ERROR =
    Error_Code_AUTH_ERROR;
  static constexpr Code USER_NOT_FOUND =
    Error_Code_USER_NOT_FOUND;
  static constexpr Code USER_REGISTER_INUSE =
    Error_Code_USER_REGISTER_INUSE;
  static constexpr Code USER_LINK_INUSE =
    Error_Code_USER_LINK_INUSE;
  static constexpr Code USER_LINK_PROVIDER_UNAVAILABLE =
    Error_Code_USER_LINK_PROVIDER_UNAVAILABLE;
  static constexpr Code USER_UNLINK_DISALLOWED =
    Error_Code_USER_UNLINK_DISALLOWED;
  static constexpr Code USER_HANDLE_INUSE =
    Error_Code_USER_HANDLE_INUSE;
  static constexpr Code GROUP_NAME_INUSE =
    Error_Code_GROUP_NAME_INUSE;
  static constexpr Code GROUP_LAST_ADMIN =
    Error_Code_GROUP_LAST_ADMIN;
  static constexpr Code STORAGE_REJECTED =
    Error_Code_STORAGE_REJECTED;
  static constexpr Code MATCH_NOT_FOUND =
    Error_Code_MATCH_NOT_FOUND;
  static constexpr Code RUNTIME_FUNCTION_NOT_FOUND =
    Error_Code_RUNTIME_FUNCTION_NOT_FOUND;
  static constexpr Code RUNTIME_FUNCTION_EXCEPTION =
    Error_Code_RUNTIME_FUNCTION_EXCEPTION;
  static inline bool Code_IsValid(int value) {
    return Error_Code_IsValid(value);
  }
  static constexpr Code Code_MIN =
    Error_Code_Code_MIN;
  static constexpr Code Code_MAX =
    Error_Code_Code_MAX;
  static constexpr int Code_ARRAYSIZE =
    Error_Code_Code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Code_descriptor() {
    return Error_Code_descriptor();
  }
  template<typename T>
  static inline const std::string& Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Code_Name.");
    return Error_Code_Name(enum_t_value);
  }
  static inline bool Code_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Code* value) {
    return Error_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:server.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateRequest_Email PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateRequest.Email) */ {
 public:
  inline AuthenticateRequest_Email() : AuthenticateRequest_Email(nullptr) {}
  virtual ~AuthenticateRequest_Email();

  AuthenticateRequest_Email(const AuthenticateRequest_Email& from);
  AuthenticateRequest_Email(AuthenticateRequest_Email&& from) noexcept
    : AuthenticateRequest_Email() {
    *this = ::std::move(from);
  }

  inline AuthenticateRequest_Email& operator=(const AuthenticateRequest_Email& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateRequest_Email& operator=(AuthenticateRequest_Email&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateRequest_Email& default_instance();

  static inline const AuthenticateRequest_Email* internal_default_instance() {
    return reinterpret_cast<const AuthenticateRequest_Email*>(
               &_AuthenticateRequest_Email_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AuthenticateRequest_Email& a, AuthenticateRequest_Email& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateRequest_Email* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateRequest_Email* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateRequest_Email* New() const final {
    return CreateMaybeMessage<AuthenticateRequest_Email>(nullptr);
  }

  AuthenticateRequest_Email* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateRequest_Email>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateRequest_Email& from);
  void MergeFrom(const AuthenticateRequest_Email& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateRequest_Email* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.AuthenticateRequest.Email";
  }
  protected:
  explicit AuthenticateRequest_Email(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:server.AuthenticateRequest.Email)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateRequest_GameCenter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateRequest.GameCenter) */ {
 public:
  inline AuthenticateRequest_GameCenter() : AuthenticateRequest_GameCenter(nullptr) {}
  virtual ~AuthenticateRequest_GameCenter();

  AuthenticateRequest_GameCenter(const AuthenticateRequest_GameCenter& from);
  AuthenticateRequest_GameCenter(AuthenticateRequest_GameCenter&& from) noexcept
    : AuthenticateRequest_GameCenter() {
    *this = ::std::move(from);
  }

  inline AuthenticateRequest_GameCenter& operator=(const AuthenticateRequest_GameCenter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateRequest_GameCenter& operator=(AuthenticateRequest_GameCenter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateRequest_GameCenter& default_instance();

  static inline const AuthenticateRequest_GameCenter* internal_default_instance() {
    return reinterpret_cast<const AuthenticateRequest_GameCenter*>(
               &_AuthenticateRequest_GameCenter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AuthenticateRequest_GameCenter& a, AuthenticateRequest_GameCenter& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateRequest_GameCenter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateRequest_GameCenter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateRequest_GameCenter* New() const final {
    return CreateMaybeMessage<AuthenticateRequest_GameCenter>(nullptr);
  }

  AuthenticateRequest_GameCenter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateRequest_GameCenter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateRequest_GameCenter& from);
  void MergeFrom(const AuthenticateRequest_GameCenter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateRequest_GameCenter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.AuthenticateRequest.GameCenter";
  }
  protected:
  explicit AuthenticateRequest_GameCenter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kBundleIdFieldNumber = 2,
    kSaltFieldNumber = 4,
    kSignatureFieldNumber = 5,
    kPublicKeyUrlFieldNumber = 6,
    kTimestampFieldNumber = 3,
  };
  // string player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  void set_player_id(const std::string& value);
  void set_player_id(std::string&& value);
  void set_player_id(const char* value);
  void set_player_id(const char* value, size_t size);
  std::string* mutable_player_id();
  std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // string bundle_id = 2;
  void clear_bundle_id();
  const std::string& bundle_id() const;
  void set_bundle_id(const std::string& value);
  void set_bundle_id(std::string&& value);
  void set_bundle_id(const char* value);
  void set_bundle_id(const char* value, size_t size);
  std::string* mutable_bundle_id();
  std::string* release_bundle_id();
  void set_allocated_bundle_id(std::string* bundle_id);
  private:
  const std::string& _internal_bundle_id() const;
  void _internal_set_bundle_id(const std::string& value);
  std::string* _internal_mutable_bundle_id();
  public:

  // string salt = 4;
  void clear_salt();
  const std::string& salt() const;
  void set_salt(const std::string& value);
  void set_salt(std::string&& value);
  void set_salt(const char* value);
  void set_salt(const char* value, size_t size);
  std::string* mutable_salt();
  std::string* release_salt();
  void set_allocated_salt(std::string* salt);
  private:
  const std::string& _internal_salt() const;
  void _internal_set_salt(const std::string& value);
  std::string* _internal_mutable_salt();
  public:

  // string signature = 5;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string public_key_url = 6;
  void clear_public_key_url();
  const std::string& public_key_url() const;
  void set_public_key_url(const std::string& value);
  void set_public_key_url(std::string&& value);
  void set_public_key_url(const char* value);
  void set_public_key_url(const char* value, size_t size);
  std::string* mutable_public_key_url();
  std::string* release_public_key_url();
  void set_allocated_public_key_url(std::string* public_key_url);
  private:
  const std::string& _internal_public_key_url() const;
  void _internal_set_public_key_url(const std::string& value);
  std::string* _internal_mutable_public_key_url();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.AuthenticateRequest.GameCenter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bundle_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateRequest) */ {
 public:
  inline AuthenticateRequest() : AuthenticateRequest(nullptr) {}
  virtual ~AuthenticateRequest();

  AuthenticateRequest(const AuthenticateRequest& from);
  AuthenticateRequest(AuthenticateRequest&& from) noexcept
    : AuthenticateRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticateRequest& operator=(const AuthenticateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateRequest& operator=(AuthenticateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateRequest& default_instance();

  enum IdCase {
    kEmail = 2,
    kFacebook = 3,
    kGoogle = 4,
    kGameCenter = 5,
    kSteam = 6,
    kDevice = 7,
    kCustom = 8,
    ID_NOT_SET = 0,
  };

  static inline const AuthenticateRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticateRequest*>(
               &_AuthenticateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthenticateRequest& a, AuthenticateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateRequest* New() const final {
    return CreateMaybeMessage<AuthenticateRequest>(nullptr);
  }

  AuthenticateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateRequest& from);
  void MergeFrom(const AuthenticateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.AuthenticateRequest";
  }
  protected:
  explicit AuthenticateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthenticateRequest_Email Email;
  typedef AuthenticateRequest_GameCenter GameCenter;

  // accessors -------------------------------------------------------

  enum : int {
    kCollationIdFieldNumber = 1,
    kEmailFieldNumber = 2,
    kFacebookFieldNumber = 3,
    kGoogleFieldNumber = 4,
    kGameCenterFieldNumber = 5,
    kSteamFieldNumber = 6,
    kDeviceFieldNumber = 7,
    kCustomFieldNumber = 8,
  };
  // string collationId = 1;
  void clear_collationid();
  const std::string& collationid() const;
  void set_collationid(const std::string& value);
  void set_collationid(std::string&& value);
  void set_collationid(const char* value);
  void set_collationid(const char* value, size_t size);
  std::string* mutable_collationid();
  std::string* release_collationid();
  void set_allocated_collationid(std::string* collationid);
  private:
  const std::string& _internal_collationid() const;
  void _internal_set_collationid(const std::string& value);
  std::string* _internal_mutable_collationid();
  public:

  // .server.AuthenticateRequest.Email email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const ::server::AuthenticateRequest_Email& email() const;
  ::server::AuthenticateRequest_Email* release_email();
  ::server::AuthenticateRequest_Email* mutable_email();
  void set_allocated_email(::server::AuthenticateRequest_Email* email);
  private:
  const ::server::AuthenticateRequest_Email& _internal_email() const;
  ::server::AuthenticateRequest_Email* _internal_mutable_email();
  public:
  void unsafe_arena_set_allocated_email(
      ::server::AuthenticateRequest_Email* email);
  ::server::AuthenticateRequest_Email* unsafe_arena_release_email();

  // string facebook = 3;
  private:
  bool _internal_has_facebook() const;
  public:
  void clear_facebook();
  const std::string& facebook() const;
  void set_facebook(const std::string& value);
  void set_facebook(std::string&& value);
  void set_facebook(const char* value);
  void set_facebook(const char* value, size_t size);
  std::string* mutable_facebook();
  std::string* release_facebook();
  void set_allocated_facebook(std::string* facebook);
  private:
  const std::string& _internal_facebook() const;
  void _internal_set_facebook(const std::string& value);
  std::string* _internal_mutable_facebook();
  public:

  // string google = 4;
  private:
  bool _internal_has_google() const;
  public:
  void clear_google();
  const std::string& google() const;
  void set_google(const std::string& value);
  void set_google(std::string&& value);
  void set_google(const char* value);
  void set_google(const char* value, size_t size);
  std::string* mutable_google();
  std::string* release_google();
  void set_allocated_google(std::string* google);
  private:
  const std::string& _internal_google() const;
  void _internal_set_google(const std::string& value);
  std::string* _internal_mutable_google();
  public:

  // .server.AuthenticateRequest.GameCenter game_center = 5;
  bool has_game_center() const;
  private:
  bool _internal_has_game_center() const;
  public:
  void clear_game_center();
  const ::server::AuthenticateRequest_GameCenter& game_center() const;
  ::server::AuthenticateRequest_GameCenter* release_game_center();
  ::server::AuthenticateRequest_GameCenter* mutable_game_center();
  void set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center);
  private:
  const ::server::AuthenticateRequest_GameCenter& _internal_game_center() const;
  ::server::AuthenticateRequest_GameCenter* _internal_mutable_game_center();
  public:
  void unsafe_arena_set_allocated_game_center(
      ::server::AuthenticateRequest_GameCenter* game_center);
  ::server::AuthenticateRequest_GameCenter* unsafe_arena_release_game_center();

  // string steam = 6;
  private:
  bool _internal_has_steam() const;
  public:
  void clear_steam();
  const std::string& steam() const;
  void set_steam(const std::string& value);
  void set_steam(std::string&& value);
  void set_steam(const char* value);
  void set_steam(const char* value, size_t size);
  std::string* mutable_steam();
  std::string* release_steam();
  void set_allocated_steam(std::string* steam);
  private:
  const std::string& _internal_steam() const;
  void _internal_set_steam(const std::string& value);
  std::string* _internal_mutable_steam();
  public:

  // string device = 7;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string custom = 8;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const std::string& custom() const;
  void set_custom(const std::string& value);
  void set_custom(std::string&& value);
  void set_custom(const char* value);
  void set_custom(const char* value, size_t size);
  std::string* mutable_custom();
  std::string* release_custom();
  void set_allocated_custom(std::string* custom);
  private:
  const std::string& _internal_custom() const;
  void _internal_set_custom(const std::string& value);
  std::string* _internal_mutable_custom();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.AuthenticateRequest)
 private:
  class _Internal;
  void set_has_email();
  void set_has_facebook();
  void set_has_google();
  void set_has_game_center();
  void set_has_steam();
  void set_has_device();
  void set_has_custom();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collationid_;
  union IdUnion {
    IdUnion() {}
    ::server::AuthenticateRequest_Email* email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facebook_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr google_;
    ::server::AuthenticateRequest_GameCenter* game_center_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steam_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateResponse_Session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateResponse.Session) */ {
 public:
  inline AuthenticateResponse_Session() : AuthenticateResponse_Session(nullptr) {}
  virtual ~AuthenticateResponse_Session();

  AuthenticateResponse_Session(const AuthenticateResponse_Session& from);
  AuthenticateResponse_Session(AuthenticateResponse_Session&& from) noexcept
    : AuthenticateResponse_Session() {
    *this = ::std::move(from);
  }

  inline AuthenticateResponse_Session& operator=(const AuthenticateResponse_Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateResponse_Session& operator=(AuthenticateResponse_Session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateResponse_Session& default_instance();

  static inline const AuthenticateResponse_Session* internal_default_instance() {
    return reinterpret_cast<const AuthenticateResponse_Session*>(
               &_AuthenticateResponse_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthenticateResponse_Session& a, AuthenticateResponse_Session& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateResponse_Session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateResponse_Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateResponse_Session* New() const final {
    return CreateMaybeMessage<AuthenticateResponse_Session>(nullptr);
  }

  AuthenticateResponse_Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateResponse_Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateResponse_Session& from);
  void MergeFrom(const AuthenticateResponse_Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateResponse_Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.AuthenticateResponse.Session";
  }
  protected:
  explicit AuthenticateResponse_Session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kUdpTokenFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string udp_token = 2;
  void clear_udp_token();
  const std::string& udp_token() const;
  void set_udp_token(const std::string& value);
  void set_udp_token(std::string&& value);
  void set_udp_token(const char* value);
  void set_udp_token(const char* value, size_t size);
  std::string* mutable_udp_token();
  std::string* release_udp_token();
  void set_allocated_udp_token(std::string* udp_token);
  private:
  const std::string& _internal_udp_token() const;
  void _internal_set_udp_token(const std::string& value);
  std::string* _internal_mutable_udp_token();
  public:

  // @@protoc_insertion_point(class_scope:server.AuthenticateResponse.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udp_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateResponse_Error PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateResponse.Error) */ {
 public:
  inline AuthenticateResponse_Error() : AuthenticateResponse_Error(nullptr) {}
  virtual ~AuthenticateResponse_Error();

  AuthenticateResponse_Error(const AuthenticateResponse_Error& from);
  AuthenticateResponse_Error(AuthenticateResponse_Error&& from) noexcept
    : AuthenticateResponse_Error() {
    *this = ::std::move(from);
  }

  inline AuthenticateResponse_Error& operator=(const AuthenticateResponse_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateResponse_Error& operator=(AuthenticateResponse_Error&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateResponse_Error& default_instance();

  static inline const AuthenticateResponse_Error* internal_default_instance() {
    return reinterpret_cast<const AuthenticateResponse_Error*>(
               &_AuthenticateResponse_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AuthenticateResponse_Error& a, AuthenticateResponse_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateResponse_Error* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateResponse_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateResponse_Error* New() const final {
    return CreateMaybeMessage<AuthenticateResponse_Error>(nullptr);
  }

  AuthenticateResponse_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateResponse_Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateResponse_Error& from);
  void MergeFrom(const AuthenticateResponse_Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateResponse_Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.AuthenticateResponse.Error";
  }
  protected:
  explicit AuthenticateResponse_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kRequestFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .server.AuthenticateRequest request = 3;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::server::AuthenticateRequest& request() const;
  ::server::AuthenticateRequest* release_request();
  ::server::AuthenticateRequest* mutable_request();
  void set_allocated_request(::server::AuthenticateRequest* request);
  private:
  const ::server::AuthenticateRequest& _internal_request() const;
  ::server::AuthenticateRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::server::AuthenticateRequest* request);
  ::server::AuthenticateRequest* unsafe_arena_release_request();

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:server.AuthenticateResponse.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::server::AuthenticateRequest* request_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class AuthenticateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.AuthenticateResponse) */ {
 public:
  inline AuthenticateResponse() : AuthenticateResponse(nullptr) {}
  virtual ~AuthenticateResponse();

  AuthenticateResponse(const AuthenticateResponse& from);
  AuthenticateResponse(AuthenticateResponse&& from) noexcept
    : AuthenticateResponse() {
    *this = ::std::move(from);
  }

  inline AuthenticateResponse& operator=(const AuthenticateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticateResponse& operator=(AuthenticateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AuthenticateResponse& default_instance();

  enum IdCase {
    kSession = 2,
    kError = 3,
    ID_NOT_SET = 0,
  };

  static inline const AuthenticateResponse* internal_default_instance() {
    return reinterpret_cast<const AuthenticateResponse*>(
               &_AuthenticateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AuthenticateResponse& a, AuthenticateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AuthenticateResponse* New() const final {
    return CreateMaybeMessage<AuthenticateResponse>(nullptr);
  }

  AuthenticateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AuthenticateResponse& from);
  void MergeFrom(const AuthenticateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.AuthenticateResponse";
  }
  protected:
  explicit AuthenticateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AuthenticateResponse_Session Session;
  typedef AuthenticateResponse_Error Error;

  // accessors -------------------------------------------------------

  enum : int {
    kCollationIdFieldNumber = 1,
    kSessionFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // string collation_id = 1;
  void clear_collation_id();
  const std::string& collation_id() const;
  void set_collation_id(const std::string& value);
  void set_collation_id(std::string&& value);
  void set_collation_id(const char* value);
  void set_collation_id(const char* value, size_t size);
  std::string* mutable_collation_id();
  std::string* release_collation_id();
  void set_allocated_collation_id(std::string* collation_id);
  private:
  const std::string& _internal_collation_id() const;
  void _internal_set_collation_id(const std::string& value);
  std::string* _internal_mutable_collation_id();
  public:

  // .server.AuthenticateResponse.Session session = 2;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::server::AuthenticateResponse_Session& session() const;
  ::server::AuthenticateResponse_Session* release_session();
  ::server::AuthenticateResponse_Session* mutable_session();
  void set_allocated_session(::server::AuthenticateResponse_Session* session);
  private:
  const ::server::AuthenticateResponse_Session& _internal_session() const;
  ::server::AuthenticateResponse_Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::server::AuthenticateResponse_Session* session);
  ::server::AuthenticateResponse_Session* unsafe_arena_release_session();

  // .server.AuthenticateResponse.Error error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::server::AuthenticateResponse_Error& error() const;
  ::server::AuthenticateResponse_Error* release_error();
  ::server::AuthenticateResponse_Error* mutable_error();
  void set_allocated_error(::server::AuthenticateResponse_Error* error);
  private:
  const ::server::AuthenticateResponse_Error& _internal_error() const;
  ::server::AuthenticateResponse_Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::server::AuthenticateResponse_Error* error);
  ::server::AuthenticateResponse_Error* unsafe_arena_release_error();

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.AuthenticateResponse)
 private:
  class _Internal;
  void set_has_session();
  void set_has_error();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collation_id_;
  union IdUnion {
    IdUnion() {}
    ::server::AuthenticateResponse_Session* session_;
    ::server::AuthenticateResponse_Error* error_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Envelope PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Envelope) */ {
 public:
  inline Envelope() : Envelope(nullptr) {}
  virtual ~Envelope();

  Envelope(const Envelope& from);
  Envelope(Envelope&& from) noexcept
    : Envelope() {
    *this = ::std::move(from);
  }

  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelope& operator=(Envelope&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Envelope& default_instance();

  enum PayloadCase {
    kError = 2,
    kHeartbeat = 3,
    kLogout = 4,
    kLink = 5,
    kUnlink = 6,
    kSelfFetch = 7,
    kSelfUpdate = 8,
    kUsersFetch = 9,
    kSelf = 10,
    kUsers = 11,
    kFriendsAdd = 12,
    kFriendsRemove = 13,
    kFriendsBlock = 14,
    kFriendsList = 15,
    kFriends = 16,
    kGroupsCreate = 17,
    kGroupsUpdate = 18,
    kGroupsRemove = 19,
    kGroupsFetch = 20,
    kGroupsList = 21,
    kGroupsSelfList = 22,
    kGroupUsersList = 23,
    kGroupsJoin = 24,
    kGroupsLeave = 25,
    kGroupUsersAdd = 26,
    kGroupUsersKick = 27,
    kGroupUsersPromote = 28,
    kGroups = 29,
    kGroupsSelf = 30,
    kGroupUsers = 31,
    kTopicsJoin = 32,
    kTopicsLeave = 33,
    kTopicMessageSend = 34,
    kTopicMessagesList = 35,
    kTopics = 36,
    kTopicMessageAck = 37,
    kTopicMessage = 38,
    kTopicMessages = 39,
    kTopicPresence = 40,
    kMatchCreate = 41,
    kMatchesJoin = 42,
    kMatchesLeave = 43,
    kMatchDataSend = 44,
    kMatch = 45,
    kMatches = 46,
    kMatchData = 47,
    kMatchPresence = 48,
    kStorageList = 49,
    kStorageFetch = 50,
    kStorageWrite = 51,
    kStorageUpdate = 52,
    kStorageRemove = 53,
    kStorageData = 54,
    kStorageKeys = 55,
    kLeaderboardsList = 56,
    kLeaderboardRecordsWrite = 57,
    kLeaderboardRecordsFetch = 58,
    kLeaderboardRecordsList = 59,
    kLeaderboards = 60,
    kLeaderboardRecords = 61,
    kMatchmakeAdd = 62,
    kMatchmakeRemove = 63,
    kMatchmakeTicket = 64,
    kMatchmakeMatched = 65,
    kRpc = 66,
    kPurchase = 67,
    kPurchaseRecord = 68,
    kNotificationsList = 69,
    kNotificationsRemove = 70,
    kNotifications = 71,
    kLiveNotifications = 72,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const Envelope* internal_default_instance() {
    return reinterpret_cast<const Envelope*>(
               &_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Envelope& a, Envelope& b) {
    a.Swap(&b);
  }
  inline void Swap(Envelope* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Envelope* New() const final {
    return CreateMaybeMessage<Envelope>(nullptr);
  }

  Envelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Envelope>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Envelope& from);
  void MergeFrom(const Envelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Envelope* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Envelope";
  }
  protected:
  explicit Envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollationIdFieldNumber = 1,
    kErrorFieldNumber = 2,
    kHeartbeatFieldNumber = 3,
    kLogoutFieldNumber = 4,
    kLinkFieldNumber = 5,
    kUnlinkFieldNumber = 6,
    kSelfFetchFieldNumber = 7,
    kSelfUpdateFieldNumber = 8,
    kUsersFetchFieldNumber = 9,
    kSelfFieldNumber = 10,
    kUsersFieldNumber = 11,
    kFriendsAddFieldNumber = 12,
    kFriendsRemoveFieldNumber = 13,
    kFriendsBlockFieldNumber = 14,
    kFriendsListFieldNumber = 15,
    kFriendsFieldNumber = 16,
    kGroupsCreateFieldNumber = 17,
    kGroupsUpdateFieldNumber = 18,
    kGroupsRemoveFieldNumber = 19,
    kGroupsFetchFieldNumber = 20,
    kGroupsListFieldNumber = 21,
    kGroupsSelfListFieldNumber = 22,
    kGroupUsersListFieldNumber = 23,
    kGroupsJoinFieldNumber = 24,
    kGroupsLeaveFieldNumber = 25,
    kGroupUsersAddFieldNumber = 26,
    kGroupUsersKickFieldNumber = 27,
    kGroupUsersPromoteFieldNumber = 28,
    kGroupsFieldNumber = 29,
    kGroupsSelfFieldNumber = 30,
    kGroupUsersFieldNumber = 31,
    kTopicsJoinFieldNumber = 32,
    kTopicsLeaveFieldNumber = 33,
    kTopicMessageSendFieldNumber = 34,
    kTopicMessagesListFieldNumber = 35,
    kTopicsFieldNumber = 36,
    kTopicMessageAckFieldNumber = 37,
    kTopicMessageFieldNumber = 38,
    kTopicMessagesFieldNumber = 39,
    kTopicPresenceFieldNumber = 40,
    kMatchCreateFieldNumber = 41,
    kMatchesJoinFieldNumber = 42,
    kMatchesLeaveFieldNumber = 43,
    kMatchDataSendFieldNumber = 44,
    kMatchFieldNumber = 45,
    kMatchesFieldNumber = 46,
    kMatchDataFieldNumber = 47,
    kMatchPresenceFieldNumber = 48,
    kStorageListFieldNumber = 49,
    kStorageFetchFieldNumber = 50,
    kStorageWriteFieldNumber = 51,
    kStorageUpdateFieldNumber = 52,
    kStorageRemoveFieldNumber = 53,
    kStorageDataFieldNumber = 54,
    kStorageKeysFieldNumber = 55,
    kLeaderboardsListFieldNumber = 56,
    kLeaderboardRecordsWriteFieldNumber = 57,
    kLeaderboardRecordsFetchFieldNumber = 58,
    kLeaderboardRecordsListFieldNumber = 59,
    kLeaderboardsFieldNumber = 60,
    kLeaderboardRecordsFieldNumber = 61,
    kMatchmakeAddFieldNumber = 62,
    kMatchmakeRemoveFieldNumber = 63,
    kMatchmakeTicketFieldNumber = 64,
    kMatchmakeMatchedFieldNumber = 65,
    kRpcFieldNumber = 66,
    kPurchaseFieldNumber = 67,
    kPurchaseRecordFieldNumber = 68,
    kNotificationsListFieldNumber = 69,
    kNotificationsRemoveFieldNumber = 70,
    kNotificationsFieldNumber = 71,
    kLiveNotificationsFieldNumber = 72,
  };
  // string collation_id = 1;
  void clear_collation_id();
  const std::string& collation_id() const;
  void set_collation_id(const std::string& value);
  void set_collation_id(std::string&& value);
  void set_collation_id(const char* value);
  void set_collation_id(const char* value, size_t size);
  std::string* mutable_collation_id();
  std::string* release_collation_id();
  void set_allocated_collation_id(std::string* collation_id);
  private:
  const std::string& _internal_collation_id() const;
  void _internal_set_collation_id(const std::string& value);
  std::string* _internal_mutable_collation_id();
  public:

  // .server.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::server::Error& error() const;
  ::server::Error* release_error();
  ::server::Error* mutable_error();
  void set_allocated_error(::server::Error* error);
  private:
  const ::server::Error& _internal_error() const;
  ::server::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::server::Error* error);
  ::server::Error* unsafe_arena_release_error();

  // .server.Heartbeat heartbeat = 3;
  bool has_heartbeat() const;
  private:
  bool _internal_has_heartbeat() const;
  public:
  void clear_heartbeat();
  const ::server::Heartbeat& heartbeat() const;
  ::server::Heartbeat* release_heartbeat();
  ::server::Heartbeat* mutable_heartbeat();
  void set_allocated_heartbeat(::server::Heartbeat* heartbeat);
  private:
  const ::server::Heartbeat& _internal_heartbeat() const;
  ::server::Heartbeat* _internal_mutable_heartbeat();
  public:
  void unsafe_arena_set_allocated_heartbeat(
      ::server::Heartbeat* heartbeat);
  ::server::Heartbeat* unsafe_arena_release_heartbeat();

  // .server.Logout logout = 4;
  bool has_logout() const;
  private:
  bool _internal_has_logout() const;
  public:
  void clear_logout();
  const ::server::Logout& logout() const;
  ::server::Logout* release_logout();
  ::server::Logout* mutable_logout();
  void set_allocated_logout(::server::Logout* logout);
  private:
  const ::server::Logout& _internal_logout() const;
  ::server::Logout* _internal_mutable_logout();
  public:
  void unsafe_arena_set_allocated_logout(
      ::server::Logout* logout);
  ::server::Logout* unsafe_arena_release_logout();

  // .server.TLink link = 5;
  bool has_link() const;
  private:
  bool _internal_has_link() const;
  public:
  void clear_link();
  const ::server::TLink& link() const;
  ::server::TLink* release_link();
  ::server::TLink* mutable_link();
  void set_allocated_link(::server::TLink* link);
  private:
  const ::server::TLink& _internal_link() const;
  ::server::TLink* _internal_mutable_link();
  public:
  void unsafe_arena_set_allocated_link(
      ::server::TLink* link);
  ::server::TLink* unsafe_arena_release_link();

  // .server.TUnlink unlink = 6;
  bool has_unlink() const;
  private:
  bool _internal_has_unlink() const;
  public:
  void clear_unlink();
  const ::server::TUnlink& unlink() const;
  ::server::TUnlink* release_unlink();
  ::server::TUnlink* mutable_unlink();
  void set_allocated_unlink(::server::TUnlink* unlink);
  private:
  const ::server::TUnlink& _internal_unlink() const;
  ::server::TUnlink* _internal_mutable_unlink();
  public:
  void unsafe_arena_set_allocated_unlink(
      ::server::TUnlink* unlink);
  ::server::TUnlink* unsafe_arena_release_unlink();

  // .server.TSelfFetch self_fetch = 7;
  bool has_self_fetch() const;
  private:
  bool _internal_has_self_fetch() const;
  public:
  void clear_self_fetch();
  const ::server::TSelfFetch& self_fetch() const;
  ::server::TSelfFetch* release_self_fetch();
  ::server::TSelfFetch* mutable_self_fetch();
  void set_allocated_self_fetch(::server::TSelfFetch* self_fetch);
  private:
  const ::server::TSelfFetch& _internal_self_fetch() const;
  ::server::TSelfFetch* _internal_mutable_self_fetch();
  public:
  void unsafe_arena_set_allocated_self_fetch(
      ::server::TSelfFetch* self_fetch);
  ::server::TSelfFetch* unsafe_arena_release_self_fetch();

  // .server.TSelfUpdate self_update = 8;
  bool has_self_update() const;
  private:
  bool _internal_has_self_update() const;
  public:
  void clear_self_update();
  const ::server::TSelfUpdate& self_update() const;
  ::server::TSelfUpdate* release_self_update();
  ::server::TSelfUpdate* mutable_self_update();
  void set_allocated_self_update(::server::TSelfUpdate* self_update);
  private:
  const ::server::TSelfUpdate& _internal_self_update() const;
  ::server::TSelfUpdate* _internal_mutable_self_update();
  public:
  void unsafe_arena_set_allocated_self_update(
      ::server::TSelfUpdate* self_update);
  ::server::TSelfUpdate* unsafe_arena_release_self_update();

  // .server.TUsersFetch users_fetch = 9;
  bool has_users_fetch() const;
  private:
  bool _internal_has_users_fetch() const;
  public:
  void clear_users_fetch();
  const ::server::TUsersFetch& users_fetch() const;
  ::server::TUsersFetch* release_users_fetch();
  ::server::TUsersFetch* mutable_users_fetch();
  void set_allocated_users_fetch(::server::TUsersFetch* users_fetch);
  private:
  const ::server::TUsersFetch& _internal_users_fetch() const;
  ::server::TUsersFetch* _internal_mutable_users_fetch();
  public:
  void unsafe_arena_set_allocated_users_fetch(
      ::server::TUsersFetch* users_fetch);
  ::server::TUsersFetch* unsafe_arena_release_users_fetch();

  // .server.TSelf self = 10;
  bool has_self() const;
  private:
  bool _internal_has_self() const;
  public:
  void clear_self();
  const ::server::TSelf& self() const;
  ::server::TSelf* release_self();
  ::server::TSelf* mutable_self();
  void set_allocated_self(::server::TSelf* self);
  private:
  const ::server::TSelf& _internal_self() const;
  ::server::TSelf* _internal_mutable_self();
  public:
  void unsafe_arena_set_allocated_self(
      ::server::TSelf* self);
  ::server::TSelf* unsafe_arena_release_self();

  // .server.TUsers users = 11;
  bool has_users() const;
  private:
  bool _internal_has_users() const;
  public:
  void clear_users();
  const ::server::TUsers& users() const;
  ::server::TUsers* release_users();
  ::server::TUsers* mutable_users();
  void set_allocated_users(::server::TUsers* users);
  private:
  const ::server::TUsers& _internal_users() const;
  ::server::TUsers* _internal_mutable_users();
  public:
  void unsafe_arena_set_allocated_users(
      ::server::TUsers* users);
  ::server::TUsers* unsafe_arena_release_users();

  // .server.TFriendsAdd friends_add = 12;
  bool has_friends_add() const;
  private:
  bool _internal_has_friends_add() const;
  public:
  void clear_friends_add();
  const ::server::TFriendsAdd& friends_add() const;
  ::server::TFriendsAdd* release_friends_add();
  ::server::TFriendsAdd* mutable_friends_add();
  void set_allocated_friends_add(::server::TFriendsAdd* friends_add);
  private:
  const ::server::TFriendsAdd& _internal_friends_add() const;
  ::server::TFriendsAdd* _internal_mutable_friends_add();
  public:
  void unsafe_arena_set_allocated_friends_add(
      ::server::TFriendsAdd* friends_add);
  ::server::TFriendsAdd* unsafe_arena_release_friends_add();

  // .server.TFriendsRemove friends_remove = 13;
  bool has_friends_remove() const;
  private:
  bool _internal_has_friends_remove() const;
  public:
  void clear_friends_remove();
  const ::server::TFriendsRemove& friends_remove() const;
  ::server::TFriendsRemove* release_friends_remove();
  ::server::TFriendsRemove* mutable_friends_remove();
  void set_allocated_friends_remove(::server::TFriendsRemove* friends_remove);
  private:
  const ::server::TFriendsRemove& _internal_friends_remove() const;
  ::server::TFriendsRemove* _internal_mutable_friends_remove();
  public:
  void unsafe_arena_set_allocated_friends_remove(
      ::server::TFriendsRemove* friends_remove);
  ::server::TFriendsRemove* unsafe_arena_release_friends_remove();

  // .server.TFriendsBlock friends_block = 14;
  bool has_friends_block() const;
  private:
  bool _internal_has_friends_block() const;
  public:
  void clear_friends_block();
  const ::server::TFriendsBlock& friends_block() const;
  ::server::TFriendsBlock* release_friends_block();
  ::server::TFriendsBlock* mutable_friends_block();
  void set_allocated_friends_block(::server::TFriendsBlock* friends_block);
  private:
  const ::server::TFriendsBlock& _internal_friends_block() const;
  ::server::TFriendsBlock* _internal_mutable_friends_block();
  public:
  void unsafe_arena_set_allocated_friends_block(
      ::server::TFriendsBlock* friends_block);
  ::server::TFriendsBlock* unsafe_arena_release_friends_block();

  // .server.TFriendsList friends_list = 15;
  bool has_friends_list() const;
  private:
  bool _internal_has_friends_list() const;
  public:
  void clear_friends_list();
  const ::server::TFriendsList& friends_list() const;
  ::server::TFriendsList* release_friends_list();
  ::server::TFriendsList* mutable_friends_list();
  void set_allocated_friends_list(::server::TFriendsList* friends_list);
  private:
  const ::server::TFriendsList& _internal_friends_list() const;
  ::server::TFriendsList* _internal_mutable_friends_list();
  public:
  void unsafe_arena_set_allocated_friends_list(
      ::server::TFriendsList* friends_list);
  ::server::TFriendsList* unsafe_arena_release_friends_list();

  // .server.TFriends friends = 16;
  bool has_friends() const;
  private:
  bool _internal_has_friends() const;
  public:
  void clear_friends();
  const ::server::TFriends& friends() const;
  ::server::TFriends* release_friends();
  ::server::TFriends* mutable_friends();
  void set_allocated_friends(::server::TFriends* friends);
  private:
  const ::server::TFriends& _internal_friends() const;
  ::server::TFriends* _internal_mutable_friends();
  public:
  void unsafe_arena_set_allocated_friends(
      ::server::TFriends* friends);
  ::server::TFriends* unsafe_arena_release_friends();

  // .server.TGroupsCreate groups_create = 17;
  bool has_groups_create() const;
  private:
  bool _internal_has_groups_create() const;
  public:
  void clear_groups_create();
  const ::server::TGroupsCreate& groups_create() const;
  ::server::TGroupsCreate* release_groups_create();
  ::server::TGroupsCreate* mutable_groups_create();
  void set_allocated_groups_create(::server::TGroupsCreate* groups_create);
  private:
  const ::server::TGroupsCreate& _internal_groups_create() const;
  ::server::TGroupsCreate* _internal_mutable_groups_create();
  public:
  void unsafe_arena_set_allocated_groups_create(
      ::server::TGroupsCreate* groups_create);
  ::server::TGroupsCreate* unsafe_arena_release_groups_create();

  // .server.TGroupsUpdate groups_update = 18;
  bool has_groups_update() const;
  private:
  bool _internal_has_groups_update() const;
  public:
  void clear_groups_update();
  const ::server::TGroupsUpdate& groups_update() const;
  ::server::TGroupsUpdate* release_groups_update();
  ::server::TGroupsUpdate* mutable_groups_update();
  void set_allocated_groups_update(::server::TGroupsUpdate* groups_update);
  private:
  const ::server::TGroupsUpdate& _internal_groups_update() const;
  ::server::TGroupsUpdate* _internal_mutable_groups_update();
  public:
  void unsafe_arena_set_allocated_groups_update(
      ::server::TGroupsUpdate* groups_update);
  ::server::TGroupsUpdate* unsafe_arena_release_groups_update();

  // .server.TGroupsRemove groups_remove = 19;
  bool has_groups_remove() const;
  private:
  bool _internal_has_groups_remove() const;
  public:
  void clear_groups_remove();
  const ::server::TGroupsRemove& groups_remove() const;
  ::server::TGroupsRemove* release_groups_remove();
  ::server::TGroupsRemove* mutable_groups_remove();
  void set_allocated_groups_remove(::server::TGroupsRemove* groups_remove);
  private:
  const ::server::TGroupsRemove& _internal_groups_remove() const;
  ::server::TGroupsRemove* _internal_mutable_groups_remove();
  public:
  void unsafe_arena_set_allocated_groups_remove(
      ::server::TGroupsRemove* groups_remove);
  ::server::TGroupsRemove* unsafe_arena_release_groups_remove();

  // .server.TGroupsFetch groups_fetch = 20;
  bool has_groups_fetch() const;
  private:
  bool _internal_has_groups_fetch() const;
  public:
  void clear_groups_fetch();
  const ::server::TGroupsFetch& groups_fetch() const;
  ::server::TGroupsFetch* release_groups_fetch();
  ::server::TGroupsFetch* mutable_groups_fetch();
  void set_allocated_groups_fetch(::server::TGroupsFetch* groups_fetch);
  private:
  const ::server::TGroupsFetch& _internal_groups_fetch() const;
  ::server::TGroupsFetch* _internal_mutable_groups_fetch();
  public:
  void unsafe_arena_set_allocated_groups_fetch(
      ::server::TGroupsFetch* groups_fetch);
  ::server::TGroupsFetch* unsafe_arena_release_groups_fetch();

  // .server.TGroupsList groups_list = 21;
  bool has_groups_list() const;
  private:
  bool _internal_has_groups_list() const;
  public:
  void clear_groups_list();
  const ::server::TGroupsList& groups_list() const;
  ::server::TGroupsList* release_groups_list();
  ::server::TGroupsList* mutable_groups_list();
  void set_allocated_groups_list(::server::TGroupsList* groups_list);
  private:
  const ::server::TGroupsList& _internal_groups_list() const;
  ::server::TGroupsList* _internal_mutable_groups_list();
  public:
  void unsafe_arena_set_allocated_groups_list(
      ::server::TGroupsList* groups_list);
  ::server::TGroupsList* unsafe_arena_release_groups_list();

  // .server.TGroupsSelfList groups_self_list = 22;
  bool has_groups_self_list() const;
  private:
  bool _internal_has_groups_self_list() const;
  public:
  void clear_groups_self_list();
  const ::server::TGroupsSelfList& groups_self_list() const;
  ::server::TGroupsSelfList* release_groups_self_list();
  ::server::TGroupsSelfList* mutable_groups_self_list();
  void set_allocated_groups_self_list(::server::TGroupsSelfList* groups_self_list);
  private:
  const ::server::TGroupsSelfList& _internal_groups_self_list() const;
  ::server::TGroupsSelfList* _internal_mutable_groups_self_list();
  public:
  void unsafe_arena_set_allocated_groups_self_list(
      ::server::TGroupsSelfList* groups_self_list);
  ::server::TGroupsSelfList* unsafe_arena_release_groups_self_list();

  // .server.TGroupUsersList group_users_list = 23;
  bool has_group_users_list() const;
  private:
  bool _internal_has_group_users_list() const;
  public:
  void clear_group_users_list();
  const ::server::TGroupUsersList& group_users_list() const;
  ::server::TGroupUsersList* release_group_users_list();
  ::server::TGroupUsersList* mutable_group_users_list();
  void set_allocated_group_users_list(::server::TGroupUsersList* group_users_list);
  private:
  const ::server::TGroupUsersList& _internal_group_users_list() const;
  ::server::TGroupUsersList* _internal_mutable_group_users_list();
  public:
  void unsafe_arena_set_allocated_group_users_list(
      ::server::TGroupUsersList* group_users_list);
  ::server::TGroupUsersList* unsafe_arena_release_group_users_list();

  // .server.TGroupsJoin groups_join = 24;
  bool has_groups_join() const;
  private:
  bool _internal_has_groups_join() const;
  public:
  void clear_groups_join();
  const ::server::TGroupsJoin& groups_join() const;
  ::server::TGroupsJoin* release_groups_join();
  ::server::TGroupsJoin* mutable_groups_join();
  void set_allocated_groups_join(::server::TGroupsJoin* groups_join);
  private:
  const ::server::TGroupsJoin& _internal_groups_join() const;
  ::server::TGroupsJoin* _internal_mutable_groups_join();
  public:
  void unsafe_arena_set_allocated_groups_join(
      ::server::TGroupsJoin* groups_join);
  ::server::TGroupsJoin* unsafe_arena_release_groups_join();

  // .server.TGroupsLeave groups_leave = 25;
  bool has_groups_leave() const;
  private:
  bool _internal_has_groups_leave() const;
  public:
  void clear_groups_leave();
  const ::server::TGroupsLeave& groups_leave() const;
  ::server::TGroupsLeave* release_groups_leave();
  ::server::TGroupsLeave* mutable_groups_leave();
  void set_allocated_groups_leave(::server::TGroupsLeave* groups_leave);
  private:
  const ::server::TGroupsLeave& _internal_groups_leave() const;
  ::server::TGroupsLeave* _internal_mutable_groups_leave();
  public:
  void unsafe_arena_set_allocated_groups_leave(
      ::server::TGroupsLeave* groups_leave);
  ::server::TGroupsLeave* unsafe_arena_release_groups_leave();

  // .server.TGroupUsersAdd group_users_add = 26;
  bool has_group_users_add() const;
  private:
  bool _internal_has_group_users_add() const;
  public:
  void clear_group_users_add();
  const ::server::TGroupUsersAdd& group_users_add() const;
  ::server::TGroupUsersAdd* release_group_users_add();
  ::server::TGroupUsersAdd* mutable_group_users_add();
  void set_allocated_group_users_add(::server::TGroupUsersAdd* group_users_add);
  private:
  const ::server::TGroupUsersAdd& _internal_group_users_add() const;
  ::server::TGroupUsersAdd* _internal_mutable_group_users_add();
  public:
  void unsafe_arena_set_allocated_group_users_add(
      ::server::TGroupUsersAdd* group_users_add);
  ::server::TGroupUsersAdd* unsafe_arena_release_group_users_add();

  // .server.TGroupUsersKick group_users_kick = 27;
  bool has_group_users_kick() const;
  private:
  bool _internal_has_group_users_kick() const;
  public:
  void clear_group_users_kick();
  const ::server::TGroupUsersKick& group_users_kick() const;
  ::server::TGroupUsersKick* release_group_users_kick();
  ::server::TGroupUsersKick* mutable_group_users_kick();
  void set_allocated_group_users_kick(::server::TGroupUsersKick* group_users_kick);
  private:
  const ::server::TGroupUsersKick& _internal_group_users_kick() const;
  ::server::TGroupUsersKick* _internal_mutable_group_users_kick();
  public:
  void unsafe_arena_set_allocated_group_users_kick(
      ::server::TGroupUsersKick* group_users_kick);
  ::server::TGroupUsersKick* unsafe_arena_release_group_users_kick();

  // .server.TGroupUsersPromote group_users_promote = 28;
  bool has_group_users_promote() const;
  private:
  bool _internal_has_group_users_promote() const;
  public:
  void clear_group_users_promote();
  const ::server::TGroupUsersPromote& group_users_promote() const;
  ::server::TGroupUsersPromote* release_group_users_promote();
  ::server::TGroupUsersPromote* mutable_group_users_promote();
  void set_allocated_group_users_promote(::server::TGroupUsersPromote* group_users_promote);
  private:
  const ::server::TGroupUsersPromote& _internal_group_users_promote() const;
  ::server::TGroupUsersPromote* _internal_mutable_group_users_promote();
  public:
  void unsafe_arena_set_allocated_group_users_promote(
      ::server::TGroupUsersPromote* group_users_promote);
  ::server::TGroupUsersPromote* unsafe_arena_release_group_users_promote();

  // .server.TGroups groups = 29;
  bool has_groups() const;
  private:
  bool _internal_has_groups() const;
  public:
  void clear_groups();
  const ::server::TGroups& groups() const;
  ::server::TGroups* release_groups();
  ::server::TGroups* mutable_groups();
  void set_allocated_groups(::server::TGroups* groups);
  private:
  const ::server::TGroups& _internal_groups() const;
  ::server::TGroups* _internal_mutable_groups();
  public:
  void unsafe_arena_set_allocated_groups(
      ::server::TGroups* groups);
  ::server::TGroups* unsafe_arena_release_groups();

  // .server.TGroupsSelf groups_self = 30;
  bool has_groups_self() const;
  private:
  bool _internal_has_groups_self() const;
  public:
  void clear_groups_self();
  const ::server::TGroupsSelf& groups_self() const;
  ::server::TGroupsSelf* release_groups_self();
  ::server::TGroupsSelf* mutable_groups_self();
  void set_allocated_groups_self(::server::TGroupsSelf* groups_self);
  private:
  const ::server::TGroupsSelf& _internal_groups_self() const;
  ::server::TGroupsSelf* _internal_mutable_groups_self();
  public:
  void unsafe_arena_set_allocated_groups_self(
      ::server::TGroupsSelf* groups_self);
  ::server::TGroupsSelf* unsafe_arena_release_groups_self();

  // .server.TGroupUsers group_users = 31;
  bool has_group_users() const;
  private:
  bool _internal_has_group_users() const;
  public:
  void clear_group_users();
  const ::server::TGroupUsers& group_users() const;
  ::server::TGroupUsers* release_group_users();
  ::server::TGroupUsers* mutable_group_users();
  void set_allocated_group_users(::server::TGroupUsers* group_users);
  private:
  const ::server::TGroupUsers& _internal_group_users() const;
  ::server::TGroupUsers* _internal_mutable_group_users();
  public:
  void unsafe_arena_set_allocated_group_users(
      ::server::TGroupUsers* group_users);
  ::server::TGroupUsers* unsafe_arena_release_group_users();

  // .server.TTopicsJoin topics_join = 32;
  bool has_topics_join() const;
  private:
  bool _internal_has_topics_join() const;
  public:
  void clear_topics_join();
  const ::server::TTopicsJoin& topics_join() const;
  ::server::TTopicsJoin* release_topics_join();
  ::server::TTopicsJoin* mutable_topics_join();
  void set_allocated_topics_join(::server::TTopicsJoin* topics_join);
  private:
  const ::server::TTopicsJoin& _internal_topics_join() const;
  ::server::TTopicsJoin* _internal_mutable_topics_join();
  public:
  void unsafe_arena_set_allocated_topics_join(
      ::server::TTopicsJoin* topics_join);
  ::server::TTopicsJoin* unsafe_arena_release_topics_join();

  // .server.TTopicsLeave topics_leave = 33;
  bool has_topics_leave() const;
  private:
  bool _internal_has_topics_leave() const;
  public:
  void clear_topics_leave();
  const ::server::TTopicsLeave& topics_leave() const;
  ::server::TTopicsLeave* release_topics_leave();
  ::server::TTopicsLeave* mutable_topics_leave();
  void set_allocated_topics_leave(::server::TTopicsLeave* topics_leave);
  private:
  const ::server::TTopicsLeave& _internal_topics_leave() const;
  ::server::TTopicsLeave* _internal_mutable_topics_leave();
  public:
  void unsafe_arena_set_allocated_topics_leave(
      ::server::TTopicsLeave* topics_leave);
  ::server::TTopicsLeave* unsafe_arena_release_topics_leave();

  // .server.TTopicMessageSend topic_message_send = 34;
  bool has_topic_message_send() const;
  private:
  bool _internal_has_topic_message_send() const;
  public:
  void clear_topic_message_send();
  const ::server::TTopicMessageSend& topic_message_send() const;
  ::server::TTopicMessageSend* release_topic_message_send();
  ::server::TTopicMessageSend* mutable_topic_message_send();
  void set_allocated_topic_message_send(::server::TTopicMessageSend* topic_message_send);
  private:
  const ::server::TTopicMessageSend& _internal_topic_message_send() const;
  ::server::TTopicMessageSend* _internal_mutable_topic_message_send();
  public:
  void unsafe_arena_set_allocated_topic_message_send(
      ::server::TTopicMessageSend* topic_message_send);
  ::server::TTopicMessageSend* unsafe_arena_release_topic_message_send();

  // .server.TTopicMessagesList topic_messages_list = 35;
  bool has_topic_messages_list() const;
  private:
  bool _internal_has_topic_messages_list() const;
  public:
  void clear_topic_messages_list();
  const ::server::TTopicMessagesList& topic_messages_list() const;
  ::server::TTopicMessagesList* release_topic_messages_list();
  ::server::TTopicMessagesList* mutable_topic_messages_list();
  void set_allocated_topic_messages_list(::server::TTopicMessagesList* topic_messages_list);
  private:
  const ::server::TTopicMessagesList& _internal_topic_messages_list() const;
  ::server::TTopicMessagesList* _internal_mutable_topic_messages_list();
  public:
  void unsafe_arena_set_allocated_topic_messages_list(
      ::server::TTopicMessagesList* topic_messages_list);
  ::server::TTopicMessagesList* unsafe_arena_release_topic_messages_list();

  // .server.TTopics topics = 36;
  bool has_topics() const;
  private:
  bool _internal_has_topics() const;
  public:
  void clear_topics();
  const ::server::TTopics& topics() const;
  ::server::TTopics* release_topics();
  ::server::TTopics* mutable_topics();
  void set_allocated_topics(::server::TTopics* topics);
  private:
  const ::server::TTopics& _internal_topics() const;
  ::server::TTopics* _internal_mutable_topics();
  public:
  void unsafe_arena_set_allocated_topics(
      ::server::TTopics* topics);
  ::server::TTopics* unsafe_arena_release_topics();

  // .server.TTopicMessageAck topic_message_ack = 37;
  bool has_topic_message_ack() const;
  private:
  bool _internal_has_topic_message_ack() const;
  public:
  void clear_topic_message_ack();
  const ::server::TTopicMessageAck& topic_message_ack() const;
  ::server::TTopicMessageAck* release_topic_message_ack();
  ::server::TTopicMessageAck* mutable_topic_message_ack();
  void set_allocated_topic_message_ack(::server::TTopicMessageAck* topic_message_ack);
  private:
  const ::server::TTopicMessageAck& _internal_topic_message_ack() const;
  ::server::TTopicMessageAck* _internal_mutable_topic_message_ack();
  public:
  void unsafe_arena_set_allocated_topic_message_ack(
      ::server::TTopicMessageAck* topic_message_ack);
  ::server::TTopicMessageAck* unsafe_arena_release_topic_message_ack();

  // .server.TopicMessage topic_message = 38;
  bool has_topic_message() const;
  private:
  bool _internal_has_topic_message() const;
  public:
  void clear_topic_message();
  const ::server::TopicMessage& topic_message() const;
  ::server::TopicMessage* release_topic_message();
  ::server::TopicMessage* mutable_topic_message();
  void set_allocated_topic_message(::server::TopicMessage* topic_message);
  private:
  const ::server::TopicMessage& _internal_topic_message() const;
  ::server::TopicMessage* _internal_mutable_topic_message();
  public:
  void unsafe_arena_set_allocated_topic_message(
      ::server::TopicMessage* topic_message);
  ::server::TopicMessage* unsafe_arena_release_topic_message();

  // .server.TTopicMessages topic_messages = 39;
  bool has_topic_messages() const;
  private:
  bool _internal_has_topic_messages() const;
  public:
  void clear_topic_messages();
  const ::server::TTopicMessages& topic_messages() const;
  ::server::TTopicMessages* release_topic_messages();
  ::server::TTopicMessages* mutable_topic_messages();
  void set_allocated_topic_messages(::server::TTopicMessages* topic_messages);
  private:
  const ::server::TTopicMessages& _internal_topic_messages() const;
  ::server::TTopicMessages* _internal_mutable_topic_messages();
  public:
  void unsafe_arena_set_allocated_topic_messages(
      ::server::TTopicMessages* topic_messages);
  ::server::TTopicMessages* unsafe_arena_release_topic_messages();

  // .server.TopicPresence topic_presence = 40;
  bool has_topic_presence() const;
  private:
  bool _internal_has_topic_presence() const;
  public:
  void clear_topic_presence();
  const ::server::TopicPresence& topic_presence() const;
  ::server::TopicPresence* release_topic_presence();
  ::server::TopicPresence* mutable_topic_presence();
  void set_allocated_topic_presence(::server::TopicPresence* topic_presence);
  private:
  const ::server::TopicPresence& _internal_topic_presence() const;
  ::server::TopicPresence* _internal_mutable_topic_presence();
  public:
  void unsafe_arena_set_allocated_topic_presence(
      ::server::TopicPresence* topic_presence);
  ::server::TopicPresence* unsafe_arena_release_topic_presence();

  // .server.TMatchCreate match_create = 41;
  bool has_match_create() const;
  private:
  bool _internal_has_match_create() const;
  public:
  void clear_match_create();
  const ::server::TMatchCreate& match_create() const;
  ::server::TMatchCreate* release_match_create();
  ::server::TMatchCreate* mutable_match_create();
  void set_allocated_match_create(::server::TMatchCreate* match_create);
  private:
  const ::server::TMatchCreate& _internal_match_create() const;
  ::server::TMatchCreate* _internal_mutable_match_create();
  public:
  void unsafe_arena_set_allocated_match_create(
      ::server::TMatchCreate* match_create);
  ::server::TMatchCreate* unsafe_arena_release_match_create();

  // .server.TMatchesJoin matches_join = 42;
  bool has_matches_join() const;
  private:
  bool _internal_has_matches_join() const;
  public:
  void clear_matches_join();
  const ::server::TMatchesJoin& matches_join() const;
  ::server::TMatchesJoin* release_matches_join();
  ::server::TMatchesJoin* mutable_matches_join();
  void set_allocated_matches_join(::server::TMatchesJoin* matches_join);
  private:
  const ::server::TMatchesJoin& _internal_matches_join() const;
  ::server::TMatchesJoin* _internal_mutable_matches_join();
  public:
  void unsafe_arena_set_allocated_matches_join(
      ::server::TMatchesJoin* matches_join);
  ::server::TMatchesJoin* unsafe_arena_release_matches_join();

  // .server.TMatchesLeave matches_leave = 43;
  bool has_matches_leave() const;
  private:
  bool _internal_has_matches_leave() const;
  public:
  void clear_matches_leave();
  const ::server::TMatchesLeave& matches_leave() const;
  ::server::TMatchesLeave* release_matches_leave();
  ::server::TMatchesLeave* mutable_matches_leave();
  void set_allocated_matches_leave(::server::TMatchesLeave* matches_leave);
  private:
  const ::server::TMatchesLeave& _internal_matches_leave() const;
  ::server::TMatchesLeave* _internal_mutable_matches_leave();
  public:
  void unsafe_arena_set_allocated_matches_leave(
      ::server::TMatchesLeave* matches_leave);
  ::server::TMatchesLeave* unsafe_arena_release_matches_leave();

  // .server.MatchDataSend match_data_send = 44;
  bool has_match_data_send() const;
  private:
  bool _internal_has_match_data_send() const;
  public:
  void clear_match_data_send();
  const ::server::MatchDataSend& match_data_send() const;
  ::server::MatchDataSend* release_match_data_send();
  ::server::MatchDataSend* mutable_match_data_send();
  void set_allocated_match_data_send(::server::MatchDataSend* match_data_send);
  private:
  const ::server::MatchDataSend& _internal_match_data_send() const;
  ::server::MatchDataSend* _internal_mutable_match_data_send();
  public:
  void unsafe_arena_set_allocated_match_data_send(
      ::server::MatchDataSend* match_data_send);
  ::server::MatchDataSend* unsafe_arena_release_match_data_send();

  // .server.TMatch match = 45;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::server::TMatch& match() const;
  ::server::TMatch* release_match();
  ::server::TMatch* mutable_match();
  void set_allocated_match(::server::TMatch* match);
  private:
  const ::server::TMatch& _internal_match() const;
  ::server::TMatch* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::server::TMatch* match);
  ::server::TMatch* unsafe_arena_release_match();

  // .server.TMatches matches = 46;
  bool has_matches() const;
  private:
  bool _internal_has_matches() const;
  public:
  void clear_matches();
  const ::server::TMatches& matches() const;
  ::server::TMatches* release_matches();
  ::server::TMatches* mutable_matches();
  void set_allocated_matches(::server::TMatches* matches);
  private:
  const ::server::TMatches& _internal_matches() const;
  ::server::TMatches* _internal_mutable_matches();
  public:
  void unsafe_arena_set_allocated_matches(
      ::server::TMatches* matches);
  ::server::TMatches* unsafe_arena_release_matches();

  // .server.MatchData match_data = 47;
  bool has_match_data() const;
  private:
  bool _internal_has_match_data() const;
  public:
  void clear_match_data();
  const ::server::MatchData& match_data() const;
  ::server::MatchData* release_match_data();
  ::server::MatchData* mutable_match_data();
  void set_allocated_match_data(::server::MatchData* match_data);
  private:
  const ::server::MatchData& _internal_match_data() const;
  ::server::MatchData* _internal_mutable_match_data();
  public:
  void unsafe_arena_set_allocated_match_data(
      ::server::MatchData* match_data);
  ::server::MatchData* unsafe_arena_release_match_data();

  // .server.MatchPresence match_presence = 48;
  bool has_match_presence() const;
  private:
  bool _internal_has_match_presence() const;
  public:
  void clear_match_presence();
  const ::server::MatchPresence& match_presence() const;
  ::server::MatchPresence* release_match_presence();
  ::server::MatchPresence* mutable_match_presence();
  void set_allocated_match_presence(::server::MatchPresence* match_presence);
  private:
  const ::server::MatchPresence& _internal_match_presence() const;
  ::server::MatchPresence* _internal_mutable_match_presence();
  public:
  void unsafe_arena_set_allocated_match_presence(
      ::server::MatchPresence* match_presence);
  ::server::MatchPresence* unsafe_arena_release_match_presence();

  // .server.TStorageList storage_list = 49;
  bool has_storage_list() const;
  private:
  bool _internal_has_storage_list() const;
  public:
  void clear_storage_list();
  const ::server::TStorageList& storage_list() const;
  ::server::TStorageList* release_storage_list();
  ::server::TStorageList* mutable_storage_list();
  void set_allocated_storage_list(::server::TStorageList* storage_list);
  private:
  const ::server::TStorageList& _internal_storage_list() const;
  ::server::TStorageList* _internal_mutable_storage_list();
  public:
  void unsafe_arena_set_allocated_storage_list(
      ::server::TStorageList* storage_list);
  ::server::TStorageList* unsafe_arena_release_storage_list();

  // .server.TStorageFetch storage_fetch = 50;
  bool has_storage_fetch() const;
  private:
  bool _internal_has_storage_fetch() const;
  public:
  void clear_storage_fetch();
  const ::server::TStorageFetch& storage_fetch() const;
  ::server::TStorageFetch* release_storage_fetch();
  ::server::TStorageFetch* mutable_storage_fetch();
  void set_allocated_storage_fetch(::server::TStorageFetch* storage_fetch);
  private:
  const ::server::TStorageFetch& _internal_storage_fetch() const;
  ::server::TStorageFetch* _internal_mutable_storage_fetch();
  public:
  void unsafe_arena_set_allocated_storage_fetch(
      ::server::TStorageFetch* storage_fetch);
  ::server::TStorageFetch* unsafe_arena_release_storage_fetch();

  // .server.TStorageWrite storage_write = 51;
  bool has_storage_write() const;
  private:
  bool _internal_has_storage_write() const;
  public:
  void clear_storage_write();
  const ::server::TStorageWrite& storage_write() const;
  ::server::TStorageWrite* release_storage_write();
  ::server::TStorageWrite* mutable_storage_write();
  void set_allocated_storage_write(::server::TStorageWrite* storage_write);
  private:
  const ::server::TStorageWrite& _internal_storage_write() const;
  ::server::TStorageWrite* _internal_mutable_storage_write();
  public:
  void unsafe_arena_set_allocated_storage_write(
      ::server::TStorageWrite* storage_write);
  ::server::TStorageWrite* unsafe_arena_release_storage_write();

  // .server.TStorageUpdate storage_update = 52;
  bool has_storage_update() const;
  private:
  bool _internal_has_storage_update() const;
  public:
  void clear_storage_update();
  const ::server::TStorageUpdate& storage_update() const;
  ::server::TStorageUpdate* release_storage_update();
  ::server::TStorageUpdate* mutable_storage_update();
  void set_allocated_storage_update(::server::TStorageUpdate* storage_update);
  private:
  const ::server::TStorageUpdate& _internal_storage_update() const;
  ::server::TStorageUpdate* _internal_mutable_storage_update();
  public:
  void unsafe_arena_set_allocated_storage_update(
      ::server::TStorageUpdate* storage_update);
  ::server::TStorageUpdate* unsafe_arena_release_storage_update();

  // .server.TStorageRemove storage_remove = 53;
  bool has_storage_remove() const;
  private:
  bool _internal_has_storage_remove() const;
  public:
  void clear_storage_remove();
  const ::server::TStorageRemove& storage_remove() const;
  ::server::TStorageRemove* release_storage_remove();
  ::server::TStorageRemove* mutable_storage_remove();
  void set_allocated_storage_remove(::server::TStorageRemove* storage_remove);
  private:
  const ::server::TStorageRemove& _internal_storage_remove() const;
  ::server::TStorageRemove* _internal_mutable_storage_remove();
  public:
  void unsafe_arena_set_allocated_storage_remove(
      ::server::TStorageRemove* storage_remove);
  ::server::TStorageRemove* unsafe_arena_release_storage_remove();

  // .server.TStorageData storage_data = 54;
  bool has_storage_data() const;
  private:
  bool _internal_has_storage_data() const;
  public:
  void clear_storage_data();
  const ::server::TStorageData& storage_data() const;
  ::server::TStorageData* release_storage_data();
  ::server::TStorageData* mutable_storage_data();
  void set_allocated_storage_data(::server::TStorageData* storage_data);
  private:
  const ::server::TStorageData& _internal_storage_data() const;
  ::server::TStorageData* _internal_mutable_storage_data();
  public:
  void unsafe_arena_set_allocated_storage_data(
      ::server::TStorageData* storage_data);
  ::server::TStorageData* unsafe_arena_release_storage_data();

  // .server.TStorageKeys storage_keys = 55;
  bool has_storage_keys() const;
  private:
  bool _internal_has_storage_keys() const;
  public:
  void clear_storage_keys();
  const ::server::TStorageKeys& storage_keys() const;
  ::server::TStorageKeys* release_storage_keys();
  ::server::TStorageKeys* mutable_storage_keys();
  void set_allocated_storage_keys(::server::TStorageKeys* storage_keys);
  private:
  const ::server::TStorageKeys& _internal_storage_keys() const;
  ::server::TStorageKeys* _internal_mutable_storage_keys();
  public:
  void unsafe_arena_set_allocated_storage_keys(
      ::server::TStorageKeys* storage_keys);
  ::server::TStorageKeys* unsafe_arena_release_storage_keys();

  // .server.TLeaderboardsList leaderboards_list = 56;
  bool has_leaderboards_list() const;
  private:
  bool _internal_has_leaderboards_list() const;
  public:
  void clear_leaderboards_list();
  const ::server::TLeaderboardsList& leaderboards_list() const;
  ::server::TLeaderboardsList* release_leaderboards_list();
  ::server::TLeaderboardsList* mutable_leaderboards_list();
  void set_allocated_leaderboards_list(::server::TLeaderboardsList* leaderboards_list);
  private:
  const ::server::TLeaderboardsList& _internal_leaderboards_list() const;
  ::server::TLeaderboardsList* _internal_mutable_leaderboards_list();
  public:
  void unsafe_arena_set_allocated_leaderboards_list(
      ::server::TLeaderboardsList* leaderboards_list);
  ::server::TLeaderboardsList* unsafe_arena_release_leaderboards_list();

  // .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
  bool has_leaderboard_records_write() const;
  private:
  bool _internal_has_leaderboard_records_write() const;
  public:
  void clear_leaderboard_records_write();
  const ::server::TLeaderboardRecordsWrite& leaderboard_records_write() const;
  ::server::TLeaderboardRecordsWrite* release_leaderboard_records_write();
  ::server::TLeaderboardRecordsWrite* mutable_leaderboard_records_write();
  void set_allocated_leaderboard_records_write(::server::TLeaderboardRecordsWrite* leaderboard_records_write);
  private:
  const ::server::TLeaderboardRecordsWrite& _internal_leaderboard_records_write() const;
  ::server::TLeaderboardRecordsWrite* _internal_mutable_leaderboard_records_write();
  public:
  void unsafe_arena_set_allocated_leaderboard_records_write(
      ::server::TLeaderboardRecordsWrite* leaderboard_records_write);
  ::server::TLeaderboardRecordsWrite* unsafe_arena_release_leaderboard_records_write();

  // .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
  bool has_leaderboard_records_fetch() const;
  private:
  bool _internal_has_leaderboard_records_fetch() const;
  public:
  void clear_leaderboard_records_fetch();
  const ::server::TLeaderboardRecordsFetch& leaderboard_records_fetch() const;
  ::server::TLeaderboardRecordsFetch* release_leaderboard_records_fetch();
  ::server::TLeaderboardRecordsFetch* mutable_leaderboard_records_fetch();
  void set_allocated_leaderboard_records_fetch(::server::TLeaderboardRecordsFetch* leaderboard_records_fetch);
  private:
  const ::server::TLeaderboardRecordsFetch& _internal_leaderboard_records_fetch() const;
  ::server::TLeaderboardRecordsFetch* _internal_mutable_leaderboard_records_fetch();
  public:
  void unsafe_arena_set_allocated_leaderboard_records_fetch(
      ::server::TLeaderboardRecordsFetch* leaderboard_records_fetch);
  ::server::TLeaderboardRecordsFetch* unsafe_arena_release_leaderboard_records_fetch();

  // .server.TLeaderboardRecordsList leaderboard_records_list = 59;
  bool has_leaderboard_records_list() const;
  private:
  bool _internal_has_leaderboard_records_list() const;
  public:
  void clear_leaderboard_records_list();
  const ::server::TLeaderboardRecordsList& leaderboard_records_list() const;
  ::server::TLeaderboardRecordsList* release_leaderboard_records_list();
  ::server::TLeaderboardRecordsList* mutable_leaderboard_records_list();
  void set_allocated_leaderboard_records_list(::server::TLeaderboardRecordsList* leaderboard_records_list);
  private:
  const ::server::TLeaderboardRecordsList& _internal_leaderboard_records_list() const;
  ::server::TLeaderboardRecordsList* _internal_mutable_leaderboard_records_list();
  public:
  void unsafe_arena_set_allocated_leaderboard_records_list(
      ::server::TLeaderboardRecordsList* leaderboard_records_list);
  ::server::TLeaderboardRecordsList* unsafe_arena_release_leaderboard_records_list();

  // .server.TLeaderboards leaderboards = 60;
  bool has_leaderboards() const;
  private:
  bool _internal_has_leaderboards() const;
  public:
  void clear_leaderboards();
  const ::server::TLeaderboards& leaderboards() const;
  ::server::TLeaderboards* release_leaderboards();
  ::server::TLeaderboards* mutable_leaderboards();
  void set_allocated_leaderboards(::server::TLeaderboards* leaderboards);
  private:
  const ::server::TLeaderboards& _internal_leaderboards() const;
  ::server::TLeaderboards* _internal_mutable_leaderboards();
  public:
  void unsafe_arena_set_allocated_leaderboards(
      ::server::TLeaderboards* leaderboards);
  ::server::TLeaderboards* unsafe_arena_release_leaderboards();

  // .server.TLeaderboardRecords leaderboard_records = 61;
  bool has_leaderboard_records() const;
  private:
  bool _internal_has_leaderboard_records() const;
  public:
  void clear_leaderboard_records();
  const ::server::TLeaderboardRecords& leaderboard_records() const;
  ::server::TLeaderboardRecords* release_leaderboard_records();
  ::server::TLeaderboardRecords* mutable_leaderboard_records();
  void set_allocated_leaderboard_records(::server::TLeaderboardRecords* leaderboard_records);
  private:
  const ::server::TLeaderboardRecords& _internal_leaderboard_records() const;
  ::server::TLeaderboardRecords* _internal_mutable_leaderboard_records();
  public:
  void unsafe_arena_set_allocated_leaderboard_records(
      ::server::TLeaderboardRecords* leaderboard_records);
  ::server::TLeaderboardRecords* unsafe_arena_release_leaderboard_records();

  // .server.TMatchmakeAdd matchmake_add = 62;
  bool has_matchmake_add() const;
  private:
  bool _internal_has_matchmake_add() const;
  public:
  void clear_matchmake_add();
  const ::server::TMatchmakeAdd& matchmake_add() const;
  ::server::TMatchmakeAdd* release_matchmake_add();
  ::server::TMatchmakeAdd* mutable_matchmake_add();
  void set_allocated_matchmake_add(::server::TMatchmakeAdd* matchmake_add);
  private:
  const ::server::TMatchmakeAdd& _internal_matchmake_add() const;
  ::server::TMatchmakeAdd* _internal_mutable_matchmake_add();
  public:
  void unsafe_arena_set_allocated_matchmake_add(
      ::server::TMatchmakeAdd* matchmake_add);
  ::server::TMatchmakeAdd* unsafe_arena_release_matchmake_add();

  // .server.TMatchmakeRemove matchmake_remove = 63;
  bool has_matchmake_remove() const;
  private:
  bool _internal_has_matchmake_remove() const;
  public:
  void clear_matchmake_remove();
  const ::server::TMatchmakeRemove& matchmake_remove() const;
  ::server::TMatchmakeRemove* release_matchmake_remove();
  ::server::TMatchmakeRemove* mutable_matchmake_remove();
  void set_allocated_matchmake_remove(::server::TMatchmakeRemove* matchmake_remove);
  private:
  const ::server::TMatchmakeRemove& _internal_matchmake_remove() const;
  ::server::TMatchmakeRemove* _internal_mutable_matchmake_remove();
  public:
  void unsafe_arena_set_allocated_matchmake_remove(
      ::server::TMatchmakeRemove* matchmake_remove);
  ::server::TMatchmakeRemove* unsafe_arena_release_matchmake_remove();

  // .server.TMatchmakeTicket matchmake_ticket = 64;
  bool has_matchmake_ticket() const;
  private:
  bool _internal_has_matchmake_ticket() const;
  public:
  void clear_matchmake_ticket();
  const ::server::TMatchmakeTicket& matchmake_ticket() const;
  ::server::TMatchmakeTicket* release_matchmake_ticket();
  ::server::TMatchmakeTicket* mutable_matchmake_ticket();
  void set_allocated_matchmake_ticket(::server::TMatchmakeTicket* matchmake_ticket);
  private:
  const ::server::TMatchmakeTicket& _internal_matchmake_ticket() const;
  ::server::TMatchmakeTicket* _internal_mutable_matchmake_ticket();
  public:
  void unsafe_arena_set_allocated_matchmake_ticket(
      ::server::TMatchmakeTicket* matchmake_ticket);
  ::server::TMatchmakeTicket* unsafe_arena_release_matchmake_ticket();

  // .server.MatchmakeMatched matchmake_matched = 65;
  bool has_matchmake_matched() const;
  private:
  bool _internal_has_matchmake_matched() const;
  public:
  void clear_matchmake_matched();
  const ::server::MatchmakeMatched& matchmake_matched() const;
  ::server::MatchmakeMatched* release_matchmake_matched();
  ::server::MatchmakeMatched* mutable_matchmake_matched();
  void set_allocated_matchmake_matched(::server::MatchmakeMatched* matchmake_matched);
  private:
  const ::server::MatchmakeMatched& _internal_matchmake_matched() const;
  ::server::MatchmakeMatched* _internal_mutable_matchmake_matched();
  public:
  void unsafe_arena_set_allocated_matchmake_matched(
      ::server::MatchmakeMatched* matchmake_matched);
  ::server::MatchmakeMatched* unsafe_arena_release_matchmake_matched();

  // .server.TRpc rpc = 66;
  bool has_rpc() const;
  private:
  bool _internal_has_rpc() const;
  public:
  void clear_rpc();
  const ::server::TRpc& rpc() const;
  ::server::TRpc* release_rpc();
  ::server::TRpc* mutable_rpc();
  void set_allocated_rpc(::server::TRpc* rpc);
  private:
  const ::server::TRpc& _internal_rpc() const;
  ::server::TRpc* _internal_mutable_rpc();
  public:
  void unsafe_arena_set_allocated_rpc(
      ::server::TRpc* rpc);
  ::server::TRpc* unsafe_arena_release_rpc();

  // .server.TPurchaseValidation purchase = 67;
  bool has_purchase() const;
  private:
  bool _internal_has_purchase() const;
  public:
  void clear_purchase();
  const ::server::TPurchaseValidation& purchase() const;
  ::server::TPurchaseValidation* release_purchase();
  ::server::TPurchaseValidation* mutable_purchase();
  void set_allocated_purchase(::server::TPurchaseValidation* purchase);
  private:
  const ::server::TPurchaseValidation& _internal_purchase() const;
  ::server::TPurchaseValidation* _internal_mutable_purchase();
  public:
  void unsafe_arena_set_allocated_purchase(
      ::server::TPurchaseValidation* purchase);
  ::server::TPurchaseValidation* unsafe_arena_release_purchase();

  // .server.TPurchaseRecord purchase_record = 68;
  bool has_purchase_record() const;
  private:
  bool _internal_has_purchase_record() const;
  public:
  void clear_purchase_record();
  const ::server::TPurchaseRecord& purchase_record() const;
  ::server::TPurchaseRecord* release_purchase_record();
  ::server::TPurchaseRecord* mutable_purchase_record();
  void set_allocated_purchase_record(::server::TPurchaseRecord* purchase_record);
  private:
  const ::server::TPurchaseRecord& _internal_purchase_record() const;
  ::server::TPurchaseRecord* _internal_mutable_purchase_record();
  public:
  void unsafe_arena_set_allocated_purchase_record(
      ::server::TPurchaseRecord* purchase_record);
  ::server::TPurchaseRecord* unsafe_arena_release_purchase_record();

  // .server.TNotificationsList notifications_list = 69;
  bool has_notifications_list() const;
  private:
  bool _internal_has_notifications_list() const;
  public:
  void clear_notifications_list();
  const ::server::TNotificationsList& notifications_list() const;
  ::server::TNotificationsList* release_notifications_list();
  ::server::TNotificationsList* mutable_notifications_list();
  void set_allocated_notifications_list(::server::TNotificationsList* notifications_list);
  private:
  const ::server::TNotificationsList& _internal_notifications_list() const;
  ::server::TNotificationsList* _internal_mutable_notifications_list();
  public:
  void unsafe_arena_set_allocated_notifications_list(
      ::server::TNotificationsList* notifications_list);
  ::server::TNotificationsList* unsafe_arena_release_notifications_list();

  // .server.TNotificationsRemove notifications_remove = 70;
  bool has_notifications_remove() const;
  private:
  bool _internal_has_notifications_remove() const;
  public:
  void clear_notifications_remove();
  const ::server::TNotificationsRemove& notifications_remove() const;
  ::server::TNotificationsRemove* release_notifications_remove();
  ::server::TNotificationsRemove* mutable_notifications_remove();
  void set_allocated_notifications_remove(::server::TNotificationsRemove* notifications_remove);
  private:
  const ::server::TNotificationsRemove& _internal_notifications_remove() const;
  ::server::TNotificationsRemove* _internal_mutable_notifications_remove();
  public:
  void unsafe_arena_set_allocated_notifications_remove(
      ::server::TNotificationsRemove* notifications_remove);
  ::server::TNotificationsRemove* unsafe_arena_release_notifications_remove();

  // .server.TNotifications notifications = 71;
  bool has_notifications() const;
  private:
  bool _internal_has_notifications() const;
  public:
  void clear_notifications();
  const ::server::TNotifications& notifications() const;
  ::server::TNotifications* release_notifications();
  ::server::TNotifications* mutable_notifications();
  void set_allocated_notifications(::server::TNotifications* notifications);
  private:
  const ::server::TNotifications& _internal_notifications() const;
  ::server::TNotifications* _internal_mutable_notifications();
  public:
  void unsafe_arena_set_allocated_notifications(
      ::server::TNotifications* notifications);
  ::server::TNotifications* unsafe_arena_release_notifications();

  // .server.Notifications live_notifications = 72;
  bool has_live_notifications() const;
  private:
  bool _internal_has_live_notifications() const;
  public:
  void clear_live_notifications();
  const ::server::Notifications& live_notifications() const;
  ::server::Notifications* release_live_notifications();
  ::server::Notifications* mutable_live_notifications();
  void set_allocated_live_notifications(::server::Notifications* live_notifications);
  private:
  const ::server::Notifications& _internal_live_notifications() const;
  ::server::Notifications* _internal_mutable_live_notifications();
  public:
  void unsafe_arena_set_allocated_live_notifications(
      ::server::Notifications* live_notifications);
  ::server::Notifications* unsafe_arena_release_live_notifications();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:server.Envelope)
 private:
  class _Internal;
  void set_has_error();
  void set_has_heartbeat();
  void set_has_logout();
  void set_has_link();
  void set_has_unlink();
  void set_has_self_fetch();
  void set_has_self_update();
  void set_has_users_fetch();
  void set_has_self();
  void set_has_users();
  void set_has_friends_add();
  void set_has_friends_remove();
  void set_has_friends_block();
  void set_has_friends_list();
  void set_has_friends();
  void set_has_groups_create();
  void set_has_groups_update();
  void set_has_groups_remove();
  void set_has_groups_fetch();
  void set_has_groups_list();
  void set_has_groups_self_list();
  void set_has_group_users_list();
  void set_has_groups_join();
  void set_has_groups_leave();
  void set_has_group_users_add();
  void set_has_group_users_kick();
  void set_has_group_users_promote();
  void set_has_groups();
  void set_has_groups_self();
  void set_has_group_users();
  void set_has_topics_join();
  void set_has_topics_leave();
  void set_has_topic_message_send();
  void set_has_topic_messages_list();
  void set_has_topics();
  void set_has_topic_message_ack();
  void set_has_topic_message();
  void set_has_topic_messages();
  void set_has_topic_presence();
  void set_has_match_create();
  void set_has_matches_join();
  void set_has_matches_leave();
  void set_has_match_data_send();
  void set_has_match();
  void set_has_matches();
  void set_has_match_data();
  void set_has_match_presence();
  void set_has_storage_list();
  void set_has_storage_fetch();
  void set_has_storage_write();
  void set_has_storage_update();
  void set_has_storage_remove();
  void set_has_storage_data();
  void set_has_storage_keys();
  void set_has_leaderboards_list();
  void set_has_leaderboard_records_write();
  void set_has_leaderboard_records_fetch();
  void set_has_leaderboard_records_list();
  void set_has_leaderboards();
  void set_has_leaderboard_records();
  void set_has_matchmake_add();
  void set_has_matchmake_remove();
  void set_has_matchmake_ticket();
  void set_has_matchmake_matched();
  void set_has_rpc();
  void set_has_purchase();
  void set_has_purchase_record();
  void set_has_notifications_list();
  void set_has_notifications_remove();
  void set_has_notifications();
  void set_has_live_notifications();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collation_id_;
  union PayloadUnion {
    PayloadUnion() {}
    ::server::Error* error_;
    ::server::Heartbeat* heartbeat_;
    ::server::Logout* logout_;
    ::server::TLink* link_;
    ::server::TUnlink* unlink_;
    ::server::TSelfFetch* self_fetch_;
    ::server::TSelfUpdate* self_update_;
    ::server::TUsersFetch* users_fetch_;
    ::server::TSelf* self_;
    ::server::TUsers* users_;
    ::server::TFriendsAdd* friends_add_;
    ::server::TFriendsRemove* friends_remove_;
    ::server::TFriendsBlock* friends_block_;
    ::server::TFriendsList* friends_list_;
    ::server::TFriends* friends_;
    ::server::TGroupsCreate* groups_create_;
    ::server::TGroupsUpdate* groups_update_;
    ::server::TGroupsRemove* groups_remove_;
    ::server::TGroupsFetch* groups_fetch_;
    ::server::TGroupsList* groups_list_;
    ::server::TGroupsSelfList* groups_self_list_;
    ::server::TGroupUsersList* group_users_list_;
    ::server::TGroupsJoin* groups_join_;
    ::server::TGroupsLeave* groups_leave_;
    ::server::TGroupUsersAdd* group_users_add_;
    ::server::TGroupUsersKick* group_users_kick_;
    ::server::TGroupUsersPromote* group_users_promote_;
    ::server::TGroups* groups_;
    ::server::TGroupsSelf* groups_self_;
    ::server::TGroupUsers* group_users_;
    ::server::TTopicsJoin* topics_join_;
    ::server::TTopicsLeave* topics_leave_;
    ::server::TTopicMessageSend* topic_message_send_;
    ::server::TTopicMessagesList* topic_messages_list_;
    ::server::TTopics* topics_;
    ::server::TTopicMessageAck* topic_message_ack_;
    ::server::TopicMessage* topic_message_;
    ::server::TTopicMessages* topic_messages_;
    ::server::TopicPresence* topic_presence_;
    ::server::TMatchCreate* match_create_;
    ::server::TMatchesJoin* matches_join_;
    ::server::TMatchesLeave* matches_leave_;
    ::server::MatchDataSend* match_data_send_;
    ::server::TMatch* match_;
    ::server::TMatches* matches_;
    ::server::MatchData* match_data_;
    ::server::MatchPresence* match_presence_;
    ::server::TStorageList* storage_list_;
    ::server::TStorageFetch* storage_fetch_;
    ::server::TStorageWrite* storage_write_;
    ::server::TStorageUpdate* storage_update_;
    ::server::TStorageRemove* storage_remove_;
    ::server::TStorageData* storage_data_;
    ::server::TStorageKeys* storage_keys_;
    ::server::TLeaderboardsList* leaderboards_list_;
    ::server::TLeaderboardRecordsWrite* leaderboard_records_write_;
    ::server::TLeaderboardRecordsFetch* leaderboard_records_fetch_;
    ::server::TLeaderboardRecordsList* leaderboard_records_list_;
    ::server::TLeaderboards* leaderboards_;
    ::server::TLeaderboardRecords* leaderboard_records_;
    ::server::TMatchmakeAdd* matchmake_add_;
    ::server::TMatchmakeRemove* matchmake_remove_;
    ::server::TMatchmakeTicket* matchmake_ticket_;
    ::server::MatchmakeMatched* matchmake_matched_;
    ::server::TRpc* rpc_;
    ::server::TPurchaseValidation* purchase_;
    ::server::TPurchaseRecord* purchase_record_;
    ::server::TNotificationsList* notifications_list_;
    ::server::TNotificationsRemove* notifications_remove_;
    ::server::TNotifications* notifications_;
    ::server::Notifications* live_notifications_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Logout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Logout) */ {
 public:
  inline Logout() : Logout(nullptr) {}
  virtual ~Logout();

  Logout(const Logout& from);
  Logout(Logout&& from) noexcept
    : Logout() {
    *this = ::std::move(from);
  }

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logout& operator=(Logout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logout& default_instance();

  static inline const Logout* internal_default_instance() {
    return reinterpret_cast<const Logout*>(
               &_Logout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Logout& a, Logout& b) {
    a.Swap(&b);
  }
  inline void Swap(Logout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logout* New() const final {
    return CreateMaybeMessage<Logout>(nullptr);
  }

  Logout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Logout";
  }
  protected:
  explicit Logout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.Logout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLink PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLink) */ {
 public:
  inline TLink() : TLink(nullptr) {}
  virtual ~TLink();

  TLink(const TLink& from);
  TLink(TLink&& from) noexcept
    : TLink() {
    *this = ::std::move(from);
  }

  inline TLink& operator=(const TLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLink& operator=(TLink&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLink& default_instance();

  enum IdCase {
    kEmail = 1,
    kFacebook = 2,
    kGoogle = 3,
    kGameCenter = 4,
    kSteam = 5,
    kDevice = 6,
    kCustom = 7,
    ID_NOT_SET = 0,
  };

  static inline const TLink* internal_default_instance() {
    return reinterpret_cast<const TLink*>(
               &_TLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TLink& a, TLink& b) {
    a.Swap(&b);
  }
  inline void Swap(TLink* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLink* New() const final {
    return CreateMaybeMessage<TLink>(nullptr);
  }

  TLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLink& from);
  void MergeFrom(const TLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLink";
  }
  protected:
  explicit TLink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kFacebookFieldNumber = 2,
    kGoogleFieldNumber = 3,
    kGameCenterFieldNumber = 4,
    kSteamFieldNumber = 5,
    kDeviceFieldNumber = 6,
    kCustomFieldNumber = 7,
  };
  // .server.AuthenticateRequest.Email email = 1;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const ::server::AuthenticateRequest_Email& email() const;
  ::server::AuthenticateRequest_Email* release_email();
  ::server::AuthenticateRequest_Email* mutable_email();
  void set_allocated_email(::server::AuthenticateRequest_Email* email);
  private:
  const ::server::AuthenticateRequest_Email& _internal_email() const;
  ::server::AuthenticateRequest_Email* _internal_mutable_email();
  public:
  void unsafe_arena_set_allocated_email(
      ::server::AuthenticateRequest_Email* email);
  ::server::AuthenticateRequest_Email* unsafe_arena_release_email();

  // string facebook = 2;
  private:
  bool _internal_has_facebook() const;
  public:
  void clear_facebook();
  const std::string& facebook() const;
  void set_facebook(const std::string& value);
  void set_facebook(std::string&& value);
  void set_facebook(const char* value);
  void set_facebook(const char* value, size_t size);
  std::string* mutable_facebook();
  std::string* release_facebook();
  void set_allocated_facebook(std::string* facebook);
  private:
  const std::string& _internal_facebook() const;
  void _internal_set_facebook(const std::string& value);
  std::string* _internal_mutable_facebook();
  public:

  // string google = 3;
  private:
  bool _internal_has_google() const;
  public:
  void clear_google();
  const std::string& google() const;
  void set_google(const std::string& value);
  void set_google(std::string&& value);
  void set_google(const char* value);
  void set_google(const char* value, size_t size);
  std::string* mutable_google();
  std::string* release_google();
  void set_allocated_google(std::string* google);
  private:
  const std::string& _internal_google() const;
  void _internal_set_google(const std::string& value);
  std::string* _internal_mutable_google();
  public:

  // .server.AuthenticateRequest.GameCenter game_center = 4;
  bool has_game_center() const;
  private:
  bool _internal_has_game_center() const;
  public:
  void clear_game_center();
  const ::server::AuthenticateRequest_GameCenter& game_center() const;
  ::server::AuthenticateRequest_GameCenter* release_game_center();
  ::server::AuthenticateRequest_GameCenter* mutable_game_center();
  void set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center);
  private:
  const ::server::AuthenticateRequest_GameCenter& _internal_game_center() const;
  ::server::AuthenticateRequest_GameCenter* _internal_mutable_game_center();
  public:
  void unsafe_arena_set_allocated_game_center(
      ::server::AuthenticateRequest_GameCenter* game_center);
  ::server::AuthenticateRequest_GameCenter* unsafe_arena_release_game_center();

  // string steam = 5;
  private:
  bool _internal_has_steam() const;
  public:
  void clear_steam();
  const std::string& steam() const;
  void set_steam(const std::string& value);
  void set_steam(std::string&& value);
  void set_steam(const char* value);
  void set_steam(const char* value, size_t size);
  std::string* mutable_steam();
  std::string* release_steam();
  void set_allocated_steam(std::string* steam);
  private:
  const std::string& _internal_steam() const;
  void _internal_set_steam(const std::string& value);
  std::string* _internal_mutable_steam();
  public:

  // string device = 6;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string custom = 7;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const std::string& custom() const;
  void set_custom(const std::string& value);
  void set_custom(std::string&& value);
  void set_custom(const char* value);
  void set_custom(const char* value, size_t size);
  std::string* mutable_custom();
  std::string* release_custom();
  void set_allocated_custom(std::string* custom);
  private:
  const std::string& _internal_custom() const;
  void _internal_set_custom(const std::string& value);
  std::string* _internal_mutable_custom();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TLink)
 private:
  class _Internal;
  void set_has_email();
  void set_has_facebook();
  void set_has_google();
  void set_has_game_center();
  void set_has_steam();
  void set_has_device();
  void set_has_custom();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::server::AuthenticateRequest_Email* email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facebook_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr google_;
    ::server::AuthenticateRequest_GameCenter* game_center_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steam_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TUnlink PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TUnlink) */ {
 public:
  inline TUnlink() : TUnlink(nullptr) {}
  virtual ~TUnlink();

  TUnlink(const TUnlink& from);
  TUnlink(TUnlink&& from) noexcept
    : TUnlink() {
    *this = ::std::move(from);
  }

  inline TUnlink& operator=(const TUnlink& from) {
    CopyFrom(from);
    return *this;
  }
  inline TUnlink& operator=(TUnlink&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TUnlink& default_instance();

  enum IdCase {
    kEmail = 1,
    kFacebook = 2,
    kGoogle = 3,
    kGameCenter = 4,
    kSteam = 5,
    kDevice = 6,
    kCustom = 7,
    ID_NOT_SET = 0,
  };

  static inline const TUnlink* internal_default_instance() {
    return reinterpret_cast<const TUnlink*>(
               &_TUnlink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TUnlink& a, TUnlink& b) {
    a.Swap(&b);
  }
  inline void Swap(TUnlink* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TUnlink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TUnlink* New() const final {
    return CreateMaybeMessage<TUnlink>(nullptr);
  }

  TUnlink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TUnlink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TUnlink& from);
  void MergeFrom(const TUnlink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TUnlink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TUnlink";
  }
  protected:
  explicit TUnlink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kFacebookFieldNumber = 2,
    kGoogleFieldNumber = 3,
    kGameCenterFieldNumber = 4,
    kSteamFieldNumber = 5,
    kDeviceFieldNumber = 6,
    kCustomFieldNumber = 7,
  };
  // string email = 1;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string facebook = 2;
  private:
  bool _internal_has_facebook() const;
  public:
  void clear_facebook();
  const std::string& facebook() const;
  void set_facebook(const std::string& value);
  void set_facebook(std::string&& value);
  void set_facebook(const char* value);
  void set_facebook(const char* value, size_t size);
  std::string* mutable_facebook();
  std::string* release_facebook();
  void set_allocated_facebook(std::string* facebook);
  private:
  const std::string& _internal_facebook() const;
  void _internal_set_facebook(const std::string& value);
  std::string* _internal_mutable_facebook();
  public:

  // string google = 3;
  private:
  bool _internal_has_google() const;
  public:
  void clear_google();
  const std::string& google() const;
  void set_google(const std::string& value);
  void set_google(std::string&& value);
  void set_google(const char* value);
  void set_google(const char* value, size_t size);
  std::string* mutable_google();
  std::string* release_google();
  void set_allocated_google(std::string* google);
  private:
  const std::string& _internal_google() const;
  void _internal_set_google(const std::string& value);
  std::string* _internal_mutable_google();
  public:

  // string game_center = 4;
  private:
  bool _internal_has_game_center() const;
  public:
  void clear_game_center();
  const std::string& game_center() const;
  void set_game_center(const std::string& value);
  void set_game_center(std::string&& value);
  void set_game_center(const char* value);
  void set_game_center(const char* value, size_t size);
  std::string* mutable_game_center();
  std::string* release_game_center();
  void set_allocated_game_center(std::string* game_center);
  private:
  const std::string& _internal_game_center() const;
  void _internal_set_game_center(const std::string& value);
  std::string* _internal_mutable_game_center();
  public:

  // string steam = 5;
  private:
  bool _internal_has_steam() const;
  public:
  void clear_steam();
  const std::string& steam() const;
  void set_steam(const std::string& value);
  void set_steam(std::string&& value);
  void set_steam(const char* value);
  void set_steam(const char* value, size_t size);
  std::string* mutable_steam();
  std::string* release_steam();
  void set_allocated_steam(std::string* steam);
  private:
  const std::string& _internal_steam() const;
  void _internal_set_steam(const std::string& value);
  std::string* _internal_mutable_steam();
  public:

  // string device = 6;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string custom = 7;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const std::string& custom() const;
  void set_custom(const std::string& value);
  void set_custom(std::string&& value);
  void set_custom(const char* value);
  void set_custom(const char* value, size_t size);
  std::string* mutable_custom();
  std::string* release_custom();
  void set_allocated_custom(std::string* custom);
  private:
  const std::string& _internal_custom() const;
  void _internal_set_custom(const std::string& value);
  std::string* _internal_mutable_custom();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TUnlink)
 private:
  class _Internal;
  void set_has_email();
  void set_has_facebook();
  void set_has_google();
  void set_has_game_center();
  void set_has_steam();
  void set_has_device();
  void set_has_custom();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facebook_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr google_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_center_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steam_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.User) */ {
 public:
  inline User() : User(nullptr) {}
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHandleFieldNumber = 2,
    kFullnameFieldNumber = 3,
    kAvatarUrlFieldNumber = 4,
    kLangFieldNumber = 5,
    kLocationFieldNumber = 6,
    kTimezoneFieldNumber = 7,
    kMetadataFieldNumber = 8,
    kCreatedAtFieldNumber = 9,
    kUpdatedAtFieldNumber = 10,
    kLastOnlineAtFieldNumber = 11,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string handle = 2;
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // string fullname = 3;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // string avatar_url = 4;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string lang = 5;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string location = 6;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string timezone = 7;
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // string metadata = 8;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // int64 created_at = 9;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 10;
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 last_online_at = 11;
  void clear_last_online_at();
  ::PROTOBUF_NAMESPACE_ID::int64 last_online_at() const;
  void set_last_online_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_online_at() const;
  void _internal_set_last_online_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_online_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Self PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Self) */ {
 public:
  inline Self() : Self(nullptr) {}
  virtual ~Self();

  Self(const Self& from);
  Self(Self&& from) noexcept
    : Self() {
    *this = ::std::move(from);
  }

  inline Self& operator=(const Self& from) {
    CopyFrom(from);
    return *this;
  }
  inline Self& operator=(Self&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Self& default_instance();

  static inline const Self* internal_default_instance() {
    return reinterpret_cast<const Self*>(
               &_Self_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Self& a, Self& b) {
    a.Swap(&b);
  }
  inline void Swap(Self* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Self* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Self* New() const final {
    return CreateMaybeMessage<Self>(nullptr);
  }

  Self* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Self>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Self& from);
  void MergeFrom(const Self& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Self* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Self";
  }
  protected:
  explicit Self(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIdsFieldNumber = 4,
    kEmailFieldNumber = 3,
    kFacebookIdFieldNumber = 5,
    kGoogleIdFieldNumber = 6,
    kGamecenterIdFieldNumber = 7,
    kSteamIdFieldNumber = 8,
    kCustomIdFieldNumber = 9,
    kUserFieldNumber = 1,
    kVerifiedFieldNumber = 2,
  };
  // repeated string device_ids = 4;
  int device_ids_size() const;
  private:
  int _internal_device_ids_size() const;
  public:
  void clear_device_ids();
  const std::string& device_ids(int index) const;
  std::string* mutable_device_ids(int index);
  void set_device_ids(int index, const std::string& value);
  void set_device_ids(int index, std::string&& value);
  void set_device_ids(int index, const char* value);
  void set_device_ids(int index, const char* value, size_t size);
  std::string* add_device_ids();
  void add_device_ids(const std::string& value);
  void add_device_ids(std::string&& value);
  void add_device_ids(const char* value);
  void add_device_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_ids();
  private:
  const std::string& _internal_device_ids(int index) const;
  std::string* _internal_add_device_ids();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string facebook_id = 5;
  void clear_facebook_id();
  const std::string& facebook_id() const;
  void set_facebook_id(const std::string& value);
  void set_facebook_id(std::string&& value);
  void set_facebook_id(const char* value);
  void set_facebook_id(const char* value, size_t size);
  std::string* mutable_facebook_id();
  std::string* release_facebook_id();
  void set_allocated_facebook_id(std::string* facebook_id);
  private:
  const std::string& _internal_facebook_id() const;
  void _internal_set_facebook_id(const std::string& value);
  std::string* _internal_mutable_facebook_id();
  public:

  // string google_id = 6;
  void clear_google_id();
  const std::string& google_id() const;
  void set_google_id(const std::string& value);
  void set_google_id(std::string&& value);
  void set_google_id(const char* value);
  void set_google_id(const char* value, size_t size);
  std::string* mutable_google_id();
  std::string* release_google_id();
  void set_allocated_google_id(std::string* google_id);
  private:
  const std::string& _internal_google_id() const;
  void _internal_set_google_id(const std::string& value);
  std::string* _internal_mutable_google_id();
  public:

  // string gamecenter_id = 7;
  void clear_gamecenter_id();
  const std::string& gamecenter_id() const;
  void set_gamecenter_id(const std::string& value);
  void set_gamecenter_id(std::string&& value);
  void set_gamecenter_id(const char* value);
  void set_gamecenter_id(const char* value, size_t size);
  std::string* mutable_gamecenter_id();
  std::string* release_gamecenter_id();
  void set_allocated_gamecenter_id(std::string* gamecenter_id);
  private:
  const std::string& _internal_gamecenter_id() const;
  void _internal_set_gamecenter_id(const std::string& value);
  std::string* _internal_mutable_gamecenter_id();
  public:

  // string steam_id = 8;
  void clear_steam_id();
  const std::string& steam_id() const;
  void set_steam_id(const std::string& value);
  void set_steam_id(std::string&& value);
  void set_steam_id(const char* value);
  void set_steam_id(const char* value, size_t size);
  std::string* mutable_steam_id();
  std::string* release_steam_id();
  void set_allocated_steam_id(std::string* steam_id);
  private:
  const std::string& _internal_steam_id() const;
  void _internal_set_steam_id(const std::string& value);
  std::string* _internal_mutable_steam_id();
  public:

  // string custom_id = 9;
  void clear_custom_id();
  const std::string& custom_id() const;
  void set_custom_id(const std::string& value);
  void set_custom_id(std::string&& value);
  void set_custom_id(const char* value);
  void set_custom_id(const char* value, size_t size);
  std::string* mutable_custom_id();
  std::string* release_custom_id();
  void set_allocated_custom_id(std::string* custom_id);
  private:
  const std::string& _internal_custom_id() const;
  void _internal_set_custom_id(const std::string& value);
  std::string* _internal_mutable_custom_id();
  public:

  // .server.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::server::User& user() const;
  ::server::User* release_user();
  ::server::User* mutable_user();
  void set_allocated_user(::server::User* user);
  private:
  const ::server::User& _internal_user() const;
  ::server::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::server::User* user);
  ::server::User* unsafe_arena_release_user();

  // bool verified = 2;
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.Self)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr facebook_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr google_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamecenter_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr steam_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_id_;
  ::server::User* user_;
  bool verified_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TSelfFetch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TSelfFetch) */ {
 public:
  inline TSelfFetch() : TSelfFetch(nullptr) {}
  virtual ~TSelfFetch();

  TSelfFetch(const TSelfFetch& from);
  TSelfFetch(TSelfFetch&& from) noexcept
    : TSelfFetch() {
    *this = ::std::move(from);
  }

  inline TSelfFetch& operator=(const TSelfFetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSelfFetch& operator=(TSelfFetch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSelfFetch& default_instance();

  static inline const TSelfFetch* internal_default_instance() {
    return reinterpret_cast<const TSelfFetch*>(
               &_TSelfFetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TSelfFetch& a, TSelfFetch& b) {
    a.Swap(&b);
  }
  inline void Swap(TSelfFetch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSelfFetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSelfFetch* New() const final {
    return CreateMaybeMessage<TSelfFetch>(nullptr);
  }

  TSelfFetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSelfFetch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSelfFetch& from);
  void MergeFrom(const TSelfFetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSelfFetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TSelfFetch";
  }
  protected:
  explicit TSelfFetch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.TSelfFetch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TSelf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TSelf) */ {
 public:
  inline TSelf() : TSelf(nullptr) {}
  virtual ~TSelf();

  TSelf(const TSelf& from);
  TSelf(TSelf&& from) noexcept
    : TSelf() {
    *this = ::std::move(from);
  }

  inline TSelf& operator=(const TSelf& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSelf& operator=(TSelf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSelf& default_instance();

  static inline const TSelf* internal_default_instance() {
    return reinterpret_cast<const TSelf*>(
               &_TSelf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TSelf& a, TSelf& b) {
    a.Swap(&b);
  }
  inline void Swap(TSelf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSelf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSelf* New() const final {
    return CreateMaybeMessage<TSelf>(nullptr);
  }

  TSelf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSelf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSelf& from);
  void MergeFrom(const TSelf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSelf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TSelf";
  }
  protected:
  explicit TSelf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfFieldNumber = 1,
  };
  // .server.Self self = 1;
  bool has_self() const;
  private:
  bool _internal_has_self() const;
  public:
  void clear_self();
  const ::server::Self& self() const;
  ::server::Self* release_self();
  ::server::Self* mutable_self();
  void set_allocated_self(::server::Self* self);
  private:
  const ::server::Self& _internal_self() const;
  ::server::Self* _internal_mutable_self();
  public:
  void unsafe_arena_set_allocated_self(
      ::server::Self* self);
  ::server::Self* unsafe_arena_release_self();

  // @@protoc_insertion_point(class_scope:server.TSelf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::server::Self* self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TSelfUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TSelfUpdate) */ {
 public:
  inline TSelfUpdate() : TSelfUpdate(nullptr) {}
  virtual ~TSelfUpdate();

  TSelfUpdate(const TSelfUpdate& from);
  TSelfUpdate(TSelfUpdate&& from) noexcept
    : TSelfUpdate() {
    *this = ::std::move(from);
  }

  inline TSelfUpdate& operator=(const TSelfUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSelfUpdate& operator=(TSelfUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSelfUpdate& default_instance();

  static inline const TSelfUpdate* internal_default_instance() {
    return reinterpret_cast<const TSelfUpdate*>(
               &_TSelfUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TSelfUpdate& a, TSelfUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TSelfUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSelfUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSelfUpdate* New() const final {
    return CreateMaybeMessage<TSelfUpdate>(nullptr);
  }

  TSelfUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSelfUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSelfUpdate& from);
  void MergeFrom(const TSelfUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSelfUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TSelfUpdate";
  }
  protected:
  explicit TSelfUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandleFieldNumber = 1,
    kFullnameFieldNumber = 2,
    kTimezoneFieldNumber = 3,
    kLocationFieldNumber = 4,
    kLangFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kAvatarUrlFieldNumber = 7,
  };
  // string handle = 1;
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // string fullname = 2;
  void clear_fullname();
  const std::string& fullname() const;
  void set_fullname(const std::string& value);
  void set_fullname(std::string&& value);
  void set_fullname(const char* value);
  void set_fullname(const char* value, size_t size);
  std::string* mutable_fullname();
  std::string* release_fullname();
  void set_allocated_fullname(std::string* fullname);
  private:
  const std::string& _internal_fullname() const;
  void _internal_set_fullname(const std::string& value);
  std::string* _internal_mutable_fullname();
  public:

  // string timezone = 3;
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // string location = 4;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string lang = 5;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string metadata = 6;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // string avatar_url = 7;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // @@protoc_insertion_point(class_scope:server.TSelfUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fullname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TUsersFetch_UsersFetch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TUsersFetch.UsersFetch) */ {
 public:
  inline TUsersFetch_UsersFetch() : TUsersFetch_UsersFetch(nullptr) {}
  virtual ~TUsersFetch_UsersFetch();

  TUsersFetch_UsersFetch(const TUsersFetch_UsersFetch& from);
  TUsersFetch_UsersFetch(TUsersFetch_UsersFetch&& from) noexcept
    : TUsersFetch_UsersFetch() {
    *this = ::std::move(from);
  }

  inline TUsersFetch_UsersFetch& operator=(const TUsersFetch_UsersFetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TUsersFetch_UsersFetch& operator=(TUsersFetch_UsersFetch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TUsersFetch_UsersFetch& default_instance();

  enum IdCase {
    kUserId = 1,
    kHandle = 2,
    ID_NOT_SET = 0,
  };

  static inline const TUsersFetch_UsersFetch* internal_default_instance() {
    return reinterpret_cast<const TUsersFetch_UsersFetch*>(
               &_TUsersFetch_UsersFetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TUsersFetch_UsersFetch& a, TUsersFetch_UsersFetch& b) {
    a.Swap(&b);
  }
  inline void Swap(TUsersFetch_UsersFetch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TUsersFetch_UsersFetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TUsersFetch_UsersFetch* New() const final {
    return CreateMaybeMessage<TUsersFetch_UsersFetch>(nullptr);
  }

  TUsersFetch_UsersFetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TUsersFetch_UsersFetch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TUsersFetch_UsersFetch& from);
  void MergeFrom(const TUsersFetch_UsersFetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TUsersFetch_UsersFetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TUsersFetch.UsersFetch";
  }
  protected:
  explicit TUsersFetch_UsersFetch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kHandleFieldNumber = 2,
  };
  // string user_id = 1;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string handle = 2;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TUsersFetch.UsersFetch)
 private:
  class _Internal;
  void set_has_user_id();
  void set_has_handle();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TUsersFetch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TUsersFetch) */ {
 public:
  inline TUsersFetch() : TUsersFetch(nullptr) {}
  virtual ~TUsersFetch();

  TUsersFetch(const TUsersFetch& from);
  TUsersFetch(TUsersFetch&& from) noexcept
    : TUsersFetch() {
    *this = ::std::move(from);
  }

  inline TUsersFetch& operator=(const TUsersFetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TUsersFetch& operator=(TUsersFetch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TUsersFetch& default_instance();

  static inline const TUsersFetch* internal_default_instance() {
    return reinterpret_cast<const TUsersFetch*>(
               &_TUsersFetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TUsersFetch& a, TUsersFetch& b) {
    a.Swap(&b);
  }
  inline void Swap(TUsersFetch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TUsersFetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TUsersFetch* New() const final {
    return CreateMaybeMessage<TUsersFetch>(nullptr);
  }

  TUsersFetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TUsersFetch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TUsersFetch& from);
  void MergeFrom(const TUsersFetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TUsersFetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TUsersFetch";
  }
  protected:
  explicit TUsersFetch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TUsersFetch_UsersFetch UsersFetch;

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .server.TUsersFetch.UsersFetch users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::server::TUsersFetch_UsersFetch* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >*
      mutable_users();
  private:
  const ::server::TUsersFetch_UsersFetch& _internal_users(int index) const;
  ::server::TUsersFetch_UsersFetch* _internal_add_users();
  public:
  const ::server::TUsersFetch_UsersFetch& users(int index) const;
  ::server::TUsersFetch_UsersFetch* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >&
      users() const;

  // @@protoc_insertion_point(class_scope:server.TUsersFetch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TUsersFetch_UsersFetch > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TUsers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TUsers) */ {
 public:
  inline TUsers() : TUsers(nullptr) {}
  virtual ~TUsers();

  TUsers(const TUsers& from);
  TUsers(TUsers&& from) noexcept
    : TUsers() {
    *this = ::std::move(from);
  }

  inline TUsers& operator=(const TUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline TUsers& operator=(TUsers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TUsers& default_instance();

  static inline const TUsers* internal_default_instance() {
    return reinterpret_cast<const TUsers*>(
               &_TUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TUsers& a, TUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(TUsers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TUsers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TUsers* New() const final {
    return CreateMaybeMessage<TUsers>(nullptr);
  }

  TUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TUsers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TUsers& from);
  void MergeFrom(const TUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TUsers";
  }
  protected:
  explicit TUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .server.User users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::server::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::User >*
      mutable_users();
  private:
  const ::server::User& _internal_users(int index) const;
  ::server::User* _internal_add_users();
  public:
  const ::server::User& users(int index) const;
  ::server::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::User >&
      users() const;

  // @@protoc_insertion_point(class_scope:server.TUsers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::User > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Friend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Friend) */ {
 public:
  inline Friend() : Friend(nullptr) {}
  virtual ~Friend();

  Friend(const Friend& from);
  Friend(Friend&& from) noexcept
    : Friend() {
    *this = ::std::move(from);
  }

  inline Friend& operator=(const Friend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Friend& operator=(Friend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Friend& default_instance();

  static inline const Friend* internal_default_instance() {
    return reinterpret_cast<const Friend*>(
               &_Friend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Friend& a, Friend& b) {
    a.Swap(&b);
  }
  inline void Swap(Friend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Friend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Friend* New() const final {
    return CreateMaybeMessage<Friend>(nullptr);
  }

  Friend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Friend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Friend& from);
  void MergeFrom(const Friend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Friend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Friend";
  }
  protected:
  explicit Friend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .server.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::server::User& user() const;
  ::server::User* release_user();
  ::server::User* mutable_user();
  void set_allocated_user(::server::User* user);
  private:
  const ::server::User& _internal_user() const;
  ::server::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::server::User* user);
  ::server::User* unsafe_arena_release_user();

  // int64 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.Friend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::server::User* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TFriendsAdd_FriendsAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TFriendsAdd.FriendsAdd) */ {
 public:
  inline TFriendsAdd_FriendsAdd() : TFriendsAdd_FriendsAdd(nullptr) {}
  virtual ~TFriendsAdd_FriendsAdd();

  TFriendsAdd_FriendsAdd(const TFriendsAdd_FriendsAdd& from);
  TFriendsAdd_FriendsAdd(TFriendsAdd_FriendsAdd&& from) noexcept
    : TFriendsAdd_FriendsAdd() {
    *this = ::std::move(from);
  }

  inline TFriendsAdd_FriendsAdd& operator=(const TFriendsAdd_FriendsAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFriendsAdd_FriendsAdd& operator=(TFriendsAdd_FriendsAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TFriendsAdd_FriendsAdd& default_instance();

  enum IdCase {
    kUserId = 1,
    kHandle = 2,
    ID_NOT_SET = 0,
  };

  static inline const TFriendsAdd_FriendsAdd* internal_default_instance() {
    return reinterpret_cast<const TFriendsAdd_FriendsAdd*>(
               &_TFriendsAdd_FriendsAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TFriendsAdd_FriendsAdd& a, TFriendsAdd_FriendsAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(TFriendsAdd_FriendsAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFriendsAdd_FriendsAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFriendsAdd_FriendsAdd* New() const final {
    return CreateMaybeMessage<TFriendsAdd_FriendsAdd>(nullptr);
  }

  TFriendsAdd_FriendsAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFriendsAdd_FriendsAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFriendsAdd_FriendsAdd& from);
  void MergeFrom(const TFriendsAdd_FriendsAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFriendsAdd_FriendsAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TFriendsAdd.FriendsAdd";
  }
  protected:
  explicit TFriendsAdd_FriendsAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kHandleFieldNumber = 2,
  };
  // string user_id = 1;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string handle = 2;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TFriendsAdd.FriendsAdd)
 private:
  class _Internal;
  void set_has_user_id();
  void set_has_handle();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TFriendsAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TFriendsAdd) */ {
 public:
  inline TFriendsAdd() : TFriendsAdd(nullptr) {}
  virtual ~TFriendsAdd();

  TFriendsAdd(const TFriendsAdd& from);
  TFriendsAdd(TFriendsAdd&& from) noexcept
    : TFriendsAdd() {
    *this = ::std::move(from);
  }

  inline TFriendsAdd& operator=(const TFriendsAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFriendsAdd& operator=(TFriendsAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TFriendsAdd& default_instance();

  static inline const TFriendsAdd* internal_default_instance() {
    return reinterpret_cast<const TFriendsAdd*>(
               &_TFriendsAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TFriendsAdd& a, TFriendsAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(TFriendsAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFriendsAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFriendsAdd* New() const final {
    return CreateMaybeMessage<TFriendsAdd>(nullptr);
  }

  TFriendsAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFriendsAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFriendsAdd& from);
  void MergeFrom(const TFriendsAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFriendsAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TFriendsAdd";
  }
  protected:
  explicit TFriendsAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TFriendsAdd_FriendsAdd FriendsAdd;

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .server.TFriendsAdd.FriendsAdd friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::server::TFriendsAdd_FriendsAdd* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >*
      mutable_friends();
  private:
  const ::server::TFriendsAdd_FriendsAdd& _internal_friends(int index) const;
  ::server::TFriendsAdd_FriendsAdd* _internal_add_friends();
  public:
  const ::server::TFriendsAdd_FriendsAdd& friends(int index) const;
  ::server::TFriendsAdd_FriendsAdd* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >&
      friends() const;

  // @@protoc_insertion_point(class_scope:server.TFriendsAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TFriendsRemove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TFriendsRemove) */ {
 public:
  inline TFriendsRemove() : TFriendsRemove(nullptr) {}
  virtual ~TFriendsRemove();

  TFriendsRemove(const TFriendsRemove& from);
  TFriendsRemove(TFriendsRemove&& from) noexcept
    : TFriendsRemove() {
    *this = ::std::move(from);
  }

  inline TFriendsRemove& operator=(const TFriendsRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFriendsRemove& operator=(TFriendsRemove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TFriendsRemove& default_instance();

  static inline const TFriendsRemove* internal_default_instance() {
    return reinterpret_cast<const TFriendsRemove*>(
               &_TFriendsRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TFriendsRemove& a, TFriendsRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(TFriendsRemove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFriendsRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFriendsRemove* New() const final {
    return CreateMaybeMessage<TFriendsRemove>(nullptr);
  }

  TFriendsRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFriendsRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFriendsRemove& from);
  void MergeFrom(const TFriendsRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFriendsRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TFriendsRemove";
  }
  protected:
  explicit TFriendsRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 1,
  };
  // repeated string user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // @@protoc_insertion_point(class_scope:server.TFriendsRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TFriendsBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TFriendsBlock) */ {
 public:
  inline TFriendsBlock() : TFriendsBlock(nullptr) {}
  virtual ~TFriendsBlock();

  TFriendsBlock(const TFriendsBlock& from);
  TFriendsBlock(TFriendsBlock&& from) noexcept
    : TFriendsBlock() {
    *this = ::std::move(from);
  }

  inline TFriendsBlock& operator=(const TFriendsBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFriendsBlock& operator=(TFriendsBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TFriendsBlock& default_instance();

  static inline const TFriendsBlock* internal_default_instance() {
    return reinterpret_cast<const TFriendsBlock*>(
               &_TFriendsBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TFriendsBlock& a, TFriendsBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(TFriendsBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFriendsBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFriendsBlock* New() const final {
    return CreateMaybeMessage<TFriendsBlock>(nullptr);
  }

  TFriendsBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFriendsBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFriendsBlock& from);
  void MergeFrom(const TFriendsBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFriendsBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TFriendsBlock";
  }
  protected:
  explicit TFriendsBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 1,
  };
  // repeated string user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // @@protoc_insertion_point(class_scope:server.TFriendsBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TFriendsList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TFriendsList) */ {
 public:
  inline TFriendsList() : TFriendsList(nullptr) {}
  virtual ~TFriendsList();

  TFriendsList(const TFriendsList& from);
  TFriendsList(TFriendsList&& from) noexcept
    : TFriendsList() {
    *this = ::std::move(from);
  }

  inline TFriendsList& operator=(const TFriendsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFriendsList& operator=(TFriendsList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TFriendsList& default_instance();

  static inline const TFriendsList* internal_default_instance() {
    return reinterpret_cast<const TFriendsList*>(
               &_TFriendsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TFriendsList& a, TFriendsList& b) {
    a.Swap(&b);
  }
  inline void Swap(TFriendsList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFriendsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFriendsList* New() const final {
    return CreateMaybeMessage<TFriendsList>(nullptr);
  }

  TFriendsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFriendsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFriendsList& from);
  void MergeFrom(const TFriendsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFriendsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TFriendsList";
  }
  protected:
  explicit TFriendsList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.TFriendsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TFriends PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TFriends) */ {
 public:
  inline TFriends() : TFriends(nullptr) {}
  virtual ~TFriends();

  TFriends(const TFriends& from);
  TFriends(TFriends&& from) noexcept
    : TFriends() {
    *this = ::std::move(from);
  }

  inline TFriends& operator=(const TFriends& from) {
    CopyFrom(from);
    return *this;
  }
  inline TFriends& operator=(TFriends&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TFriends& default_instance();

  static inline const TFriends* internal_default_instance() {
    return reinterpret_cast<const TFriends*>(
               &_TFriends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(TFriends& a, TFriends& b) {
    a.Swap(&b);
  }
  inline void Swap(TFriends* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TFriends* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TFriends* New() const final {
    return CreateMaybeMessage<TFriends>(nullptr);
  }

  TFriends* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TFriends>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TFriends& from);
  void MergeFrom(const TFriends& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TFriends* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TFriends";
  }
  protected:
  explicit TFriends(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .server.Friend friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::server::Friend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Friend >*
      mutable_friends();
  private:
  const ::server::Friend& _internal_friends(int index) const;
  ::server::Friend* _internal_add_friends();
  public:
  const ::server::Friend& friends(int index) const;
  ::server::Friend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Friend >&
      friends() const;

  // @@protoc_insertion_point(class_scope:server.TFriends)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Friend > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Group PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  virtual ~Group();

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Group& default_instance();

  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Group* New() const final {
    return CreateMaybeMessage<Group>(nullptr);
  }

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Group& from);
  void MergeFrom(const Group& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCreatorIdFieldNumber = 3,
    kNameFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kAvatarUrlFieldNumber = 6,
    kLangFieldNumber = 7,
    kMetadataFieldNumber = 9,
    kUtcOffsetMsFieldNumber = 8,
    kCountFieldNumber = 10,
    kCreatedAtFieldNumber = 11,
    kUpdatedAtFieldNumber = 12,
    kPrivateFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string creator_id = 3;
  void clear_creator_id();
  const std::string& creator_id() const;
  void set_creator_id(const std::string& value);
  void set_creator_id(std::string&& value);
  void set_creator_id(const char* value);
  void set_creator_id(const char* value, size_t size);
  std::string* mutable_creator_id();
  std::string* release_creator_id();
  void set_allocated_creator_id(std::string* creator_id);
  private:
  const std::string& _internal_creator_id() const;
  void _internal_set_creator_id(const std::string& value);
  std::string* _internal_mutable_creator_id();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string avatar_url = 6;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string lang = 7;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string metadata = 9;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // int64 utc_offset_ms = 8;
  void clear_utc_offset_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 utc_offset_ms() const;
  void set_utc_offset_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_utc_offset_ms() const;
  void _internal_set_utc_offset_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 count = 10;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 created_at = 11;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 12;
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool private = 2;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 utc_offset_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  bool private__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsCreate_GroupCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsCreate.GroupCreate) */ {
 public:
  inline TGroupsCreate_GroupCreate() : TGroupsCreate_GroupCreate(nullptr) {}
  virtual ~TGroupsCreate_GroupCreate();

  TGroupsCreate_GroupCreate(const TGroupsCreate_GroupCreate& from);
  TGroupsCreate_GroupCreate(TGroupsCreate_GroupCreate&& from) noexcept
    : TGroupsCreate_GroupCreate() {
    *this = ::std::move(from);
  }

  inline TGroupsCreate_GroupCreate& operator=(const TGroupsCreate_GroupCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsCreate_GroupCreate& operator=(TGroupsCreate_GroupCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsCreate_GroupCreate& default_instance();

  static inline const TGroupsCreate_GroupCreate* internal_default_instance() {
    return reinterpret_cast<const TGroupsCreate_GroupCreate*>(
               &_TGroupsCreate_GroupCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TGroupsCreate_GroupCreate& a, TGroupsCreate_GroupCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsCreate_GroupCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsCreate_GroupCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsCreate_GroupCreate* New() const final {
    return CreateMaybeMessage<TGroupsCreate_GroupCreate>(nullptr);
  }

  TGroupsCreate_GroupCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsCreate_GroupCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsCreate_GroupCreate& from);
  void MergeFrom(const TGroupsCreate_GroupCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsCreate_GroupCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsCreate.GroupCreate";
  }
  protected:
  explicit TGroupsCreate_GroupCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kAvatarUrlFieldNumber = 3,
    kLangFieldNumber = 4,
    kMetadataFieldNumber = 5,
    kPrivateFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string avatar_url = 3;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string lang = 4;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string metadata = 5;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // bool private = 6;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupsCreate.GroupCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  bool private__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsCreate) */ {
 public:
  inline TGroupsCreate() : TGroupsCreate(nullptr) {}
  virtual ~TGroupsCreate();

  TGroupsCreate(const TGroupsCreate& from);
  TGroupsCreate(TGroupsCreate&& from) noexcept
    : TGroupsCreate() {
    *this = ::std::move(from);
  }

  inline TGroupsCreate& operator=(const TGroupsCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsCreate& operator=(TGroupsCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsCreate& default_instance();

  static inline const TGroupsCreate* internal_default_instance() {
    return reinterpret_cast<const TGroupsCreate*>(
               &_TGroupsCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(TGroupsCreate& a, TGroupsCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsCreate* New() const final {
    return CreateMaybeMessage<TGroupsCreate>(nullptr);
  }

  TGroupsCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsCreate& from);
  void MergeFrom(const TGroupsCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsCreate";
  }
  protected:
  explicit TGroupsCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TGroupsCreate_GroupCreate GroupCreate;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .server.TGroupsCreate.GroupCreate groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::server::TGroupsCreate_GroupCreate* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >*
      mutable_groups();
  private:
  const ::server::TGroupsCreate_GroupCreate& _internal_groups(int index) const;
  ::server::TGroupsCreate_GroupCreate* _internal_add_groups();
  public:
  const ::server::TGroupsCreate_GroupCreate& groups(int index) const;
  ::server::TGroupsCreate_GroupCreate* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >&
      groups() const;

  // @@protoc_insertion_point(class_scope:server.TGroupsCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsUpdate_GroupUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsUpdate.GroupUpdate) */ {
 public:
  inline TGroupsUpdate_GroupUpdate() : TGroupsUpdate_GroupUpdate(nullptr) {}
  virtual ~TGroupsUpdate_GroupUpdate();

  TGroupsUpdate_GroupUpdate(const TGroupsUpdate_GroupUpdate& from);
  TGroupsUpdate_GroupUpdate(TGroupsUpdate_GroupUpdate&& from) noexcept
    : TGroupsUpdate_GroupUpdate() {
    *this = ::std::move(from);
  }

  inline TGroupsUpdate_GroupUpdate& operator=(const TGroupsUpdate_GroupUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsUpdate_GroupUpdate& operator=(TGroupsUpdate_GroupUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsUpdate_GroupUpdate& default_instance();

  static inline const TGroupsUpdate_GroupUpdate* internal_default_instance() {
    return reinterpret_cast<const TGroupsUpdate_GroupUpdate*>(
               &_TGroupsUpdate_GroupUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TGroupsUpdate_GroupUpdate& a, TGroupsUpdate_GroupUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsUpdate_GroupUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsUpdate_GroupUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsUpdate_GroupUpdate* New() const final {
    return CreateMaybeMessage<TGroupsUpdate_GroupUpdate>(nullptr);
  }

  TGroupsUpdate_GroupUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsUpdate_GroupUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsUpdate_GroupUpdate& from);
  void MergeFrom(const TGroupsUpdate_GroupUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsUpdate_GroupUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsUpdate.GroupUpdate";
  }
  protected:
  explicit TGroupsUpdate_GroupUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kAvatarUrlFieldNumber = 5,
    kLangFieldNumber = 6,
    kMetadataFieldNumber = 7,
    kPrivateFieldNumber = 2,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string avatar_url = 5;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  void set_avatar_url(const std::string& value);
  void set_avatar_url(std::string&& value);
  void set_avatar_url(const char* value);
  void set_avatar_url(const char* value, size_t size);
  std::string* mutable_avatar_url();
  std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // string lang = 6;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string metadata = 7;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // bool private = 2;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupsUpdate.GroupUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  bool private__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsUpdate) */ {
 public:
  inline TGroupsUpdate() : TGroupsUpdate(nullptr) {}
  virtual ~TGroupsUpdate();

  TGroupsUpdate(const TGroupsUpdate& from);
  TGroupsUpdate(TGroupsUpdate&& from) noexcept
    : TGroupsUpdate() {
    *this = ::std::move(from);
  }

  inline TGroupsUpdate& operator=(const TGroupsUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsUpdate& operator=(TGroupsUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsUpdate& default_instance();

  static inline const TGroupsUpdate* internal_default_instance() {
    return reinterpret_cast<const TGroupsUpdate*>(
               &_TGroupsUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TGroupsUpdate& a, TGroupsUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsUpdate* New() const final {
    return CreateMaybeMessage<TGroupsUpdate>(nullptr);
  }

  TGroupsUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsUpdate& from);
  void MergeFrom(const TGroupsUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsUpdate";
  }
  protected:
  explicit TGroupsUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TGroupsUpdate_GroupUpdate GroupUpdate;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::server::TGroupsUpdate_GroupUpdate* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >*
      mutable_groups();
  private:
  const ::server::TGroupsUpdate_GroupUpdate& _internal_groups(int index) const;
  ::server::TGroupsUpdate_GroupUpdate* _internal_add_groups();
  public:
  const ::server::TGroupsUpdate_GroupUpdate& groups(int index) const;
  ::server::TGroupsUpdate_GroupUpdate* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >&
      groups() const;

  // @@protoc_insertion_point(class_scope:server.TGroupsUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsRemove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsRemove) */ {
 public:
  inline TGroupsRemove() : TGroupsRemove(nullptr) {}
  virtual ~TGroupsRemove();

  TGroupsRemove(const TGroupsRemove& from);
  TGroupsRemove(TGroupsRemove&& from) noexcept
    : TGroupsRemove() {
    *this = ::std::move(from);
  }

  inline TGroupsRemove& operator=(const TGroupsRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsRemove& operator=(TGroupsRemove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsRemove& default_instance();

  static inline const TGroupsRemove* internal_default_instance() {
    return reinterpret_cast<const TGroupsRemove*>(
               &_TGroupsRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TGroupsRemove& a, TGroupsRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsRemove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsRemove* New() const final {
    return CreateMaybeMessage<TGroupsRemove>(nullptr);
  }

  TGroupsRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsRemove& from);
  void MergeFrom(const TGroupsRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsRemove";
  }
  protected:
  explicit TGroupsRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdsFieldNumber = 1,
  };
  // repeated string group_ids = 1;
  int group_ids_size() const;
  private:
  int _internal_group_ids_size() const;
  public:
  void clear_group_ids();
  const std::string& group_ids(int index) const;
  std::string* mutable_group_ids(int index);
  void set_group_ids(int index, const std::string& value);
  void set_group_ids(int index, std::string&& value);
  void set_group_ids(int index, const char* value);
  void set_group_ids(int index, const char* value, size_t size);
  std::string* add_group_ids();
  void add_group_ids(const std::string& value);
  void add_group_ids(std::string&& value);
  void add_group_ids(const char* value);
  void add_group_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_ids();
  private:
  const std::string& _internal_group_ids(int index) const;
  std::string* _internal_add_group_ids();
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupsRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsSelfList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsSelfList) */ {
 public:
  inline TGroupsSelfList() : TGroupsSelfList(nullptr) {}
  virtual ~TGroupsSelfList();

  TGroupsSelfList(const TGroupsSelfList& from);
  TGroupsSelfList(TGroupsSelfList&& from) noexcept
    : TGroupsSelfList() {
    *this = ::std::move(from);
  }

  inline TGroupsSelfList& operator=(const TGroupsSelfList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsSelfList& operator=(TGroupsSelfList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsSelfList& default_instance();

  static inline const TGroupsSelfList* internal_default_instance() {
    return reinterpret_cast<const TGroupsSelfList*>(
               &_TGroupsSelfList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TGroupsSelfList& a, TGroupsSelfList& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsSelfList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsSelfList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsSelfList* New() const final {
    return CreateMaybeMessage<TGroupsSelfList>(nullptr);
  }

  TGroupsSelfList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsSelfList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsSelfList& from);
  void MergeFrom(const TGroupsSelfList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsSelfList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsSelfList";
  }
  protected:
  explicit TGroupsSelfList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.TGroupsSelfList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsFetch_GroupFetch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsFetch.GroupFetch) */ {
 public:
  inline TGroupsFetch_GroupFetch() : TGroupsFetch_GroupFetch(nullptr) {}
  virtual ~TGroupsFetch_GroupFetch();

  TGroupsFetch_GroupFetch(const TGroupsFetch_GroupFetch& from);
  TGroupsFetch_GroupFetch(TGroupsFetch_GroupFetch&& from) noexcept
    : TGroupsFetch_GroupFetch() {
    *this = ::std::move(from);
  }

  inline TGroupsFetch_GroupFetch& operator=(const TGroupsFetch_GroupFetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsFetch_GroupFetch& operator=(TGroupsFetch_GroupFetch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsFetch_GroupFetch& default_instance();

  enum IdCase {
    kGroupId = 1,
    kName = 2,
    ID_NOT_SET = 0,
  };

  static inline const TGroupsFetch_GroupFetch* internal_default_instance() {
    return reinterpret_cast<const TGroupsFetch_GroupFetch*>(
               &_TGroupsFetch_GroupFetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TGroupsFetch_GroupFetch& a, TGroupsFetch_GroupFetch& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsFetch_GroupFetch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsFetch_GroupFetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsFetch_GroupFetch* New() const final {
    return CreateMaybeMessage<TGroupsFetch_GroupFetch>(nullptr);
  }

  TGroupsFetch_GroupFetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsFetch_GroupFetch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsFetch_GroupFetch& from);
  void MergeFrom(const TGroupsFetch_GroupFetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsFetch_GroupFetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsFetch.GroupFetch";
  }
  protected:
  explicit TGroupsFetch_GroupFetch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string group_id = 1;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string name = 2;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TGroupsFetch.GroupFetch)
 private:
  class _Internal;
  void set_has_group_id();
  void set_has_name();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsFetch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsFetch) */ {
 public:
  inline TGroupsFetch() : TGroupsFetch(nullptr) {}
  virtual ~TGroupsFetch();

  TGroupsFetch(const TGroupsFetch& from);
  TGroupsFetch(TGroupsFetch&& from) noexcept
    : TGroupsFetch() {
    *this = ::std::move(from);
  }

  inline TGroupsFetch& operator=(const TGroupsFetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsFetch& operator=(TGroupsFetch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsFetch& default_instance();

  static inline const TGroupsFetch* internal_default_instance() {
    return reinterpret_cast<const TGroupsFetch*>(
               &_TGroupsFetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TGroupsFetch& a, TGroupsFetch& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsFetch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsFetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsFetch* New() const final {
    return CreateMaybeMessage<TGroupsFetch>(nullptr);
  }

  TGroupsFetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsFetch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsFetch& from);
  void MergeFrom(const TGroupsFetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsFetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsFetch";
  }
  protected:
  explicit TGroupsFetch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TGroupsFetch_GroupFetch GroupFetch;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .server.TGroupsFetch.GroupFetch groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::server::TGroupsFetch_GroupFetch* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >*
      mutable_groups();
  private:
  const ::server::TGroupsFetch_GroupFetch& _internal_groups(int index) const;
  ::server::TGroupsFetch_GroupFetch* _internal_add_groups();
  public:
  const ::server::TGroupsFetch_GroupFetch& groups(int index) const;
  ::server::TGroupsFetch_GroupFetch* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >&
      groups() const;

  // @@protoc_insertion_point(class_scope:server.TGroupsFetch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsList) */ {
 public:
  inline TGroupsList() : TGroupsList(nullptr) {}
  virtual ~TGroupsList();

  TGroupsList(const TGroupsList& from);
  TGroupsList(TGroupsList&& from) noexcept
    : TGroupsList() {
    *this = ::std::move(from);
  }

  inline TGroupsList& operator=(const TGroupsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsList& operator=(TGroupsList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsList& default_instance();

  enum FilterCase {
    kLang = 3,
    kCreatedAt = 4,
    kCount = 5,
    FILTER_NOT_SET = 0,
  };

  static inline const TGroupsList* internal_default_instance() {
    return reinterpret_cast<const TGroupsList*>(
               &_TGroupsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TGroupsList& a, TGroupsList& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsList* New() const final {
    return CreateMaybeMessage<TGroupsList>(nullptr);
  }

  TGroupsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsList& from);
  void MergeFrom(const TGroupsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsList";
  }
  protected:
  explicit TGroupsList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorFieldNumber = 7,
    kPageLimitFieldNumber = 1,
    kOrderByAscFieldNumber = 2,
    kLangFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kCountFieldNumber = 5,
  };
  // string cursor = 7;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int64 page_limit = 1;
  void clear_page_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 page_limit() const;
  void set_page_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_page_limit() const;
  void _internal_set_page_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool order_by_asc = 2;
  void clear_order_by_asc();
  bool order_by_asc() const;
  void set_order_by_asc(bool value);
  private:
  bool _internal_order_by_asc() const;
  void _internal_set_order_by_asc(bool value);
  public:

  // string lang = 3;
  private:
  bool _internal_has_lang() const;
  public:
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // int64 created_at = 4;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 count = 5;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_filter();
  FilterCase filter_case() const;
  // @@protoc_insertion_point(class_scope:server.TGroupsList)
 private:
  class _Internal;
  void set_has_lang();
  void set_has_created_at();
  void set_has_count();

  inline bool has_filter() const;
  inline void clear_has_filter();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::int64 page_limit_;
  bool order_by_asc_;
  union FilterUnion {
    FilterUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
    ::PROTOBUF_NAMESPACE_ID::int64 count_;
  } filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroups PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroups) */ {
 public:
  inline TGroups() : TGroups(nullptr) {}
  virtual ~TGroups();

  TGroups(const TGroups& from);
  TGroups(TGroups&& from) noexcept
    : TGroups() {
    *this = ::std::move(from);
  }

  inline TGroups& operator=(const TGroups& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroups& operator=(TGroups&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroups& default_instance();

  static inline const TGroups* internal_default_instance() {
    return reinterpret_cast<const TGroups*>(
               &_TGroups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TGroups& a, TGroups& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroups* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroups* New() const final {
    return CreateMaybeMessage<TGroups>(nullptr);
  }

  TGroups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroups>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroups& from);
  void MergeFrom(const TGroups& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroups* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroups";
  }
  protected:
  explicit TGroups(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .server.Group groups = 1;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::server::Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Group >*
      mutable_groups();
  private:
  const ::server::Group& _internal_groups(int index) const;
  ::server::Group* _internal_add_groups();
  public:
  const ::server::Group& groups(int index) const;
  ::server::Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Group >&
      groups() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:server.TGroups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Group > groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsSelf_GroupSelf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsSelf.GroupSelf) */ {
 public:
  inline TGroupsSelf_GroupSelf() : TGroupsSelf_GroupSelf(nullptr) {}
  virtual ~TGroupsSelf_GroupSelf();

  TGroupsSelf_GroupSelf(const TGroupsSelf_GroupSelf& from);
  TGroupsSelf_GroupSelf(TGroupsSelf_GroupSelf&& from) noexcept
    : TGroupsSelf_GroupSelf() {
    *this = ::std::move(from);
  }

  inline TGroupsSelf_GroupSelf& operator=(const TGroupsSelf_GroupSelf& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsSelf_GroupSelf& operator=(TGroupsSelf_GroupSelf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsSelf_GroupSelf& default_instance();

  static inline const TGroupsSelf_GroupSelf* internal_default_instance() {
    return reinterpret_cast<const TGroupsSelf_GroupSelf*>(
               &_TGroupsSelf_GroupSelf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TGroupsSelf_GroupSelf& a, TGroupsSelf_GroupSelf& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsSelf_GroupSelf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsSelf_GroupSelf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsSelf_GroupSelf* New() const final {
    return CreateMaybeMessage<TGroupsSelf_GroupSelf>(nullptr);
  }

  TGroupsSelf_GroupSelf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsSelf_GroupSelf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsSelf_GroupSelf& from);
  void MergeFrom(const TGroupsSelf_GroupSelf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsSelf_GroupSelf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsSelf.GroupSelf";
  }
  protected:
  explicit TGroupsSelf_GroupSelf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .server.Group group = 1;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::server::Group& group() const;
  ::server::Group* release_group();
  ::server::Group* mutable_group();
  void set_allocated_group(::server::Group* group);
  private:
  const ::server::Group& _internal_group() const;
  ::server::Group* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::server::Group* group);
  ::server::Group* unsafe_arena_release_group();

  // int64 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupsSelf.GroupSelf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::server::Group* group_;
  ::PROTOBUF_NAMESPACE_ID::int64 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsSelf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsSelf) */ {
 public:
  inline TGroupsSelf() : TGroupsSelf(nullptr) {}
  virtual ~TGroupsSelf();

  TGroupsSelf(const TGroupsSelf& from);
  TGroupsSelf(TGroupsSelf&& from) noexcept
    : TGroupsSelf() {
    *this = ::std::move(from);
  }

  inline TGroupsSelf& operator=(const TGroupsSelf& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsSelf& operator=(TGroupsSelf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsSelf& default_instance();

  static inline const TGroupsSelf* internal_default_instance() {
    return reinterpret_cast<const TGroupsSelf*>(
               &_TGroupsSelf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TGroupsSelf& a, TGroupsSelf& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsSelf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsSelf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsSelf* New() const final {
    return CreateMaybeMessage<TGroupsSelf>(nullptr);
  }

  TGroupsSelf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsSelf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsSelf& from);
  void MergeFrom(const TGroupsSelf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsSelf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsSelf";
  }
  protected:
  explicit TGroupsSelf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TGroupsSelf_GroupSelf GroupSelf;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsSelfFieldNumber = 1,
  };
  // repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
  int groups_self_size() const;
  private:
  int _internal_groups_self_size() const;
  public:
  void clear_groups_self();
  ::server::TGroupsSelf_GroupSelf* mutable_groups_self(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >*
      mutable_groups_self();
  private:
  const ::server::TGroupsSelf_GroupSelf& _internal_groups_self(int index) const;
  ::server::TGroupsSelf_GroupSelf* _internal_add_groups_self();
  public:
  const ::server::TGroupsSelf_GroupSelf& groups_self(int index) const;
  ::server::TGroupsSelf_GroupSelf* add_groups_self();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >&
      groups_self() const;

  // @@protoc_insertion_point(class_scope:server.TGroupsSelf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf > groups_self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class GroupUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.GroupUser) */ {
 public:
  inline GroupUser() : GroupUser(nullptr) {}
  virtual ~GroupUser();

  GroupUser(const GroupUser& from);
  GroupUser(GroupUser&& from) noexcept
    : GroupUser() {
    *this = ::std::move(from);
  }

  inline GroupUser& operator=(const GroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupUser& operator=(GroupUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroupUser& default_instance();

  static inline const GroupUser* internal_default_instance() {
    return reinterpret_cast<const GroupUser*>(
               &_GroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GroupUser& a, GroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroupUser* New() const final {
    return CreateMaybeMessage<GroupUser>(nullptr);
  }

  GroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroupUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroupUser& from);
  void MergeFrom(const GroupUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.GroupUser";
  }
  protected:
  explicit GroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .server.User user = 1;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::server::User& user() const;
  ::server::User* release_user();
  ::server::User* mutable_user();
  void set_allocated_user(::server::User* user);
  private:
  const ::server::User& _internal_user() const;
  ::server::User* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::server::User* user);
  ::server::User* unsafe_arena_release_user();

  // int64 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int64 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.GroupUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::server::User* user_;
  ::PROTOBUF_NAMESPACE_ID::int64 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupUsersList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersList) */ {
 public:
  inline TGroupUsersList() : TGroupUsersList(nullptr) {}
  virtual ~TGroupUsersList();

  TGroupUsersList(const TGroupUsersList& from);
  TGroupUsersList(TGroupUsersList&& from) noexcept
    : TGroupUsersList() {
    *this = ::std::move(from);
  }

  inline TGroupUsersList& operator=(const TGroupUsersList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupUsersList& operator=(TGroupUsersList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupUsersList& default_instance();

  static inline const TGroupUsersList* internal_default_instance() {
    return reinterpret_cast<const TGroupUsersList*>(
               &_TGroupUsersList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TGroupUsersList& a, TGroupUsersList& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupUsersList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupUsersList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupUsersList* New() const final {
    return CreateMaybeMessage<TGroupUsersList>(nullptr);
  }

  TGroupUsersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupUsersList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupUsersList& from);
  void MergeFrom(const TGroupUsersList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupUsersList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupUsersList";
  }
  protected:
  explicit TGroupUsersList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupUsersList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupUsers PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsers) */ {
 public:
  inline TGroupUsers() : TGroupUsers(nullptr) {}
  virtual ~TGroupUsers();

  TGroupUsers(const TGroupUsers& from);
  TGroupUsers(TGroupUsers&& from) noexcept
    : TGroupUsers() {
    *this = ::std::move(from);
  }

  inline TGroupUsers& operator=(const TGroupUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupUsers& operator=(TGroupUsers&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupUsers& default_instance();

  static inline const TGroupUsers* internal_default_instance() {
    return reinterpret_cast<const TGroupUsers*>(
               &_TGroupUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TGroupUsers& a, TGroupUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupUsers* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupUsers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupUsers* New() const final {
    return CreateMaybeMessage<TGroupUsers>(nullptr);
  }

  TGroupUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupUsers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupUsers& from);
  void MergeFrom(const TGroupUsers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupUsers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupUsers";
  }
  protected:
  explicit TGroupUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .server.GroupUser users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::server::GroupUser* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::GroupUser >*
      mutable_users();
  private:
  const ::server::GroupUser& _internal_users(int index) const;
  ::server::GroupUser* _internal_add_users();
  public:
  const ::server::GroupUser& users(int index) const;
  ::server::GroupUser* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::GroupUser >&
      users() const;

  // @@protoc_insertion_point(class_scope:server.TGroupUsers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::GroupUser > users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsJoin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsJoin) */ {
 public:
  inline TGroupsJoin() : TGroupsJoin(nullptr) {}
  virtual ~TGroupsJoin();

  TGroupsJoin(const TGroupsJoin& from);
  TGroupsJoin(TGroupsJoin&& from) noexcept
    : TGroupsJoin() {
    *this = ::std::move(from);
  }

  inline TGroupsJoin& operator=(const TGroupsJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsJoin& operator=(TGroupsJoin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsJoin& default_instance();

  static inline const TGroupsJoin* internal_default_instance() {
    return reinterpret_cast<const TGroupsJoin*>(
               &_TGroupsJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TGroupsJoin& a, TGroupsJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsJoin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsJoin* New() const final {
    return CreateMaybeMessage<TGroupsJoin>(nullptr);
  }

  TGroupsJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsJoin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsJoin& from);
  void MergeFrom(const TGroupsJoin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsJoin";
  }
  protected:
  explicit TGroupsJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdsFieldNumber = 1,
  };
  // repeated string group_ids = 1;
  int group_ids_size() const;
  private:
  int _internal_group_ids_size() const;
  public:
  void clear_group_ids();
  const std::string& group_ids(int index) const;
  std::string* mutable_group_ids(int index);
  void set_group_ids(int index, const std::string& value);
  void set_group_ids(int index, std::string&& value);
  void set_group_ids(int index, const char* value);
  void set_group_ids(int index, const char* value, size_t size);
  std::string* add_group_ids();
  void add_group_ids(const std::string& value);
  void add_group_ids(std::string&& value);
  void add_group_ids(const char* value);
  void add_group_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_ids();
  private:
  const std::string& _internal_group_ids(int index) const;
  std::string* _internal_add_group_ids();
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupsJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupsLeave PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupsLeave) */ {
 public:
  inline TGroupsLeave() : TGroupsLeave(nullptr) {}
  virtual ~TGroupsLeave();

  TGroupsLeave(const TGroupsLeave& from);
  TGroupsLeave(TGroupsLeave&& from) noexcept
    : TGroupsLeave() {
    *this = ::std::move(from);
  }

  inline TGroupsLeave& operator=(const TGroupsLeave& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupsLeave& operator=(TGroupsLeave&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupsLeave& default_instance();

  static inline const TGroupsLeave* internal_default_instance() {
    return reinterpret_cast<const TGroupsLeave*>(
               &_TGroupsLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TGroupsLeave& a, TGroupsLeave& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupsLeave* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupsLeave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupsLeave* New() const final {
    return CreateMaybeMessage<TGroupsLeave>(nullptr);
  }

  TGroupsLeave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupsLeave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupsLeave& from);
  void MergeFrom(const TGroupsLeave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupsLeave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupsLeave";
  }
  protected:
  explicit TGroupsLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdsFieldNumber = 1,
  };
  // repeated string group_ids = 1;
  int group_ids_size() const;
  private:
  int _internal_group_ids_size() const;
  public:
  void clear_group_ids();
  const std::string& group_ids(int index) const;
  std::string* mutable_group_ids(int index);
  void set_group_ids(int index, const std::string& value);
  void set_group_ids(int index, std::string&& value);
  void set_group_ids(int index, const char* value);
  void set_group_ids(int index, const char* value, size_t size);
  std::string* add_group_ids();
  void add_group_ids(const std::string& value);
  void add_group_ids(std::string&& value);
  void add_group_ids(const char* value);
  void add_group_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_ids();
  private:
  const std::string& _internal_group_ids(int index) const;
  std::string* _internal_add_group_ids();
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupsLeave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupUsersAdd_GroupUserAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersAdd.GroupUserAdd) */ {
 public:
  inline TGroupUsersAdd_GroupUserAdd() : TGroupUsersAdd_GroupUserAdd(nullptr) {}
  virtual ~TGroupUsersAdd_GroupUserAdd();

  TGroupUsersAdd_GroupUserAdd(const TGroupUsersAdd_GroupUserAdd& from);
  TGroupUsersAdd_GroupUserAdd(TGroupUsersAdd_GroupUserAdd&& from) noexcept
    : TGroupUsersAdd_GroupUserAdd() {
    *this = ::std::move(from);
  }

  inline TGroupUsersAdd_GroupUserAdd& operator=(const TGroupUsersAdd_GroupUserAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupUsersAdd_GroupUserAdd& operator=(TGroupUsersAdd_GroupUserAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupUsersAdd_GroupUserAdd& default_instance();

  static inline const TGroupUsersAdd_GroupUserAdd* internal_default_instance() {
    return reinterpret_cast<const TGroupUsersAdd_GroupUserAdd*>(
               &_TGroupUsersAdd_GroupUserAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TGroupUsersAdd_GroupUserAdd& a, TGroupUsersAdd_GroupUserAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupUsersAdd_GroupUserAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupUsersAdd_GroupUserAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupUsersAdd_GroupUserAdd* New() const final {
    return CreateMaybeMessage<TGroupUsersAdd_GroupUserAdd>(nullptr);
  }

  TGroupUsersAdd_GroupUserAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupUsersAdd_GroupUserAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupUsersAdd_GroupUserAdd& from);
  void MergeFrom(const TGroupUsersAdd_GroupUserAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupUsersAdd_GroupUserAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupUsersAdd.GroupUserAdd";
  }
  protected:
  explicit TGroupUsersAdd_GroupUserAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupUsersAdd.GroupUserAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupUsersAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersAdd) */ {
 public:
  inline TGroupUsersAdd() : TGroupUsersAdd(nullptr) {}
  virtual ~TGroupUsersAdd();

  TGroupUsersAdd(const TGroupUsersAdd& from);
  TGroupUsersAdd(TGroupUsersAdd&& from) noexcept
    : TGroupUsersAdd() {
    *this = ::std::move(from);
  }

  inline TGroupUsersAdd& operator=(const TGroupUsersAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupUsersAdd& operator=(TGroupUsersAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupUsersAdd& default_instance();

  static inline const TGroupUsersAdd* internal_default_instance() {
    return reinterpret_cast<const TGroupUsersAdd*>(
               &_TGroupUsersAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TGroupUsersAdd& a, TGroupUsersAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupUsersAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupUsersAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupUsersAdd* New() const final {
    return CreateMaybeMessage<TGroupUsersAdd>(nullptr);
  }

  TGroupUsersAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupUsersAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupUsersAdd& from);
  void MergeFrom(const TGroupUsersAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupUsersAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupUsersAdd";
  }
  protected:
  explicit TGroupUsersAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TGroupUsersAdd_GroupUserAdd GroupUserAdd;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupUsersFieldNumber = 1,
  };
  // repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
  int group_users_size() const;
  private:
  int _internal_group_users_size() const;
  public:
  void clear_group_users();
  ::server::TGroupUsersAdd_GroupUserAdd* mutable_group_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >*
      mutable_group_users();
  private:
  const ::server::TGroupUsersAdd_GroupUserAdd& _internal_group_users(int index) const;
  ::server::TGroupUsersAdd_GroupUserAdd* _internal_add_group_users();
  public:
  const ::server::TGroupUsersAdd_GroupUserAdd& group_users(int index) const;
  ::server::TGroupUsersAdd_GroupUserAdd* add_group_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >&
      group_users() const;

  // @@protoc_insertion_point(class_scope:server.TGroupUsersAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd > group_users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupUsersKick_GroupUserKick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersKick.GroupUserKick) */ {
 public:
  inline TGroupUsersKick_GroupUserKick() : TGroupUsersKick_GroupUserKick(nullptr) {}
  virtual ~TGroupUsersKick_GroupUserKick();

  TGroupUsersKick_GroupUserKick(const TGroupUsersKick_GroupUserKick& from);
  TGroupUsersKick_GroupUserKick(TGroupUsersKick_GroupUserKick&& from) noexcept
    : TGroupUsersKick_GroupUserKick() {
    *this = ::std::move(from);
  }

  inline TGroupUsersKick_GroupUserKick& operator=(const TGroupUsersKick_GroupUserKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupUsersKick_GroupUserKick& operator=(TGroupUsersKick_GroupUserKick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupUsersKick_GroupUserKick& default_instance();

  static inline const TGroupUsersKick_GroupUserKick* internal_default_instance() {
    return reinterpret_cast<const TGroupUsersKick_GroupUserKick*>(
               &_TGroupUsersKick_GroupUserKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TGroupUsersKick_GroupUserKick& a, TGroupUsersKick_GroupUserKick& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupUsersKick_GroupUserKick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupUsersKick_GroupUserKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupUsersKick_GroupUserKick* New() const final {
    return CreateMaybeMessage<TGroupUsersKick_GroupUserKick>(nullptr);
  }

  TGroupUsersKick_GroupUserKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupUsersKick_GroupUserKick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupUsersKick_GroupUserKick& from);
  void MergeFrom(const TGroupUsersKick_GroupUserKick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupUsersKick_GroupUserKick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupUsersKick.GroupUserKick";
  }
  protected:
  explicit TGroupUsersKick_GroupUserKick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupUsersKick.GroupUserKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupUsersKick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersKick) */ {
 public:
  inline TGroupUsersKick() : TGroupUsersKick(nullptr) {}
  virtual ~TGroupUsersKick();

  TGroupUsersKick(const TGroupUsersKick& from);
  TGroupUsersKick(TGroupUsersKick&& from) noexcept
    : TGroupUsersKick() {
    *this = ::std::move(from);
  }

  inline TGroupUsersKick& operator=(const TGroupUsersKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupUsersKick& operator=(TGroupUsersKick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupUsersKick& default_instance();

  static inline const TGroupUsersKick* internal_default_instance() {
    return reinterpret_cast<const TGroupUsersKick*>(
               &_TGroupUsersKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(TGroupUsersKick& a, TGroupUsersKick& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupUsersKick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupUsersKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupUsersKick* New() const final {
    return CreateMaybeMessage<TGroupUsersKick>(nullptr);
  }

  TGroupUsersKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupUsersKick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupUsersKick& from);
  void MergeFrom(const TGroupUsersKick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupUsersKick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupUsersKick";
  }
  protected:
  explicit TGroupUsersKick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TGroupUsersKick_GroupUserKick GroupUserKick;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupUsersFieldNumber = 1,
  };
  // repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
  int group_users_size() const;
  private:
  int _internal_group_users_size() const;
  public:
  void clear_group_users();
  ::server::TGroupUsersKick_GroupUserKick* mutable_group_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >*
      mutable_group_users();
  private:
  const ::server::TGroupUsersKick_GroupUserKick& _internal_group_users(int index) const;
  ::server::TGroupUsersKick_GroupUserKick* _internal_add_group_users();
  public:
  const ::server::TGroupUsersKick_GroupUserKick& group_users(int index) const;
  ::server::TGroupUsersKick_GroupUserKick* add_group_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >&
      group_users() const;

  // @@protoc_insertion_point(class_scope:server.TGroupUsersKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick > group_users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupUsersPromote_GroupUserPromote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersPromote.GroupUserPromote) */ {
 public:
  inline TGroupUsersPromote_GroupUserPromote() : TGroupUsersPromote_GroupUserPromote(nullptr) {}
  virtual ~TGroupUsersPromote_GroupUserPromote();

  TGroupUsersPromote_GroupUserPromote(const TGroupUsersPromote_GroupUserPromote& from);
  TGroupUsersPromote_GroupUserPromote(TGroupUsersPromote_GroupUserPromote&& from) noexcept
    : TGroupUsersPromote_GroupUserPromote() {
    *this = ::std::move(from);
  }

  inline TGroupUsersPromote_GroupUserPromote& operator=(const TGroupUsersPromote_GroupUserPromote& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupUsersPromote_GroupUserPromote& operator=(TGroupUsersPromote_GroupUserPromote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupUsersPromote_GroupUserPromote& default_instance();

  static inline const TGroupUsersPromote_GroupUserPromote* internal_default_instance() {
    return reinterpret_cast<const TGroupUsersPromote_GroupUserPromote*>(
               &_TGroupUsersPromote_GroupUserPromote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(TGroupUsersPromote_GroupUserPromote& a, TGroupUsersPromote_GroupUserPromote& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupUsersPromote_GroupUserPromote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupUsersPromote_GroupUserPromote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupUsersPromote_GroupUserPromote* New() const final {
    return CreateMaybeMessage<TGroupUsersPromote_GroupUserPromote>(nullptr);
  }

  TGroupUsersPromote_GroupUserPromote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupUsersPromote_GroupUserPromote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupUsersPromote_GroupUserPromote& from);
  void MergeFrom(const TGroupUsersPromote_GroupUserPromote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupUsersPromote_GroupUserPromote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupUsersPromote.GroupUserPromote";
  }
  protected:
  explicit TGroupUsersPromote_GroupUserPromote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string group_id = 1;
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:server.TGroupUsersPromote.GroupUserPromote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TGroupUsersPromote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TGroupUsersPromote) */ {
 public:
  inline TGroupUsersPromote() : TGroupUsersPromote(nullptr) {}
  virtual ~TGroupUsersPromote();

  TGroupUsersPromote(const TGroupUsersPromote& from);
  TGroupUsersPromote(TGroupUsersPromote&& from) noexcept
    : TGroupUsersPromote() {
    *this = ::std::move(from);
  }

  inline TGroupUsersPromote& operator=(const TGroupUsersPromote& from) {
    CopyFrom(from);
    return *this;
  }
  inline TGroupUsersPromote& operator=(TGroupUsersPromote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TGroupUsersPromote& default_instance();

  static inline const TGroupUsersPromote* internal_default_instance() {
    return reinterpret_cast<const TGroupUsersPromote*>(
               &_TGroupUsersPromote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(TGroupUsersPromote& a, TGroupUsersPromote& b) {
    a.Swap(&b);
  }
  inline void Swap(TGroupUsersPromote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TGroupUsersPromote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TGroupUsersPromote* New() const final {
    return CreateMaybeMessage<TGroupUsersPromote>(nullptr);
  }

  TGroupUsersPromote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TGroupUsersPromote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TGroupUsersPromote& from);
  void MergeFrom(const TGroupUsersPromote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TGroupUsersPromote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TGroupUsersPromote";
  }
  protected:
  explicit TGroupUsersPromote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TGroupUsersPromote_GroupUserPromote GroupUserPromote;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupUsersFieldNumber = 1,
  };
  // repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
  int group_users_size() const;
  private:
  int _internal_group_users_size() const;
  public:
  void clear_group_users();
  ::server::TGroupUsersPromote_GroupUserPromote* mutable_group_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >*
      mutable_group_users();
  private:
  const ::server::TGroupUsersPromote_GroupUserPromote& _internal_group_users(int index) const;
  ::server::TGroupUsersPromote_GroupUserPromote* _internal_add_group_users();
  public:
  const ::server::TGroupUsersPromote_GroupUserPromote& group_users(int index) const;
  ::server::TGroupUsersPromote_GroupUserPromote* add_group_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >&
      group_users() const;

  // @@protoc_insertion_point(class_scope:server.TGroupUsersPromote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote > group_users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TopicId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TopicId) */ {
 public:
  inline TopicId() : TopicId(nullptr) {}
  virtual ~TopicId();

  TopicId(const TopicId& from);
  TopicId(TopicId&& from) noexcept
    : TopicId() {
    *this = ::std::move(from);
  }

  inline TopicId& operator=(const TopicId& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicId& operator=(TopicId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicId& default_instance();

  enum IdCase {
    kDm = 1,
    kRoom = 2,
    kGroupId = 3,
    ID_NOT_SET = 0,
  };

  static inline const TopicId* internal_default_instance() {
    return reinterpret_cast<const TopicId*>(
               &_TopicId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(TopicId& a, TopicId& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicId* New() const final {
    return CreateMaybeMessage<TopicId>(nullptr);
  }

  TopicId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicId& from);
  void MergeFrom(const TopicId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TopicId";
  }
  protected:
  explicit TopicId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDmFieldNumber = 1,
    kRoomFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // string dm = 1;
  private:
  bool _internal_has_dm() const;
  public:
  void clear_dm();
  const std::string& dm() const;
  void set_dm(const std::string& value);
  void set_dm(std::string&& value);
  void set_dm(const char* value);
  void set_dm(const char* value, size_t size);
  std::string* mutable_dm();
  std::string* release_dm();
  void set_allocated_dm(std::string* dm);
  private:
  const std::string& _internal_dm() const;
  void _internal_set_dm(const std::string& value);
  std::string* _internal_mutable_dm();
  public:

  // string room = 2;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const std::string& room() const;
  void set_room(const std::string& value);
  void set_room(std::string&& value);
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  std::string* mutable_room();
  std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // string group_id = 3;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TopicId)
 private:
  class _Internal;
  void set_has_dm();
  void set_has_room();
  void set_has_group_id();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class UserPresence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.UserPresence) */ {
 public:
  inline UserPresence() : UserPresence(nullptr) {}
  virtual ~UserPresence();

  UserPresence(const UserPresence& from);
  UserPresence(UserPresence&& from) noexcept
    : UserPresence() {
    *this = ::std::move(from);
  }

  inline UserPresence& operator=(const UserPresence& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserPresence& operator=(UserPresence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserPresence& default_instance();

  static inline const UserPresence* internal_default_instance() {
    return reinterpret_cast<const UserPresence*>(
               &_UserPresence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(UserPresence& a, UserPresence& b) {
    a.Swap(&b);
  }
  inline void Swap(UserPresence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserPresence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserPresence* New() const final {
    return CreateMaybeMessage<UserPresence>(nullptr);
  }

  UserPresence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserPresence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserPresence& from);
  void MergeFrom(const UserPresence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserPresence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.UserPresence";
  }
  protected:
  explicit UserPresence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kHandleFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string session_id = 2;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string handle = 3;
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // @@protoc_insertion_point(class_scope:server.UserPresence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopicsJoin_TopicJoin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopicsJoin.TopicJoin) */ {
 public:
  inline TTopicsJoin_TopicJoin() : TTopicsJoin_TopicJoin(nullptr) {}
  virtual ~TTopicsJoin_TopicJoin();

  TTopicsJoin_TopicJoin(const TTopicsJoin_TopicJoin& from);
  TTopicsJoin_TopicJoin(TTopicsJoin_TopicJoin&& from) noexcept
    : TTopicsJoin_TopicJoin() {
    *this = ::std::move(from);
  }

  inline TTopicsJoin_TopicJoin& operator=(const TTopicsJoin_TopicJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopicsJoin_TopicJoin& operator=(TTopicsJoin_TopicJoin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopicsJoin_TopicJoin& default_instance();

  enum IdCase {
    kUserId = 1,
    kRoom = 2,
    kGroupId = 3,
    ID_NOT_SET = 0,
  };

  static inline const TTopicsJoin_TopicJoin* internal_default_instance() {
    return reinterpret_cast<const TTopicsJoin_TopicJoin*>(
               &_TTopicsJoin_TopicJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TTopicsJoin_TopicJoin& a, TTopicsJoin_TopicJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopicsJoin_TopicJoin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopicsJoin_TopicJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopicsJoin_TopicJoin* New() const final {
    return CreateMaybeMessage<TTopicsJoin_TopicJoin>(nullptr);
  }

  TTopicsJoin_TopicJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopicsJoin_TopicJoin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopicsJoin_TopicJoin& from);
  void MergeFrom(const TTopicsJoin_TopicJoin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopicsJoin_TopicJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopicsJoin.TopicJoin";
  }
  protected:
  explicit TTopicsJoin_TopicJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRoomFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // string user_id = 1;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string room = 2;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const std::string& room() const;
  void set_room(const std::string& value);
  void set_room(std::string&& value);
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  std::string* mutable_room();
  std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // string group_id = 3;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TTopicsJoin.TopicJoin)
 private:
  class _Internal;
  void set_has_user_id();
  void set_has_room();
  void set_has_group_id();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopicsJoin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopicsJoin) */ {
 public:
  inline TTopicsJoin() : TTopicsJoin(nullptr) {}
  virtual ~TTopicsJoin();

  TTopicsJoin(const TTopicsJoin& from);
  TTopicsJoin(TTopicsJoin&& from) noexcept
    : TTopicsJoin() {
    *this = ::std::move(from);
  }

  inline TTopicsJoin& operator=(const TTopicsJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopicsJoin& operator=(TTopicsJoin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopicsJoin& default_instance();

  static inline const TTopicsJoin* internal_default_instance() {
    return reinterpret_cast<const TTopicsJoin*>(
               &_TTopicsJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(TTopicsJoin& a, TTopicsJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopicsJoin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopicsJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopicsJoin* New() const final {
    return CreateMaybeMessage<TTopicsJoin>(nullptr);
  }

  TTopicsJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopicsJoin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopicsJoin& from);
  void MergeFrom(const TTopicsJoin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopicsJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopicsJoin";
  }
  protected:
  explicit TTopicsJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TTopicsJoin_TopicJoin TopicJoin;

  // accessors -------------------------------------------------------

  enum : int {
    kJoinsFieldNumber = 1,
  };
  // repeated .server.TTopicsJoin.TopicJoin joins = 1;
  int joins_size() const;
  private:
  int _internal_joins_size() const;
  public:
  void clear_joins();
  ::server::TTopicsJoin_TopicJoin* mutable_joins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >*
      mutable_joins();
  private:
  const ::server::TTopicsJoin_TopicJoin& _internal_joins(int index) const;
  ::server::TTopicsJoin_TopicJoin* _internal_add_joins();
  public:
  const ::server::TTopicsJoin_TopicJoin& joins(int index) const;
  ::server::TTopicsJoin_TopicJoin* add_joins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >&
      joins() const;

  // @@protoc_insertion_point(class_scope:server.TTopicsJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin > joins_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopics_Topic PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopics.Topic) */ {
 public:
  inline TTopics_Topic() : TTopics_Topic(nullptr) {}
  virtual ~TTopics_Topic();

  TTopics_Topic(const TTopics_Topic& from);
  TTopics_Topic(TTopics_Topic&& from) noexcept
    : TTopics_Topic() {
    *this = ::std::move(from);
  }

  inline TTopics_Topic& operator=(const TTopics_Topic& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopics_Topic& operator=(TTopics_Topic&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopics_Topic& default_instance();

  static inline const TTopics_Topic* internal_default_instance() {
    return reinterpret_cast<const TTopics_Topic*>(
               &_TTopics_Topic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(TTopics_Topic& a, TTopics_Topic& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopics_Topic* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopics_Topic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopics_Topic* New() const final {
    return CreateMaybeMessage<TTopics_Topic>(nullptr);
  }

  TTopics_Topic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopics_Topic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopics_Topic& from);
  void MergeFrom(const TTopics_Topic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopics_Topic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopics.Topic";
  }
  protected:
  explicit TTopics_Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresencesFieldNumber = 2,
    kTopicFieldNumber = 1,
    kSelfFieldNumber = 3,
  };
  // repeated .server.UserPresence presences = 2;
  int presences_size() const;
  private:
  int _internal_presences_size() const;
  public:
  void clear_presences();
  ::server::UserPresence* mutable_presences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
      mutable_presences();
  private:
  const ::server::UserPresence& _internal_presences(int index) const;
  ::server::UserPresence* _internal_add_presences();
  public:
  const ::server::UserPresence& presences(int index) const;
  ::server::UserPresence* add_presences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
      presences() const;

  // .server.TopicId topic = 1;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const ::server::TopicId& topic() const;
  ::server::TopicId* release_topic();
  ::server::TopicId* mutable_topic();
  void set_allocated_topic(::server::TopicId* topic);
  private:
  const ::server::TopicId& _internal_topic() const;
  ::server::TopicId* _internal_mutable_topic();
  public:
  void unsafe_arena_set_allocated_topic(
      ::server::TopicId* topic);
  ::server::TopicId* unsafe_arena_release_topic();

  // .server.UserPresence self = 3;
  bool has_self() const;
  private:
  bool _internal_has_self() const;
  public:
  void clear_self();
  const ::server::UserPresence& self() const;
  ::server::UserPresence* release_self();
  ::server::UserPresence* mutable_self();
  void set_allocated_self(::server::UserPresence* self);
  private:
  const ::server::UserPresence& _internal_self() const;
  ::server::UserPresence* _internal_mutable_self();
  public:
  void unsafe_arena_set_allocated_self(
      ::server::UserPresence* self);
  ::server::UserPresence* unsafe_arena_release_self();

  // @@protoc_insertion_point(class_scope:server.TTopics.Topic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence > presences_;
  ::server::TopicId* topic_;
  ::server::UserPresence* self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopics) */ {
 public:
  inline TTopics() : TTopics(nullptr) {}
  virtual ~TTopics();

  TTopics(const TTopics& from);
  TTopics(TTopics&& from) noexcept
    : TTopics() {
    *this = ::std::move(from);
  }

  inline TTopics& operator=(const TTopics& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopics& operator=(TTopics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopics& default_instance();

  static inline const TTopics* internal_default_instance() {
    return reinterpret_cast<const TTopics*>(
               &_TTopics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TTopics& a, TTopics& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopics* New() const final {
    return CreateMaybeMessage<TTopics>(nullptr);
  }

  TTopics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopics& from);
  void MergeFrom(const TTopics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopics";
  }
  protected:
  explicit TTopics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TTopics_Topic Topic;

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 1,
  };
  // repeated .server.TTopics.Topic topics = 1;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::server::TTopics_Topic* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopics_Topic >*
      mutable_topics();
  private:
  const ::server::TTopics_Topic& _internal_topics(int index) const;
  ::server::TTopics_Topic* _internal_add_topics();
  public:
  const ::server::TTopics_Topic& topics(int index) const;
  ::server::TTopics_Topic* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopics_Topic >&
      topics() const;

  // @@protoc_insertion_point(class_scope:server.TTopics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopics_Topic > topics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopicsLeave PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopicsLeave) */ {
 public:
  inline TTopicsLeave() : TTopicsLeave(nullptr) {}
  virtual ~TTopicsLeave();

  TTopicsLeave(const TTopicsLeave& from);
  TTopicsLeave(TTopicsLeave&& from) noexcept
    : TTopicsLeave() {
    *this = ::std::move(from);
  }

  inline TTopicsLeave& operator=(const TTopicsLeave& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopicsLeave& operator=(TTopicsLeave&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopicsLeave& default_instance();

  static inline const TTopicsLeave* internal_default_instance() {
    return reinterpret_cast<const TTopicsLeave*>(
               &_TTopicsLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TTopicsLeave& a, TTopicsLeave& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopicsLeave* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopicsLeave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopicsLeave* New() const final {
    return CreateMaybeMessage<TTopicsLeave>(nullptr);
  }

  TTopicsLeave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopicsLeave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopicsLeave& from);
  void MergeFrom(const TTopicsLeave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopicsLeave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopicsLeave";
  }
  protected:
  explicit TTopicsLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 1,
  };
  // repeated .server.TopicId topics = 1;
  int topics_size() const;
  private:
  int _internal_topics_size() const;
  public:
  void clear_topics();
  ::server::TopicId* mutable_topics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicId >*
      mutable_topics();
  private:
  const ::server::TopicId& _internal_topics(int index) const;
  ::server::TopicId* _internal_add_topics();
  public:
  const ::server::TopicId& topics(int index) const;
  ::server::TopicId* add_topics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicId >&
      topics() const;

  // @@protoc_insertion_point(class_scope:server.TTopicsLeave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicId > topics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopicMessageSend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopicMessageSend) */ {
 public:
  inline TTopicMessageSend() : TTopicMessageSend(nullptr) {}
  virtual ~TTopicMessageSend();

  TTopicMessageSend(const TTopicMessageSend& from);
  TTopicMessageSend(TTopicMessageSend&& from) noexcept
    : TTopicMessageSend() {
    *this = ::std::move(from);
  }

  inline TTopicMessageSend& operator=(const TTopicMessageSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopicMessageSend& operator=(TTopicMessageSend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopicMessageSend& default_instance();

  static inline const TTopicMessageSend* internal_default_instance() {
    return reinterpret_cast<const TTopicMessageSend*>(
               &_TTopicMessageSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TTopicMessageSend& a, TTopicMessageSend& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopicMessageSend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopicMessageSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopicMessageSend* New() const final {
    return CreateMaybeMessage<TTopicMessageSend>(nullptr);
  }

  TTopicMessageSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopicMessageSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopicMessageSend& from);
  void MergeFrom(const TTopicMessageSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopicMessageSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopicMessageSend";
  }
  protected:
  explicit TTopicMessageSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTopicFieldNumber = 1,
  };
  // string data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .server.TopicId topic = 1;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const ::server::TopicId& topic() const;
  ::server::TopicId* release_topic();
  ::server::TopicId* mutable_topic();
  void set_allocated_topic(::server::TopicId* topic);
  private:
  const ::server::TopicId& _internal_topic() const;
  ::server::TopicId* _internal_mutable_topic();
  public:
  void unsafe_arena_set_allocated_topic(
      ::server::TopicId* topic);
  ::server::TopicId* unsafe_arena_release_topic();

  // @@protoc_insertion_point(class_scope:server.TTopicMessageSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::server::TopicId* topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopicMessageAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopicMessageAck) */ {
 public:
  inline TTopicMessageAck() : TTopicMessageAck(nullptr) {}
  virtual ~TTopicMessageAck();

  TTopicMessageAck(const TTopicMessageAck& from);
  TTopicMessageAck(TTopicMessageAck&& from) noexcept
    : TTopicMessageAck() {
    *this = ::std::move(from);
  }

  inline TTopicMessageAck& operator=(const TTopicMessageAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopicMessageAck& operator=(TTopicMessageAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopicMessageAck& default_instance();

  static inline const TTopicMessageAck* internal_default_instance() {
    return reinterpret_cast<const TTopicMessageAck*>(
               &_TTopicMessageAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TTopicMessageAck& a, TTopicMessageAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopicMessageAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopicMessageAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopicMessageAck* New() const final {
    return CreateMaybeMessage<TTopicMessageAck>(nullptr);
  }

  TTopicMessageAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopicMessageAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopicMessageAck& from);
  void MergeFrom(const TTopicMessageAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopicMessageAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopicMessageAck";
  }
  protected:
  explicit TTopicMessageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kHandleFieldNumber = 4,
    kCreatedAtFieldNumber = 2,
    kExpiresAtFieldNumber = 3,
  };
  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // string handle = 4;
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // int64 created_at = 2;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expires_at = 3;
  void clear_expires_at();
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at() const;
  void set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expires_at() const;
  void _internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TTopicMessageAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TopicMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TopicMessage) */ {
 public:
  inline TopicMessage() : TopicMessage(nullptr) {}
  virtual ~TopicMessage();

  TopicMessage(const TopicMessage& from);
  TopicMessage(TopicMessage&& from) noexcept
    : TopicMessage() {
    *this = ::std::move(from);
  }

  inline TopicMessage& operator=(const TopicMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicMessage& operator=(TopicMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicMessage& default_instance();

  static inline const TopicMessage* internal_default_instance() {
    return reinterpret_cast<const TopicMessage*>(
               &_TopicMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TopicMessage& a, TopicMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicMessage* New() const final {
    return CreateMaybeMessage<TopicMessage>(nullptr);
  }

  TopicMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicMessage& from);
  void MergeFrom(const TopicMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TopicMessage";
  }
  protected:
  explicit TopicMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kHandleFieldNumber = 6,
    kDataFieldNumber = 8,
    kTopicFieldNumber = 1,
    kCreatedAtFieldNumber = 4,
    kExpiresAtFieldNumber = 5,
    kTypeFieldNumber = 7,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string message_id = 3;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // string handle = 6;
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // string data = 8;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .server.TopicId topic = 1;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const ::server::TopicId& topic() const;
  ::server::TopicId* release_topic();
  ::server::TopicId* mutable_topic();
  void set_allocated_topic(::server::TopicId* topic);
  private:
  const ::server::TopicId& _internal_topic() const;
  ::server::TopicId* _internal_mutable_topic();
  public:
  void unsafe_arena_set_allocated_topic(
      ::server::TopicId* topic);
  ::server::TopicId* unsafe_arena_release_topic();

  // int64 created_at = 4;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expires_at = 5;
  void clear_expires_at();
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at() const;
  void set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expires_at() const;
  void _internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 type = 7;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int64 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TopicMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::server::TopicId* topic_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopicMessagesList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopicMessagesList) */ {
 public:
  inline TTopicMessagesList() : TTopicMessagesList(nullptr) {}
  virtual ~TTopicMessagesList();

  TTopicMessagesList(const TTopicMessagesList& from);
  TTopicMessagesList(TTopicMessagesList&& from) noexcept
    : TTopicMessagesList() {
    *this = ::std::move(from);
  }

  inline TTopicMessagesList& operator=(const TTopicMessagesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopicMessagesList& operator=(TTopicMessagesList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopicMessagesList& default_instance();

  enum IdCase {
    kUserId = 1,
    kRoom = 2,
    kGroupId = 3,
    ID_NOT_SET = 0,
  };

  static inline const TTopicMessagesList* internal_default_instance() {
    return reinterpret_cast<const TTopicMessagesList*>(
               &_TTopicMessagesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TTopicMessagesList& a, TTopicMessagesList& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopicMessagesList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopicMessagesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopicMessagesList* New() const final {
    return CreateMaybeMessage<TTopicMessagesList>(nullptr);
  }

  TTopicMessagesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopicMessagesList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopicMessagesList& from);
  void MergeFrom(const TTopicMessagesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopicMessagesList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopicMessagesList";
  }
  protected:
  explicit TTopicMessagesList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCursorFieldNumber = 4,
    kForwardFieldNumber = 5,
    kLimitFieldNumber = 6,
    kUserIdFieldNumber = 1,
    kRoomFieldNumber = 2,
    kGroupIdFieldNumber = 3,
  };
  // string cursor = 4;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // bool forward = 5;
  void clear_forward();
  bool forward() const;
  void set_forward(bool value);
  private:
  bool _internal_forward() const;
  void _internal_set_forward(bool value);
  public:

  // int64 limit = 6;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // string user_id = 1;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string room = 2;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const std::string& room() const;
  void set_room(const std::string& value);
  void set_room(std::string&& value);
  void set_room(const char* value);
  void set_room(const char* value, size_t size);
  std::string* mutable_room();
  std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // string group_id = 3;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  const std::string& group_id() const;
  void set_group_id(const std::string& value);
  void set_group_id(std::string&& value);
  void set_group_id(const char* value);
  void set_group_id(const char* value, size_t size);
  std::string* mutable_group_id();
  std::string* release_group_id();
  void set_allocated_group_id(std::string* group_id);
  private:
  const std::string& _internal_group_id() const;
  void _internal_set_group_id(const std::string& value);
  std::string* _internal_mutable_group_id();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TTopicMessagesList)
 private:
  class _Internal;
  void set_has_user_id();
  void set_has_room();
  void set_has_group_id();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  bool forward_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_id_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TTopicMessages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TTopicMessages) */ {
 public:
  inline TTopicMessages() : TTopicMessages(nullptr) {}
  virtual ~TTopicMessages();

  TTopicMessages(const TTopicMessages& from);
  TTopicMessages(TTopicMessages&& from) noexcept
    : TTopicMessages() {
    *this = ::std::move(from);
  }

  inline TTopicMessages& operator=(const TTopicMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTopicMessages& operator=(TTopicMessages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TTopicMessages& default_instance();

  static inline const TTopicMessages* internal_default_instance() {
    return reinterpret_cast<const TTopicMessages*>(
               &_TTopicMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(TTopicMessages& a, TTopicMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(TTopicMessages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTopicMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TTopicMessages* New() const final {
    return CreateMaybeMessage<TTopicMessages>(nullptr);
  }

  TTopicMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TTopicMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TTopicMessages& from);
  void MergeFrom(const TTopicMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTopicMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TTopicMessages";
  }
  protected:
  explicit TTopicMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .server.TopicMessage messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::server::TopicMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicMessage >*
      mutable_messages();
  private:
  const ::server::TopicMessage& _internal_messages(int index) const;
  ::server::TopicMessage* _internal_add_messages();
  public:
  const ::server::TopicMessage& messages(int index) const;
  ::server::TopicMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicMessage >&
      messages() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:server.TTopicMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicMessage > messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TopicPresence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TopicPresence) */ {
 public:
  inline TopicPresence() : TopicPresence(nullptr) {}
  virtual ~TopicPresence();

  TopicPresence(const TopicPresence& from);
  TopicPresence(TopicPresence&& from) noexcept
    : TopicPresence() {
    *this = ::std::move(from);
  }

  inline TopicPresence& operator=(const TopicPresence& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicPresence& operator=(TopicPresence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicPresence& default_instance();

  static inline const TopicPresence* internal_default_instance() {
    return reinterpret_cast<const TopicPresence*>(
               &_TopicPresence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(TopicPresence& a, TopicPresence& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicPresence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopicPresence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicPresence* New() const final {
    return CreateMaybeMessage<TopicPresence>(nullptr);
  }

  TopicPresence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicPresence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicPresence& from);
  void MergeFrom(const TopicPresence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicPresence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TopicPresence";
  }
  protected:
  explicit TopicPresence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoinsFieldNumber = 2,
    kLeavesFieldNumber = 3,
    kTopicFieldNumber = 1,
  };
  // repeated .server.UserPresence joins = 2;
  int joins_size() const;
  private:
  int _internal_joins_size() const;
  public:
  void clear_joins();
  ::server::UserPresence* mutable_joins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
      mutable_joins();
  private:
  const ::server::UserPresence& _internal_joins(int index) const;
  ::server::UserPresence* _internal_add_joins();
  public:
  const ::server::UserPresence& joins(int index) const;
  ::server::UserPresence* add_joins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
      joins() const;

  // repeated .server.UserPresence leaves = 3;
  int leaves_size() const;
  private:
  int _internal_leaves_size() const;
  public:
  void clear_leaves();
  ::server::UserPresence* mutable_leaves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
      mutable_leaves();
  private:
  const ::server::UserPresence& _internal_leaves(int index) const;
  ::server::UserPresence* _internal_add_leaves();
  public:
  const ::server::UserPresence& leaves(int index) const;
  ::server::UserPresence* add_leaves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
      leaves() const;

  // .server.TopicId topic = 1;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const ::server::TopicId& topic() const;
  ::server::TopicId* release_topic();
  ::server::TopicId* mutable_topic();
  void set_allocated_topic(::server::TopicId* topic);
  private:
  const ::server::TopicId& _internal_topic() const;
  ::server::TopicId* _internal_mutable_topic();
  public:
  void unsafe_arena_set_allocated_topic(
      ::server::TopicId* topic);
  ::server::TopicId* unsafe_arena_release_topic();

  // @@protoc_insertion_point(class_scope:server.TopicPresence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence > joins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence > leaves_;
  ::server::TopicId* topic_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PropertyPair_StringSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.PropertyPair.StringSet) */ {
 public:
  inline PropertyPair_StringSet() : PropertyPair_StringSet(nullptr) {}
  virtual ~PropertyPair_StringSet();

  PropertyPair_StringSet(const PropertyPair_StringSet& from);
  PropertyPair_StringSet(PropertyPair_StringSet&& from) noexcept
    : PropertyPair_StringSet() {
    *this = ::std::move(from);
  }

  inline PropertyPair_StringSet& operator=(const PropertyPair_StringSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyPair_StringSet& operator=(PropertyPair_StringSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyPair_StringSet& default_instance();

  static inline const PropertyPair_StringSet* internal_default_instance() {
    return reinterpret_cast<const PropertyPair_StringSet*>(
               &_PropertyPair_StringSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(PropertyPair_StringSet& a, PropertyPair_StringSet& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyPair_StringSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyPair_StringSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyPair_StringSet* New() const final {
    return CreateMaybeMessage<PropertyPair_StringSet>(nullptr);
  }

  PropertyPair_StringSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyPair_StringSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyPair_StringSet& from);
  void MergeFrom(const PropertyPair_StringSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyPair_StringSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.PropertyPair.StringSet";
  }
  protected:
  explicit PropertyPair_StringSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:server.PropertyPair.StringSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PropertyPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.PropertyPair) */ {
 public:
  inline PropertyPair() : PropertyPair(nullptr) {}
  virtual ~PropertyPair();

  PropertyPair(const PropertyPair& from);
  PropertyPair(PropertyPair&& from) noexcept
    : PropertyPair() {
    *this = ::std::move(from);
  }

  inline PropertyPair& operator=(const PropertyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyPair& operator=(PropertyPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PropertyPair& default_instance();

  enum ValueCase {
    kStringSet = 2,
    kBoolValue = 3,
    kIntValue = 4,
    VALUE_NOT_SET = 0,
  };

  static inline const PropertyPair* internal_default_instance() {
    return reinterpret_cast<const PropertyPair*>(
               &_PropertyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(PropertyPair& a, PropertyPair& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyPair* New() const final {
    return CreateMaybeMessage<PropertyPair>(nullptr);
  }

  PropertyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyPair& from);
  void MergeFrom(const PropertyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.PropertyPair";
  }
  protected:
  explicit PropertyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PropertyPair_StringSet StringSet;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kStringSetFieldNumber = 2,
    kBoolValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .server.PropertyPair.StringSet stringSet = 2;
  bool has_stringset() const;
  private:
  bool _internal_has_stringset() const;
  public:
  void clear_stringset();
  const ::server::PropertyPair_StringSet& stringset() const;
  ::server::PropertyPair_StringSet* release_stringset();
  ::server::PropertyPair_StringSet* mutable_stringset();
  void set_allocated_stringset(::server::PropertyPair_StringSet* stringset);
  private:
  const ::server::PropertyPair_StringSet& _internal_stringset() const;
  ::server::PropertyPair_StringSet* _internal_mutable_stringset();
  public:
  void unsafe_arena_set_allocated_stringset(
      ::server::PropertyPair_StringSet* stringset);
  ::server::PropertyPair_StringSet* unsafe_arena_release_stringset();

  // bool boolValue = 3;
  private:
  bool _internal_has_boolvalue() const;
  public:
  void clear_boolvalue();
  bool boolvalue() const;
  void set_boolvalue(bool value);
  private:
  bool _internal_boolvalue() const;
  void _internal_set_boolvalue(bool value);
  public:

  // int64 intValue = 4;
  private:
  bool _internal_has_intvalue() const;
  public:
  void clear_intvalue();
  ::PROTOBUF_NAMESPACE_ID::int64 intvalue() const;
  void set_intvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_intvalue() const;
  void _internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:server.PropertyPair)
 private:
  class _Internal;
  void set_has_stringset();
  void set_has_boolvalue();
  void set_has_intvalue();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  union ValueUnion {
    ValueUnion() {}
    ::server::PropertyPair_StringSet* stringset_;
    bool boolvalue_;
    ::PROTOBUF_NAMESPACE_ID::int64 intvalue_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MatchmakeFilter_TermFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeFilter.TermFilter) */ {
 public:
  inline MatchmakeFilter_TermFilter() : MatchmakeFilter_TermFilter(nullptr) {}
  virtual ~MatchmakeFilter_TermFilter();

  MatchmakeFilter_TermFilter(const MatchmakeFilter_TermFilter& from);
  MatchmakeFilter_TermFilter(MatchmakeFilter_TermFilter&& from) noexcept
    : MatchmakeFilter_TermFilter() {
    *this = ::std::move(from);
  }

  inline MatchmakeFilter_TermFilter& operator=(const MatchmakeFilter_TermFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchmakeFilter_TermFilter& operator=(MatchmakeFilter_TermFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchmakeFilter_TermFilter& default_instance();

  static inline const MatchmakeFilter_TermFilter* internal_default_instance() {
    return reinterpret_cast<const MatchmakeFilter_TermFilter*>(
               &_MatchmakeFilter_TermFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(MatchmakeFilter_TermFilter& a, MatchmakeFilter_TermFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchmakeFilter_TermFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchmakeFilter_TermFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchmakeFilter_TermFilter* New() const final {
    return CreateMaybeMessage<MatchmakeFilter_TermFilter>(nullptr);
  }

  MatchmakeFilter_TermFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchmakeFilter_TermFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchmakeFilter_TermFilter& from);
  void MergeFrom(const MatchmakeFilter_TermFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchmakeFilter_TermFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.MatchmakeFilter.TermFilter";
  }
  protected:
  explicit MatchmakeFilter_TermFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermsFieldNumber = 1,
    kMatchAllTermsFieldNumber = 2,
  };
  // repeated string terms = 1;
  int terms_size() const;
  private:
  int _internal_terms_size() const;
  public:
  void clear_terms();
  const std::string& terms(int index) const;
  std::string* mutable_terms(int index);
  void set_terms(int index, const std::string& value);
  void set_terms(int index, std::string&& value);
  void set_terms(int index, const char* value);
  void set_terms(int index, const char* value, size_t size);
  std::string* add_terms();
  void add_terms(const std::string& value);
  void add_terms(std::string&& value);
  void add_terms(const char* value);
  void add_terms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& terms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_terms();
  private:
  const std::string& _internal_terms(int index) const;
  std::string* _internal_add_terms();
  public:

  // bool matchAllTerms = 2;
  void clear_matchallterms();
  bool matchallterms() const;
  void set_matchallterms(bool value);
  private:
  bool _internal_matchallterms() const;
  void _internal_set_matchallterms(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.MatchmakeFilter.TermFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> terms_;
  bool matchallterms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MatchmakeFilter_RangeFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeFilter.RangeFilter) */ {
 public:
  inline MatchmakeFilter_RangeFilter() : MatchmakeFilter_RangeFilter(nullptr) {}
  virtual ~MatchmakeFilter_RangeFilter();

  MatchmakeFilter_RangeFilter(const MatchmakeFilter_RangeFilter& from);
  MatchmakeFilter_RangeFilter(MatchmakeFilter_RangeFilter&& from) noexcept
    : MatchmakeFilter_RangeFilter() {
    *this = ::std::move(from);
  }

  inline MatchmakeFilter_RangeFilter& operator=(const MatchmakeFilter_RangeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchmakeFilter_RangeFilter& operator=(MatchmakeFilter_RangeFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchmakeFilter_RangeFilter& default_instance();

  static inline const MatchmakeFilter_RangeFilter* internal_default_instance() {
    return reinterpret_cast<const MatchmakeFilter_RangeFilter*>(
               &_MatchmakeFilter_RangeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(MatchmakeFilter_RangeFilter& a, MatchmakeFilter_RangeFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchmakeFilter_RangeFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchmakeFilter_RangeFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchmakeFilter_RangeFilter* New() const final {
    return CreateMaybeMessage<MatchmakeFilter_RangeFilter>(nullptr);
  }

  MatchmakeFilter_RangeFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchmakeFilter_RangeFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchmakeFilter_RangeFilter& from);
  void MergeFrom(const MatchmakeFilter_RangeFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchmakeFilter_RangeFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.MatchmakeFilter.RangeFilter";
  }
  protected:
  explicit MatchmakeFilter_RangeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerBoundFieldNumber = 1,
    kUpperBoundFieldNumber = 2,
  };
  // int64 lower_bound = 1;
  void clear_lower_bound();
  ::PROTOBUF_NAMESPACE_ID::int64 lower_bound() const;
  void set_lower_bound(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lower_bound() const;
  void _internal_set_lower_bound(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 upper_bound = 2;
  void clear_upper_bound();
  ::PROTOBUF_NAMESPACE_ID::int64 upper_bound() const;
  void set_upper_bound(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_upper_bound() const;
  void _internal_set_upper_bound(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.MatchmakeFilter.RangeFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 lower_bound_;
  ::PROTOBUF_NAMESPACE_ID::int64 upper_bound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MatchmakeFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeFilter) */ {
 public:
  inline MatchmakeFilter() : MatchmakeFilter(nullptr) {}
  virtual ~MatchmakeFilter();

  MatchmakeFilter(const MatchmakeFilter& from);
  MatchmakeFilter(MatchmakeFilter&& from) noexcept
    : MatchmakeFilter() {
    *this = ::std::move(from);
  }

  inline MatchmakeFilter& operator=(const MatchmakeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchmakeFilter& operator=(MatchmakeFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchmakeFilter& default_instance();

  enum ValueCase {
    kTerm = 2,
    kRange = 3,
    kCheck = 4,
    VALUE_NOT_SET = 0,
  };

  static inline const MatchmakeFilter* internal_default_instance() {
    return reinterpret_cast<const MatchmakeFilter*>(
               &_MatchmakeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(MatchmakeFilter& a, MatchmakeFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchmakeFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchmakeFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchmakeFilter* New() const final {
    return CreateMaybeMessage<MatchmakeFilter>(nullptr);
  }

  MatchmakeFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchmakeFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchmakeFilter& from);
  void MergeFrom(const MatchmakeFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchmakeFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.MatchmakeFilter";
  }
  protected:
  explicit MatchmakeFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MatchmakeFilter_TermFilter TermFilter;
  typedef MatchmakeFilter_RangeFilter RangeFilter;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTermFieldNumber = 2,
    kRangeFieldNumber = 3,
    kCheckFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .server.MatchmakeFilter.TermFilter term = 2;
  bool has_term() const;
  private:
  bool _internal_has_term() const;
  public:
  void clear_term();
  const ::server::MatchmakeFilter_TermFilter& term() const;
  ::server::MatchmakeFilter_TermFilter* release_term();
  ::server::MatchmakeFilter_TermFilter* mutable_term();
  void set_allocated_term(::server::MatchmakeFilter_TermFilter* term);
  private:
  const ::server::MatchmakeFilter_TermFilter& _internal_term() const;
  ::server::MatchmakeFilter_TermFilter* _internal_mutable_term();
  public:
  void unsafe_arena_set_allocated_term(
      ::server::MatchmakeFilter_TermFilter* term);
  ::server::MatchmakeFilter_TermFilter* unsafe_arena_release_term();

  // .server.MatchmakeFilter.RangeFilter range = 3;
  bool has_range() const;
  private:
  bool _internal_has_range() const;
  public:
  void clear_range();
  const ::server::MatchmakeFilter_RangeFilter& range() const;
  ::server::MatchmakeFilter_RangeFilter* release_range();
  ::server::MatchmakeFilter_RangeFilter* mutable_range();
  void set_allocated_range(::server::MatchmakeFilter_RangeFilter* range);
  private:
  const ::server::MatchmakeFilter_RangeFilter& _internal_range() const;
  ::server::MatchmakeFilter_RangeFilter* _internal_mutable_range();
  public:
  void unsafe_arena_set_allocated_range(
      ::server::MatchmakeFilter_RangeFilter* range);
  ::server::MatchmakeFilter_RangeFilter* unsafe_arena_release_range();

  // bool check = 4;
  private:
  bool _internal_has_check() const;
  public:
  void clear_check();
  bool check() const;
  void set_check(bool value);
  private:
  bool _internal_check() const;
  void _internal_set_check(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:server.MatchmakeFilter)
 private:
  class _Internal;
  void set_has_term();
  void set_has_range();
  void set_has_check();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::server::MatchmakeFilter_TermFilter* term_;
    ::server::MatchmakeFilter_RangeFilter* range_;
    bool check_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatchmakeAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatchmakeAdd) */ {
 public:
  inline TMatchmakeAdd() : TMatchmakeAdd(nullptr) {}
  virtual ~TMatchmakeAdd();

  TMatchmakeAdd(const TMatchmakeAdd& from);
  TMatchmakeAdd(TMatchmakeAdd&& from) noexcept
    : TMatchmakeAdd() {
    *this = ::std::move(from);
  }

  inline TMatchmakeAdd& operator=(const TMatchmakeAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatchmakeAdd& operator=(TMatchmakeAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatchmakeAdd& default_instance();

  static inline const TMatchmakeAdd* internal_default_instance() {
    return reinterpret_cast<const TMatchmakeAdd*>(
               &_TMatchmakeAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(TMatchmakeAdd& a, TMatchmakeAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatchmakeAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatchmakeAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatchmakeAdd* New() const final {
    return CreateMaybeMessage<TMatchmakeAdd>(nullptr);
  }

  TMatchmakeAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatchmakeAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatchmakeAdd& from);
  void MergeFrom(const TMatchmakeAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatchmakeAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatchmakeAdd";
  }
  protected:
  explicit TMatchmakeAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 2,
    kPropertiesFieldNumber = 3,
    kRequiredCountFieldNumber = 1,
  };
  // repeated .server.MatchmakeFilter filters = 2;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::server::MatchmakeFilter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter >*
      mutable_filters();
  private:
  const ::server::MatchmakeFilter& _internal_filters(int index) const;
  ::server::MatchmakeFilter* _internal_add_filters();
  public:
  const ::server::MatchmakeFilter& filters(int index) const;
  ::server::MatchmakeFilter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter >&
      filters() const;

  // repeated .server.PropertyPair properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::server::PropertyPair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair >*
      mutable_properties();
  private:
  const ::server::PropertyPair& _internal_properties(int index) const;
  ::server::PropertyPair* _internal_add_properties();
  public:
  const ::server::PropertyPair& properties(int index) const;
  ::server::PropertyPair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair >&
      properties() const;

  // int64 required_count = 1;
  void clear_required_count();
  ::PROTOBUF_NAMESPACE_ID::int64 required_count() const;
  void set_required_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_required_count() const;
  void _internal_set_required_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TMatchmakeAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter > filters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair > properties_;
  ::PROTOBUF_NAMESPACE_ID::int64 required_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatchmakeTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatchmakeTicket) */ {
 public:
  inline TMatchmakeTicket() : TMatchmakeTicket(nullptr) {}
  virtual ~TMatchmakeTicket();

  TMatchmakeTicket(const TMatchmakeTicket& from);
  TMatchmakeTicket(TMatchmakeTicket&& from) noexcept
    : TMatchmakeTicket() {
    *this = ::std::move(from);
  }

  inline TMatchmakeTicket& operator=(const TMatchmakeTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatchmakeTicket& operator=(TMatchmakeTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatchmakeTicket& default_instance();

  static inline const TMatchmakeTicket* internal_default_instance() {
    return reinterpret_cast<const TMatchmakeTicket*>(
               &_TMatchmakeTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(TMatchmakeTicket& a, TMatchmakeTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatchmakeTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatchmakeTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatchmakeTicket* New() const final {
    return CreateMaybeMessage<TMatchmakeTicket>(nullptr);
  }

  TMatchmakeTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatchmakeTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatchmakeTicket& from);
  void MergeFrom(const TMatchmakeTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatchmakeTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatchmakeTicket";
  }
  protected:
  explicit TMatchmakeTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
  };
  // string ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // @@protoc_insertion_point(class_scope:server.TMatchmakeTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatchmakeRemove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatchmakeRemove) */ {
 public:
  inline TMatchmakeRemove() : TMatchmakeRemove(nullptr) {}
  virtual ~TMatchmakeRemove();

  TMatchmakeRemove(const TMatchmakeRemove& from);
  TMatchmakeRemove(TMatchmakeRemove&& from) noexcept
    : TMatchmakeRemove() {
    *this = ::std::move(from);
  }

  inline TMatchmakeRemove& operator=(const TMatchmakeRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatchmakeRemove& operator=(TMatchmakeRemove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatchmakeRemove& default_instance();

  static inline const TMatchmakeRemove* internal_default_instance() {
    return reinterpret_cast<const TMatchmakeRemove*>(
               &_TMatchmakeRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(TMatchmakeRemove& a, TMatchmakeRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatchmakeRemove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatchmakeRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatchmakeRemove* New() const final {
    return CreateMaybeMessage<TMatchmakeRemove>(nullptr);
  }

  TMatchmakeRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatchmakeRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatchmakeRemove& from);
  void MergeFrom(const TMatchmakeRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatchmakeRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatchmakeRemove";
  }
  protected:
  explicit TMatchmakeRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
  };
  // string ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // @@protoc_insertion_point(class_scope:server.TMatchmakeRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MatchmakeMatched_UserProperty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeMatched.UserProperty) */ {
 public:
  inline MatchmakeMatched_UserProperty() : MatchmakeMatched_UserProperty(nullptr) {}
  virtual ~MatchmakeMatched_UserProperty();

  MatchmakeMatched_UserProperty(const MatchmakeMatched_UserProperty& from);
  MatchmakeMatched_UserProperty(MatchmakeMatched_UserProperty&& from) noexcept
    : MatchmakeMatched_UserProperty() {
    *this = ::std::move(from);
  }

  inline MatchmakeMatched_UserProperty& operator=(const MatchmakeMatched_UserProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchmakeMatched_UserProperty& operator=(MatchmakeMatched_UserProperty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchmakeMatched_UserProperty& default_instance();

  static inline const MatchmakeMatched_UserProperty* internal_default_instance() {
    return reinterpret_cast<const MatchmakeMatched_UserProperty*>(
               &_MatchmakeMatched_UserProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(MatchmakeMatched_UserProperty& a, MatchmakeMatched_UserProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchmakeMatched_UserProperty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchmakeMatched_UserProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchmakeMatched_UserProperty* New() const final {
    return CreateMaybeMessage<MatchmakeMatched_UserProperty>(nullptr);
  }

  MatchmakeMatched_UserProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchmakeMatched_UserProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchmakeMatched_UserProperty& from);
  void MergeFrom(const MatchmakeMatched_UserProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchmakeMatched_UserProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.MatchmakeMatched.UserProperty";
  }
  protected:
  explicit MatchmakeMatched_UserProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kFiltersFieldNumber = 3,
    kUserIdFieldNumber = 1,
  };
  // repeated .server.PropertyPair properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::server::PropertyPair* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair >*
      mutable_properties();
  private:
  const ::server::PropertyPair& _internal_properties(int index) const;
  ::server::PropertyPair* _internal_add_properties();
  public:
  const ::server::PropertyPair& properties(int index) const;
  ::server::PropertyPair* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair >&
      properties() const;

  // repeated .server.MatchmakeFilter filters = 3;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::server::MatchmakeFilter* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter >*
      mutable_filters();
  private:
  const ::server::MatchmakeFilter& _internal_filters(int index) const;
  ::server::MatchmakeFilter* _internal_add_filters();
  public:
  const ::server::MatchmakeFilter& filters(int index) const;
  ::server::MatchmakeFilter* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter >&
      filters() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:server.MatchmakeMatched.UserProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair > properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter > filters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MatchmakeMatched PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.MatchmakeMatched) */ {
 public:
  inline MatchmakeMatched() : MatchmakeMatched(nullptr) {}
  virtual ~MatchmakeMatched();

  MatchmakeMatched(const MatchmakeMatched& from);
  MatchmakeMatched(MatchmakeMatched&& from) noexcept
    : MatchmakeMatched() {
    *this = ::std::move(from);
  }

  inline MatchmakeMatched& operator=(const MatchmakeMatched& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchmakeMatched& operator=(MatchmakeMatched&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchmakeMatched& default_instance();

  static inline const MatchmakeMatched* internal_default_instance() {
    return reinterpret_cast<const MatchmakeMatched*>(
               &_MatchmakeMatched_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(MatchmakeMatched& a, MatchmakeMatched& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchmakeMatched* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchmakeMatched* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchmakeMatched* New() const final {
    return CreateMaybeMessage<MatchmakeMatched>(nullptr);
  }

  MatchmakeMatched* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchmakeMatched>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchmakeMatched& from);
  void MergeFrom(const MatchmakeMatched& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchmakeMatched* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.MatchmakeMatched";
  }
  protected:
  explicit MatchmakeMatched(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MatchmakeMatched_UserProperty UserProperty;

  // accessors -------------------------------------------------------

  enum : int {
    kPresencesFieldNumber = 3,
    kPropertiesFieldNumber = 5,
    kTicketFieldNumber = 1,
    kTokenFieldNumber = 2,
    kSelfFieldNumber = 4,
  };
  // repeated .server.UserPresence presences = 3;
  int presences_size() const;
  private:
  int _internal_presences_size() const;
  public:
  void clear_presences();
  ::server::UserPresence* mutable_presences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
      mutable_presences();
  private:
  const ::server::UserPresence& _internal_presences(int index) const;
  ::server::UserPresence* _internal_add_presences();
  public:
  const ::server::UserPresence& presences(int index) const;
  ::server::UserPresence* add_presences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
      presences() const;

  // repeated .server.MatchmakeMatched.UserProperty properties = 5;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::server::MatchmakeMatched_UserProperty* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >*
      mutable_properties();
  private:
  const ::server::MatchmakeMatched_UserProperty& _internal_properties(int index) const;
  ::server::MatchmakeMatched_UserProperty* _internal_add_properties();
  public:
  const ::server::MatchmakeMatched_UserProperty& properties(int index) const;
  ::server::MatchmakeMatched_UserProperty* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >&
      properties() const;

  // string ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // string token = 2;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .server.UserPresence self = 4;
  bool has_self() const;
  private:
  bool _internal_has_self() const;
  public:
  void clear_self();
  const ::server::UserPresence& self() const;
  ::server::UserPresence* release_self();
  ::server::UserPresence* mutable_self();
  void set_allocated_self(::server::UserPresence* self);
  private:
  const ::server::UserPresence& _internal_self() const;
  ::server::UserPresence* _internal_mutable_self();
  public:
  void unsafe_arena_set_allocated_self(
      ::server::UserPresence* self);
  ::server::UserPresence* unsafe_arena_release_self();

  // @@protoc_insertion_point(class_scope:server.MatchmakeMatched)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence > presences_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::server::UserPresence* self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Match PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Match) */ {
 public:
  inline Match() : Match(nullptr) {}
  virtual ~Match();

  Match(const Match& from);
  Match(Match&& from) noexcept
    : Match() {
    *this = ::std::move(from);
  }

  inline Match& operator=(const Match& from) {
    CopyFrom(from);
    return *this;
  }
  inline Match& operator=(Match&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Match& default_instance();

  static inline const Match* internal_default_instance() {
    return reinterpret_cast<const Match*>(
               &_Match_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(Match& a, Match& b) {
    a.Swap(&b);
  }
  inline void Swap(Match* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Match* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Match* New() const final {
    return CreateMaybeMessage<Match>(nullptr);
  }

  Match* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Match>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Match& from);
  void MergeFrom(const Match& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Match* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Match";
  }
  protected:
  explicit Match(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresencesFieldNumber = 2,
    kMatchIdFieldNumber = 1,
    kSelfFieldNumber = 3,
  };
  // repeated .server.UserPresence presences = 2;
  int presences_size() const;
  private:
  int _internal_presences_size() const;
  public:
  void clear_presences();
  ::server::UserPresence* mutable_presences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
      mutable_presences();
  private:
  const ::server::UserPresence& _internal_presences(int index) const;
  ::server::UserPresence* _internal_add_presences();
  public:
  const ::server::UserPresence& presences(int index) const;
  ::server::UserPresence* add_presences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
      presences() const;

  // string match_id = 1;
  void clear_match_id();
  const std::string& match_id() const;
  void set_match_id(const std::string& value);
  void set_match_id(std::string&& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  std::string* mutable_match_id();
  std::string* release_match_id();
  void set_allocated_match_id(std::string* match_id);
  private:
  const std::string& _internal_match_id() const;
  void _internal_set_match_id(const std::string& value);
  std::string* _internal_mutable_match_id();
  public:

  // .server.UserPresence self = 3;
  bool has_self() const;
  private:
  bool _internal_has_self() const;
  public:
  void clear_self();
  const ::server::UserPresence& self() const;
  ::server::UserPresence* release_self();
  ::server::UserPresence* mutable_self();
  void set_allocated_self(::server::UserPresence* self);
  private:
  const ::server::UserPresence& _internal_self() const;
  ::server::UserPresence* _internal_mutable_self();
  public:
  void unsafe_arena_set_allocated_self(
      ::server::UserPresence* self);
  ::server::UserPresence* unsafe_arena_release_self();

  // @@protoc_insertion_point(class_scope:server.Match)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence > presences_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_id_;
  ::server::UserPresence* self_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MatchPresence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.MatchPresence) */ {
 public:
  inline MatchPresence() : MatchPresence(nullptr) {}
  virtual ~MatchPresence();

  MatchPresence(const MatchPresence& from);
  MatchPresence(MatchPresence&& from) noexcept
    : MatchPresence() {
    *this = ::std::move(from);
  }

  inline MatchPresence& operator=(const MatchPresence& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchPresence& operator=(MatchPresence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchPresence& default_instance();

  static inline const MatchPresence* internal_default_instance() {
    return reinterpret_cast<const MatchPresence*>(
               &_MatchPresence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(MatchPresence& a, MatchPresence& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchPresence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchPresence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchPresence* New() const final {
    return CreateMaybeMessage<MatchPresence>(nullptr);
  }

  MatchPresence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchPresence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchPresence& from);
  void MergeFrom(const MatchPresence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchPresence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.MatchPresence";
  }
  protected:
  explicit MatchPresence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJoinsFieldNumber = 2,
    kLeavesFieldNumber = 3,
    kMatchIdFieldNumber = 1,
  };
  // repeated .server.UserPresence joins = 2;
  int joins_size() const;
  private:
  int _internal_joins_size() const;
  public:
  void clear_joins();
  ::server::UserPresence* mutable_joins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
      mutable_joins();
  private:
  const ::server::UserPresence& _internal_joins(int index) const;
  ::server::UserPresence* _internal_add_joins();
  public:
  const ::server::UserPresence& joins(int index) const;
  ::server::UserPresence* add_joins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
      joins() const;

  // repeated .server.UserPresence leaves = 3;
  int leaves_size() const;
  private:
  int _internal_leaves_size() const;
  public:
  void clear_leaves();
  ::server::UserPresence* mutable_leaves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
      mutable_leaves();
  private:
  const ::server::UserPresence& _internal_leaves(int index) const;
  ::server::UserPresence* _internal_add_leaves();
  public:
  const ::server::UserPresence& leaves(int index) const;
  ::server::UserPresence* add_leaves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
      leaves() const;

  // string match_id = 1;
  void clear_match_id();
  const std::string& match_id() const;
  void set_match_id(const std::string& value);
  void set_match_id(std::string&& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  std::string* mutable_match_id();
  std::string* release_match_id();
  void set_allocated_match_id(std::string* match_id);
  private:
  const std::string& _internal_match_id() const;
  void _internal_set_match_id(const std::string& value);
  std::string* _internal_mutable_match_id();
  public:

  // @@protoc_insertion_point(class_scope:server.MatchPresence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence > joins_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence > leaves_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatchCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatchCreate) */ {
 public:
  inline TMatchCreate() : TMatchCreate(nullptr) {}
  virtual ~TMatchCreate();

  TMatchCreate(const TMatchCreate& from);
  TMatchCreate(TMatchCreate&& from) noexcept
    : TMatchCreate() {
    *this = ::std::move(from);
  }

  inline TMatchCreate& operator=(const TMatchCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatchCreate& operator=(TMatchCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatchCreate& default_instance();

  static inline const TMatchCreate* internal_default_instance() {
    return reinterpret_cast<const TMatchCreate*>(
               &_TMatchCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(TMatchCreate& a, TMatchCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatchCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatchCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatchCreate* New() const final {
    return CreateMaybeMessage<TMatchCreate>(nullptr);
  }

  TMatchCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatchCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatchCreate& from);
  void MergeFrom(const TMatchCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatchCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatchCreate";
  }
  protected:
  explicit TMatchCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:server.TMatchCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatch) */ {
 public:
  inline TMatch() : TMatch(nullptr) {}
  virtual ~TMatch();

  TMatch(const TMatch& from);
  TMatch(TMatch&& from) noexcept
    : TMatch() {
    *this = ::std::move(from);
  }

  inline TMatch& operator=(const TMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatch& operator=(TMatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatch& default_instance();

  static inline const TMatch* internal_default_instance() {
    return reinterpret_cast<const TMatch*>(
               &_TMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(TMatch& a, TMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatch* New() const final {
    return CreateMaybeMessage<TMatch>(nullptr);
  }

  TMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatch& from);
  void MergeFrom(const TMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatch";
  }
  protected:
  explicit TMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
  };
  // .server.Match match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;
  public:
  void clear_match();
  const ::server::Match& match() const;
  ::server::Match* release_match();
  ::server::Match* mutable_match();
  void set_allocated_match(::server::Match* match);
  private:
  const ::server::Match& _internal_match() const;
  ::server::Match* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::server::Match* match);
  ::server::Match* unsafe_arena_release_match();

  // @@protoc_insertion_point(class_scope:server.TMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::server::Match* match_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatchesJoin_MatchJoin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatchesJoin.MatchJoin) */ {
 public:
  inline TMatchesJoin_MatchJoin() : TMatchesJoin_MatchJoin(nullptr) {}
  virtual ~TMatchesJoin_MatchJoin();

  TMatchesJoin_MatchJoin(const TMatchesJoin_MatchJoin& from);
  TMatchesJoin_MatchJoin(TMatchesJoin_MatchJoin&& from) noexcept
    : TMatchesJoin_MatchJoin() {
    *this = ::std::move(from);
  }

  inline TMatchesJoin_MatchJoin& operator=(const TMatchesJoin_MatchJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatchesJoin_MatchJoin& operator=(TMatchesJoin_MatchJoin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatchesJoin_MatchJoin& default_instance();

  enum IdCase {
    kMatchId = 1,
    kToken = 2,
    ID_NOT_SET = 0,
  };

  static inline const TMatchesJoin_MatchJoin* internal_default_instance() {
    return reinterpret_cast<const TMatchesJoin_MatchJoin*>(
               &_TMatchesJoin_MatchJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(TMatchesJoin_MatchJoin& a, TMatchesJoin_MatchJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatchesJoin_MatchJoin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatchesJoin_MatchJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatchesJoin_MatchJoin* New() const final {
    return CreateMaybeMessage<TMatchesJoin_MatchJoin>(nullptr);
  }

  TMatchesJoin_MatchJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatchesJoin_MatchJoin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatchesJoin_MatchJoin& from);
  void MergeFrom(const TMatchesJoin_MatchJoin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatchesJoin_MatchJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatchesJoin.MatchJoin";
  }
  protected:
  explicit TMatchesJoin_MatchJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // string match_id = 1;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  const std::string& match_id() const;
  void set_match_id(const std::string& value);
  void set_match_id(std::string&& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  std::string* mutable_match_id();
  std::string* release_match_id();
  void set_allocated_match_id(std::string* match_id);
  private:
  const std::string& _internal_match_id() const;
  void _internal_set_match_id(const std::string& value);
  std::string* _internal_mutable_match_id();
  public:

  // string token = 2;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TMatchesJoin.MatchJoin)
 private:
  class _Internal;
  void set_has_match_id();
  void set_has_token();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatchesJoin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatchesJoin) */ {
 public:
  inline TMatchesJoin() : TMatchesJoin(nullptr) {}
  virtual ~TMatchesJoin();

  TMatchesJoin(const TMatchesJoin& from);
  TMatchesJoin(TMatchesJoin&& from) noexcept
    : TMatchesJoin() {
    *this = ::std::move(from);
  }

  inline TMatchesJoin& operator=(const TMatchesJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatchesJoin& operator=(TMatchesJoin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatchesJoin& default_instance();

  static inline const TMatchesJoin* internal_default_instance() {
    return reinterpret_cast<const TMatchesJoin*>(
               &_TMatchesJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TMatchesJoin& a, TMatchesJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatchesJoin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatchesJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatchesJoin* New() const final {
    return CreateMaybeMessage<TMatchesJoin>(nullptr);
  }

  TMatchesJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatchesJoin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatchesJoin& from);
  void MergeFrom(const TMatchesJoin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatchesJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatchesJoin";
  }
  protected:
  explicit TMatchesJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TMatchesJoin_MatchJoin MatchJoin;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
  };
  // repeated .server.TMatchesJoin.MatchJoin matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::server::TMatchesJoin_MatchJoin* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >*
      mutable_matches();
  private:
  const ::server::TMatchesJoin_MatchJoin& _internal_matches(int index) const;
  ::server::TMatchesJoin_MatchJoin* _internal_add_matches();
  public:
  const ::server::TMatchesJoin_MatchJoin& matches(int index) const;
  ::server::TMatchesJoin_MatchJoin* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >&
      matches() const;

  // @@protoc_insertion_point(class_scope:server.TMatchesJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin > matches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatches PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatches) */ {
 public:
  inline TMatches() : TMatches(nullptr) {}
  virtual ~TMatches();

  TMatches(const TMatches& from);
  TMatches(TMatches&& from) noexcept
    : TMatches() {
    *this = ::std::move(from);
  }

  inline TMatches& operator=(const TMatches& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatches& operator=(TMatches&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatches& default_instance();

  static inline const TMatches* internal_default_instance() {
    return reinterpret_cast<const TMatches*>(
               &_TMatches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TMatches& a, TMatches& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatches* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatches* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatches* New() const final {
    return CreateMaybeMessage<TMatches>(nullptr);
  }

  TMatches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatches>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatches& from);
  void MergeFrom(const TMatches& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatches* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatches";
  }
  protected:
  explicit TMatches(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
  };
  // repeated .server.Match matches = 1;
  int matches_size() const;
  private:
  int _internal_matches_size() const;
  public:
  void clear_matches();
  ::server::Match* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Match >*
      mutable_matches();
  private:
  const ::server::Match& _internal_matches(int index) const;
  ::server::Match* _internal_add_matches();
  public:
  const ::server::Match& matches(int index) const;
  ::server::Match* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Match >&
      matches() const;

  // @@protoc_insertion_point(class_scope:server.TMatches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Match > matches_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MatchDataSend PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.MatchDataSend) */ {
 public:
  inline MatchDataSend() : MatchDataSend(nullptr) {}
  virtual ~MatchDataSend();

  MatchDataSend(const MatchDataSend& from);
  MatchDataSend(MatchDataSend&& from) noexcept
    : MatchDataSend() {
    *this = ::std::move(from);
  }

  inline MatchDataSend& operator=(const MatchDataSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchDataSend& operator=(MatchDataSend&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchDataSend& default_instance();

  static inline const MatchDataSend* internal_default_instance() {
    return reinterpret_cast<const MatchDataSend*>(
               &_MatchDataSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(MatchDataSend& a, MatchDataSend& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchDataSend* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchDataSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchDataSend* New() const final {
    return CreateMaybeMessage<MatchDataSend>(nullptr);
  }

  MatchDataSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchDataSend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchDataSend& from);
  void MergeFrom(const MatchDataSend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchDataSend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.MatchDataSend";
  }
  protected:
  explicit MatchDataSend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresencesFieldNumber = 4,
    kMatchIdFieldNumber = 1,
    kDataFieldNumber = 3,
    kOpCodeFieldNumber = 2,
  };
  // repeated .server.UserPresence presences = 4;
  int presences_size() const;
  private:
  int _internal_presences_size() const;
  public:
  void clear_presences();
  ::server::UserPresence* mutable_presences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
      mutable_presences();
  private:
  const ::server::UserPresence& _internal_presences(int index) const;
  ::server::UserPresence* _internal_add_presences();
  public:
  const ::server::UserPresence& presences(int index) const;
  ::server::UserPresence* add_presences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
      presences() const;

  // string match_id = 1;
  void clear_match_id();
  const std::string& match_id() const;
  void set_match_id(const std::string& value);
  void set_match_id(std::string&& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  std::string* mutable_match_id();
  std::string* release_match_id();
  void set_allocated_match_id(std::string* match_id);
  private:
  const std::string& _internal_match_id() const;
  void _internal_set_match_id(const std::string& value);
  std::string* _internal_mutable_match_id();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 op_code = 2;
  void clear_op_code();
  ::PROTOBUF_NAMESPACE_ID::int64 op_code() const;
  void set_op_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_op_code() const;
  void _internal_set_op_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.MatchDataSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence > presences_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 op_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class MatchData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.MatchData) */ {
 public:
  inline MatchData() : MatchData(nullptr) {}
  virtual ~MatchData();

  MatchData(const MatchData& from);
  MatchData(MatchData&& from) noexcept
    : MatchData() {
    *this = ::std::move(from);
  }

  inline MatchData& operator=(const MatchData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchData& operator=(MatchData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchData& default_instance();

  static inline const MatchData* internal_default_instance() {
    return reinterpret_cast<const MatchData*>(
               &_MatchData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(MatchData& a, MatchData& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchData* New() const final {
    return CreateMaybeMessage<MatchData>(nullptr);
  }

  MatchData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchData& from);
  void MergeFrom(const MatchData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.MatchData";
  }
  protected:
  explicit MatchData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kDataFieldNumber = 4,
    kPresenceFieldNumber = 2,
    kOpCodeFieldNumber = 3,
  };
  // string match_id = 1;
  void clear_match_id();
  const std::string& match_id() const;
  void set_match_id(const std::string& value);
  void set_match_id(std::string&& value);
  void set_match_id(const char* value);
  void set_match_id(const char* value, size_t size);
  std::string* mutable_match_id();
  std::string* release_match_id();
  void set_allocated_match_id(std::string* match_id);
  private:
  const std::string& _internal_match_id() const;
  void _internal_set_match_id(const std::string& value);
  std::string* _internal_mutable_match_id();
  public:

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .server.UserPresence presence = 2;
  bool has_presence() const;
  private:
  bool _internal_has_presence() const;
  public:
  void clear_presence();
  const ::server::UserPresence& presence() const;
  ::server::UserPresence* release_presence();
  ::server::UserPresence* mutable_presence();
  void set_allocated_presence(::server::UserPresence* presence);
  private:
  const ::server::UserPresence& _internal_presence() const;
  ::server::UserPresence* _internal_mutable_presence();
  public:
  void unsafe_arena_set_allocated_presence(
      ::server::UserPresence* presence);
  ::server::UserPresence* unsafe_arena_release_presence();

  // int64 op_code = 3;
  void clear_op_code();
  ::PROTOBUF_NAMESPACE_ID::int64 op_code() const;
  void set_op_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_op_code() const;
  void _internal_set_op_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.MatchData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr match_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::server::UserPresence* presence_;
  ::PROTOBUF_NAMESPACE_ID::int64 op_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TMatchesLeave PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TMatchesLeave) */ {
 public:
  inline TMatchesLeave() : TMatchesLeave(nullptr) {}
  virtual ~TMatchesLeave();

  TMatchesLeave(const TMatchesLeave& from);
  TMatchesLeave(TMatchesLeave&& from) noexcept
    : TMatchesLeave() {
    *this = ::std::move(from);
  }

  inline TMatchesLeave& operator=(const TMatchesLeave& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMatchesLeave& operator=(TMatchesLeave&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TMatchesLeave& default_instance();

  static inline const TMatchesLeave* internal_default_instance() {
    return reinterpret_cast<const TMatchesLeave*>(
               &_TMatchesLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(TMatchesLeave& a, TMatchesLeave& b) {
    a.Swap(&b);
  }
  inline void Swap(TMatchesLeave* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMatchesLeave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TMatchesLeave* New() const final {
    return CreateMaybeMessage<TMatchesLeave>(nullptr);
  }

  TMatchesLeave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TMatchesLeave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TMatchesLeave& from);
  void MergeFrom(const TMatchesLeave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMatchesLeave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TMatchesLeave";
  }
  protected:
  explicit TMatchesLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdsFieldNumber = 1,
  };
  // repeated string match_ids = 1;
  int match_ids_size() const;
  private:
  int _internal_match_ids_size() const;
  public:
  void clear_match_ids();
  const std::string& match_ids(int index) const;
  std::string* mutable_match_ids(int index);
  void set_match_ids(int index, const std::string& value);
  void set_match_ids(int index, std::string&& value);
  void set_match_ids(int index, const char* value);
  void set_match_ids(int index, const char* value, size_t size);
  std::string* add_match_ids();
  void add_match_ids(const std::string& value);
  void add_match_ids(std::string&& value);
  void add_match_ids(const char* value);
  void add_match_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& match_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_match_ids();
  private:
  const std::string& _internal_match_ids(int index) const;
  std::string* _internal_add_match_ids();
  public:

  // @@protoc_insertion_point(class_scope:server.TMatchesLeave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> match_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageList) */ {
 public:
  inline TStorageList() : TStorageList(nullptr) {}
  virtual ~TStorageList();

  TStorageList(const TStorageList& from);
  TStorageList(TStorageList&& from) noexcept
    : TStorageList() {
    *this = ::std::move(from);
  }

  inline TStorageList& operator=(const TStorageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageList& operator=(TStorageList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageList& default_instance();

  static inline const TStorageList* internal_default_instance() {
    return reinterpret_cast<const TStorageList*>(
               &_TStorageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(TStorageList& a, TStorageList& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageList* New() const final {
    return CreateMaybeMessage<TStorageList>(nullptr);
  }

  TStorageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageList& from);
  void MergeFrom(const TStorageList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageList";
  }
  protected:
  explicit TStorageList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kBucketFieldNumber = 2,
    kCollectionFieldNumber = 3,
    kCursorFieldNumber = 5,
    kLimitFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string bucket = 2;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string collection = 3;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string cursor = 5;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int64 limit = 4;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageFetch_StorageKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageFetch.StorageKey) */ {
 public:
  inline TStorageFetch_StorageKey() : TStorageFetch_StorageKey(nullptr) {}
  virtual ~TStorageFetch_StorageKey();

  TStorageFetch_StorageKey(const TStorageFetch_StorageKey& from);
  TStorageFetch_StorageKey(TStorageFetch_StorageKey&& from) noexcept
    : TStorageFetch_StorageKey() {
    *this = ::std::move(from);
  }

  inline TStorageFetch_StorageKey& operator=(const TStorageFetch_StorageKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageFetch_StorageKey& operator=(TStorageFetch_StorageKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageFetch_StorageKey& default_instance();

  static inline const TStorageFetch_StorageKey* internal_default_instance() {
    return reinterpret_cast<const TStorageFetch_StorageKey*>(
               &_TStorageFetch_StorageKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(TStorageFetch_StorageKey& a, TStorageFetch_StorageKey& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageFetch_StorageKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageFetch_StorageKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageFetch_StorageKey* New() const final {
    return CreateMaybeMessage<TStorageFetch_StorageKey>(nullptr);
  }

  TStorageFetch_StorageKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageFetch_StorageKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageFetch_StorageKey& from);
  void MergeFrom(const TStorageFetch_StorageKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageFetch_StorageKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageFetch.StorageKey";
  }
  protected:
  explicit TStorageFetch_StorageKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kRecordFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string record = 3;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // string user_id = 4;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageFetch.StorageKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageFetch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageFetch) */ {
 public:
  inline TStorageFetch() : TStorageFetch(nullptr) {}
  virtual ~TStorageFetch();

  TStorageFetch(const TStorageFetch& from);
  TStorageFetch(TStorageFetch&& from) noexcept
    : TStorageFetch() {
    *this = ::std::move(from);
  }

  inline TStorageFetch& operator=(const TStorageFetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageFetch& operator=(TStorageFetch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageFetch& default_instance();

  static inline const TStorageFetch* internal_default_instance() {
    return reinterpret_cast<const TStorageFetch*>(
               &_TStorageFetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(TStorageFetch& a, TStorageFetch& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageFetch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageFetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageFetch* New() const final {
    return CreateMaybeMessage<TStorageFetch>(nullptr);
  }

  TStorageFetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageFetch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageFetch& from);
  void MergeFrom(const TStorageFetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageFetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageFetch";
  }
  protected:
  explicit TStorageFetch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TStorageFetch_StorageKey StorageKey;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated .server.TStorageFetch.StorageKey keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::server::TStorageFetch_StorageKey* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageFetch_StorageKey >*
      mutable_keys();
  private:
  const ::server::TStorageFetch_StorageKey& _internal_keys(int index) const;
  ::server::TStorageFetch_StorageKey* _internal_add_keys();
  public:
  const ::server::TStorageFetch_StorageKey& keys(int index) const;
  ::server::TStorageFetch_StorageKey* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageFetch_StorageKey >&
      keys() const;

  // @@protoc_insertion_point(class_scope:server.TStorageFetch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageFetch_StorageKey > keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageData_StorageData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageData.StorageData) */ {
 public:
  inline TStorageData_StorageData() : TStorageData_StorageData(nullptr) {}
  virtual ~TStorageData_StorageData();

  TStorageData_StorageData(const TStorageData_StorageData& from);
  TStorageData_StorageData(TStorageData_StorageData&& from) noexcept
    : TStorageData_StorageData() {
    *this = ::std::move(from);
  }

  inline TStorageData_StorageData& operator=(const TStorageData_StorageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageData_StorageData& operator=(TStorageData_StorageData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageData_StorageData& default_instance();

  static inline const TStorageData_StorageData* internal_default_instance() {
    return reinterpret_cast<const TStorageData_StorageData*>(
               &_TStorageData_StorageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(TStorageData_StorageData& a, TStorageData_StorageData& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageData_StorageData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageData_StorageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageData_StorageData* New() const final {
    return CreateMaybeMessage<TStorageData_StorageData>(nullptr);
  }

  TStorageData_StorageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageData_StorageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageData_StorageData& from);
  void MergeFrom(const TStorageData_StorageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageData_StorageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageData.StorageData";
  }
  protected:
  explicit TStorageData_StorageData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kRecordFieldNumber = 3,
    kUserIdFieldNumber = 4,
    kValueFieldNumber = 5,
    kVersionFieldNumber = 6,
    kPermissionReadFieldNumber = 7,
    kPermissionWriteFieldNumber = 8,
    kCreatedAtFieldNumber = 9,
    kUpdatedAtFieldNumber = 10,
    kExpiresAtFieldNumber = 11,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string record = 3;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // string user_id = 4;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string version = 6;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int32 permission_read = 7;
  void clear_permission_read();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_read() const;
  void set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission_read() const;
  void _internal_set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 permission_write = 8;
  void clear_permission_write();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_write() const;
  void set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission_write() const;
  void _internal_set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 created_at = 9;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 10;
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expires_at = 11;
  void clear_expires_at();
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at() const;
  void set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expires_at() const;
  void _internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageData.StorageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_read_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_write_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageData) */ {
 public:
  inline TStorageData() : TStorageData(nullptr) {}
  virtual ~TStorageData();

  TStorageData(const TStorageData& from);
  TStorageData(TStorageData&& from) noexcept
    : TStorageData() {
    *this = ::std::move(from);
  }

  inline TStorageData& operator=(const TStorageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageData& operator=(TStorageData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageData& default_instance();

  static inline const TStorageData* internal_default_instance() {
    return reinterpret_cast<const TStorageData*>(
               &_TStorageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(TStorageData& a, TStorageData& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageData* New() const final {
    return CreateMaybeMessage<TStorageData>(nullptr);
  }

  TStorageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageData& from);
  void MergeFrom(const TStorageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageData";
  }
  protected:
  explicit TStorageData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TStorageData_StorageData StorageData;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .server.TStorageData.StorageData data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::server::TStorageData_StorageData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageData_StorageData >*
      mutable_data();
  private:
  const ::server::TStorageData_StorageData& _internal_data(int index) const;
  ::server::TStorageData_StorageData* _internal_add_data();
  public:
  const ::server::TStorageData_StorageData& data(int index) const;
  ::server::TStorageData_StorageData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageData_StorageData >&
      data() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageData_StorageData > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageWrite_StorageData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageWrite.StorageData) */ {
 public:
  inline TStorageWrite_StorageData() : TStorageWrite_StorageData(nullptr) {}
  virtual ~TStorageWrite_StorageData();

  TStorageWrite_StorageData(const TStorageWrite_StorageData& from);
  TStorageWrite_StorageData(TStorageWrite_StorageData&& from) noexcept
    : TStorageWrite_StorageData() {
    *this = ::std::move(from);
  }

  inline TStorageWrite_StorageData& operator=(const TStorageWrite_StorageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageWrite_StorageData& operator=(TStorageWrite_StorageData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageWrite_StorageData& default_instance();

  static inline const TStorageWrite_StorageData* internal_default_instance() {
    return reinterpret_cast<const TStorageWrite_StorageData*>(
               &_TStorageWrite_StorageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(TStorageWrite_StorageData& a, TStorageWrite_StorageData& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageWrite_StorageData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageWrite_StorageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageWrite_StorageData* New() const final {
    return CreateMaybeMessage<TStorageWrite_StorageData>(nullptr);
  }

  TStorageWrite_StorageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageWrite_StorageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageWrite_StorageData& from);
  void MergeFrom(const TStorageWrite_StorageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageWrite_StorageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageWrite.StorageData";
  }
  protected:
  explicit TStorageWrite_StorageData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kRecordFieldNumber = 3,
    kValueFieldNumber = 4,
    kVersionFieldNumber = 5,
    kPermissionReadFieldNumber = 6,
    kPermissionWriteFieldNumber = 7,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string record = 3;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // string value = 4;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int32 permission_read = 6;
  void clear_permission_read();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_read() const;
  void set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission_read() const;
  void _internal_set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 permission_write = 7;
  void clear_permission_write();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_write() const;
  void set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission_write() const;
  void _internal_set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageWrite.StorageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_read_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_write_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageWrite) */ {
 public:
  inline TStorageWrite() : TStorageWrite(nullptr) {}
  virtual ~TStorageWrite();

  TStorageWrite(const TStorageWrite& from);
  TStorageWrite(TStorageWrite&& from) noexcept
    : TStorageWrite() {
    *this = ::std::move(from);
  }

  inline TStorageWrite& operator=(const TStorageWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageWrite& operator=(TStorageWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageWrite& default_instance();

  static inline const TStorageWrite* internal_default_instance() {
    return reinterpret_cast<const TStorageWrite*>(
               &_TStorageWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(TStorageWrite& a, TStorageWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageWrite* New() const final {
    return CreateMaybeMessage<TStorageWrite>(nullptr);
  }

  TStorageWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageWrite& from);
  void MergeFrom(const TStorageWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageWrite";
  }
  protected:
  explicit TStorageWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TStorageWrite_StorageData StorageData;

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
  };
  // repeated .server.TStorageWrite.StorageData data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::server::TStorageWrite_StorageData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageWrite_StorageData >*
      mutable_data();
  private:
  const ::server::TStorageWrite_StorageData& _internal_data(int index) const;
  ::server::TStorageWrite_StorageData* _internal_add_data();
  public:
  const ::server::TStorageWrite_StorageData& data(int index) const;
  ::server::TStorageWrite_StorageData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageWrite_StorageData >&
      data() const;

  // @@protoc_insertion_point(class_scope:server.TStorageWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageWrite_StorageData > data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageUpdate_StorageUpdate_UpdateOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageUpdate.StorageUpdate.UpdateOp) */ {
 public:
  inline TStorageUpdate_StorageUpdate_UpdateOp() : TStorageUpdate_StorageUpdate_UpdateOp(nullptr) {}
  virtual ~TStorageUpdate_StorageUpdate_UpdateOp();

  TStorageUpdate_StorageUpdate_UpdateOp(const TStorageUpdate_StorageUpdate_UpdateOp& from);
  TStorageUpdate_StorageUpdate_UpdateOp(TStorageUpdate_StorageUpdate_UpdateOp&& from) noexcept
    : TStorageUpdate_StorageUpdate_UpdateOp() {
    *this = ::std::move(from);
  }

  inline TStorageUpdate_StorageUpdate_UpdateOp& operator=(const TStorageUpdate_StorageUpdate_UpdateOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageUpdate_StorageUpdate_UpdateOp& operator=(TStorageUpdate_StorageUpdate_UpdateOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageUpdate_StorageUpdate_UpdateOp& default_instance();

  static inline const TStorageUpdate_StorageUpdate_UpdateOp* internal_default_instance() {
    return reinterpret_cast<const TStorageUpdate_StorageUpdate_UpdateOp*>(
               &_TStorageUpdate_StorageUpdate_UpdateOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(TStorageUpdate_StorageUpdate_UpdateOp& a, TStorageUpdate_StorageUpdate_UpdateOp& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageUpdate_StorageUpdate_UpdateOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageUpdate_StorageUpdate_UpdateOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageUpdate_StorageUpdate_UpdateOp* New() const final {
    return CreateMaybeMessage<TStorageUpdate_StorageUpdate_UpdateOp>(nullptr);
  }

  TStorageUpdate_StorageUpdate_UpdateOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageUpdate_StorageUpdate_UpdateOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageUpdate_StorageUpdate_UpdateOp& from);
  void MergeFrom(const TStorageUpdate_StorageUpdate_UpdateOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageUpdate_StorageUpdate_UpdateOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageUpdate.StorageUpdate.UpdateOp";
  }
  protected:
  explicit TStorageUpdate_StorageUpdate_UpdateOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode UpdateOpCode;
  static constexpr UpdateOpCode ADD =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_ADD;
  static constexpr UpdateOpCode APPEND =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_APPEND;
  static constexpr UpdateOpCode COPY =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COPY;
  static constexpr UpdateOpCode INCR =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INCR;
  static constexpr UpdateOpCode INIT =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_INIT;
  static constexpr UpdateOpCode MERGE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_MERGE;
  static constexpr UpdateOpCode MOVE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_MOVE;
  static constexpr UpdateOpCode PATCH =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_PATCH;
  static constexpr UpdateOpCode REMOVE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_REMOVE;
  static constexpr UpdateOpCode REPLACE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_REPLACE;
  static constexpr UpdateOpCode TEST =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_TEST;
  static constexpr UpdateOpCode COMPARE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_COMPARE;
  static inline bool UpdateOpCode_IsValid(int value) {
    return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_IsValid(value);
  }
  static constexpr UpdateOpCode UpdateOpCode_MIN =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MIN;
  static constexpr UpdateOpCode UpdateOpCode_MAX =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_MAX;
  static constexpr int UpdateOpCode_ARRAYSIZE =
    TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_UpdateOpCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UpdateOpCode_descriptor() {
    return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor();
  }
  template<typename T>
  static inline const std::string& UpdateOpCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdateOpCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdateOpCode_Name.");
    return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Name(enum_t_value);
  }
  static inline bool UpdateOpCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      UpdateOpCode* value) {
    return TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 7,
    kPathFieldNumber = 2,
    kValueFieldNumber = 3,
    kFromFieldNumber = 4,
    kOpFieldNumber = 1,
    kConditionalFieldNumber = 5,
    kAssertFieldNumber = 6,
  };
  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
      mutable_ops();
  private:
  const ::server::TStorageUpdate_StorageUpdate_UpdateOp& _internal_ops(int index) const;
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* _internal_add_ops();
  public:
  const ::server::TStorageUpdate_StorageUpdate_UpdateOp& ops(int index) const;
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
      ops() const;

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string from = 4;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // int32 op = 1;
  void clear_op();
  ::PROTOBUF_NAMESPACE_ID::int32 op() const;
  void set_op(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_op() const;
  void _internal_set_op(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool conditional = 5;
  void clear_conditional();
  bool conditional() const;
  void set_conditional(bool value);
  private:
  bool _internal_conditional() const;
  void _internal_set_conditional(bool value);
  public:

  // int64 assert = 6;
  void clear_assert();
  ::PROTOBUF_NAMESPACE_ID::int64 assert() const;
  void set_assert(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_assert() const;
  void _internal_set_assert(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageUpdate.StorageUpdate.UpdateOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp > ops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::int32 op_;
  bool conditional_;
  ::PROTOBUF_NAMESPACE_ID::int64 assert_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageUpdate_StorageUpdate_StorageKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageUpdate.StorageUpdate.StorageKey) */ {
 public:
  inline TStorageUpdate_StorageUpdate_StorageKey() : TStorageUpdate_StorageUpdate_StorageKey(nullptr) {}
  virtual ~TStorageUpdate_StorageUpdate_StorageKey();

  TStorageUpdate_StorageUpdate_StorageKey(const TStorageUpdate_StorageUpdate_StorageKey& from);
  TStorageUpdate_StorageUpdate_StorageKey(TStorageUpdate_StorageUpdate_StorageKey&& from) noexcept
    : TStorageUpdate_StorageUpdate_StorageKey() {
    *this = ::std::move(from);
  }

  inline TStorageUpdate_StorageUpdate_StorageKey& operator=(const TStorageUpdate_StorageUpdate_StorageKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageUpdate_StorageUpdate_StorageKey& operator=(TStorageUpdate_StorageUpdate_StorageKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageUpdate_StorageUpdate_StorageKey& default_instance();

  static inline const TStorageUpdate_StorageUpdate_StorageKey* internal_default_instance() {
    return reinterpret_cast<const TStorageUpdate_StorageUpdate_StorageKey*>(
               &_TStorageUpdate_StorageUpdate_StorageKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(TStorageUpdate_StorageUpdate_StorageKey& a, TStorageUpdate_StorageUpdate_StorageKey& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageUpdate_StorageUpdate_StorageKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageUpdate_StorageUpdate_StorageKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageUpdate_StorageUpdate_StorageKey* New() const final {
    return CreateMaybeMessage<TStorageUpdate_StorageUpdate_StorageKey>(nullptr);
  }

  TStorageUpdate_StorageUpdate_StorageKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageUpdate_StorageUpdate_StorageKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageUpdate_StorageUpdate_StorageKey& from);
  void MergeFrom(const TStorageUpdate_StorageUpdate_StorageKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageUpdate_StorageUpdate_StorageKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageUpdate.StorageUpdate.StorageKey";
  }
  protected:
  explicit TStorageUpdate_StorageUpdate_StorageKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kRecordFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string record = 3;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageUpdate.StorageUpdate.StorageKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageUpdate_StorageUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageUpdate.StorageUpdate) */ {
 public:
  inline TStorageUpdate_StorageUpdate() : TStorageUpdate_StorageUpdate(nullptr) {}
  virtual ~TStorageUpdate_StorageUpdate();

  TStorageUpdate_StorageUpdate(const TStorageUpdate_StorageUpdate& from);
  TStorageUpdate_StorageUpdate(TStorageUpdate_StorageUpdate&& from) noexcept
    : TStorageUpdate_StorageUpdate() {
    *this = ::std::move(from);
  }

  inline TStorageUpdate_StorageUpdate& operator=(const TStorageUpdate_StorageUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageUpdate_StorageUpdate& operator=(TStorageUpdate_StorageUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageUpdate_StorageUpdate& default_instance();

  static inline const TStorageUpdate_StorageUpdate* internal_default_instance() {
    return reinterpret_cast<const TStorageUpdate_StorageUpdate*>(
               &_TStorageUpdate_StorageUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(TStorageUpdate_StorageUpdate& a, TStorageUpdate_StorageUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageUpdate_StorageUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageUpdate_StorageUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageUpdate_StorageUpdate* New() const final {
    return CreateMaybeMessage<TStorageUpdate_StorageUpdate>(nullptr);
  }

  TStorageUpdate_StorageUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageUpdate_StorageUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageUpdate_StorageUpdate& from);
  void MergeFrom(const TStorageUpdate_StorageUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageUpdate_StorageUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageUpdate.StorageUpdate";
  }
  protected:
  explicit TStorageUpdate_StorageUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TStorageUpdate_StorageUpdate_UpdateOp UpdateOp;
  typedef TStorageUpdate_StorageUpdate_StorageKey StorageKey;

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 4,
    kKeyFieldNumber = 1,
    kPermissionReadFieldNumber = 2,
    kPermissionWriteFieldNumber = 3,
  };
  // repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
      mutable_ops();
  private:
  const ::server::TStorageUpdate_StorageUpdate_UpdateOp& _internal_ops(int index) const;
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* _internal_add_ops();
  public:
  const ::server::TStorageUpdate_StorageUpdate_UpdateOp& ops(int index) const;
  ::server::TStorageUpdate_StorageUpdate_UpdateOp* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
      ops() const;

  // .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::server::TStorageUpdate_StorageUpdate_StorageKey& key() const;
  ::server::TStorageUpdate_StorageUpdate_StorageKey* release_key();
  ::server::TStorageUpdate_StorageUpdate_StorageKey* mutable_key();
  void set_allocated_key(::server::TStorageUpdate_StorageUpdate_StorageKey* key);
  private:
  const ::server::TStorageUpdate_StorageUpdate_StorageKey& _internal_key() const;
  ::server::TStorageUpdate_StorageUpdate_StorageKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::server::TStorageUpdate_StorageUpdate_StorageKey* key);
  ::server::TStorageUpdate_StorageUpdate_StorageKey* unsafe_arena_release_key();

  // int32 permission_read = 2;
  void clear_permission_read();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_read() const;
  void set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission_read() const;
  void _internal_set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 permission_write = 3;
  void clear_permission_write();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_write() const;
  void set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_permission_write() const;
  void _internal_set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageUpdate.StorageUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp > ops_;
  ::server::TStorageUpdate_StorageUpdate_StorageKey* key_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_read_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_write_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageUpdate) */ {
 public:
  inline TStorageUpdate() : TStorageUpdate(nullptr) {}
  virtual ~TStorageUpdate();

  TStorageUpdate(const TStorageUpdate& from);
  TStorageUpdate(TStorageUpdate&& from) noexcept
    : TStorageUpdate() {
    *this = ::std::move(from);
  }

  inline TStorageUpdate& operator=(const TStorageUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageUpdate& operator=(TStorageUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageUpdate& default_instance();

  static inline const TStorageUpdate* internal_default_instance() {
    return reinterpret_cast<const TStorageUpdate*>(
               &_TStorageUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(TStorageUpdate& a, TStorageUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageUpdate* New() const final {
    return CreateMaybeMessage<TStorageUpdate>(nullptr);
  }

  TStorageUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageUpdate& from);
  void MergeFrom(const TStorageUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageUpdate";
  }
  protected:
  explicit TStorageUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TStorageUpdate_StorageUpdate StorageUpdate;

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .server.TStorageUpdate.StorageUpdate updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::server::TStorageUpdate_StorageUpdate* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >*
      mutable_updates();
  private:
  const ::server::TStorageUpdate_StorageUpdate& _internal_updates(int index) const;
  ::server::TStorageUpdate_StorageUpdate* _internal_add_updates();
  public:
  const ::server::TStorageUpdate_StorageUpdate& updates(int index) const;
  ::server::TStorageUpdate_StorageUpdate* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >&
      updates() const;

  // @@protoc_insertion_point(class_scope:server.TStorageUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate > updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageKeys_StorageKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageKeys.StorageKey) */ {
 public:
  inline TStorageKeys_StorageKey() : TStorageKeys_StorageKey(nullptr) {}
  virtual ~TStorageKeys_StorageKey();

  TStorageKeys_StorageKey(const TStorageKeys_StorageKey& from);
  TStorageKeys_StorageKey(TStorageKeys_StorageKey&& from) noexcept
    : TStorageKeys_StorageKey() {
    *this = ::std::move(from);
  }

  inline TStorageKeys_StorageKey& operator=(const TStorageKeys_StorageKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageKeys_StorageKey& operator=(TStorageKeys_StorageKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageKeys_StorageKey& default_instance();

  static inline const TStorageKeys_StorageKey* internal_default_instance() {
    return reinterpret_cast<const TStorageKeys_StorageKey*>(
               &_TStorageKeys_StorageKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(TStorageKeys_StorageKey& a, TStorageKeys_StorageKey& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageKeys_StorageKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageKeys_StorageKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageKeys_StorageKey* New() const final {
    return CreateMaybeMessage<TStorageKeys_StorageKey>(nullptr);
  }

  TStorageKeys_StorageKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageKeys_StorageKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageKeys_StorageKey& from);
  void MergeFrom(const TStorageKeys_StorageKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageKeys_StorageKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageKeys.StorageKey";
  }
  protected:
  explicit TStorageKeys_StorageKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kRecordFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string record = 3;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageKeys.StorageKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageKeys PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageKeys) */ {
 public:
  inline TStorageKeys() : TStorageKeys(nullptr) {}
  virtual ~TStorageKeys();

  TStorageKeys(const TStorageKeys& from);
  TStorageKeys(TStorageKeys&& from) noexcept
    : TStorageKeys() {
    *this = ::std::move(from);
  }

  inline TStorageKeys& operator=(const TStorageKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageKeys& operator=(TStorageKeys&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageKeys& default_instance();

  static inline const TStorageKeys* internal_default_instance() {
    return reinterpret_cast<const TStorageKeys*>(
               &_TStorageKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(TStorageKeys& a, TStorageKeys& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageKeys* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageKeys* New() const final {
    return CreateMaybeMessage<TStorageKeys>(nullptr);
  }

  TStorageKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageKeys>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageKeys& from);
  void MergeFrom(const TStorageKeys& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageKeys* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageKeys";
  }
  protected:
  explicit TStorageKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TStorageKeys_StorageKey StorageKey;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated .server.TStorageKeys.StorageKey keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::server::TStorageKeys_StorageKey* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageKeys_StorageKey >*
      mutable_keys();
  private:
  const ::server::TStorageKeys_StorageKey& _internal_keys(int index) const;
  ::server::TStorageKeys_StorageKey* _internal_add_keys();
  public:
  const ::server::TStorageKeys_StorageKey& keys(int index) const;
  ::server::TStorageKeys_StorageKey* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageKeys_StorageKey >&
      keys() const;

  // @@protoc_insertion_point(class_scope:server.TStorageKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageKeys_StorageKey > keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageRemove_StorageKey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageRemove.StorageKey) */ {
 public:
  inline TStorageRemove_StorageKey() : TStorageRemove_StorageKey(nullptr) {}
  virtual ~TStorageRemove_StorageKey();

  TStorageRemove_StorageKey(const TStorageRemove_StorageKey& from);
  TStorageRemove_StorageKey(TStorageRemove_StorageKey&& from) noexcept
    : TStorageRemove_StorageKey() {
    *this = ::std::move(from);
  }

  inline TStorageRemove_StorageKey& operator=(const TStorageRemove_StorageKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageRemove_StorageKey& operator=(TStorageRemove_StorageKey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageRemove_StorageKey& default_instance();

  static inline const TStorageRemove_StorageKey* internal_default_instance() {
    return reinterpret_cast<const TStorageRemove_StorageKey*>(
               &_TStorageRemove_StorageKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(TStorageRemove_StorageKey& a, TStorageRemove_StorageKey& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageRemove_StorageKey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageRemove_StorageKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageRemove_StorageKey* New() const final {
    return CreateMaybeMessage<TStorageRemove_StorageKey>(nullptr);
  }

  TStorageRemove_StorageKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageRemove_StorageKey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageRemove_StorageKey& from);
  void MergeFrom(const TStorageRemove_StorageKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageRemove_StorageKey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageRemove.StorageKey";
  }
  protected:
  explicit TStorageRemove_StorageKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 1,
    kCollectionFieldNumber = 2,
    kRecordFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // string bucket = 1;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // string collection = 2;
  void clear_collection();
  const std::string& collection() const;
  void set_collection(const std::string& value);
  void set_collection(std::string&& value);
  void set_collection(const char* value);
  void set_collection(const char* value, size_t size);
  std::string* mutable_collection();
  std::string* release_collection();
  void set_allocated_collection(std::string* collection);
  private:
  const std::string& _internal_collection() const;
  void _internal_set_collection(const std::string& value);
  std::string* _internal_mutable_collection();
  public:

  // string record = 3;
  void clear_record();
  const std::string& record() const;
  void set_record(const std::string& value);
  void set_record(std::string&& value);
  void set_record(const char* value);
  void set_record(const char* value, size_t size);
  std::string* mutable_record();
  std::string* release_record();
  void set_allocated_record(std::string* record);
  private:
  const std::string& _internal_record() const;
  void _internal_set_record(const std::string& value);
  std::string* _internal_mutable_record();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:server.TStorageRemove.StorageKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collection_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TStorageRemove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TStorageRemove) */ {
 public:
  inline TStorageRemove() : TStorageRemove(nullptr) {}
  virtual ~TStorageRemove();

  TStorageRemove(const TStorageRemove& from);
  TStorageRemove(TStorageRemove&& from) noexcept
    : TStorageRemove() {
    *this = ::std::move(from);
  }

  inline TStorageRemove& operator=(const TStorageRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline TStorageRemove& operator=(TStorageRemove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TStorageRemove& default_instance();

  static inline const TStorageRemove* internal_default_instance() {
    return reinterpret_cast<const TStorageRemove*>(
               &_TStorageRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(TStorageRemove& a, TStorageRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(TStorageRemove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TStorageRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TStorageRemove* New() const final {
    return CreateMaybeMessage<TStorageRemove>(nullptr);
  }

  TStorageRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TStorageRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TStorageRemove& from);
  void MergeFrom(const TStorageRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TStorageRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TStorageRemove";
  }
  protected:
  explicit TStorageRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TStorageRemove_StorageKey StorageKey;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated .server.TStorageRemove.StorageKey keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::server::TStorageRemove_StorageKey* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageRemove_StorageKey >*
      mutable_keys();
  private:
  const ::server::TStorageRemove_StorageKey& _internal_keys(int index) const;
  ::server::TStorageRemove_StorageKey* _internal_add_keys();
  public:
  const ::server::TStorageRemove_StorageKey& keys(int index) const;
  ::server::TStorageRemove_StorageKey* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageRemove_StorageKey >&
      keys() const;

  // @@protoc_insertion_point(class_scope:server.TStorageRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageRemove_StorageKey > keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Leaderboard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Leaderboard) */ {
 public:
  inline Leaderboard() : Leaderboard(nullptr) {}
  virtual ~Leaderboard();

  Leaderboard(const Leaderboard& from);
  Leaderboard(Leaderboard&& from) noexcept
    : Leaderboard() {
    *this = ::std::move(from);
  }

  inline Leaderboard& operator=(const Leaderboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline Leaderboard& operator=(Leaderboard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Leaderboard& default_instance();

  static inline const Leaderboard* internal_default_instance() {
    return reinterpret_cast<const Leaderboard*>(
               &_Leaderboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(Leaderboard& a, Leaderboard& b) {
    a.Swap(&b);
  }
  inline void Swap(Leaderboard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Leaderboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Leaderboard* New() const final {
    return CreateMaybeMessage<Leaderboard>(nullptr);
  }

  Leaderboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Leaderboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Leaderboard& from);
  void MergeFrom(const Leaderboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Leaderboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Leaderboard";
  }
  protected:
  explicit Leaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kResetScheduleFieldNumber = 5,
    kMetadataFieldNumber = 6,
    kSortFieldNumber = 3,
    kCountFieldNumber = 4,
    kAuthoritativeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string reset_schedule = 5;
  void clear_reset_schedule();
  const std::string& reset_schedule() const;
  void set_reset_schedule(const std::string& value);
  void set_reset_schedule(std::string&& value);
  void set_reset_schedule(const char* value);
  void set_reset_schedule(const char* value, size_t size);
  std::string* mutable_reset_schedule();
  std::string* release_reset_schedule();
  void set_allocated_reset_schedule(std::string* reset_schedule);
  private:
  const std::string& _internal_reset_schedule() const;
  void _internal_set_reset_schedule(const std::string& value);
  std::string* _internal_mutable_reset_schedule();
  public:

  // string metadata = 6;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // int64 sort = 3;
  void clear_sort();
  ::PROTOBUF_NAMESPACE_ID::int64 sort() const;
  void set_sort(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sort() const;
  void _internal_set_sort(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool authoritative = 2;
  void clear_authoritative();
  bool authoritative() const;
  void set_authoritative(bool value);
  private:
  bool _internal_authoritative() const;
  void _internal_set_authoritative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.Leaderboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reset_schedule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 sort_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  bool authoritative_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class LeaderboardRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.LeaderboardRecord) */ {
 public:
  inline LeaderboardRecord() : LeaderboardRecord(nullptr) {}
  virtual ~LeaderboardRecord();

  LeaderboardRecord(const LeaderboardRecord& from);
  LeaderboardRecord(LeaderboardRecord&& from) noexcept
    : LeaderboardRecord() {
    *this = ::std::move(from);
  }

  inline LeaderboardRecord& operator=(const LeaderboardRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaderboardRecord& operator=(LeaderboardRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaderboardRecord& default_instance();

  static inline const LeaderboardRecord* internal_default_instance() {
    return reinterpret_cast<const LeaderboardRecord*>(
               &_LeaderboardRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(LeaderboardRecord& a, LeaderboardRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaderboardRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaderboardRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaderboardRecord* New() const final {
    return CreateMaybeMessage<LeaderboardRecord>(nullptr);
  }

  LeaderboardRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaderboardRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaderboardRecord& from);
  void MergeFrom(const LeaderboardRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaderboardRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.LeaderboardRecord";
  }
  protected:
  explicit LeaderboardRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kHandleFieldNumber = 3,
    kLangFieldNumber = 4,
    kLocationFieldNumber = 5,
    kTimezoneFieldNumber = 6,
    kMetadataFieldNumber = 10,
    kRankFieldNumber = 7,
    kScoreFieldNumber = 8,
    kNumScoreFieldNumber = 9,
    kRankedAtFieldNumber = 11,
    kUpdatedAtFieldNumber = 12,
    kExpiresAtFieldNumber = 13,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // string owner_id = 2;
  void clear_owner_id();
  const std::string& owner_id() const;
  void set_owner_id(const std::string& value);
  void set_owner_id(std::string&& value);
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  std::string* mutable_owner_id();
  std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // string handle = 3;
  void clear_handle();
  const std::string& handle() const;
  void set_handle(const std::string& value);
  void set_handle(std::string&& value);
  void set_handle(const char* value);
  void set_handle(const char* value, size_t size);
  std::string* mutable_handle();
  std::string* release_handle();
  void set_allocated_handle(std::string* handle);
  private:
  const std::string& _internal_handle() const;
  void _internal_set_handle(const std::string& value);
  std::string* _internal_mutable_handle();
  public:

  // string lang = 4;
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string location = 5;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string timezone = 6;
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // string metadata = 10;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // int64 rank = 7;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int64 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 score = 8;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_score = 9;
  void clear_num_score();
  ::PROTOBUF_NAMESPACE_ID::int64 num_score() const;
  void set_num_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_score() const;
  void _internal_set_num_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ranked_at = 11;
  void clear_ranked_at();
  ::PROTOBUF_NAMESPACE_ID::int64 ranked_at() const;
  void set_ranked_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ranked_at() const;
  void _internal_set_ranked_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 updated_at = 12;
  void clear_updated_at();
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at() const;
  void set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_updated_at() const;
  void _internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expires_at = 13;
  void clear_expires_at();
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at() const;
  void set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expires_at() const;
  void _internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.LeaderboardRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr handle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 rank_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_score_;
  ::PROTOBUF_NAMESPACE_ID::int64 ranked_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLeaderboardsList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardsList) */ {
 public:
  inline TLeaderboardsList() : TLeaderboardsList(nullptr) {}
  virtual ~TLeaderboardsList();

  TLeaderboardsList(const TLeaderboardsList& from);
  TLeaderboardsList(TLeaderboardsList&& from) noexcept
    : TLeaderboardsList() {
    *this = ::std::move(from);
  }

  inline TLeaderboardsList& operator=(const TLeaderboardsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLeaderboardsList& operator=(TLeaderboardsList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLeaderboardsList& default_instance();

  static inline const TLeaderboardsList* internal_default_instance() {
    return reinterpret_cast<const TLeaderboardsList*>(
               &_TLeaderboardsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(TLeaderboardsList& a, TLeaderboardsList& b) {
    a.Swap(&b);
  }
  inline void Swap(TLeaderboardsList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLeaderboardsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLeaderboardsList* New() const final {
    return CreateMaybeMessage<TLeaderboardsList>(nullptr);
  }

  TLeaderboardsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLeaderboardsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLeaderboardsList& from);
  void MergeFrom(const TLeaderboardsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLeaderboardsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLeaderboardsList";
  }
  protected:
  explicit TLeaderboardsList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterLeaderboardIdFieldNumber = 3,
    kCursorFieldNumber = 2,
    kLimitFieldNumber = 1,
  };
  // repeated string filter_leaderboard_id = 3;
  int filter_leaderboard_id_size() const;
  private:
  int _internal_filter_leaderboard_id_size() const;
  public:
  void clear_filter_leaderboard_id();
  const std::string& filter_leaderboard_id(int index) const;
  std::string* mutable_filter_leaderboard_id(int index);
  void set_filter_leaderboard_id(int index, const std::string& value);
  void set_filter_leaderboard_id(int index, std::string&& value);
  void set_filter_leaderboard_id(int index, const char* value);
  void set_filter_leaderboard_id(int index, const char* value, size_t size);
  std::string* add_filter_leaderboard_id();
  void add_filter_leaderboard_id(const std::string& value);
  void add_filter_leaderboard_id(std::string&& value);
  void add_filter_leaderboard_id(const char* value);
  void add_filter_leaderboard_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filter_leaderboard_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filter_leaderboard_id();
  private:
  const std::string& _internal_filter_leaderboard_id(int index) const;
  std::string* _internal_add_filter_leaderboard_id();
  public:

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int64 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TLeaderboardsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filter_leaderboard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLeaderboards PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboards) */ {
 public:
  inline TLeaderboards() : TLeaderboards(nullptr) {}
  virtual ~TLeaderboards();

  TLeaderboards(const TLeaderboards& from);
  TLeaderboards(TLeaderboards&& from) noexcept
    : TLeaderboards() {
    *this = ::std::move(from);
  }

  inline TLeaderboards& operator=(const TLeaderboards& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLeaderboards& operator=(TLeaderboards&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLeaderboards& default_instance();

  static inline const TLeaderboards* internal_default_instance() {
    return reinterpret_cast<const TLeaderboards*>(
               &_TLeaderboards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(TLeaderboards& a, TLeaderboards& b) {
    a.Swap(&b);
  }
  inline void Swap(TLeaderboards* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLeaderboards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLeaderboards* New() const final {
    return CreateMaybeMessage<TLeaderboards>(nullptr);
  }

  TLeaderboards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLeaderboards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLeaderboards& from);
  void MergeFrom(const TLeaderboards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLeaderboards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLeaderboards";
  }
  protected:
  explicit TLeaderboards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .server.Leaderboard leaderboards = 1;
  int leaderboards_size() const;
  private:
  int _internal_leaderboards_size() const;
  public:
  void clear_leaderboards();
  ::server::Leaderboard* mutable_leaderboards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Leaderboard >*
      mutable_leaderboards();
  private:
  const ::server::Leaderboard& _internal_leaderboards(int index) const;
  ::server::Leaderboard* _internal_add_leaderboards();
  public:
  const ::server::Leaderboard& leaderboards(int index) const;
  ::server::Leaderboard* add_leaderboards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Leaderboard >&
      leaderboards() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:server.TLeaderboards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Leaderboard > leaderboards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLeaderboardRecordsWrite_LeaderboardRecordWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite) */ {
 public:
  inline TLeaderboardRecordsWrite_LeaderboardRecordWrite() : TLeaderboardRecordsWrite_LeaderboardRecordWrite(nullptr) {}
  virtual ~TLeaderboardRecordsWrite_LeaderboardRecordWrite();

  TLeaderboardRecordsWrite_LeaderboardRecordWrite(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from);
  TLeaderboardRecordsWrite_LeaderboardRecordWrite(TLeaderboardRecordsWrite_LeaderboardRecordWrite&& from) noexcept
    : TLeaderboardRecordsWrite_LeaderboardRecordWrite() {
    *this = ::std::move(from);
  }

  inline TLeaderboardRecordsWrite_LeaderboardRecordWrite& operator=(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLeaderboardRecordsWrite_LeaderboardRecordWrite& operator=(TLeaderboardRecordsWrite_LeaderboardRecordWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLeaderboardRecordsWrite_LeaderboardRecordWrite& default_instance();

  enum OpCase {
    kIncr = 2,
    kDecr = 3,
    kSet = 4,
    kBest = 5,
    OP_NOT_SET = 0,
  };

  static inline const TLeaderboardRecordsWrite_LeaderboardRecordWrite* internal_default_instance() {
    return reinterpret_cast<const TLeaderboardRecordsWrite_LeaderboardRecordWrite*>(
               &_TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(TLeaderboardRecordsWrite_LeaderboardRecordWrite& a, TLeaderboardRecordsWrite_LeaderboardRecordWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(TLeaderboardRecordsWrite_LeaderboardRecordWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLeaderboardRecordsWrite_LeaderboardRecordWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsWrite_LeaderboardRecordWrite* New() const final {
    return CreateMaybeMessage<TLeaderboardRecordsWrite_LeaderboardRecordWrite>(nullptr);
  }

  TLeaderboardRecordsWrite_LeaderboardRecordWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLeaderboardRecordsWrite_LeaderboardRecordWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from);
  void MergeFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLeaderboardRecordsWrite_LeaderboardRecordWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite";
  }
  protected:
  explicit TLeaderboardRecordsWrite_LeaderboardRecordWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
    kLocationFieldNumber = 6,
    kTimezoneFieldNumber = 7,
    kMetadataFieldNumber = 8,
    kIncrFieldNumber = 2,
    kDecrFieldNumber = 3,
    kSetFieldNumber = 4,
    kBestFieldNumber = 5,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // string location = 6;
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string timezone = 7;
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  // string metadata = 8;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // int64 incr = 2;
  private:
  bool _internal_has_incr() const;
  public:
  void clear_incr();
  ::PROTOBUF_NAMESPACE_ID::int64 incr() const;
  void set_incr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_incr() const;
  void _internal_set_incr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 decr = 3;
  private:
  bool _internal_has_decr() const;
  public:
  void clear_decr();
  ::PROTOBUF_NAMESPACE_ID::int64 decr() const;
  void set_decr(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_decr() const;
  void _internal_set_decr(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 set = 4;
  private:
  bool _internal_has_set() const;
  public:
  void clear_set();
  ::PROTOBUF_NAMESPACE_ID::int64 set() const;
  void set_set(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_set() const;
  void _internal_set_set(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 best = 5;
  private:
  bool _internal_has_best() const;
  public:
  void clear_best();
  ::PROTOBUF_NAMESPACE_ID::int64 best() const;
  void set_best(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_best() const;
  void _internal_set_best(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_op();
  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
 private:
  class _Internal;
  void set_has_incr();
  void set_has_decr();
  void set_has_set();
  void set_has_best();

  inline bool has_op() const;
  inline void clear_has_op();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  union OpUnion {
    OpUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 incr_;
    ::PROTOBUF_NAMESPACE_ID::int64 decr_;
    ::PROTOBUF_NAMESPACE_ID::int64 set_;
    ::PROTOBUF_NAMESPACE_ID::int64 best_;
  } op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLeaderboardRecordsWrite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsWrite) */ {
 public:
  inline TLeaderboardRecordsWrite() : TLeaderboardRecordsWrite(nullptr) {}
  virtual ~TLeaderboardRecordsWrite();

  TLeaderboardRecordsWrite(const TLeaderboardRecordsWrite& from);
  TLeaderboardRecordsWrite(TLeaderboardRecordsWrite&& from) noexcept
    : TLeaderboardRecordsWrite() {
    *this = ::std::move(from);
  }

  inline TLeaderboardRecordsWrite& operator=(const TLeaderboardRecordsWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLeaderboardRecordsWrite& operator=(TLeaderboardRecordsWrite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLeaderboardRecordsWrite& default_instance();

  static inline const TLeaderboardRecordsWrite* internal_default_instance() {
    return reinterpret_cast<const TLeaderboardRecordsWrite*>(
               &_TLeaderboardRecordsWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(TLeaderboardRecordsWrite& a, TLeaderboardRecordsWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(TLeaderboardRecordsWrite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLeaderboardRecordsWrite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsWrite* New() const final {
    return CreateMaybeMessage<TLeaderboardRecordsWrite>(nullptr);
  }

  TLeaderboardRecordsWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLeaderboardRecordsWrite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLeaderboardRecordsWrite& from);
  void MergeFrom(const TLeaderboardRecordsWrite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLeaderboardRecordsWrite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLeaderboardRecordsWrite";
  }
  protected:
  explicit TLeaderboardRecordsWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TLeaderboardRecordsWrite_LeaderboardRecordWrite LeaderboardRecordWrite;

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >*
      mutable_records();
  private:
  const ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite& _internal_records(int index) const;
  ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* _internal_add_records();
  public:
  const ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite& records(int index) const;
  ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >&
      records() const;

  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLeaderboardRecordsFetch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsFetch) */ {
 public:
  inline TLeaderboardRecordsFetch() : TLeaderboardRecordsFetch(nullptr) {}
  virtual ~TLeaderboardRecordsFetch();

  TLeaderboardRecordsFetch(const TLeaderboardRecordsFetch& from);
  TLeaderboardRecordsFetch(TLeaderboardRecordsFetch&& from) noexcept
    : TLeaderboardRecordsFetch() {
    *this = ::std::move(from);
  }

  inline TLeaderboardRecordsFetch& operator=(const TLeaderboardRecordsFetch& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLeaderboardRecordsFetch& operator=(TLeaderboardRecordsFetch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLeaderboardRecordsFetch& default_instance();

  static inline const TLeaderboardRecordsFetch* internal_default_instance() {
    return reinterpret_cast<const TLeaderboardRecordsFetch*>(
               &_TLeaderboardRecordsFetch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(TLeaderboardRecordsFetch& a, TLeaderboardRecordsFetch& b) {
    a.Swap(&b);
  }
  inline void Swap(TLeaderboardRecordsFetch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLeaderboardRecordsFetch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsFetch* New() const final {
    return CreateMaybeMessage<TLeaderboardRecordsFetch>(nullptr);
  }

  TLeaderboardRecordsFetch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLeaderboardRecordsFetch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLeaderboardRecordsFetch& from);
  void MergeFrom(const TLeaderboardRecordsFetch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLeaderboardRecordsFetch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLeaderboardRecordsFetch";
  }
  protected:
  explicit TLeaderboardRecordsFetch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdsFieldNumber = 1,
    kCursorFieldNumber = 3,
    kLimitFieldNumber = 2,
  };
  // repeated string leaderboard_ids = 1;
  int leaderboard_ids_size() const;
  private:
  int _internal_leaderboard_ids_size() const;
  public:
  void clear_leaderboard_ids();
  const std::string& leaderboard_ids(int index) const;
  std::string* mutable_leaderboard_ids(int index);
  void set_leaderboard_ids(int index, const std::string& value);
  void set_leaderboard_ids(int index, std::string&& value);
  void set_leaderboard_ids(int index, const char* value);
  void set_leaderboard_ids(int index, const char* value, size_t size);
  std::string* add_leaderboard_ids();
  void add_leaderboard_ids(const std::string& value);
  void add_leaderboard_ids(std::string&& value);
  void add_leaderboard_ids(const char* value);
  void add_leaderboard_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& leaderboard_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_leaderboard_ids();
  private:
  const std::string& _internal_leaderboard_ids(int index) const;
  std::string* _internal_add_leaderboard_ids();
  public:

  // string cursor = 3;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int64 limit = 2;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsFetch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> leaderboard_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLeaderboardRecordsList_Owners PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsList.Owners) */ {
 public:
  inline TLeaderboardRecordsList_Owners() : TLeaderboardRecordsList_Owners(nullptr) {}
  virtual ~TLeaderboardRecordsList_Owners();

  TLeaderboardRecordsList_Owners(const TLeaderboardRecordsList_Owners& from);
  TLeaderboardRecordsList_Owners(TLeaderboardRecordsList_Owners&& from) noexcept
    : TLeaderboardRecordsList_Owners() {
    *this = ::std::move(from);
  }

  inline TLeaderboardRecordsList_Owners& operator=(const TLeaderboardRecordsList_Owners& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLeaderboardRecordsList_Owners& operator=(TLeaderboardRecordsList_Owners&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLeaderboardRecordsList_Owners& default_instance();

  static inline const TLeaderboardRecordsList_Owners* internal_default_instance() {
    return reinterpret_cast<const TLeaderboardRecordsList_Owners*>(
               &_TLeaderboardRecordsList_Owners_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(TLeaderboardRecordsList_Owners& a, TLeaderboardRecordsList_Owners& b) {
    a.Swap(&b);
  }
  inline void Swap(TLeaderboardRecordsList_Owners* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLeaderboardRecordsList_Owners* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsList_Owners* New() const final {
    return CreateMaybeMessage<TLeaderboardRecordsList_Owners>(nullptr);
  }

  TLeaderboardRecordsList_Owners* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLeaderboardRecordsList_Owners>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLeaderboardRecordsList_Owners& from);
  void MergeFrom(const TLeaderboardRecordsList_Owners& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLeaderboardRecordsList_Owners* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLeaderboardRecordsList.Owners";
  }
  protected:
  explicit TLeaderboardRecordsList_Owners(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdsFieldNumber = 1,
  };
  // repeated string owner_ids = 1;
  int owner_ids_size() const;
  private:
  int _internal_owner_ids_size() const;
  public:
  void clear_owner_ids();
  const std::string& owner_ids(int index) const;
  std::string* mutable_owner_ids(int index);
  void set_owner_ids(int index, const std::string& value);
  void set_owner_ids(int index, std::string&& value);
  void set_owner_ids(int index, const char* value);
  void set_owner_ids(int index, const char* value, size_t size);
  std::string* add_owner_ids();
  void add_owner_ids(const std::string& value);
  void add_owner_ids(std::string&& value);
  void add_owner_ids(const char* value);
  void add_owner_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& owner_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_owner_ids();
  private:
  const std::string& _internal_owner_ids(int index) const;
  std::string* _internal_add_owner_ids();
  public:

  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsList.Owners)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> owner_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLeaderboardRecordsList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecordsList) */ {
 public:
  inline TLeaderboardRecordsList() : TLeaderboardRecordsList(nullptr) {}
  virtual ~TLeaderboardRecordsList();

  TLeaderboardRecordsList(const TLeaderboardRecordsList& from);
  TLeaderboardRecordsList(TLeaderboardRecordsList&& from) noexcept
    : TLeaderboardRecordsList() {
    *this = ::std::move(from);
  }

  inline TLeaderboardRecordsList& operator=(const TLeaderboardRecordsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLeaderboardRecordsList& operator=(TLeaderboardRecordsList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLeaderboardRecordsList& default_instance();

  enum FilterCase {
    kOwnerId = 2,
    kOwnerIds = 3,
    kLang = 4,
    kLocation = 5,
    kTimezone = 6,
    FILTER_NOT_SET = 0,
  };

  static inline const TLeaderboardRecordsList* internal_default_instance() {
    return reinterpret_cast<const TLeaderboardRecordsList*>(
               &_TLeaderboardRecordsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(TLeaderboardRecordsList& a, TLeaderboardRecordsList& b) {
    a.Swap(&b);
  }
  inline void Swap(TLeaderboardRecordsList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLeaderboardRecordsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLeaderboardRecordsList* New() const final {
    return CreateMaybeMessage<TLeaderboardRecordsList>(nullptr);
  }

  TLeaderboardRecordsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLeaderboardRecordsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLeaderboardRecordsList& from);
  void MergeFrom(const TLeaderboardRecordsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLeaderboardRecordsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLeaderboardRecordsList";
  }
  protected:
  explicit TLeaderboardRecordsList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TLeaderboardRecordsList_Owners Owners;

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardIdFieldNumber = 1,
    kCursorFieldNumber = 8,
    kLimitFieldNumber = 7,
    kOwnerIdFieldNumber = 2,
    kOwnerIdsFieldNumber = 3,
    kLangFieldNumber = 4,
    kLocationFieldNumber = 5,
    kTimezoneFieldNumber = 6,
  };
  // string leaderboard_id = 1;
  void clear_leaderboard_id();
  const std::string& leaderboard_id() const;
  void set_leaderboard_id(const std::string& value);
  void set_leaderboard_id(std::string&& value);
  void set_leaderboard_id(const char* value);
  void set_leaderboard_id(const char* value, size_t size);
  std::string* mutable_leaderboard_id();
  std::string* release_leaderboard_id();
  void set_allocated_leaderboard_id(std::string* leaderboard_id);
  private:
  const std::string& _internal_leaderboard_id() const;
  void _internal_set_leaderboard_id(const std::string& value);
  std::string* _internal_mutable_leaderboard_id();
  public:

  // string cursor = 8;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // int64 limit = 7;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // string owner_id = 2;
  private:
  bool _internal_has_owner_id() const;
  public:
  void clear_owner_id();
  const std::string& owner_id() const;
  void set_owner_id(const std::string& value);
  void set_owner_id(std::string&& value);
  void set_owner_id(const char* value);
  void set_owner_id(const char* value, size_t size);
  std::string* mutable_owner_id();
  std::string* release_owner_id();
  void set_allocated_owner_id(std::string* owner_id);
  private:
  const std::string& _internal_owner_id() const;
  void _internal_set_owner_id(const std::string& value);
  std::string* _internal_mutable_owner_id();
  public:

  // .server.TLeaderboardRecordsList.Owners owner_ids = 3;
  bool has_owner_ids() const;
  private:
  bool _internal_has_owner_ids() const;
  public:
  void clear_owner_ids();
  const ::server::TLeaderboardRecordsList_Owners& owner_ids() const;
  ::server::TLeaderboardRecordsList_Owners* release_owner_ids();
  ::server::TLeaderboardRecordsList_Owners* mutable_owner_ids();
  void set_allocated_owner_ids(::server::TLeaderboardRecordsList_Owners* owner_ids);
  private:
  const ::server::TLeaderboardRecordsList_Owners& _internal_owner_ids() const;
  ::server::TLeaderboardRecordsList_Owners* _internal_mutable_owner_ids();
  public:
  void unsafe_arena_set_allocated_owner_ids(
      ::server::TLeaderboardRecordsList_Owners* owner_ids);
  ::server::TLeaderboardRecordsList_Owners* unsafe_arena_release_owner_ids();

  // string lang = 4;
  private:
  bool _internal_has_lang() const;
  public:
  void clear_lang();
  const std::string& lang() const;
  void set_lang(const std::string& value);
  void set_lang(std::string&& value);
  void set_lang(const char* value);
  void set_lang(const char* value, size_t size);
  std::string* mutable_lang();
  std::string* release_lang();
  void set_allocated_lang(std::string* lang);
  private:
  const std::string& _internal_lang() const;
  void _internal_set_lang(const std::string& value);
  std::string* _internal_mutable_lang();
  public:

  // string location = 5;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string timezone = 6;
  private:
  bool _internal_has_timezone() const;
  public:
  void clear_timezone();
  const std::string& timezone() const;
  void set_timezone(const std::string& value);
  void set_timezone(std::string&& value);
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  std::string* mutable_timezone();
  std::string* release_timezone();
  void set_allocated_timezone(std::string* timezone);
  private:
  const std::string& _internal_timezone() const;
  void _internal_set_timezone(const std::string& value);
  std::string* _internal_mutable_timezone();
  public:

  void clear_filter();
  FilterCase filter_case() const;
  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecordsList)
 private:
  class _Internal;
  void set_has_owner_id();
  void set_has_owner_ids();
  void set_has_lang();
  void set_has_location();
  void set_has_timezone();

  inline bool has_filter() const;
  inline void clear_has_filter();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leaderboard_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  union FilterUnion {
    FilterUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::server::TLeaderboardRecordsList_Owners* owner_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lang_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timezone_;
  } filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TLeaderboardRecords PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TLeaderboardRecords) */ {
 public:
  inline TLeaderboardRecords() : TLeaderboardRecords(nullptr) {}
  virtual ~TLeaderboardRecords();

  TLeaderboardRecords(const TLeaderboardRecords& from);
  TLeaderboardRecords(TLeaderboardRecords&& from) noexcept
    : TLeaderboardRecords() {
    *this = ::std::move(from);
  }

  inline TLeaderboardRecords& operator=(const TLeaderboardRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLeaderboardRecords& operator=(TLeaderboardRecords&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TLeaderboardRecords& default_instance();

  static inline const TLeaderboardRecords* internal_default_instance() {
    return reinterpret_cast<const TLeaderboardRecords*>(
               &_TLeaderboardRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(TLeaderboardRecords& a, TLeaderboardRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(TLeaderboardRecords* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLeaderboardRecords* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TLeaderboardRecords* New() const final {
    return CreateMaybeMessage<TLeaderboardRecords>(nullptr);
  }

  TLeaderboardRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TLeaderboardRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TLeaderboardRecords& from);
  void MergeFrom(const TLeaderboardRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLeaderboardRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TLeaderboardRecords";
  }
  protected:
  explicit TLeaderboardRecords(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
    kCursorFieldNumber = 2,
  };
  // repeated .server.LeaderboardRecord records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::server::LeaderboardRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::LeaderboardRecord >*
      mutable_records();
  private:
  const ::server::LeaderboardRecord& _internal_records(int index) const;
  ::server::LeaderboardRecord* _internal_add_records();
  public:
  const ::server::LeaderboardRecord& records(int index) const;
  ::server::LeaderboardRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::LeaderboardRecord >&
      records() const;

  // string cursor = 2;
  void clear_cursor();
  const std::string& cursor() const;
  void set_cursor(const std::string& value);
  void set_cursor(std::string&& value);
  void set_cursor(const char* value);
  void set_cursor(const char* value, size_t size);
  std::string* mutable_cursor();
  std::string* release_cursor();
  void set_allocated_cursor(std::string* cursor);
  private:
  const std::string& _internal_cursor() const;
  void _internal_set_cursor(const std::string& value);
  std::string* _internal_mutable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:server.TLeaderboardRecords)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::LeaderboardRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TRpc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TRpc) */ {
 public:
  inline TRpc() : TRpc(nullptr) {}
  virtual ~TRpc();

  TRpc(const TRpc& from);
  TRpc(TRpc&& from) noexcept
    : TRpc() {
    *this = ::std::move(from);
  }

  inline TRpc& operator=(const TRpc& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRpc& operator=(TRpc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TRpc& default_instance();

  static inline const TRpc* internal_default_instance() {
    return reinterpret_cast<const TRpc*>(
               &_TRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(TRpc& a, TRpc& b) {
    a.Swap(&b);
  }
  inline void Swap(TRpc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRpc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TRpc* New() const final {
    return CreateMaybeMessage<TRpc>(nullptr);
  }

  TRpc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TRpc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TRpc& from);
  void MergeFrom(const TRpc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRpc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TRpc";
  }
  protected:
  explicit TRpc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:server.TRpc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TPurchaseValidation_ApplePurchase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TPurchaseValidation.ApplePurchase) */ {
 public:
  inline TPurchaseValidation_ApplePurchase() : TPurchaseValidation_ApplePurchase(nullptr) {}
  virtual ~TPurchaseValidation_ApplePurchase();

  TPurchaseValidation_ApplePurchase(const TPurchaseValidation_ApplePurchase& from);
  TPurchaseValidation_ApplePurchase(TPurchaseValidation_ApplePurchase&& from) noexcept
    : TPurchaseValidation_ApplePurchase() {
    *this = ::std::move(from);
  }

  inline TPurchaseValidation_ApplePurchase& operator=(const TPurchaseValidation_ApplePurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPurchaseValidation_ApplePurchase& operator=(TPurchaseValidation_ApplePurchase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TPurchaseValidation_ApplePurchase& default_instance();

  static inline const TPurchaseValidation_ApplePurchase* internal_default_instance() {
    return reinterpret_cast<const TPurchaseValidation_ApplePurchase*>(
               &_TPurchaseValidation_ApplePurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(TPurchaseValidation_ApplePurchase& a, TPurchaseValidation_ApplePurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(TPurchaseValidation_ApplePurchase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPurchaseValidation_ApplePurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPurchaseValidation_ApplePurchase* New() const final {
    return CreateMaybeMessage<TPurchaseValidation_ApplePurchase>(nullptr);
  }

  TPurchaseValidation_ApplePurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPurchaseValidation_ApplePurchase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TPurchaseValidation_ApplePurchase& from);
  void MergeFrom(const TPurchaseValidation_ApplePurchase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPurchaseValidation_ApplePurchase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TPurchaseValidation.ApplePurchase";
  }
  protected:
  explicit TPurchaseValidation_ApplePurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kReceiptDataFieldNumber = 2,
  };
  // string product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // string receipt_data = 2;
  void clear_receipt_data();
  const std::string& receipt_data() const;
  void set_receipt_data(const std::string& value);
  void set_receipt_data(std::string&& value);
  void set_receipt_data(const char* value);
  void set_receipt_data(const char* value, size_t size);
  std::string* mutable_receipt_data();
  std::string* release_receipt_data();
  void set_allocated_receipt_data(std::string* receipt_data);
  private:
  const std::string& _internal_receipt_data() const;
  void _internal_set_receipt_data(const std::string& value);
  std::string* _internal_mutable_receipt_data();
  public:

  // @@protoc_insertion_point(class_scope:server.TPurchaseValidation.ApplePurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receipt_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TPurchaseValidation_GooglePurchase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TPurchaseValidation.GooglePurchase) */ {
 public:
  inline TPurchaseValidation_GooglePurchase() : TPurchaseValidation_GooglePurchase(nullptr) {}
  virtual ~TPurchaseValidation_GooglePurchase();

  TPurchaseValidation_GooglePurchase(const TPurchaseValidation_GooglePurchase& from);
  TPurchaseValidation_GooglePurchase(TPurchaseValidation_GooglePurchase&& from) noexcept
    : TPurchaseValidation_GooglePurchase() {
    *this = ::std::move(from);
  }

  inline TPurchaseValidation_GooglePurchase& operator=(const TPurchaseValidation_GooglePurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPurchaseValidation_GooglePurchase& operator=(TPurchaseValidation_GooglePurchase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TPurchaseValidation_GooglePurchase& default_instance();

  static inline const TPurchaseValidation_GooglePurchase* internal_default_instance() {
    return reinterpret_cast<const TPurchaseValidation_GooglePurchase*>(
               &_TPurchaseValidation_GooglePurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(TPurchaseValidation_GooglePurchase& a, TPurchaseValidation_GooglePurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(TPurchaseValidation_GooglePurchase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPurchaseValidation_GooglePurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPurchaseValidation_GooglePurchase* New() const final {
    return CreateMaybeMessage<TPurchaseValidation_GooglePurchase>(nullptr);
  }

  TPurchaseValidation_GooglePurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPurchaseValidation_GooglePurchase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TPurchaseValidation_GooglePurchase& from);
  void MergeFrom(const TPurchaseValidation_GooglePurchase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPurchaseValidation_GooglePurchase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TPurchaseValidation.GooglePurchase";
  }
  protected:
  explicit TPurchaseValidation_GooglePurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kProductTypeFieldNumber = 2,
    kPurchaseTokenFieldNumber = 3,
  };
  // string product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // string product_type = 2;
  void clear_product_type();
  const std::string& product_type() const;
  void set_product_type(const std::string& value);
  void set_product_type(std::string&& value);
  void set_product_type(const char* value);
  void set_product_type(const char* value, size_t size);
  std::string* mutable_product_type();
  std::string* release_product_type();
  void set_allocated_product_type(std::string* product_type);
  private:
  const std::string& _internal_product_type() const;
  void _internal_set_product_type(const std::string& value);
  std::string* _internal_mutable_product_type();
  public:

  // string purchase_token = 3;
  void clear_purchase_token();
  const std::string& purchase_token() const;
  void set_purchase_token(const std::string& value);
  void set_purchase_token(std::string&& value);
  void set_purchase_token(const char* value);
  void set_purchase_token(const char* value, size_t size);
  std::string* mutable_purchase_token();
  std::string* release_purchase_token();
  void set_allocated_purchase_token(std::string* purchase_token);
  private:
  const std::string& _internal_purchase_token() const;
  void _internal_set_purchase_token(const std::string& value);
  std::string* _internal_mutable_purchase_token();
  public:

  // @@protoc_insertion_point(class_scope:server.TPurchaseValidation.GooglePurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purchase_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TPurchaseValidation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TPurchaseValidation) */ {
 public:
  inline TPurchaseValidation() : TPurchaseValidation(nullptr) {}
  virtual ~TPurchaseValidation();

  TPurchaseValidation(const TPurchaseValidation& from);
  TPurchaseValidation(TPurchaseValidation&& from) noexcept
    : TPurchaseValidation() {
    *this = ::std::move(from);
  }

  inline TPurchaseValidation& operator=(const TPurchaseValidation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPurchaseValidation& operator=(TPurchaseValidation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TPurchaseValidation& default_instance();

  enum IdCase {
    kApplePurchase = 1,
    kGooglePurchase = 2,
    ID_NOT_SET = 0,
  };

  static inline const TPurchaseValidation* internal_default_instance() {
    return reinterpret_cast<const TPurchaseValidation*>(
               &_TPurchaseValidation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(TPurchaseValidation& a, TPurchaseValidation& b) {
    a.Swap(&b);
  }
  inline void Swap(TPurchaseValidation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPurchaseValidation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPurchaseValidation* New() const final {
    return CreateMaybeMessage<TPurchaseValidation>(nullptr);
  }

  TPurchaseValidation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPurchaseValidation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TPurchaseValidation& from);
  void MergeFrom(const TPurchaseValidation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPurchaseValidation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TPurchaseValidation";
  }
  protected:
  explicit TPurchaseValidation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TPurchaseValidation_ApplePurchase ApplePurchase;
  typedef TPurchaseValidation_GooglePurchase GooglePurchase;

  // accessors -------------------------------------------------------

  enum : int {
    kApplePurchaseFieldNumber = 1,
    kGooglePurchaseFieldNumber = 2,
  };
  // .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
  bool has_apple_purchase() const;
  private:
  bool _internal_has_apple_purchase() const;
  public:
  void clear_apple_purchase();
  const ::server::TPurchaseValidation_ApplePurchase& apple_purchase() const;
  ::server::TPurchaseValidation_ApplePurchase* release_apple_purchase();
  ::server::TPurchaseValidation_ApplePurchase* mutable_apple_purchase();
  void set_allocated_apple_purchase(::server::TPurchaseValidation_ApplePurchase* apple_purchase);
  private:
  const ::server::TPurchaseValidation_ApplePurchase& _internal_apple_purchase() const;
  ::server::TPurchaseValidation_ApplePurchase* _internal_mutable_apple_purchase();
  public:
  void unsafe_arena_set_allocated_apple_purchase(
      ::server::TPurchaseValidation_ApplePurchase* apple_purchase);
  ::server::TPurchaseValidation_ApplePurchase* unsafe_arena_release_apple_purchase();

  // .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
  bool has_google_purchase() const;
  private:
  bool _internal_has_google_purchase() const;
  public:
  void clear_google_purchase();
  const ::server::TPurchaseValidation_GooglePurchase& google_purchase() const;
  ::server::TPurchaseValidation_GooglePurchase* release_google_purchase();
  ::server::TPurchaseValidation_GooglePurchase* mutable_google_purchase();
  void set_allocated_google_purchase(::server::TPurchaseValidation_GooglePurchase* google_purchase);
  private:
  const ::server::TPurchaseValidation_GooglePurchase& _internal_google_purchase() const;
  ::server::TPurchaseValidation_GooglePurchase* _internal_mutable_google_purchase();
  public:
  void unsafe_arena_set_allocated_google_purchase(
      ::server::TPurchaseValidation_GooglePurchase* google_purchase);
  ::server::TPurchaseValidation_GooglePurchase* unsafe_arena_release_google_purchase();

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:server.TPurchaseValidation)
 private:
  class _Internal;
  void set_has_apple_purchase();
  void set_has_google_purchase();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    IdUnion() {}
    ::server::TPurchaseValidation_ApplePurchase* apple_purchase_;
    ::server::TPurchaseValidation_GooglePurchase* google_purchase_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TPurchaseRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TPurchaseRecord) */ {
 public:
  inline TPurchaseRecord() : TPurchaseRecord(nullptr) {}
  virtual ~TPurchaseRecord();

  TPurchaseRecord(const TPurchaseRecord& from);
  TPurchaseRecord(TPurchaseRecord&& from) noexcept
    : TPurchaseRecord() {
    *this = ::std::move(from);
  }

  inline TPurchaseRecord& operator=(const TPurchaseRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPurchaseRecord& operator=(TPurchaseRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TPurchaseRecord& default_instance();

  static inline const TPurchaseRecord* internal_default_instance() {
    return reinterpret_cast<const TPurchaseRecord*>(
               &_TPurchaseRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(TPurchaseRecord& a, TPurchaseRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(TPurchaseRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPurchaseRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TPurchaseRecord* New() const final {
    return CreateMaybeMessage<TPurchaseRecord>(nullptr);
  }

  TPurchaseRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TPurchaseRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TPurchaseRecord& from);
  void MergeFrom(const TPurchaseRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPurchaseRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TPurchaseRecord";
  }
  protected:
  explicit TPurchaseRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kMessageFieldNumber = 6,
    kSuccessFieldNumber = 1,
    kSeenBeforeFieldNumber = 2,
    kPurchaseProviderReachableFieldNumber = 3,
  };
  // string data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string message = 6;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // bool seen_before = 2;
  void clear_seen_before();
  bool seen_before() const;
  void set_seen_before(bool value);
  private:
  bool _internal_seen_before() const;
  void _internal_set_seen_before(bool value);
  public:

  // bool purchase_provider_reachable = 3;
  void clear_purchase_provider_reachable();
  bool purchase_provider_reachable() const;
  void set_purchase_provider_reachable(bool value);
  private:
  bool _internal_purchase_provider_reachable() const;
  void _internal_set_purchase_provider_reachable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.TPurchaseRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool success_;
  bool seen_before_;
  bool purchase_provider_reachable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Notification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Notification) */ {
 public:
  inline Notification() : Notification(nullptr) {}
  virtual ~Notification();

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notification& default_instance();

  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notification* New() const final {
    return CreateMaybeMessage<Notification>(nullptr);
  }

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Notification";
  }
  protected:
  explicit Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSubjectFieldNumber = 2,
    kContentFieldNumber = 3,
    kSenderIdFieldNumber = 5,
    kCodeFieldNumber = 4,
    kCreatedAtFieldNumber = 6,
    kExpiresAtFieldNumber = 7,
    kPersistentFieldNumber = 8,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string subject = 2;
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);
  private:
  const std::string& _internal_subject() const;
  void _internal_set_subject(const std::string& value);
  std::string* _internal_mutable_subject();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string sender_id = 5;
  void clear_sender_id();
  const std::string& sender_id() const;
  void set_sender_id(const std::string& value);
  void set_sender_id(std::string&& value);
  void set_sender_id(const char* value);
  void set_sender_id(const char* value, size_t size);
  std::string* mutable_sender_id();
  std::string* release_sender_id();
  void set_allocated_sender_id(std::string* sender_id);
  private:
  const std::string& _internal_sender_id() const;
  void _internal_set_sender_id(const std::string& value);
  std::string* _internal_mutable_sender_id();
  public:

  // int64 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int64 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 created_at = 6;
  void clear_created_at();
  ::PROTOBUF_NAMESPACE_ID::int64 created_at() const;
  void set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_created_at() const;
  void _internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expires_at = 7;
  void clear_expires_at();
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at() const;
  void set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expires_at() const;
  void _internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool persistent = 8;
  void clear_persistent();
  bool persistent() const;
  void set_persistent(bool value);
  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server.Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 code_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 expires_at_;
  bool persistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class Notifications PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.Notifications) */ {
 public:
  inline Notifications() : Notifications(nullptr) {}
  virtual ~Notifications();

  Notifications(const Notifications& from);
  Notifications(Notifications&& from) noexcept
    : Notifications() {
    *this = ::std::move(from);
  }

  inline Notifications& operator=(const Notifications& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notifications& operator=(Notifications&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Notifications& default_instance();

  static inline const Notifications* internal_default_instance() {
    return reinterpret_cast<const Notifications*>(
               &_Notifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(Notifications& a, Notifications& b) {
    a.Swap(&b);
  }
  inline void Swap(Notifications* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notifications* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Notifications* New() const final {
    return CreateMaybeMessage<Notifications>(nullptr);
  }

  Notifications* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Notifications>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Notifications& from);
  void MergeFrom(const Notifications& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notifications* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.Notifications";
  }
  protected:
  explicit Notifications(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 1,
  };
  // repeated .server.Notification notifications = 1;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::server::Notification* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification >*
      mutable_notifications();
  private:
  const ::server::Notification& _internal_notifications(int index) const;
  ::server::Notification* _internal_add_notifications();
  public:
  const ::server::Notification& notifications(int index) const;
  ::server::Notification* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:server.Notifications)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification > notifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TNotificationsList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TNotificationsList) */ {
 public:
  inline TNotificationsList() : TNotificationsList(nullptr) {}
  virtual ~TNotificationsList();

  TNotificationsList(const TNotificationsList& from);
  TNotificationsList(TNotificationsList&& from) noexcept
    : TNotificationsList() {
    *this = ::std::move(from);
  }

  inline TNotificationsList& operator=(const TNotificationsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNotificationsList& operator=(TNotificationsList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TNotificationsList& default_instance();

  static inline const TNotificationsList* internal_default_instance() {
    return reinterpret_cast<const TNotificationsList*>(
               &_TNotificationsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(TNotificationsList& a, TNotificationsList& b) {
    a.Swap(&b);
  }
  inline void Swap(TNotificationsList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNotificationsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TNotificationsList* New() const final {
    return CreateMaybeMessage<TNotificationsList>(nullptr);
  }

  TNotificationsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TNotificationsList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TNotificationsList& from);
  void MergeFrom(const TNotificationsList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNotificationsList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TNotificationsList";
  }
  protected:
  explicit TNotificationsList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResumableCursorFieldNumber = 2,
    kLimitFieldNumber = 1,
  };
  // string resumable_cursor = 2;
  void clear_resumable_cursor();
  const std::string& resumable_cursor() const;
  void set_resumable_cursor(const std::string& value);
  void set_resumable_cursor(std::string&& value);
  void set_resumable_cursor(const char* value);
  void set_resumable_cursor(const char* value, size_t size);
  std::string* mutable_resumable_cursor();
  std::string* release_resumable_cursor();
  void set_allocated_resumable_cursor(std::string* resumable_cursor);
  private:
  const std::string& _internal_resumable_cursor() const;
  void _internal_set_resumable_cursor(const std::string& value);
  std::string* _internal_mutable_resumable_cursor();
  public:

  // int64 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:server.TNotificationsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resumable_cursor_;
  ::PROTOBUF_NAMESPACE_ID::int64 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TNotifications PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TNotifications) */ {
 public:
  inline TNotifications() : TNotifications(nullptr) {}
  virtual ~TNotifications();

  TNotifications(const TNotifications& from);
  TNotifications(TNotifications&& from) noexcept
    : TNotifications() {
    *this = ::std::move(from);
  }

  inline TNotifications& operator=(const TNotifications& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNotifications& operator=(TNotifications&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TNotifications& default_instance();

  static inline const TNotifications* internal_default_instance() {
    return reinterpret_cast<const TNotifications*>(
               &_TNotifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(TNotifications& a, TNotifications& b) {
    a.Swap(&b);
  }
  inline void Swap(TNotifications* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNotifications* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TNotifications* New() const final {
    return CreateMaybeMessage<TNotifications>(nullptr);
  }

  TNotifications* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TNotifications>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TNotifications& from);
  void MergeFrom(const TNotifications& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNotifications* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TNotifications";
  }
  protected:
  explicit TNotifications(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationsFieldNumber = 1,
    kResumableCursorFieldNumber = 2,
  };
  // repeated .server.Notification notifications = 1;
  int notifications_size() const;
  private:
  int _internal_notifications_size() const;
  public:
  void clear_notifications();
  ::server::Notification* mutable_notifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification >*
      mutable_notifications();
  private:
  const ::server::Notification& _internal_notifications(int index) const;
  ::server::Notification* _internal_add_notifications();
  public:
  const ::server::Notification& notifications(int index) const;
  ::server::Notification* add_notifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification >&
      notifications() const;

  // string resumable_cursor = 2;
  void clear_resumable_cursor();
  const std::string& resumable_cursor() const;
  void set_resumable_cursor(const std::string& value);
  void set_resumable_cursor(std::string&& value);
  void set_resumable_cursor(const char* value);
  void set_resumable_cursor(const char* value, size_t size);
  std::string* mutable_resumable_cursor();
  std::string* release_resumable_cursor();
  void set_allocated_resumable_cursor(std::string* resumable_cursor);
  private:
  const std::string& _internal_resumable_cursor() const;
  void _internal_set_resumable_cursor(const std::string& value);
  std::string* _internal_mutable_resumable_cursor();
  public:

  // @@protoc_insertion_point(class_scope:server.TNotifications)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification > notifications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resumable_cursor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class TNotificationsRemove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server.TNotificationsRemove) */ {
 public:
  inline TNotificationsRemove() : TNotificationsRemove(nullptr) {}
  virtual ~TNotificationsRemove();

  TNotificationsRemove(const TNotificationsRemove& from);
  TNotificationsRemove(TNotificationsRemove&& from) noexcept
    : TNotificationsRemove() {
    *this = ::std::move(from);
  }

  inline TNotificationsRemove& operator=(const TNotificationsRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNotificationsRemove& operator=(TNotificationsRemove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TNotificationsRemove& default_instance();

  static inline const TNotificationsRemove* internal_default_instance() {
    return reinterpret_cast<const TNotificationsRemove*>(
               &_TNotificationsRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(TNotificationsRemove& a, TNotificationsRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(TNotificationsRemove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNotificationsRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TNotificationsRemove* New() const final {
    return CreateMaybeMessage<TNotificationsRemove>(nullptr);
  }

  TNotificationsRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TNotificationsRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TNotificationsRemove& from);
  void MergeFrom(const TNotificationsRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNotificationsRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server.TNotificationsRemove";
  }
  protected:
  explicit TNotificationsRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationIdsFieldNumber = 1,
  };
  // repeated string notification_ids = 1;
  int notification_ids_size() const;
  private:
  int _internal_notification_ids_size() const;
  public:
  void clear_notification_ids();
  const std::string& notification_ids(int index) const;
  std::string* mutable_notification_ids(int index);
  void set_notification_ids(int index, const std::string& value);
  void set_notification_ids(int index, std::string&& value);
  void set_notification_ids(int index, const char* value);
  void set_notification_ids(int index, const char* value, size_t size);
  std::string* add_notification_ids();
  void add_notification_ids(const std::string& value);
  void add_notification_ids(std::string&& value);
  void add_notification_ids(const char* value);
  void add_notification_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_ids();
  private:
  const std::string& _internal_notification_ids(int index) const;
  std::string* _internal_add_notification_ids();
  public:

  // @@protoc_insertion_point(class_scope:server.TNotificationsRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heartbeat

// int64 timestamp = 1;
inline void Heartbeat::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Heartbeat::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Heartbeat::timestamp() const {
  // @@protoc_insertion_point(field_get:server.Heartbeat.timestamp)
  return _internal_timestamp();
}
inline void Heartbeat::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void Heartbeat::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:server.Heartbeat.timestamp)
}

// -------------------------------------------------------------------

// Error

// int32 code = 1;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Error::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:server.Error.code)
  return _internal_code();
}
inline void Error::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void Error::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:server.Error.code)
}

// string msg = 2;
inline void Error::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:server.Error.msg)
  return _internal_msg();
}
inline void Error::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:server.Error.msg)
}
inline std::string* Error::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:server.Error.msg)
  return _internal_mutable_msg();
}
inline const std::string& Error::_internal_msg() const {
  return msg_.Get();
}
inline void Error::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Error::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Error.msg)
}
inline void Error::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Error.msg)
}
inline void Error::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Error.msg)
}
inline std::string* Error::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Error::release_msg() {
  // @@protoc_insertion_point(field_release:server.Error.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Error::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Error.msg)
}

// -------------------------------------------------------------------

// AuthenticateRequest_Email

// string email = 1;
inline void AuthenticateRequest_Email::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRequest_Email::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.Email.email)
  return _internal_email();
}
inline void AuthenticateRequest_Email::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.Email.email)
}
inline std::string* AuthenticateRequest_Email::mutable_email() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.Email.email)
  return _internal_mutable_email();
}
inline const std::string& AuthenticateRequest_Email::_internal_email() const {
  return email_.Get();
}
inline void AuthenticateRequest_Email::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest_Email::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.Email.email)
}
inline void AuthenticateRequest_Email::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.Email.email)
}
inline void AuthenticateRequest_Email::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.Email.email)
}
inline std::string* AuthenticateRequest_Email::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest_Email::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.Email.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRequest_Email::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.Email.email)
}

// string password = 2;
inline void AuthenticateRequest_Email::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRequest_Email::password() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.Email.password)
  return _internal_password();
}
inline void AuthenticateRequest_Email::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.Email.password)
}
inline std::string* AuthenticateRequest_Email::mutable_password() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.Email.password)
  return _internal_mutable_password();
}
inline const std::string& AuthenticateRequest_Email::_internal_password() const {
  return password_.Get();
}
inline void AuthenticateRequest_Email::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest_Email::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.Email.password)
}
inline void AuthenticateRequest_Email::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.Email.password)
}
inline void AuthenticateRequest_Email::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.Email.password)
}
inline std::string* AuthenticateRequest_Email::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest_Email::release_password() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.Email.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRequest_Email::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.Email.password)
}

// -------------------------------------------------------------------

// AuthenticateRequest_GameCenter

// string player_id = 1;
inline void AuthenticateRequest_GameCenter::clear_player_id() {
  player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRequest_GameCenter::player_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.player_id)
  return _internal_player_id();
}
inline void AuthenticateRequest_GameCenter::set_player_id(const std::string& value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.player_id)
}
inline std::string* AuthenticateRequest_GameCenter::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& AuthenticateRequest_GameCenter::_internal_player_id() const {
  return player_id_.Get();
}
inline void AuthenticateRequest_GameCenter::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest_GameCenter::set_player_id(std::string&& value) {
  
  player_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.GameCenter.player_id)
}
inline void AuthenticateRequest_GameCenter::set_player_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.player_id)
}
inline void AuthenticateRequest_GameCenter::set_player_id(const char* value,
    size_t size) {
  
  player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.player_id)
}
inline std::string* AuthenticateRequest_GameCenter::_internal_mutable_player_id() {
  
  return player_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest_GameCenter::release_player_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRequest_GameCenter::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.player_id)
}

// string bundle_id = 2;
inline void AuthenticateRequest_GameCenter::clear_bundle_id() {
  bundle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRequest_GameCenter::bundle_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.bundle_id)
  return _internal_bundle_id();
}
inline void AuthenticateRequest_GameCenter::set_bundle_id(const std::string& value) {
  _internal_set_bundle_id(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.bundle_id)
}
inline std::string* AuthenticateRequest_GameCenter::mutable_bundle_id() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.bundle_id)
  return _internal_mutable_bundle_id();
}
inline const std::string& AuthenticateRequest_GameCenter::_internal_bundle_id() const {
  return bundle_id_.Get();
}
inline void AuthenticateRequest_GameCenter::_internal_set_bundle_id(const std::string& value) {
  
  bundle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest_GameCenter::set_bundle_id(std::string&& value) {
  
  bundle_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.GameCenter.bundle_id)
}
inline void AuthenticateRequest_GameCenter::set_bundle_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bundle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.bundle_id)
}
inline void AuthenticateRequest_GameCenter::set_bundle_id(const char* value,
    size_t size) {
  
  bundle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.bundle_id)
}
inline std::string* AuthenticateRequest_GameCenter::_internal_mutable_bundle_id() {
  
  return bundle_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest_GameCenter::release_bundle_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.bundle_id)
  return bundle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRequest_GameCenter::set_allocated_bundle_id(std::string* bundle_id) {
  if (bundle_id != nullptr) {
    
  } else {
    
  }
  bundle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bundle_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.bundle_id)
}

// int64 timestamp = 3;
inline void AuthenticateRequest_GameCenter::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateRequest_GameCenter::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AuthenticateRequest_GameCenter::timestamp() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.timestamp)
  return _internal_timestamp();
}
inline void AuthenticateRequest_GameCenter::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void AuthenticateRequest_GameCenter::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.timestamp)
}

// string salt = 4;
inline void AuthenticateRequest_GameCenter::clear_salt() {
  salt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRequest_GameCenter::salt() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.salt)
  return _internal_salt();
}
inline void AuthenticateRequest_GameCenter::set_salt(const std::string& value) {
  _internal_set_salt(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.salt)
}
inline std::string* AuthenticateRequest_GameCenter::mutable_salt() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.salt)
  return _internal_mutable_salt();
}
inline const std::string& AuthenticateRequest_GameCenter::_internal_salt() const {
  return salt_.Get();
}
inline void AuthenticateRequest_GameCenter::_internal_set_salt(const std::string& value) {
  
  salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest_GameCenter::set_salt(std::string&& value) {
  
  salt_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.GameCenter.salt)
}
inline void AuthenticateRequest_GameCenter::set_salt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.salt)
}
inline void AuthenticateRequest_GameCenter::set_salt(const char* value,
    size_t size) {
  
  salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.salt)
}
inline std::string* AuthenticateRequest_GameCenter::_internal_mutable_salt() {
  
  return salt_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest_GameCenter::release_salt() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.salt)
  return salt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRequest_GameCenter::set_allocated_salt(std::string* salt) {
  if (salt != nullptr) {
    
  } else {
    
  }
  salt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.salt)
}

// string signature = 5;
inline void AuthenticateRequest_GameCenter::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRequest_GameCenter::signature() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.signature)
  return _internal_signature();
}
inline void AuthenticateRequest_GameCenter::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.signature)
}
inline std::string* AuthenticateRequest_GameCenter::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.signature)
  return _internal_mutable_signature();
}
inline const std::string& AuthenticateRequest_GameCenter::_internal_signature() const {
  return signature_.Get();
}
inline void AuthenticateRequest_GameCenter::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest_GameCenter::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.GameCenter.signature)
}
inline void AuthenticateRequest_GameCenter::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.signature)
}
inline void AuthenticateRequest_GameCenter::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.signature)
}
inline std::string* AuthenticateRequest_GameCenter::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest_GameCenter::release_signature() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRequest_GameCenter::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.signature)
}

// string public_key_url = 6;
inline void AuthenticateRequest_GameCenter::clear_public_key_url() {
  public_key_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRequest_GameCenter::public_key_url() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.GameCenter.public_key_url)
  return _internal_public_key_url();
}
inline void AuthenticateRequest_GameCenter::set_public_key_url(const std::string& value) {
  _internal_set_public_key_url(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.GameCenter.public_key_url)
}
inline std::string* AuthenticateRequest_GameCenter::mutable_public_key_url() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.GameCenter.public_key_url)
  return _internal_mutable_public_key_url();
}
inline const std::string& AuthenticateRequest_GameCenter::_internal_public_key_url() const {
  return public_key_url_.Get();
}
inline void AuthenticateRequest_GameCenter::_internal_set_public_key_url(const std::string& value) {
  
  public_key_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest_GameCenter::set_public_key_url(std::string&& value) {
  
  public_key_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.GameCenter.public_key_url)
}
inline void AuthenticateRequest_GameCenter::set_public_key_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_key_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.GameCenter.public_key_url)
}
inline void AuthenticateRequest_GameCenter::set_public_key_url(const char* value,
    size_t size) {
  
  public_key_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.GameCenter.public_key_url)
}
inline std::string* AuthenticateRequest_GameCenter::_internal_mutable_public_key_url() {
  
  return public_key_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest_GameCenter::release_public_key_url() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.GameCenter.public_key_url)
  return public_key_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRequest_GameCenter::set_allocated_public_key_url(std::string* public_key_url) {
  if (public_key_url != nullptr) {
    
  } else {
    
  }
  public_key_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.GameCenter.public_key_url)
}

// -------------------------------------------------------------------

// AuthenticateRequest

// string collationId = 1;
inline void AuthenticateRequest::clear_collationid() {
  collationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateRequest::collationid() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.collationId)
  return _internal_collationid();
}
inline void AuthenticateRequest::set_collationid(const std::string& value) {
  _internal_set_collationid(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.collationId)
}
inline std::string* AuthenticateRequest::mutable_collationid() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.collationId)
  return _internal_mutable_collationid();
}
inline const std::string& AuthenticateRequest::_internal_collationid() const {
  return collationid_.Get();
}
inline void AuthenticateRequest::_internal_set_collationid(const std::string& value) {
  
  collationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest::set_collationid(std::string&& value) {
  
  collationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.collationId)
}
inline void AuthenticateRequest::set_collationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.collationId)
}
inline void AuthenticateRequest::set_collationid(const char* value,
    size_t size) {
  
  collationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.collationId)
}
inline std::string* AuthenticateRequest::_internal_mutable_collationid() {
  
  return collationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest::release_collationid() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.collationId)
  return collationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateRequest::set_allocated_collationid(std::string* collationid) {
  if (collationid != nullptr) {
    
  } else {
    
  }
  collationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collationid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.collationId)
}

// .server.AuthenticateRequest.Email email = 2;
inline bool AuthenticateRequest::_internal_has_email() const {
  return id_case() == kEmail;
}
inline bool AuthenticateRequest::has_email() const {
  return _internal_has_email();
}
inline void AuthenticateRequest::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void AuthenticateRequest::clear_email() {
  if (_internal_has_email()) {
    if (GetArena() == nullptr) {
      delete id_.email_;
    }
    clear_has_id();
  }
}
inline ::server::AuthenticateRequest_Email* AuthenticateRequest::release_email() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.email)
  if (_internal_has_email()) {
    clear_has_id();
      ::server::AuthenticateRequest_Email* temp = id_.email_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_.email_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::AuthenticateRequest_Email& AuthenticateRequest::_internal_email() const {
  return _internal_has_email()
      ? *id_.email_
      : reinterpret_cast< ::server::AuthenticateRequest_Email&>(::server::_AuthenticateRequest_Email_default_instance_);
}
inline const ::server::AuthenticateRequest_Email& AuthenticateRequest::email() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.email)
  return _internal_email();
}
inline ::server::AuthenticateRequest_Email* AuthenticateRequest::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.AuthenticateRequest.email)
  if (_internal_has_email()) {
    clear_has_id();
    ::server::AuthenticateRequest_Email* temp = id_.email_;
    id_.email_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuthenticateRequest::unsafe_arena_set_allocated_email(::server::AuthenticateRequest_Email* email) {
  clear_id();
  if (email) {
    set_has_email();
    id_.email_ = email;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.AuthenticateRequest.email)
}
inline ::server::AuthenticateRequest_Email* AuthenticateRequest::_internal_mutable_email() {
  if (!_internal_has_email()) {
    clear_id();
    set_has_email();
    id_.email_ = CreateMaybeMessage< ::server::AuthenticateRequest_Email >(GetArena());
  }
  return id_.email_;
}
inline ::server::AuthenticateRequest_Email* AuthenticateRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.email)
  return _internal_mutable_email();
}

// string facebook = 3;
inline bool AuthenticateRequest::_internal_has_facebook() const {
  return id_case() == kFacebook;
}
inline void AuthenticateRequest::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
inline void AuthenticateRequest::clear_facebook() {
  if (_internal_has_facebook()) {
    id_.facebook_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& AuthenticateRequest::facebook() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.facebook)
  return _internal_facebook();
}
inline void AuthenticateRequest::set_facebook(const std::string& value) {
  _internal_set_facebook(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.facebook)
}
inline std::string* AuthenticateRequest::mutable_facebook() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.facebook)
  return _internal_mutable_facebook();
}
inline const std::string& AuthenticateRequest::_internal_facebook() const {
  if (_internal_has_facebook()) {
    return id_.facebook_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::_internal_set_facebook(const std::string& value) {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest::set_facebook(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.facebook)
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.facebook)
}
inline void AuthenticateRequest::set_facebook(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.facebook)
}
inline void AuthenticateRequest::set_facebook(const char* value,
                             size_t size) {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.facebook)
}
inline std::string* AuthenticateRequest::_internal_mutable_facebook() {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.facebook_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest::release_facebook() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.facebook)
  if (_internal_has_facebook()) {
    clear_has_id();
    return id_.facebook_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AuthenticateRequest::set_allocated_facebook(std::string* facebook) {
  if (has_id()) {
    clear_id();
  }
  if (facebook != nullptr) {
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(facebook);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(facebook);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.facebook)
}

// string google = 4;
inline bool AuthenticateRequest::_internal_has_google() const {
  return id_case() == kGoogle;
}
inline void AuthenticateRequest::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
inline void AuthenticateRequest::clear_google() {
  if (_internal_has_google()) {
    id_.google_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& AuthenticateRequest::google() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.google)
  return _internal_google();
}
inline void AuthenticateRequest::set_google(const std::string& value) {
  _internal_set_google(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.google)
}
inline std::string* AuthenticateRequest::mutable_google() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.google)
  return _internal_mutable_google();
}
inline const std::string& AuthenticateRequest::_internal_google() const {
  if (_internal_has_google()) {
    return id_.google_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::_internal_set_google(const std::string& value) {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest::set_google(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.google)
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.google)
}
inline void AuthenticateRequest::set_google(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.google)
}
inline void AuthenticateRequest::set_google(const char* value,
                             size_t size) {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.google)
}
inline std::string* AuthenticateRequest::_internal_mutable_google() {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.google_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest::release_google() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.google)
  if (_internal_has_google()) {
    clear_has_id();
    return id_.google_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AuthenticateRequest::set_allocated_google(std::string* google) {
  if (has_id()) {
    clear_id();
  }
  if (google != nullptr) {
    set_has_google();
    id_.google_.UnsafeSetDefault(google);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(google);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.google)
}

// .server.AuthenticateRequest.GameCenter game_center = 5;
inline bool AuthenticateRequest::_internal_has_game_center() const {
  return id_case() == kGameCenter;
}
inline bool AuthenticateRequest::has_game_center() const {
  return _internal_has_game_center();
}
inline void AuthenticateRequest::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
inline void AuthenticateRequest::clear_game_center() {
  if (_internal_has_game_center()) {
    if (GetArena() == nullptr) {
      delete id_.game_center_;
    }
    clear_has_id();
  }
}
inline ::server::AuthenticateRequest_GameCenter* AuthenticateRequest::release_game_center() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.game_center)
  if (_internal_has_game_center()) {
    clear_has_id();
      ::server::AuthenticateRequest_GameCenter* temp = id_.game_center_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_.game_center_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::AuthenticateRequest_GameCenter& AuthenticateRequest::_internal_game_center() const {
  return _internal_has_game_center()
      ? *id_.game_center_
      : reinterpret_cast< ::server::AuthenticateRequest_GameCenter&>(::server::_AuthenticateRequest_GameCenter_default_instance_);
}
inline const ::server::AuthenticateRequest_GameCenter& AuthenticateRequest::game_center() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.game_center)
  return _internal_game_center();
}
inline ::server::AuthenticateRequest_GameCenter* AuthenticateRequest::unsafe_arena_release_game_center() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.AuthenticateRequest.game_center)
  if (_internal_has_game_center()) {
    clear_has_id();
    ::server::AuthenticateRequest_GameCenter* temp = id_.game_center_;
    id_.game_center_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuthenticateRequest::unsafe_arena_set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center) {
  clear_id();
  if (game_center) {
    set_has_game_center();
    id_.game_center_ = game_center;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.AuthenticateRequest.game_center)
}
inline ::server::AuthenticateRequest_GameCenter* AuthenticateRequest::_internal_mutable_game_center() {
  if (!_internal_has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_ = CreateMaybeMessage< ::server::AuthenticateRequest_GameCenter >(GetArena());
  }
  return id_.game_center_;
}
inline ::server::AuthenticateRequest_GameCenter* AuthenticateRequest::mutable_game_center() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.game_center)
  return _internal_mutable_game_center();
}

// string steam = 6;
inline bool AuthenticateRequest::_internal_has_steam() const {
  return id_case() == kSteam;
}
inline void AuthenticateRequest::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
inline void AuthenticateRequest::clear_steam() {
  if (_internal_has_steam()) {
    id_.steam_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& AuthenticateRequest::steam() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.steam)
  return _internal_steam();
}
inline void AuthenticateRequest::set_steam(const std::string& value) {
  _internal_set_steam(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.steam)
}
inline std::string* AuthenticateRequest::mutable_steam() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.steam)
  return _internal_mutable_steam();
}
inline const std::string& AuthenticateRequest::_internal_steam() const {
  if (_internal_has_steam()) {
    return id_.steam_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::_internal_set_steam(const std::string& value) {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest::set_steam(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.steam)
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.steam)
}
inline void AuthenticateRequest::set_steam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.steam)
}
inline void AuthenticateRequest::set_steam(const char* value,
                             size_t size) {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.steam)
}
inline std::string* AuthenticateRequest::_internal_mutable_steam() {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.steam_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest::release_steam() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.steam)
  if (_internal_has_steam()) {
    clear_has_id();
    return id_.steam_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AuthenticateRequest::set_allocated_steam(std::string* steam) {
  if (has_id()) {
    clear_id();
  }
  if (steam != nullptr) {
    set_has_steam();
    id_.steam_.UnsafeSetDefault(steam);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(steam);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.steam)
}

// string device = 7;
inline bool AuthenticateRequest::_internal_has_device() const {
  return id_case() == kDevice;
}
inline void AuthenticateRequest::set_has_device() {
  _oneof_case_[0] = kDevice;
}
inline void AuthenticateRequest::clear_device() {
  if (_internal_has_device()) {
    id_.device_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& AuthenticateRequest::device() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.device)
  return _internal_device();
}
inline void AuthenticateRequest::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.device)
}
inline std::string* AuthenticateRequest::mutable_device() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.device)
  return _internal_mutable_device();
}
inline const std::string& AuthenticateRequest::_internal_device() const {
  if (_internal_has_device()) {
    return id_.device_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::_internal_set_device(const std::string& value) {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest::set_device(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.device)
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.device)
}
inline void AuthenticateRequest::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.device)
}
inline void AuthenticateRequest::set_device(const char* value,
                             size_t size) {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.device)
}
inline std::string* AuthenticateRequest::_internal_mutable_device() {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.device_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest::release_device() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.device)
  if (_internal_has_device()) {
    clear_has_id();
    return id_.device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AuthenticateRequest::set_allocated_device(std::string* device) {
  if (has_id()) {
    clear_id();
  }
  if (device != nullptr) {
    set_has_device();
    id_.device_.UnsafeSetDefault(device);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(device);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.device)
}

// string custom = 8;
inline bool AuthenticateRequest::_internal_has_custom() const {
  return id_case() == kCustom;
}
inline void AuthenticateRequest::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void AuthenticateRequest::clear_custom() {
  if (_internal_has_custom()) {
    id_.custom_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& AuthenticateRequest::custom() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateRequest.custom)
  return _internal_custom();
}
inline void AuthenticateRequest::set_custom(const std::string& value) {
  _internal_set_custom(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.custom)
}
inline std::string* AuthenticateRequest::mutable_custom() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateRequest.custom)
  return _internal_mutable_custom();
}
inline const std::string& AuthenticateRequest::_internal_custom() const {
  if (_internal_has_custom()) {
    return id_.custom_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AuthenticateRequest::_internal_set_custom(const std::string& value) {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateRequest::set_custom(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.AuthenticateRequest.custom)
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateRequest.custom)
}
inline void AuthenticateRequest::set_custom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateRequest.custom)
}
inline void AuthenticateRequest::set_custom(const char* value,
                             size_t size) {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateRequest.custom)
}
inline std::string* AuthenticateRequest::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.custom_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateRequest::release_custom() {
  // @@protoc_insertion_point(field_release:server.AuthenticateRequest.custom)
  if (_internal_has_custom()) {
    clear_has_id();
    return id_.custom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AuthenticateRequest::set_allocated_custom(std::string* custom) {
  if (has_id()) {
    clear_id();
  }
  if (custom != nullptr) {
    set_has_custom();
    id_.custom_.UnsafeSetDefault(custom);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(custom);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.custom)
}

inline bool AuthenticateRequest::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void AuthenticateRequest::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline AuthenticateRequest::IdCase AuthenticateRequest::id_case() const {
  return AuthenticateRequest::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AuthenticateResponse_Session

// string token = 1;
inline void AuthenticateResponse_Session::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateResponse_Session::token() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Session.token)
  return _internal_token();
}
inline void AuthenticateResponse_Session::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Session.token)
}
inline std::string* AuthenticateResponse_Session::mutable_token() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Session.token)
  return _internal_mutable_token();
}
inline const std::string& AuthenticateResponse_Session::_internal_token() const {
  return token_.Get();
}
inline void AuthenticateResponse_Session::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateResponse_Session::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateResponse.Session.token)
}
inline void AuthenticateResponse_Session::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Session.token)
}
inline void AuthenticateResponse_Session::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Session.token)
}
inline std::string* AuthenticateResponse_Session::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateResponse_Session::release_token() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Session.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateResponse_Session::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Session.token)
}

// string udp_token = 2;
inline void AuthenticateResponse_Session::clear_udp_token() {
  udp_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateResponse_Session::udp_token() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Session.udp_token)
  return _internal_udp_token();
}
inline void AuthenticateResponse_Session::set_udp_token(const std::string& value) {
  _internal_set_udp_token(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Session.udp_token)
}
inline std::string* AuthenticateResponse_Session::mutable_udp_token() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Session.udp_token)
  return _internal_mutable_udp_token();
}
inline const std::string& AuthenticateResponse_Session::_internal_udp_token() const {
  return udp_token_.Get();
}
inline void AuthenticateResponse_Session::_internal_set_udp_token(const std::string& value) {
  
  udp_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateResponse_Session::set_udp_token(std::string&& value) {
  
  udp_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateResponse.Session.udp_token)
}
inline void AuthenticateResponse_Session::set_udp_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  udp_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Session.udp_token)
}
inline void AuthenticateResponse_Session::set_udp_token(const char* value,
    size_t size) {
  
  udp_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Session.udp_token)
}
inline std::string* AuthenticateResponse_Session::_internal_mutable_udp_token() {
  
  return udp_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateResponse_Session::release_udp_token() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Session.udp_token)
  return udp_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateResponse_Session::set_allocated_udp_token(std::string* udp_token) {
  if (udp_token != nullptr) {
    
  } else {
    
  }
  udp_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udp_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Session.udp_token)
}

// -------------------------------------------------------------------

// AuthenticateResponse_Error

// int32 code = 1;
inline void AuthenticateResponse_Error::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateResponse_Error::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AuthenticateResponse_Error::code() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.code)
  return _internal_code();
}
inline void AuthenticateResponse_Error::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void AuthenticateResponse_Error::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Error.code)
}

// string message = 2;
inline void AuthenticateResponse_Error::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateResponse_Error::message() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.message)
  return _internal_message();
}
inline void AuthenticateResponse_Error::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.Error.message)
}
inline std::string* AuthenticateResponse_Error::mutable_message() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Error.message)
  return _internal_mutable_message();
}
inline const std::string& AuthenticateResponse_Error::_internal_message() const {
  return message_.Get();
}
inline void AuthenticateResponse_Error::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateResponse_Error::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateResponse.Error.message)
}
inline void AuthenticateResponse_Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.Error.message)
}
inline void AuthenticateResponse_Error::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.Error.message)
}
inline std::string* AuthenticateResponse_Error::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateResponse_Error::release_message() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Error.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateResponse_Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Error.message)
}

// .server.AuthenticateRequest request = 3;
inline bool AuthenticateResponse_Error::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool AuthenticateResponse_Error::has_request() const {
  return _internal_has_request();
}
inline void AuthenticateResponse_Error::clear_request() {
  if (GetArena() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
}
inline const ::server::AuthenticateRequest& AuthenticateResponse_Error::_internal_request() const {
  const ::server::AuthenticateRequest* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::AuthenticateRequest&>(
      ::server::_AuthenticateRequest_default_instance_);
}
inline const ::server::AuthenticateRequest& AuthenticateResponse_Error::request() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.Error.request)
  return _internal_request();
}
inline void AuthenticateResponse_Error::unsafe_arena_set_allocated_request(
    ::server::AuthenticateRequest* request) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.AuthenticateResponse.Error.request)
}
inline ::server::AuthenticateRequest* AuthenticateResponse_Error::release_request() {
  
  ::server::AuthenticateRequest* temp = request_;
  request_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::AuthenticateRequest* AuthenticateResponse_Error::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.Error.request)
  
  ::server::AuthenticateRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::server::AuthenticateRequest* AuthenticateResponse_Error::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::AuthenticateRequest>(GetArena());
    request_ = p;
  }
  return request_;
}
inline ::server::AuthenticateRequest* AuthenticateResponse_Error::mutable_request() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.Error.request)
  return _internal_mutable_request();
}
inline void AuthenticateResponse_Error::set_allocated_request(::server::AuthenticateRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.Error.request)
}

// -------------------------------------------------------------------

// AuthenticateResponse

// string collation_id = 1;
inline void AuthenticateResponse::clear_collation_id() {
  collation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AuthenticateResponse::collation_id() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.collation_id)
  return _internal_collation_id();
}
inline void AuthenticateResponse::set_collation_id(const std::string& value) {
  _internal_set_collation_id(value);
  // @@protoc_insertion_point(field_set:server.AuthenticateResponse.collation_id)
}
inline std::string* AuthenticateResponse::mutable_collation_id() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.collation_id)
  return _internal_mutable_collation_id();
}
inline const std::string& AuthenticateResponse::_internal_collation_id() const {
  return collation_id_.Get();
}
inline void AuthenticateResponse::_internal_set_collation_id(const std::string& value) {
  
  collation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AuthenticateResponse::set_collation_id(std::string&& value) {
  
  collation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.AuthenticateResponse.collation_id)
}
inline void AuthenticateResponse::set_collation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.AuthenticateResponse.collation_id)
}
inline void AuthenticateResponse::set_collation_id(const char* value,
    size_t size) {
  
  collation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.AuthenticateResponse.collation_id)
}
inline std::string* AuthenticateResponse::_internal_mutable_collation_id() {
  
  return collation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AuthenticateResponse::release_collation_id() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.collation_id)
  return collation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AuthenticateResponse::set_allocated_collation_id(std::string* collation_id) {
  if (collation_id != nullptr) {
    
  } else {
    
  }
  collation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.collation_id)
}

// .server.AuthenticateResponse.Session session = 2;
inline bool AuthenticateResponse::_internal_has_session() const {
  return id_case() == kSession;
}
inline bool AuthenticateResponse::has_session() const {
  return _internal_has_session();
}
inline void AuthenticateResponse::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline void AuthenticateResponse::clear_session() {
  if (_internal_has_session()) {
    if (GetArena() == nullptr) {
      delete id_.session_;
    }
    clear_has_id();
  }
}
inline ::server::AuthenticateResponse_Session* AuthenticateResponse::release_session() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.session)
  if (_internal_has_session()) {
    clear_has_id();
      ::server::AuthenticateResponse_Session* temp = id_.session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::AuthenticateResponse_Session& AuthenticateResponse::_internal_session() const {
  return _internal_has_session()
      ? *id_.session_
      : reinterpret_cast< ::server::AuthenticateResponse_Session&>(::server::_AuthenticateResponse_Session_default_instance_);
}
inline const ::server::AuthenticateResponse_Session& AuthenticateResponse::session() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.session)
  return _internal_session();
}
inline ::server::AuthenticateResponse_Session* AuthenticateResponse::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.AuthenticateResponse.session)
  if (_internal_has_session()) {
    clear_has_id();
    ::server::AuthenticateResponse_Session* temp = id_.session_;
    id_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuthenticateResponse::unsafe_arena_set_allocated_session(::server::AuthenticateResponse_Session* session) {
  clear_id();
  if (session) {
    set_has_session();
    id_.session_ = session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.AuthenticateResponse.session)
}
inline ::server::AuthenticateResponse_Session* AuthenticateResponse::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_id();
    set_has_session();
    id_.session_ = CreateMaybeMessage< ::server::AuthenticateResponse_Session >(GetArena());
  }
  return id_.session_;
}
inline ::server::AuthenticateResponse_Session* AuthenticateResponse::mutable_session() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.session)
  return _internal_mutable_session();
}

// .server.AuthenticateResponse.Error error = 3;
inline bool AuthenticateResponse::_internal_has_error() const {
  return id_case() == kError;
}
inline bool AuthenticateResponse::has_error() const {
  return _internal_has_error();
}
inline void AuthenticateResponse::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void AuthenticateResponse::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete id_.error_;
    }
    clear_has_id();
  }
}
inline ::server::AuthenticateResponse_Error* AuthenticateResponse::release_error() {
  // @@protoc_insertion_point(field_release:server.AuthenticateResponse.error)
  if (_internal_has_error()) {
    clear_has_id();
      ::server::AuthenticateResponse_Error* temp = id_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::AuthenticateResponse_Error& AuthenticateResponse::_internal_error() const {
  return _internal_has_error()
      ? *id_.error_
      : reinterpret_cast< ::server::AuthenticateResponse_Error&>(::server::_AuthenticateResponse_Error_default_instance_);
}
inline const ::server::AuthenticateResponse_Error& AuthenticateResponse::error() const {
  // @@protoc_insertion_point(field_get:server.AuthenticateResponse.error)
  return _internal_error();
}
inline ::server::AuthenticateResponse_Error* AuthenticateResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.AuthenticateResponse.error)
  if (_internal_has_error()) {
    clear_has_id();
    ::server::AuthenticateResponse_Error* temp = id_.error_;
    id_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AuthenticateResponse::unsafe_arena_set_allocated_error(::server::AuthenticateResponse_Error* error) {
  clear_id();
  if (error) {
    set_has_error();
    id_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.AuthenticateResponse.error)
}
inline ::server::AuthenticateResponse_Error* AuthenticateResponse::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_id();
    set_has_error();
    id_.error_ = CreateMaybeMessage< ::server::AuthenticateResponse_Error >(GetArena());
  }
  return id_.error_;
}
inline ::server::AuthenticateResponse_Error* AuthenticateResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:server.AuthenticateResponse.error)
  return _internal_mutable_error();
}

inline bool AuthenticateResponse::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void AuthenticateResponse::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline AuthenticateResponse::IdCase AuthenticateResponse::id_case() const {
  return AuthenticateResponse::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Envelope

// string collation_id = 1;
inline void Envelope::clear_collation_id() {
  collation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Envelope::collation_id() const {
  // @@protoc_insertion_point(field_get:server.Envelope.collation_id)
  return _internal_collation_id();
}
inline void Envelope::set_collation_id(const std::string& value) {
  _internal_set_collation_id(value);
  // @@protoc_insertion_point(field_set:server.Envelope.collation_id)
}
inline std::string* Envelope::mutable_collation_id() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.collation_id)
  return _internal_mutable_collation_id();
}
inline const std::string& Envelope::_internal_collation_id() const {
  return collation_id_.Get();
}
inline void Envelope::_internal_set_collation_id(const std::string& value) {
  
  collation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Envelope::set_collation_id(std::string&& value) {
  
  collation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Envelope.collation_id)
}
inline void Envelope::set_collation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Envelope.collation_id)
}
inline void Envelope::set_collation_id(const char* value,
    size_t size) {
  
  collation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Envelope.collation_id)
}
inline std::string* Envelope::_internal_mutable_collation_id() {
  
  return collation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Envelope::release_collation_id() {
  // @@protoc_insertion_point(field_release:server.Envelope.collation_id)
  return collation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Envelope::set_allocated_collation_id(std::string* collation_id) {
  if (collation_id != nullptr) {
    
  } else {
    
  }
  collation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Envelope.collation_id)
}

// .server.Error error = 2;
inline bool Envelope::_internal_has_error() const {
  return payload_case() == kError;
}
inline bool Envelope::has_error() const {
  return _internal_has_error();
}
inline void Envelope::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Envelope::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete payload_.error_;
    }
    clear_has_payload();
  }
}
inline ::server::Error* Envelope::release_error() {
  // @@protoc_insertion_point(field_release:server.Envelope.error)
  if (_internal_has_error()) {
    clear_has_payload();
      ::server::Error* temp = payload_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::Error& Envelope::_internal_error() const {
  return _internal_has_error()
      ? *payload_.error_
      : reinterpret_cast< ::server::Error&>(::server::_Error_default_instance_);
}
inline const ::server::Error& Envelope::error() const {
  // @@protoc_insertion_point(field_get:server.Envelope.error)
  return _internal_error();
}
inline ::server::Error* Envelope::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.error)
  if (_internal_has_error()) {
    clear_has_payload();
    ::server::Error* temp = payload_.error_;
    payload_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_error(::server::Error* error) {
  clear_payload();
  if (error) {
    set_has_error();
    payload_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.error)
}
inline ::server::Error* Envelope::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_payload();
    set_has_error();
    payload_.error_ = CreateMaybeMessage< ::server::Error >(GetArena());
  }
  return payload_.error_;
}
inline ::server::Error* Envelope::mutable_error() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.error)
  return _internal_mutable_error();
}

// .server.Heartbeat heartbeat = 3;
inline bool Envelope::_internal_has_heartbeat() const {
  return payload_case() == kHeartbeat;
}
inline bool Envelope::has_heartbeat() const {
  return _internal_has_heartbeat();
}
inline void Envelope::set_has_heartbeat() {
  _oneof_case_[0] = kHeartbeat;
}
inline void Envelope::clear_heartbeat() {
  if (_internal_has_heartbeat()) {
    if (GetArena() == nullptr) {
      delete payload_.heartbeat_;
    }
    clear_has_payload();
  }
}
inline ::server::Heartbeat* Envelope::release_heartbeat() {
  // @@protoc_insertion_point(field_release:server.Envelope.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_payload();
      ::server::Heartbeat* temp = payload_.heartbeat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::Heartbeat& Envelope::_internal_heartbeat() const {
  return _internal_has_heartbeat()
      ? *payload_.heartbeat_
      : reinterpret_cast< ::server::Heartbeat&>(::server::_Heartbeat_default_instance_);
}
inline const ::server::Heartbeat& Envelope::heartbeat() const {
  // @@protoc_insertion_point(field_get:server.Envelope.heartbeat)
  return _internal_heartbeat();
}
inline ::server::Heartbeat* Envelope::unsafe_arena_release_heartbeat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.heartbeat)
  if (_internal_has_heartbeat()) {
    clear_has_payload();
    ::server::Heartbeat* temp = payload_.heartbeat_;
    payload_.heartbeat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_heartbeat(::server::Heartbeat* heartbeat) {
  clear_payload();
  if (heartbeat) {
    set_has_heartbeat();
    payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.heartbeat)
}
inline ::server::Heartbeat* Envelope::_internal_mutable_heartbeat() {
  if (!_internal_has_heartbeat()) {
    clear_payload();
    set_has_heartbeat();
    payload_.heartbeat_ = CreateMaybeMessage< ::server::Heartbeat >(GetArena());
  }
  return payload_.heartbeat_;
}
inline ::server::Heartbeat* Envelope::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.heartbeat)
  return _internal_mutable_heartbeat();
}

// .server.Logout logout = 4;
inline bool Envelope::_internal_has_logout() const {
  return payload_case() == kLogout;
}
inline bool Envelope::has_logout() const {
  return _internal_has_logout();
}
inline void Envelope::set_has_logout() {
  _oneof_case_[0] = kLogout;
}
inline void Envelope::clear_logout() {
  if (_internal_has_logout()) {
    if (GetArena() == nullptr) {
      delete payload_.logout_;
    }
    clear_has_payload();
  }
}
inline ::server::Logout* Envelope::release_logout() {
  // @@protoc_insertion_point(field_release:server.Envelope.logout)
  if (_internal_has_logout()) {
    clear_has_payload();
      ::server::Logout* temp = payload_.logout_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.logout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::Logout& Envelope::_internal_logout() const {
  return _internal_has_logout()
      ? *payload_.logout_
      : reinterpret_cast< ::server::Logout&>(::server::_Logout_default_instance_);
}
inline const ::server::Logout& Envelope::logout() const {
  // @@protoc_insertion_point(field_get:server.Envelope.logout)
  return _internal_logout();
}
inline ::server::Logout* Envelope::unsafe_arena_release_logout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.logout)
  if (_internal_has_logout()) {
    clear_has_payload();
    ::server::Logout* temp = payload_.logout_;
    payload_.logout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_logout(::server::Logout* logout) {
  clear_payload();
  if (logout) {
    set_has_logout();
    payload_.logout_ = logout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.logout)
}
inline ::server::Logout* Envelope::_internal_mutable_logout() {
  if (!_internal_has_logout()) {
    clear_payload();
    set_has_logout();
    payload_.logout_ = CreateMaybeMessage< ::server::Logout >(GetArena());
  }
  return payload_.logout_;
}
inline ::server::Logout* Envelope::mutable_logout() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.logout)
  return _internal_mutable_logout();
}

// .server.TLink link = 5;
inline bool Envelope::_internal_has_link() const {
  return payload_case() == kLink;
}
inline bool Envelope::has_link() const {
  return _internal_has_link();
}
inline void Envelope::set_has_link() {
  _oneof_case_[0] = kLink;
}
inline void Envelope::clear_link() {
  if (_internal_has_link()) {
    if (GetArena() == nullptr) {
      delete payload_.link_;
    }
    clear_has_payload();
  }
}
inline ::server::TLink* Envelope::release_link() {
  // @@protoc_insertion_point(field_release:server.Envelope.link)
  if (_internal_has_link()) {
    clear_has_payload();
      ::server::TLink* temp = payload_.link_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TLink& Envelope::_internal_link() const {
  return _internal_has_link()
      ? *payload_.link_
      : reinterpret_cast< ::server::TLink&>(::server::_TLink_default_instance_);
}
inline const ::server::TLink& Envelope::link() const {
  // @@protoc_insertion_point(field_get:server.Envelope.link)
  return _internal_link();
}
inline ::server::TLink* Envelope::unsafe_arena_release_link() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.link)
  if (_internal_has_link()) {
    clear_has_payload();
    ::server::TLink* temp = payload_.link_;
    payload_.link_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_link(::server::TLink* link) {
  clear_payload();
  if (link) {
    set_has_link();
    payload_.link_ = link;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.link)
}
inline ::server::TLink* Envelope::_internal_mutable_link() {
  if (!_internal_has_link()) {
    clear_payload();
    set_has_link();
    payload_.link_ = CreateMaybeMessage< ::server::TLink >(GetArena());
  }
  return payload_.link_;
}
inline ::server::TLink* Envelope::mutable_link() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.link)
  return _internal_mutable_link();
}

// .server.TUnlink unlink = 6;
inline bool Envelope::_internal_has_unlink() const {
  return payload_case() == kUnlink;
}
inline bool Envelope::has_unlink() const {
  return _internal_has_unlink();
}
inline void Envelope::set_has_unlink() {
  _oneof_case_[0] = kUnlink;
}
inline void Envelope::clear_unlink() {
  if (_internal_has_unlink()) {
    if (GetArena() == nullptr) {
      delete payload_.unlink_;
    }
    clear_has_payload();
  }
}
inline ::server::TUnlink* Envelope::release_unlink() {
  // @@protoc_insertion_point(field_release:server.Envelope.unlink)
  if (_internal_has_unlink()) {
    clear_has_payload();
      ::server::TUnlink* temp = payload_.unlink_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.unlink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TUnlink& Envelope::_internal_unlink() const {
  return _internal_has_unlink()
      ? *payload_.unlink_
      : reinterpret_cast< ::server::TUnlink&>(::server::_TUnlink_default_instance_);
}
inline const ::server::TUnlink& Envelope::unlink() const {
  // @@protoc_insertion_point(field_get:server.Envelope.unlink)
  return _internal_unlink();
}
inline ::server::TUnlink* Envelope::unsafe_arena_release_unlink() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.unlink)
  if (_internal_has_unlink()) {
    clear_has_payload();
    ::server::TUnlink* temp = payload_.unlink_;
    payload_.unlink_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_unlink(::server::TUnlink* unlink) {
  clear_payload();
  if (unlink) {
    set_has_unlink();
    payload_.unlink_ = unlink;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.unlink)
}
inline ::server::TUnlink* Envelope::_internal_mutable_unlink() {
  if (!_internal_has_unlink()) {
    clear_payload();
    set_has_unlink();
    payload_.unlink_ = CreateMaybeMessage< ::server::TUnlink >(GetArena());
  }
  return payload_.unlink_;
}
inline ::server::TUnlink* Envelope::mutable_unlink() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.unlink)
  return _internal_mutable_unlink();
}

// .server.TSelfFetch self_fetch = 7;
inline bool Envelope::_internal_has_self_fetch() const {
  return payload_case() == kSelfFetch;
}
inline bool Envelope::has_self_fetch() const {
  return _internal_has_self_fetch();
}
inline void Envelope::set_has_self_fetch() {
  _oneof_case_[0] = kSelfFetch;
}
inline void Envelope::clear_self_fetch() {
  if (_internal_has_self_fetch()) {
    if (GetArena() == nullptr) {
      delete payload_.self_fetch_;
    }
    clear_has_payload();
  }
}
inline ::server::TSelfFetch* Envelope::release_self_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.self_fetch)
  if (_internal_has_self_fetch()) {
    clear_has_payload();
      ::server::TSelfFetch* temp = payload_.self_fetch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.self_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TSelfFetch& Envelope::_internal_self_fetch() const {
  return _internal_has_self_fetch()
      ? *payload_.self_fetch_
      : reinterpret_cast< ::server::TSelfFetch&>(::server::_TSelfFetch_default_instance_);
}
inline const ::server::TSelfFetch& Envelope::self_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self_fetch)
  return _internal_self_fetch();
}
inline ::server::TSelfFetch* Envelope::unsafe_arena_release_self_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.self_fetch)
  if (_internal_has_self_fetch()) {
    clear_has_payload();
    ::server::TSelfFetch* temp = payload_.self_fetch_;
    payload_.self_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_self_fetch(::server::TSelfFetch* self_fetch) {
  clear_payload();
  if (self_fetch) {
    set_has_self_fetch();
    payload_.self_fetch_ = self_fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.self_fetch)
}
inline ::server::TSelfFetch* Envelope::_internal_mutable_self_fetch() {
  if (!_internal_has_self_fetch()) {
    clear_payload();
    set_has_self_fetch();
    payload_.self_fetch_ = CreateMaybeMessage< ::server::TSelfFetch >(GetArena());
  }
  return payload_.self_fetch_;
}
inline ::server::TSelfFetch* Envelope::mutable_self_fetch() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.self_fetch)
  return _internal_mutable_self_fetch();
}

// .server.TSelfUpdate self_update = 8;
inline bool Envelope::_internal_has_self_update() const {
  return payload_case() == kSelfUpdate;
}
inline bool Envelope::has_self_update() const {
  return _internal_has_self_update();
}
inline void Envelope::set_has_self_update() {
  _oneof_case_[0] = kSelfUpdate;
}
inline void Envelope::clear_self_update() {
  if (_internal_has_self_update()) {
    if (GetArena() == nullptr) {
      delete payload_.self_update_;
    }
    clear_has_payload();
  }
}
inline ::server::TSelfUpdate* Envelope::release_self_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.self_update)
  if (_internal_has_self_update()) {
    clear_has_payload();
      ::server::TSelfUpdate* temp = payload_.self_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.self_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TSelfUpdate& Envelope::_internal_self_update() const {
  return _internal_has_self_update()
      ? *payload_.self_update_
      : reinterpret_cast< ::server::TSelfUpdate&>(::server::_TSelfUpdate_default_instance_);
}
inline const ::server::TSelfUpdate& Envelope::self_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self_update)
  return _internal_self_update();
}
inline ::server::TSelfUpdate* Envelope::unsafe_arena_release_self_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.self_update)
  if (_internal_has_self_update()) {
    clear_has_payload();
    ::server::TSelfUpdate* temp = payload_.self_update_;
    payload_.self_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_self_update(::server::TSelfUpdate* self_update) {
  clear_payload();
  if (self_update) {
    set_has_self_update();
    payload_.self_update_ = self_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.self_update)
}
inline ::server::TSelfUpdate* Envelope::_internal_mutable_self_update() {
  if (!_internal_has_self_update()) {
    clear_payload();
    set_has_self_update();
    payload_.self_update_ = CreateMaybeMessage< ::server::TSelfUpdate >(GetArena());
  }
  return payload_.self_update_;
}
inline ::server::TSelfUpdate* Envelope::mutable_self_update() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.self_update)
  return _internal_mutable_self_update();
}

// .server.TUsersFetch users_fetch = 9;
inline bool Envelope::_internal_has_users_fetch() const {
  return payload_case() == kUsersFetch;
}
inline bool Envelope::has_users_fetch() const {
  return _internal_has_users_fetch();
}
inline void Envelope::set_has_users_fetch() {
  _oneof_case_[0] = kUsersFetch;
}
inline void Envelope::clear_users_fetch() {
  if (_internal_has_users_fetch()) {
    if (GetArena() == nullptr) {
      delete payload_.users_fetch_;
    }
    clear_has_payload();
  }
}
inline ::server::TUsersFetch* Envelope::release_users_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.users_fetch)
  if (_internal_has_users_fetch()) {
    clear_has_payload();
      ::server::TUsersFetch* temp = payload_.users_fetch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.users_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TUsersFetch& Envelope::_internal_users_fetch() const {
  return _internal_has_users_fetch()
      ? *payload_.users_fetch_
      : reinterpret_cast< ::server::TUsersFetch&>(::server::_TUsersFetch_default_instance_);
}
inline const ::server::TUsersFetch& Envelope::users_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.users_fetch)
  return _internal_users_fetch();
}
inline ::server::TUsersFetch* Envelope::unsafe_arena_release_users_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.users_fetch)
  if (_internal_has_users_fetch()) {
    clear_has_payload();
    ::server::TUsersFetch* temp = payload_.users_fetch_;
    payload_.users_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_users_fetch(::server::TUsersFetch* users_fetch) {
  clear_payload();
  if (users_fetch) {
    set_has_users_fetch();
    payload_.users_fetch_ = users_fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.users_fetch)
}
inline ::server::TUsersFetch* Envelope::_internal_mutable_users_fetch() {
  if (!_internal_has_users_fetch()) {
    clear_payload();
    set_has_users_fetch();
    payload_.users_fetch_ = CreateMaybeMessage< ::server::TUsersFetch >(GetArena());
  }
  return payload_.users_fetch_;
}
inline ::server::TUsersFetch* Envelope::mutable_users_fetch() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.users_fetch)
  return _internal_mutable_users_fetch();
}

// .server.TSelf self = 10;
inline bool Envelope::_internal_has_self() const {
  return payload_case() == kSelf;
}
inline bool Envelope::has_self() const {
  return _internal_has_self();
}
inline void Envelope::set_has_self() {
  _oneof_case_[0] = kSelf;
}
inline void Envelope::clear_self() {
  if (_internal_has_self()) {
    if (GetArena() == nullptr) {
      delete payload_.self_;
    }
    clear_has_payload();
  }
}
inline ::server::TSelf* Envelope::release_self() {
  // @@protoc_insertion_point(field_release:server.Envelope.self)
  if (_internal_has_self()) {
    clear_has_payload();
      ::server::TSelf* temp = payload_.self_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.self_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TSelf& Envelope::_internal_self() const {
  return _internal_has_self()
      ? *payload_.self_
      : reinterpret_cast< ::server::TSelf&>(::server::_TSelf_default_instance_);
}
inline const ::server::TSelf& Envelope::self() const {
  // @@protoc_insertion_point(field_get:server.Envelope.self)
  return _internal_self();
}
inline ::server::TSelf* Envelope::unsafe_arena_release_self() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.self)
  if (_internal_has_self()) {
    clear_has_payload();
    ::server::TSelf* temp = payload_.self_;
    payload_.self_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_self(::server::TSelf* self) {
  clear_payload();
  if (self) {
    set_has_self();
    payload_.self_ = self;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.self)
}
inline ::server::TSelf* Envelope::_internal_mutable_self() {
  if (!_internal_has_self()) {
    clear_payload();
    set_has_self();
    payload_.self_ = CreateMaybeMessage< ::server::TSelf >(GetArena());
  }
  return payload_.self_;
}
inline ::server::TSelf* Envelope::mutable_self() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.self)
  return _internal_mutable_self();
}

// .server.TUsers users = 11;
inline bool Envelope::_internal_has_users() const {
  return payload_case() == kUsers;
}
inline bool Envelope::has_users() const {
  return _internal_has_users();
}
inline void Envelope::set_has_users() {
  _oneof_case_[0] = kUsers;
}
inline void Envelope::clear_users() {
  if (_internal_has_users()) {
    if (GetArena() == nullptr) {
      delete payload_.users_;
    }
    clear_has_payload();
  }
}
inline ::server::TUsers* Envelope::release_users() {
  // @@protoc_insertion_point(field_release:server.Envelope.users)
  if (_internal_has_users()) {
    clear_has_payload();
      ::server::TUsers* temp = payload_.users_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.users_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TUsers& Envelope::_internal_users() const {
  return _internal_has_users()
      ? *payload_.users_
      : reinterpret_cast< ::server::TUsers&>(::server::_TUsers_default_instance_);
}
inline const ::server::TUsers& Envelope::users() const {
  // @@protoc_insertion_point(field_get:server.Envelope.users)
  return _internal_users();
}
inline ::server::TUsers* Envelope::unsafe_arena_release_users() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.users)
  if (_internal_has_users()) {
    clear_has_payload();
    ::server::TUsers* temp = payload_.users_;
    payload_.users_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_users(::server::TUsers* users) {
  clear_payload();
  if (users) {
    set_has_users();
    payload_.users_ = users;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.users)
}
inline ::server::TUsers* Envelope::_internal_mutable_users() {
  if (!_internal_has_users()) {
    clear_payload();
    set_has_users();
    payload_.users_ = CreateMaybeMessage< ::server::TUsers >(GetArena());
  }
  return payload_.users_;
}
inline ::server::TUsers* Envelope::mutable_users() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.users)
  return _internal_mutable_users();
}

// .server.TFriendsAdd friends_add = 12;
inline bool Envelope::_internal_has_friends_add() const {
  return payload_case() == kFriendsAdd;
}
inline bool Envelope::has_friends_add() const {
  return _internal_has_friends_add();
}
inline void Envelope::set_has_friends_add() {
  _oneof_case_[0] = kFriendsAdd;
}
inline void Envelope::clear_friends_add() {
  if (_internal_has_friends_add()) {
    if (GetArena() == nullptr) {
      delete payload_.friends_add_;
    }
    clear_has_payload();
  }
}
inline ::server::TFriendsAdd* Envelope::release_friends_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_add)
  if (_internal_has_friends_add()) {
    clear_has_payload();
      ::server::TFriendsAdd* temp = payload_.friends_add_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.friends_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TFriendsAdd& Envelope::_internal_friends_add() const {
  return _internal_has_friends_add()
      ? *payload_.friends_add_
      : reinterpret_cast< ::server::TFriendsAdd&>(::server::_TFriendsAdd_default_instance_);
}
inline const ::server::TFriendsAdd& Envelope::friends_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_add)
  return _internal_friends_add();
}
inline ::server::TFriendsAdd* Envelope::unsafe_arena_release_friends_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.friends_add)
  if (_internal_has_friends_add()) {
    clear_has_payload();
    ::server::TFriendsAdd* temp = payload_.friends_add_;
    payload_.friends_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_friends_add(::server::TFriendsAdd* friends_add) {
  clear_payload();
  if (friends_add) {
    set_has_friends_add();
    payload_.friends_add_ = friends_add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.friends_add)
}
inline ::server::TFriendsAdd* Envelope::_internal_mutable_friends_add() {
  if (!_internal_has_friends_add()) {
    clear_payload();
    set_has_friends_add();
    payload_.friends_add_ = CreateMaybeMessage< ::server::TFriendsAdd >(GetArena());
  }
  return payload_.friends_add_;
}
inline ::server::TFriendsAdd* Envelope::mutable_friends_add() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_add)
  return _internal_mutable_friends_add();
}

// .server.TFriendsRemove friends_remove = 13;
inline bool Envelope::_internal_has_friends_remove() const {
  return payload_case() == kFriendsRemove;
}
inline bool Envelope::has_friends_remove() const {
  return _internal_has_friends_remove();
}
inline void Envelope::set_has_friends_remove() {
  _oneof_case_[0] = kFriendsRemove;
}
inline void Envelope::clear_friends_remove() {
  if (_internal_has_friends_remove()) {
    if (GetArena() == nullptr) {
      delete payload_.friends_remove_;
    }
    clear_has_payload();
  }
}
inline ::server::TFriendsRemove* Envelope::release_friends_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_remove)
  if (_internal_has_friends_remove()) {
    clear_has_payload();
      ::server::TFriendsRemove* temp = payload_.friends_remove_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.friends_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TFriendsRemove& Envelope::_internal_friends_remove() const {
  return _internal_has_friends_remove()
      ? *payload_.friends_remove_
      : reinterpret_cast< ::server::TFriendsRemove&>(::server::_TFriendsRemove_default_instance_);
}
inline const ::server::TFriendsRemove& Envelope::friends_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_remove)
  return _internal_friends_remove();
}
inline ::server::TFriendsRemove* Envelope::unsafe_arena_release_friends_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.friends_remove)
  if (_internal_has_friends_remove()) {
    clear_has_payload();
    ::server::TFriendsRemove* temp = payload_.friends_remove_;
    payload_.friends_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_friends_remove(::server::TFriendsRemove* friends_remove) {
  clear_payload();
  if (friends_remove) {
    set_has_friends_remove();
    payload_.friends_remove_ = friends_remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.friends_remove)
}
inline ::server::TFriendsRemove* Envelope::_internal_mutable_friends_remove() {
  if (!_internal_has_friends_remove()) {
    clear_payload();
    set_has_friends_remove();
    payload_.friends_remove_ = CreateMaybeMessage< ::server::TFriendsRemove >(GetArena());
  }
  return payload_.friends_remove_;
}
inline ::server::TFriendsRemove* Envelope::mutable_friends_remove() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_remove)
  return _internal_mutable_friends_remove();
}

// .server.TFriendsBlock friends_block = 14;
inline bool Envelope::_internal_has_friends_block() const {
  return payload_case() == kFriendsBlock;
}
inline bool Envelope::has_friends_block() const {
  return _internal_has_friends_block();
}
inline void Envelope::set_has_friends_block() {
  _oneof_case_[0] = kFriendsBlock;
}
inline void Envelope::clear_friends_block() {
  if (_internal_has_friends_block()) {
    if (GetArena() == nullptr) {
      delete payload_.friends_block_;
    }
    clear_has_payload();
  }
}
inline ::server::TFriendsBlock* Envelope::release_friends_block() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_block)
  if (_internal_has_friends_block()) {
    clear_has_payload();
      ::server::TFriendsBlock* temp = payload_.friends_block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.friends_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TFriendsBlock& Envelope::_internal_friends_block() const {
  return _internal_has_friends_block()
      ? *payload_.friends_block_
      : reinterpret_cast< ::server::TFriendsBlock&>(::server::_TFriendsBlock_default_instance_);
}
inline const ::server::TFriendsBlock& Envelope::friends_block() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_block)
  return _internal_friends_block();
}
inline ::server::TFriendsBlock* Envelope::unsafe_arena_release_friends_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.friends_block)
  if (_internal_has_friends_block()) {
    clear_has_payload();
    ::server::TFriendsBlock* temp = payload_.friends_block_;
    payload_.friends_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_friends_block(::server::TFriendsBlock* friends_block) {
  clear_payload();
  if (friends_block) {
    set_has_friends_block();
    payload_.friends_block_ = friends_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.friends_block)
}
inline ::server::TFriendsBlock* Envelope::_internal_mutable_friends_block() {
  if (!_internal_has_friends_block()) {
    clear_payload();
    set_has_friends_block();
    payload_.friends_block_ = CreateMaybeMessage< ::server::TFriendsBlock >(GetArena());
  }
  return payload_.friends_block_;
}
inline ::server::TFriendsBlock* Envelope::mutable_friends_block() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_block)
  return _internal_mutable_friends_block();
}

// .server.TFriendsList friends_list = 15;
inline bool Envelope::_internal_has_friends_list() const {
  return payload_case() == kFriendsList;
}
inline bool Envelope::has_friends_list() const {
  return _internal_has_friends_list();
}
inline void Envelope::set_has_friends_list() {
  _oneof_case_[0] = kFriendsList;
}
inline void Envelope::clear_friends_list() {
  if (_internal_has_friends_list()) {
    if (GetArena() == nullptr) {
      delete payload_.friends_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TFriendsList* Envelope::release_friends_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends_list)
  if (_internal_has_friends_list()) {
    clear_has_payload();
      ::server::TFriendsList* temp = payload_.friends_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.friends_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TFriendsList& Envelope::_internal_friends_list() const {
  return _internal_has_friends_list()
      ? *payload_.friends_list_
      : reinterpret_cast< ::server::TFriendsList&>(::server::_TFriendsList_default_instance_);
}
inline const ::server::TFriendsList& Envelope::friends_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends_list)
  return _internal_friends_list();
}
inline ::server::TFriendsList* Envelope::unsafe_arena_release_friends_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.friends_list)
  if (_internal_has_friends_list()) {
    clear_has_payload();
    ::server::TFriendsList* temp = payload_.friends_list_;
    payload_.friends_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_friends_list(::server::TFriendsList* friends_list) {
  clear_payload();
  if (friends_list) {
    set_has_friends_list();
    payload_.friends_list_ = friends_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.friends_list)
}
inline ::server::TFriendsList* Envelope::_internal_mutable_friends_list() {
  if (!_internal_has_friends_list()) {
    clear_payload();
    set_has_friends_list();
    payload_.friends_list_ = CreateMaybeMessage< ::server::TFriendsList >(GetArena());
  }
  return payload_.friends_list_;
}
inline ::server::TFriendsList* Envelope::mutable_friends_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends_list)
  return _internal_mutable_friends_list();
}

// .server.TFriends friends = 16;
inline bool Envelope::_internal_has_friends() const {
  return payload_case() == kFriends;
}
inline bool Envelope::has_friends() const {
  return _internal_has_friends();
}
inline void Envelope::set_has_friends() {
  _oneof_case_[0] = kFriends;
}
inline void Envelope::clear_friends() {
  if (_internal_has_friends()) {
    if (GetArena() == nullptr) {
      delete payload_.friends_;
    }
    clear_has_payload();
  }
}
inline ::server::TFriends* Envelope::release_friends() {
  // @@protoc_insertion_point(field_release:server.Envelope.friends)
  if (_internal_has_friends()) {
    clear_has_payload();
      ::server::TFriends* temp = payload_.friends_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.friends_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TFriends& Envelope::_internal_friends() const {
  return _internal_has_friends()
      ? *payload_.friends_
      : reinterpret_cast< ::server::TFriends&>(::server::_TFriends_default_instance_);
}
inline const ::server::TFriends& Envelope::friends() const {
  // @@protoc_insertion_point(field_get:server.Envelope.friends)
  return _internal_friends();
}
inline ::server::TFriends* Envelope::unsafe_arena_release_friends() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.friends)
  if (_internal_has_friends()) {
    clear_has_payload();
    ::server::TFriends* temp = payload_.friends_;
    payload_.friends_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_friends(::server::TFriends* friends) {
  clear_payload();
  if (friends) {
    set_has_friends();
    payload_.friends_ = friends;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.friends)
}
inline ::server::TFriends* Envelope::_internal_mutable_friends() {
  if (!_internal_has_friends()) {
    clear_payload();
    set_has_friends();
    payload_.friends_ = CreateMaybeMessage< ::server::TFriends >(GetArena());
  }
  return payload_.friends_;
}
inline ::server::TFriends* Envelope::mutable_friends() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.friends)
  return _internal_mutable_friends();
}

// .server.TGroupsCreate groups_create = 17;
inline bool Envelope::_internal_has_groups_create() const {
  return payload_case() == kGroupsCreate;
}
inline bool Envelope::has_groups_create() const {
  return _internal_has_groups_create();
}
inline void Envelope::set_has_groups_create() {
  _oneof_case_[0] = kGroupsCreate;
}
inline void Envelope::clear_groups_create() {
  if (_internal_has_groups_create()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_create_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsCreate* Envelope::release_groups_create() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_create)
  if (_internal_has_groups_create()) {
    clear_has_payload();
      ::server::TGroupsCreate* temp = payload_.groups_create_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsCreate& Envelope::_internal_groups_create() const {
  return _internal_has_groups_create()
      ? *payload_.groups_create_
      : reinterpret_cast< ::server::TGroupsCreate&>(::server::_TGroupsCreate_default_instance_);
}
inline const ::server::TGroupsCreate& Envelope::groups_create() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_create)
  return _internal_groups_create();
}
inline ::server::TGroupsCreate* Envelope::unsafe_arena_release_groups_create() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_create)
  if (_internal_has_groups_create()) {
    clear_has_payload();
    ::server::TGroupsCreate* temp = payload_.groups_create_;
    payload_.groups_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_create(::server::TGroupsCreate* groups_create) {
  clear_payload();
  if (groups_create) {
    set_has_groups_create();
    payload_.groups_create_ = groups_create;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_create)
}
inline ::server::TGroupsCreate* Envelope::_internal_mutable_groups_create() {
  if (!_internal_has_groups_create()) {
    clear_payload();
    set_has_groups_create();
    payload_.groups_create_ = CreateMaybeMessage< ::server::TGroupsCreate >(GetArena());
  }
  return payload_.groups_create_;
}
inline ::server::TGroupsCreate* Envelope::mutable_groups_create() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_create)
  return _internal_mutable_groups_create();
}

// .server.TGroupsUpdate groups_update = 18;
inline bool Envelope::_internal_has_groups_update() const {
  return payload_case() == kGroupsUpdate;
}
inline bool Envelope::has_groups_update() const {
  return _internal_has_groups_update();
}
inline void Envelope::set_has_groups_update() {
  _oneof_case_[0] = kGroupsUpdate;
}
inline void Envelope::clear_groups_update() {
  if (_internal_has_groups_update()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_update_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsUpdate* Envelope::release_groups_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_update)
  if (_internal_has_groups_update()) {
    clear_has_payload();
      ::server::TGroupsUpdate* temp = payload_.groups_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsUpdate& Envelope::_internal_groups_update() const {
  return _internal_has_groups_update()
      ? *payload_.groups_update_
      : reinterpret_cast< ::server::TGroupsUpdate&>(::server::_TGroupsUpdate_default_instance_);
}
inline const ::server::TGroupsUpdate& Envelope::groups_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_update)
  return _internal_groups_update();
}
inline ::server::TGroupsUpdate* Envelope::unsafe_arena_release_groups_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_update)
  if (_internal_has_groups_update()) {
    clear_has_payload();
    ::server::TGroupsUpdate* temp = payload_.groups_update_;
    payload_.groups_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_update(::server::TGroupsUpdate* groups_update) {
  clear_payload();
  if (groups_update) {
    set_has_groups_update();
    payload_.groups_update_ = groups_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_update)
}
inline ::server::TGroupsUpdate* Envelope::_internal_mutable_groups_update() {
  if (!_internal_has_groups_update()) {
    clear_payload();
    set_has_groups_update();
    payload_.groups_update_ = CreateMaybeMessage< ::server::TGroupsUpdate >(GetArena());
  }
  return payload_.groups_update_;
}
inline ::server::TGroupsUpdate* Envelope::mutable_groups_update() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_update)
  return _internal_mutable_groups_update();
}

// .server.TGroupsRemove groups_remove = 19;
inline bool Envelope::_internal_has_groups_remove() const {
  return payload_case() == kGroupsRemove;
}
inline bool Envelope::has_groups_remove() const {
  return _internal_has_groups_remove();
}
inline void Envelope::set_has_groups_remove() {
  _oneof_case_[0] = kGroupsRemove;
}
inline void Envelope::clear_groups_remove() {
  if (_internal_has_groups_remove()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_remove_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsRemove* Envelope::release_groups_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_remove)
  if (_internal_has_groups_remove()) {
    clear_has_payload();
      ::server::TGroupsRemove* temp = payload_.groups_remove_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsRemove& Envelope::_internal_groups_remove() const {
  return _internal_has_groups_remove()
      ? *payload_.groups_remove_
      : reinterpret_cast< ::server::TGroupsRemove&>(::server::_TGroupsRemove_default_instance_);
}
inline const ::server::TGroupsRemove& Envelope::groups_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_remove)
  return _internal_groups_remove();
}
inline ::server::TGroupsRemove* Envelope::unsafe_arena_release_groups_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_remove)
  if (_internal_has_groups_remove()) {
    clear_has_payload();
    ::server::TGroupsRemove* temp = payload_.groups_remove_;
    payload_.groups_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_remove(::server::TGroupsRemove* groups_remove) {
  clear_payload();
  if (groups_remove) {
    set_has_groups_remove();
    payload_.groups_remove_ = groups_remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_remove)
}
inline ::server::TGroupsRemove* Envelope::_internal_mutable_groups_remove() {
  if (!_internal_has_groups_remove()) {
    clear_payload();
    set_has_groups_remove();
    payload_.groups_remove_ = CreateMaybeMessage< ::server::TGroupsRemove >(GetArena());
  }
  return payload_.groups_remove_;
}
inline ::server::TGroupsRemove* Envelope::mutable_groups_remove() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_remove)
  return _internal_mutable_groups_remove();
}

// .server.TGroupsFetch groups_fetch = 20;
inline bool Envelope::_internal_has_groups_fetch() const {
  return payload_case() == kGroupsFetch;
}
inline bool Envelope::has_groups_fetch() const {
  return _internal_has_groups_fetch();
}
inline void Envelope::set_has_groups_fetch() {
  _oneof_case_[0] = kGroupsFetch;
}
inline void Envelope::clear_groups_fetch() {
  if (_internal_has_groups_fetch()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_fetch_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsFetch* Envelope::release_groups_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_fetch)
  if (_internal_has_groups_fetch()) {
    clear_has_payload();
      ::server::TGroupsFetch* temp = payload_.groups_fetch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsFetch& Envelope::_internal_groups_fetch() const {
  return _internal_has_groups_fetch()
      ? *payload_.groups_fetch_
      : reinterpret_cast< ::server::TGroupsFetch&>(::server::_TGroupsFetch_default_instance_);
}
inline const ::server::TGroupsFetch& Envelope::groups_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_fetch)
  return _internal_groups_fetch();
}
inline ::server::TGroupsFetch* Envelope::unsafe_arena_release_groups_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_fetch)
  if (_internal_has_groups_fetch()) {
    clear_has_payload();
    ::server::TGroupsFetch* temp = payload_.groups_fetch_;
    payload_.groups_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_fetch(::server::TGroupsFetch* groups_fetch) {
  clear_payload();
  if (groups_fetch) {
    set_has_groups_fetch();
    payload_.groups_fetch_ = groups_fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_fetch)
}
inline ::server::TGroupsFetch* Envelope::_internal_mutable_groups_fetch() {
  if (!_internal_has_groups_fetch()) {
    clear_payload();
    set_has_groups_fetch();
    payload_.groups_fetch_ = CreateMaybeMessage< ::server::TGroupsFetch >(GetArena());
  }
  return payload_.groups_fetch_;
}
inline ::server::TGroupsFetch* Envelope::mutable_groups_fetch() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_fetch)
  return _internal_mutable_groups_fetch();
}

// .server.TGroupsList groups_list = 21;
inline bool Envelope::_internal_has_groups_list() const {
  return payload_case() == kGroupsList;
}
inline bool Envelope::has_groups_list() const {
  return _internal_has_groups_list();
}
inline void Envelope::set_has_groups_list() {
  _oneof_case_[0] = kGroupsList;
}
inline void Envelope::clear_groups_list() {
  if (_internal_has_groups_list()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsList* Envelope::release_groups_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_list)
  if (_internal_has_groups_list()) {
    clear_has_payload();
      ::server::TGroupsList* temp = payload_.groups_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsList& Envelope::_internal_groups_list() const {
  return _internal_has_groups_list()
      ? *payload_.groups_list_
      : reinterpret_cast< ::server::TGroupsList&>(::server::_TGroupsList_default_instance_);
}
inline const ::server::TGroupsList& Envelope::groups_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_list)
  return _internal_groups_list();
}
inline ::server::TGroupsList* Envelope::unsafe_arena_release_groups_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_list)
  if (_internal_has_groups_list()) {
    clear_has_payload();
    ::server::TGroupsList* temp = payload_.groups_list_;
    payload_.groups_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_list(::server::TGroupsList* groups_list) {
  clear_payload();
  if (groups_list) {
    set_has_groups_list();
    payload_.groups_list_ = groups_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_list)
}
inline ::server::TGroupsList* Envelope::_internal_mutable_groups_list() {
  if (!_internal_has_groups_list()) {
    clear_payload();
    set_has_groups_list();
    payload_.groups_list_ = CreateMaybeMessage< ::server::TGroupsList >(GetArena());
  }
  return payload_.groups_list_;
}
inline ::server::TGroupsList* Envelope::mutable_groups_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_list)
  return _internal_mutable_groups_list();
}

// .server.TGroupsSelfList groups_self_list = 22;
inline bool Envelope::_internal_has_groups_self_list() const {
  return payload_case() == kGroupsSelfList;
}
inline bool Envelope::has_groups_self_list() const {
  return _internal_has_groups_self_list();
}
inline void Envelope::set_has_groups_self_list() {
  _oneof_case_[0] = kGroupsSelfList;
}
inline void Envelope::clear_groups_self_list() {
  if (_internal_has_groups_self_list()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_self_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsSelfList* Envelope::release_groups_self_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_self_list)
  if (_internal_has_groups_self_list()) {
    clear_has_payload();
      ::server::TGroupsSelfList* temp = payload_.groups_self_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_self_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsSelfList& Envelope::_internal_groups_self_list() const {
  return _internal_has_groups_self_list()
      ? *payload_.groups_self_list_
      : reinterpret_cast< ::server::TGroupsSelfList&>(::server::_TGroupsSelfList_default_instance_);
}
inline const ::server::TGroupsSelfList& Envelope::groups_self_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_self_list)
  return _internal_groups_self_list();
}
inline ::server::TGroupsSelfList* Envelope::unsafe_arena_release_groups_self_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_self_list)
  if (_internal_has_groups_self_list()) {
    clear_has_payload();
    ::server::TGroupsSelfList* temp = payload_.groups_self_list_;
    payload_.groups_self_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_self_list(::server::TGroupsSelfList* groups_self_list) {
  clear_payload();
  if (groups_self_list) {
    set_has_groups_self_list();
    payload_.groups_self_list_ = groups_self_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_self_list)
}
inline ::server::TGroupsSelfList* Envelope::_internal_mutable_groups_self_list() {
  if (!_internal_has_groups_self_list()) {
    clear_payload();
    set_has_groups_self_list();
    payload_.groups_self_list_ = CreateMaybeMessage< ::server::TGroupsSelfList >(GetArena());
  }
  return payload_.groups_self_list_;
}
inline ::server::TGroupsSelfList* Envelope::mutable_groups_self_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_self_list)
  return _internal_mutable_groups_self_list();
}

// .server.TGroupUsersList group_users_list = 23;
inline bool Envelope::_internal_has_group_users_list() const {
  return payload_case() == kGroupUsersList;
}
inline bool Envelope::has_group_users_list() const {
  return _internal_has_group_users_list();
}
inline void Envelope::set_has_group_users_list() {
  _oneof_case_[0] = kGroupUsersList;
}
inline void Envelope::clear_group_users_list() {
  if (_internal_has_group_users_list()) {
    if (GetArena() == nullptr) {
      delete payload_.group_users_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupUsersList* Envelope::release_group_users_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_list)
  if (_internal_has_group_users_list()) {
    clear_has_payload();
      ::server::TGroupUsersList* temp = payload_.group_users_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.group_users_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupUsersList& Envelope::_internal_group_users_list() const {
  return _internal_has_group_users_list()
      ? *payload_.group_users_list_
      : reinterpret_cast< ::server::TGroupUsersList&>(::server::_TGroupUsersList_default_instance_);
}
inline const ::server::TGroupUsersList& Envelope::group_users_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_list)
  return _internal_group_users_list();
}
inline ::server::TGroupUsersList* Envelope::unsafe_arena_release_group_users_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.group_users_list)
  if (_internal_has_group_users_list()) {
    clear_has_payload();
    ::server::TGroupUsersList* temp = payload_.group_users_list_;
    payload_.group_users_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_group_users_list(::server::TGroupUsersList* group_users_list) {
  clear_payload();
  if (group_users_list) {
    set_has_group_users_list();
    payload_.group_users_list_ = group_users_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.group_users_list)
}
inline ::server::TGroupUsersList* Envelope::_internal_mutable_group_users_list() {
  if (!_internal_has_group_users_list()) {
    clear_payload();
    set_has_group_users_list();
    payload_.group_users_list_ = CreateMaybeMessage< ::server::TGroupUsersList >(GetArena());
  }
  return payload_.group_users_list_;
}
inline ::server::TGroupUsersList* Envelope::mutable_group_users_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_list)
  return _internal_mutable_group_users_list();
}

// .server.TGroupsJoin groups_join = 24;
inline bool Envelope::_internal_has_groups_join() const {
  return payload_case() == kGroupsJoin;
}
inline bool Envelope::has_groups_join() const {
  return _internal_has_groups_join();
}
inline void Envelope::set_has_groups_join() {
  _oneof_case_[0] = kGroupsJoin;
}
inline void Envelope::clear_groups_join() {
  if (_internal_has_groups_join()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_join_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsJoin* Envelope::release_groups_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_join)
  if (_internal_has_groups_join()) {
    clear_has_payload();
      ::server::TGroupsJoin* temp = payload_.groups_join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsJoin& Envelope::_internal_groups_join() const {
  return _internal_has_groups_join()
      ? *payload_.groups_join_
      : reinterpret_cast< ::server::TGroupsJoin&>(::server::_TGroupsJoin_default_instance_);
}
inline const ::server::TGroupsJoin& Envelope::groups_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_join)
  return _internal_groups_join();
}
inline ::server::TGroupsJoin* Envelope::unsafe_arena_release_groups_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_join)
  if (_internal_has_groups_join()) {
    clear_has_payload();
    ::server::TGroupsJoin* temp = payload_.groups_join_;
    payload_.groups_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_join(::server::TGroupsJoin* groups_join) {
  clear_payload();
  if (groups_join) {
    set_has_groups_join();
    payload_.groups_join_ = groups_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_join)
}
inline ::server::TGroupsJoin* Envelope::_internal_mutable_groups_join() {
  if (!_internal_has_groups_join()) {
    clear_payload();
    set_has_groups_join();
    payload_.groups_join_ = CreateMaybeMessage< ::server::TGroupsJoin >(GetArena());
  }
  return payload_.groups_join_;
}
inline ::server::TGroupsJoin* Envelope::mutable_groups_join() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_join)
  return _internal_mutable_groups_join();
}

// .server.TGroupsLeave groups_leave = 25;
inline bool Envelope::_internal_has_groups_leave() const {
  return payload_case() == kGroupsLeave;
}
inline bool Envelope::has_groups_leave() const {
  return _internal_has_groups_leave();
}
inline void Envelope::set_has_groups_leave() {
  _oneof_case_[0] = kGroupsLeave;
}
inline void Envelope::clear_groups_leave() {
  if (_internal_has_groups_leave()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_leave_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsLeave* Envelope::release_groups_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_leave)
  if (_internal_has_groups_leave()) {
    clear_has_payload();
      ::server::TGroupsLeave* temp = payload_.groups_leave_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsLeave& Envelope::_internal_groups_leave() const {
  return _internal_has_groups_leave()
      ? *payload_.groups_leave_
      : reinterpret_cast< ::server::TGroupsLeave&>(::server::_TGroupsLeave_default_instance_);
}
inline const ::server::TGroupsLeave& Envelope::groups_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_leave)
  return _internal_groups_leave();
}
inline ::server::TGroupsLeave* Envelope::unsafe_arena_release_groups_leave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_leave)
  if (_internal_has_groups_leave()) {
    clear_has_payload();
    ::server::TGroupsLeave* temp = payload_.groups_leave_;
    payload_.groups_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_leave(::server::TGroupsLeave* groups_leave) {
  clear_payload();
  if (groups_leave) {
    set_has_groups_leave();
    payload_.groups_leave_ = groups_leave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_leave)
}
inline ::server::TGroupsLeave* Envelope::_internal_mutable_groups_leave() {
  if (!_internal_has_groups_leave()) {
    clear_payload();
    set_has_groups_leave();
    payload_.groups_leave_ = CreateMaybeMessage< ::server::TGroupsLeave >(GetArena());
  }
  return payload_.groups_leave_;
}
inline ::server::TGroupsLeave* Envelope::mutable_groups_leave() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_leave)
  return _internal_mutable_groups_leave();
}

// .server.TGroupUsersAdd group_users_add = 26;
inline bool Envelope::_internal_has_group_users_add() const {
  return payload_case() == kGroupUsersAdd;
}
inline bool Envelope::has_group_users_add() const {
  return _internal_has_group_users_add();
}
inline void Envelope::set_has_group_users_add() {
  _oneof_case_[0] = kGroupUsersAdd;
}
inline void Envelope::clear_group_users_add() {
  if (_internal_has_group_users_add()) {
    if (GetArena() == nullptr) {
      delete payload_.group_users_add_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupUsersAdd* Envelope::release_group_users_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_add)
  if (_internal_has_group_users_add()) {
    clear_has_payload();
      ::server::TGroupUsersAdd* temp = payload_.group_users_add_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.group_users_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupUsersAdd& Envelope::_internal_group_users_add() const {
  return _internal_has_group_users_add()
      ? *payload_.group_users_add_
      : reinterpret_cast< ::server::TGroupUsersAdd&>(::server::_TGroupUsersAdd_default_instance_);
}
inline const ::server::TGroupUsersAdd& Envelope::group_users_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_add)
  return _internal_group_users_add();
}
inline ::server::TGroupUsersAdd* Envelope::unsafe_arena_release_group_users_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.group_users_add)
  if (_internal_has_group_users_add()) {
    clear_has_payload();
    ::server::TGroupUsersAdd* temp = payload_.group_users_add_;
    payload_.group_users_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_group_users_add(::server::TGroupUsersAdd* group_users_add) {
  clear_payload();
  if (group_users_add) {
    set_has_group_users_add();
    payload_.group_users_add_ = group_users_add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.group_users_add)
}
inline ::server::TGroupUsersAdd* Envelope::_internal_mutable_group_users_add() {
  if (!_internal_has_group_users_add()) {
    clear_payload();
    set_has_group_users_add();
    payload_.group_users_add_ = CreateMaybeMessage< ::server::TGroupUsersAdd >(GetArena());
  }
  return payload_.group_users_add_;
}
inline ::server::TGroupUsersAdd* Envelope::mutable_group_users_add() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_add)
  return _internal_mutable_group_users_add();
}

// .server.TGroupUsersKick group_users_kick = 27;
inline bool Envelope::_internal_has_group_users_kick() const {
  return payload_case() == kGroupUsersKick;
}
inline bool Envelope::has_group_users_kick() const {
  return _internal_has_group_users_kick();
}
inline void Envelope::set_has_group_users_kick() {
  _oneof_case_[0] = kGroupUsersKick;
}
inline void Envelope::clear_group_users_kick() {
  if (_internal_has_group_users_kick()) {
    if (GetArena() == nullptr) {
      delete payload_.group_users_kick_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupUsersKick* Envelope::release_group_users_kick() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_kick)
  if (_internal_has_group_users_kick()) {
    clear_has_payload();
      ::server::TGroupUsersKick* temp = payload_.group_users_kick_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.group_users_kick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupUsersKick& Envelope::_internal_group_users_kick() const {
  return _internal_has_group_users_kick()
      ? *payload_.group_users_kick_
      : reinterpret_cast< ::server::TGroupUsersKick&>(::server::_TGroupUsersKick_default_instance_);
}
inline const ::server::TGroupUsersKick& Envelope::group_users_kick() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_kick)
  return _internal_group_users_kick();
}
inline ::server::TGroupUsersKick* Envelope::unsafe_arena_release_group_users_kick() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.group_users_kick)
  if (_internal_has_group_users_kick()) {
    clear_has_payload();
    ::server::TGroupUsersKick* temp = payload_.group_users_kick_;
    payload_.group_users_kick_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_group_users_kick(::server::TGroupUsersKick* group_users_kick) {
  clear_payload();
  if (group_users_kick) {
    set_has_group_users_kick();
    payload_.group_users_kick_ = group_users_kick;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.group_users_kick)
}
inline ::server::TGroupUsersKick* Envelope::_internal_mutable_group_users_kick() {
  if (!_internal_has_group_users_kick()) {
    clear_payload();
    set_has_group_users_kick();
    payload_.group_users_kick_ = CreateMaybeMessage< ::server::TGroupUsersKick >(GetArena());
  }
  return payload_.group_users_kick_;
}
inline ::server::TGroupUsersKick* Envelope::mutable_group_users_kick() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_kick)
  return _internal_mutable_group_users_kick();
}

// .server.TGroupUsersPromote group_users_promote = 28;
inline bool Envelope::_internal_has_group_users_promote() const {
  return payload_case() == kGroupUsersPromote;
}
inline bool Envelope::has_group_users_promote() const {
  return _internal_has_group_users_promote();
}
inline void Envelope::set_has_group_users_promote() {
  _oneof_case_[0] = kGroupUsersPromote;
}
inline void Envelope::clear_group_users_promote() {
  if (_internal_has_group_users_promote()) {
    if (GetArena() == nullptr) {
      delete payload_.group_users_promote_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupUsersPromote* Envelope::release_group_users_promote() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users_promote)
  if (_internal_has_group_users_promote()) {
    clear_has_payload();
      ::server::TGroupUsersPromote* temp = payload_.group_users_promote_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.group_users_promote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupUsersPromote& Envelope::_internal_group_users_promote() const {
  return _internal_has_group_users_promote()
      ? *payload_.group_users_promote_
      : reinterpret_cast< ::server::TGroupUsersPromote&>(::server::_TGroupUsersPromote_default_instance_);
}
inline const ::server::TGroupUsersPromote& Envelope::group_users_promote() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users_promote)
  return _internal_group_users_promote();
}
inline ::server::TGroupUsersPromote* Envelope::unsafe_arena_release_group_users_promote() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.group_users_promote)
  if (_internal_has_group_users_promote()) {
    clear_has_payload();
    ::server::TGroupUsersPromote* temp = payload_.group_users_promote_;
    payload_.group_users_promote_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_group_users_promote(::server::TGroupUsersPromote* group_users_promote) {
  clear_payload();
  if (group_users_promote) {
    set_has_group_users_promote();
    payload_.group_users_promote_ = group_users_promote;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.group_users_promote)
}
inline ::server::TGroupUsersPromote* Envelope::_internal_mutable_group_users_promote() {
  if (!_internal_has_group_users_promote()) {
    clear_payload();
    set_has_group_users_promote();
    payload_.group_users_promote_ = CreateMaybeMessage< ::server::TGroupUsersPromote >(GetArena());
  }
  return payload_.group_users_promote_;
}
inline ::server::TGroupUsersPromote* Envelope::mutable_group_users_promote() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users_promote)
  return _internal_mutable_group_users_promote();
}

// .server.TGroups groups = 29;
inline bool Envelope::_internal_has_groups() const {
  return payload_case() == kGroups;
}
inline bool Envelope::has_groups() const {
  return _internal_has_groups();
}
inline void Envelope::set_has_groups() {
  _oneof_case_[0] = kGroups;
}
inline void Envelope::clear_groups() {
  if (_internal_has_groups()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroups* Envelope::release_groups() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups)
  if (_internal_has_groups()) {
    clear_has_payload();
      ::server::TGroups* temp = payload_.groups_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroups& Envelope::_internal_groups() const {
  return _internal_has_groups()
      ? *payload_.groups_
      : reinterpret_cast< ::server::TGroups&>(::server::_TGroups_default_instance_);
}
inline const ::server::TGroups& Envelope::groups() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups)
  return _internal_groups();
}
inline ::server::TGroups* Envelope::unsafe_arena_release_groups() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups)
  if (_internal_has_groups()) {
    clear_has_payload();
    ::server::TGroups* temp = payload_.groups_;
    payload_.groups_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups(::server::TGroups* groups) {
  clear_payload();
  if (groups) {
    set_has_groups();
    payload_.groups_ = groups;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups)
}
inline ::server::TGroups* Envelope::_internal_mutable_groups() {
  if (!_internal_has_groups()) {
    clear_payload();
    set_has_groups();
    payload_.groups_ = CreateMaybeMessage< ::server::TGroups >(GetArena());
  }
  return payload_.groups_;
}
inline ::server::TGroups* Envelope::mutable_groups() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups)
  return _internal_mutable_groups();
}

// .server.TGroupsSelf groups_self = 30;
inline bool Envelope::_internal_has_groups_self() const {
  return payload_case() == kGroupsSelf;
}
inline bool Envelope::has_groups_self() const {
  return _internal_has_groups_self();
}
inline void Envelope::set_has_groups_self() {
  _oneof_case_[0] = kGroupsSelf;
}
inline void Envelope::clear_groups_self() {
  if (_internal_has_groups_self()) {
    if (GetArena() == nullptr) {
      delete payload_.groups_self_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupsSelf* Envelope::release_groups_self() {
  // @@protoc_insertion_point(field_release:server.Envelope.groups_self)
  if (_internal_has_groups_self()) {
    clear_has_payload();
      ::server::TGroupsSelf* temp = payload_.groups_self_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.groups_self_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupsSelf& Envelope::_internal_groups_self() const {
  return _internal_has_groups_self()
      ? *payload_.groups_self_
      : reinterpret_cast< ::server::TGroupsSelf&>(::server::_TGroupsSelf_default_instance_);
}
inline const ::server::TGroupsSelf& Envelope::groups_self() const {
  // @@protoc_insertion_point(field_get:server.Envelope.groups_self)
  return _internal_groups_self();
}
inline ::server::TGroupsSelf* Envelope::unsafe_arena_release_groups_self() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.groups_self)
  if (_internal_has_groups_self()) {
    clear_has_payload();
    ::server::TGroupsSelf* temp = payload_.groups_self_;
    payload_.groups_self_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_groups_self(::server::TGroupsSelf* groups_self) {
  clear_payload();
  if (groups_self) {
    set_has_groups_self();
    payload_.groups_self_ = groups_self;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.groups_self)
}
inline ::server::TGroupsSelf* Envelope::_internal_mutable_groups_self() {
  if (!_internal_has_groups_self()) {
    clear_payload();
    set_has_groups_self();
    payload_.groups_self_ = CreateMaybeMessage< ::server::TGroupsSelf >(GetArena());
  }
  return payload_.groups_self_;
}
inline ::server::TGroupsSelf* Envelope::mutable_groups_self() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.groups_self)
  return _internal_mutable_groups_self();
}

// .server.TGroupUsers group_users = 31;
inline bool Envelope::_internal_has_group_users() const {
  return payload_case() == kGroupUsers;
}
inline bool Envelope::has_group_users() const {
  return _internal_has_group_users();
}
inline void Envelope::set_has_group_users() {
  _oneof_case_[0] = kGroupUsers;
}
inline void Envelope::clear_group_users() {
  if (_internal_has_group_users()) {
    if (GetArena() == nullptr) {
      delete payload_.group_users_;
    }
    clear_has_payload();
  }
}
inline ::server::TGroupUsers* Envelope::release_group_users() {
  // @@protoc_insertion_point(field_release:server.Envelope.group_users)
  if (_internal_has_group_users()) {
    clear_has_payload();
      ::server::TGroupUsers* temp = payload_.group_users_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.group_users_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TGroupUsers& Envelope::_internal_group_users() const {
  return _internal_has_group_users()
      ? *payload_.group_users_
      : reinterpret_cast< ::server::TGroupUsers&>(::server::_TGroupUsers_default_instance_);
}
inline const ::server::TGroupUsers& Envelope::group_users() const {
  // @@protoc_insertion_point(field_get:server.Envelope.group_users)
  return _internal_group_users();
}
inline ::server::TGroupUsers* Envelope::unsafe_arena_release_group_users() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.group_users)
  if (_internal_has_group_users()) {
    clear_has_payload();
    ::server::TGroupUsers* temp = payload_.group_users_;
    payload_.group_users_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_group_users(::server::TGroupUsers* group_users) {
  clear_payload();
  if (group_users) {
    set_has_group_users();
    payload_.group_users_ = group_users;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.group_users)
}
inline ::server::TGroupUsers* Envelope::_internal_mutable_group_users() {
  if (!_internal_has_group_users()) {
    clear_payload();
    set_has_group_users();
    payload_.group_users_ = CreateMaybeMessage< ::server::TGroupUsers >(GetArena());
  }
  return payload_.group_users_;
}
inline ::server::TGroupUsers* Envelope::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.group_users)
  return _internal_mutable_group_users();
}

// .server.TTopicsJoin topics_join = 32;
inline bool Envelope::_internal_has_topics_join() const {
  return payload_case() == kTopicsJoin;
}
inline bool Envelope::has_topics_join() const {
  return _internal_has_topics_join();
}
inline void Envelope::set_has_topics_join() {
  _oneof_case_[0] = kTopicsJoin;
}
inline void Envelope::clear_topics_join() {
  if (_internal_has_topics_join()) {
    if (GetArena() == nullptr) {
      delete payload_.topics_join_;
    }
    clear_has_payload();
  }
}
inline ::server::TTopicsJoin* Envelope::release_topics_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics_join)
  if (_internal_has_topics_join()) {
    clear_has_payload();
      ::server::TTopicsJoin* temp = payload_.topics_join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topics_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TTopicsJoin& Envelope::_internal_topics_join() const {
  return _internal_has_topics_join()
      ? *payload_.topics_join_
      : reinterpret_cast< ::server::TTopicsJoin&>(::server::_TTopicsJoin_default_instance_);
}
inline const ::server::TTopicsJoin& Envelope::topics_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics_join)
  return _internal_topics_join();
}
inline ::server::TTopicsJoin* Envelope::unsafe_arena_release_topics_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topics_join)
  if (_internal_has_topics_join()) {
    clear_has_payload();
    ::server::TTopicsJoin* temp = payload_.topics_join_;
    payload_.topics_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topics_join(::server::TTopicsJoin* topics_join) {
  clear_payload();
  if (topics_join) {
    set_has_topics_join();
    payload_.topics_join_ = topics_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topics_join)
}
inline ::server::TTopicsJoin* Envelope::_internal_mutable_topics_join() {
  if (!_internal_has_topics_join()) {
    clear_payload();
    set_has_topics_join();
    payload_.topics_join_ = CreateMaybeMessage< ::server::TTopicsJoin >(GetArena());
  }
  return payload_.topics_join_;
}
inline ::server::TTopicsJoin* Envelope::mutable_topics_join() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics_join)
  return _internal_mutable_topics_join();
}

// .server.TTopicsLeave topics_leave = 33;
inline bool Envelope::_internal_has_topics_leave() const {
  return payload_case() == kTopicsLeave;
}
inline bool Envelope::has_topics_leave() const {
  return _internal_has_topics_leave();
}
inline void Envelope::set_has_topics_leave() {
  _oneof_case_[0] = kTopicsLeave;
}
inline void Envelope::clear_topics_leave() {
  if (_internal_has_topics_leave()) {
    if (GetArena() == nullptr) {
      delete payload_.topics_leave_;
    }
    clear_has_payload();
  }
}
inline ::server::TTopicsLeave* Envelope::release_topics_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics_leave)
  if (_internal_has_topics_leave()) {
    clear_has_payload();
      ::server::TTopicsLeave* temp = payload_.topics_leave_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topics_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TTopicsLeave& Envelope::_internal_topics_leave() const {
  return _internal_has_topics_leave()
      ? *payload_.topics_leave_
      : reinterpret_cast< ::server::TTopicsLeave&>(::server::_TTopicsLeave_default_instance_);
}
inline const ::server::TTopicsLeave& Envelope::topics_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics_leave)
  return _internal_topics_leave();
}
inline ::server::TTopicsLeave* Envelope::unsafe_arena_release_topics_leave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topics_leave)
  if (_internal_has_topics_leave()) {
    clear_has_payload();
    ::server::TTopicsLeave* temp = payload_.topics_leave_;
    payload_.topics_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topics_leave(::server::TTopicsLeave* topics_leave) {
  clear_payload();
  if (topics_leave) {
    set_has_topics_leave();
    payload_.topics_leave_ = topics_leave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topics_leave)
}
inline ::server::TTopicsLeave* Envelope::_internal_mutable_topics_leave() {
  if (!_internal_has_topics_leave()) {
    clear_payload();
    set_has_topics_leave();
    payload_.topics_leave_ = CreateMaybeMessage< ::server::TTopicsLeave >(GetArena());
  }
  return payload_.topics_leave_;
}
inline ::server::TTopicsLeave* Envelope::mutable_topics_leave() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics_leave)
  return _internal_mutable_topics_leave();
}

// .server.TTopicMessageSend topic_message_send = 34;
inline bool Envelope::_internal_has_topic_message_send() const {
  return payload_case() == kTopicMessageSend;
}
inline bool Envelope::has_topic_message_send() const {
  return _internal_has_topic_message_send();
}
inline void Envelope::set_has_topic_message_send() {
  _oneof_case_[0] = kTopicMessageSend;
}
inline void Envelope::clear_topic_message_send() {
  if (_internal_has_topic_message_send()) {
    if (GetArena() == nullptr) {
      delete payload_.topic_message_send_;
    }
    clear_has_payload();
  }
}
inline ::server::TTopicMessageSend* Envelope::release_topic_message_send() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message_send)
  if (_internal_has_topic_message_send()) {
    clear_has_payload();
      ::server::TTopicMessageSend* temp = payload_.topic_message_send_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topic_message_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TTopicMessageSend& Envelope::_internal_topic_message_send() const {
  return _internal_has_topic_message_send()
      ? *payload_.topic_message_send_
      : reinterpret_cast< ::server::TTopicMessageSend&>(::server::_TTopicMessageSend_default_instance_);
}
inline const ::server::TTopicMessageSend& Envelope::topic_message_send() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message_send)
  return _internal_topic_message_send();
}
inline ::server::TTopicMessageSend* Envelope::unsafe_arena_release_topic_message_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topic_message_send)
  if (_internal_has_topic_message_send()) {
    clear_has_payload();
    ::server::TTopicMessageSend* temp = payload_.topic_message_send_;
    payload_.topic_message_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topic_message_send(::server::TTopicMessageSend* topic_message_send) {
  clear_payload();
  if (topic_message_send) {
    set_has_topic_message_send();
    payload_.topic_message_send_ = topic_message_send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topic_message_send)
}
inline ::server::TTopicMessageSend* Envelope::_internal_mutable_topic_message_send() {
  if (!_internal_has_topic_message_send()) {
    clear_payload();
    set_has_topic_message_send();
    payload_.topic_message_send_ = CreateMaybeMessage< ::server::TTopicMessageSend >(GetArena());
  }
  return payload_.topic_message_send_;
}
inline ::server::TTopicMessageSend* Envelope::mutable_topic_message_send() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message_send)
  return _internal_mutable_topic_message_send();
}

// .server.TTopicMessagesList topic_messages_list = 35;
inline bool Envelope::_internal_has_topic_messages_list() const {
  return payload_case() == kTopicMessagesList;
}
inline bool Envelope::has_topic_messages_list() const {
  return _internal_has_topic_messages_list();
}
inline void Envelope::set_has_topic_messages_list() {
  _oneof_case_[0] = kTopicMessagesList;
}
inline void Envelope::clear_topic_messages_list() {
  if (_internal_has_topic_messages_list()) {
    if (GetArena() == nullptr) {
      delete payload_.topic_messages_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TTopicMessagesList* Envelope::release_topic_messages_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_messages_list)
  if (_internal_has_topic_messages_list()) {
    clear_has_payload();
      ::server::TTopicMessagesList* temp = payload_.topic_messages_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topic_messages_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TTopicMessagesList& Envelope::_internal_topic_messages_list() const {
  return _internal_has_topic_messages_list()
      ? *payload_.topic_messages_list_
      : reinterpret_cast< ::server::TTopicMessagesList&>(::server::_TTopicMessagesList_default_instance_);
}
inline const ::server::TTopicMessagesList& Envelope::topic_messages_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_messages_list)
  return _internal_topic_messages_list();
}
inline ::server::TTopicMessagesList* Envelope::unsafe_arena_release_topic_messages_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topic_messages_list)
  if (_internal_has_topic_messages_list()) {
    clear_has_payload();
    ::server::TTopicMessagesList* temp = payload_.topic_messages_list_;
    payload_.topic_messages_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topic_messages_list(::server::TTopicMessagesList* topic_messages_list) {
  clear_payload();
  if (topic_messages_list) {
    set_has_topic_messages_list();
    payload_.topic_messages_list_ = topic_messages_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topic_messages_list)
}
inline ::server::TTopicMessagesList* Envelope::_internal_mutable_topic_messages_list() {
  if (!_internal_has_topic_messages_list()) {
    clear_payload();
    set_has_topic_messages_list();
    payload_.topic_messages_list_ = CreateMaybeMessage< ::server::TTopicMessagesList >(GetArena());
  }
  return payload_.topic_messages_list_;
}
inline ::server::TTopicMessagesList* Envelope::mutable_topic_messages_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_messages_list)
  return _internal_mutable_topic_messages_list();
}

// .server.TTopics topics = 36;
inline bool Envelope::_internal_has_topics() const {
  return payload_case() == kTopics;
}
inline bool Envelope::has_topics() const {
  return _internal_has_topics();
}
inline void Envelope::set_has_topics() {
  _oneof_case_[0] = kTopics;
}
inline void Envelope::clear_topics() {
  if (_internal_has_topics()) {
    if (GetArena() == nullptr) {
      delete payload_.topics_;
    }
    clear_has_payload();
  }
}
inline ::server::TTopics* Envelope::release_topics() {
  // @@protoc_insertion_point(field_release:server.Envelope.topics)
  if (_internal_has_topics()) {
    clear_has_payload();
      ::server::TTopics* temp = payload_.topics_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TTopics& Envelope::_internal_topics() const {
  return _internal_has_topics()
      ? *payload_.topics_
      : reinterpret_cast< ::server::TTopics&>(::server::_TTopics_default_instance_);
}
inline const ::server::TTopics& Envelope::topics() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topics)
  return _internal_topics();
}
inline ::server::TTopics* Envelope::unsafe_arena_release_topics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topics)
  if (_internal_has_topics()) {
    clear_has_payload();
    ::server::TTopics* temp = payload_.topics_;
    payload_.topics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topics(::server::TTopics* topics) {
  clear_payload();
  if (topics) {
    set_has_topics();
    payload_.topics_ = topics;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topics)
}
inline ::server::TTopics* Envelope::_internal_mutable_topics() {
  if (!_internal_has_topics()) {
    clear_payload();
    set_has_topics();
    payload_.topics_ = CreateMaybeMessage< ::server::TTopics >(GetArena());
  }
  return payload_.topics_;
}
inline ::server::TTopics* Envelope::mutable_topics() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topics)
  return _internal_mutable_topics();
}

// .server.TTopicMessageAck topic_message_ack = 37;
inline bool Envelope::_internal_has_topic_message_ack() const {
  return payload_case() == kTopicMessageAck;
}
inline bool Envelope::has_topic_message_ack() const {
  return _internal_has_topic_message_ack();
}
inline void Envelope::set_has_topic_message_ack() {
  _oneof_case_[0] = kTopicMessageAck;
}
inline void Envelope::clear_topic_message_ack() {
  if (_internal_has_topic_message_ack()) {
    if (GetArena() == nullptr) {
      delete payload_.topic_message_ack_;
    }
    clear_has_payload();
  }
}
inline ::server::TTopicMessageAck* Envelope::release_topic_message_ack() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message_ack)
  if (_internal_has_topic_message_ack()) {
    clear_has_payload();
      ::server::TTopicMessageAck* temp = payload_.topic_message_ack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topic_message_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TTopicMessageAck& Envelope::_internal_topic_message_ack() const {
  return _internal_has_topic_message_ack()
      ? *payload_.topic_message_ack_
      : reinterpret_cast< ::server::TTopicMessageAck&>(::server::_TTopicMessageAck_default_instance_);
}
inline const ::server::TTopicMessageAck& Envelope::topic_message_ack() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message_ack)
  return _internal_topic_message_ack();
}
inline ::server::TTopicMessageAck* Envelope::unsafe_arena_release_topic_message_ack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topic_message_ack)
  if (_internal_has_topic_message_ack()) {
    clear_has_payload();
    ::server::TTopicMessageAck* temp = payload_.topic_message_ack_;
    payload_.topic_message_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topic_message_ack(::server::TTopicMessageAck* topic_message_ack) {
  clear_payload();
  if (topic_message_ack) {
    set_has_topic_message_ack();
    payload_.topic_message_ack_ = topic_message_ack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topic_message_ack)
}
inline ::server::TTopicMessageAck* Envelope::_internal_mutable_topic_message_ack() {
  if (!_internal_has_topic_message_ack()) {
    clear_payload();
    set_has_topic_message_ack();
    payload_.topic_message_ack_ = CreateMaybeMessage< ::server::TTopicMessageAck >(GetArena());
  }
  return payload_.topic_message_ack_;
}
inline ::server::TTopicMessageAck* Envelope::mutable_topic_message_ack() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message_ack)
  return _internal_mutable_topic_message_ack();
}

// .server.TopicMessage topic_message = 38;
inline bool Envelope::_internal_has_topic_message() const {
  return payload_case() == kTopicMessage;
}
inline bool Envelope::has_topic_message() const {
  return _internal_has_topic_message();
}
inline void Envelope::set_has_topic_message() {
  _oneof_case_[0] = kTopicMessage;
}
inline void Envelope::clear_topic_message() {
  if (_internal_has_topic_message()) {
    if (GetArena() == nullptr) {
      delete payload_.topic_message_;
    }
    clear_has_payload();
  }
}
inline ::server::TopicMessage* Envelope::release_topic_message() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_message)
  if (_internal_has_topic_message()) {
    clear_has_payload();
      ::server::TopicMessage* temp = payload_.topic_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topic_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TopicMessage& Envelope::_internal_topic_message() const {
  return _internal_has_topic_message()
      ? *payload_.topic_message_
      : reinterpret_cast< ::server::TopicMessage&>(::server::_TopicMessage_default_instance_);
}
inline const ::server::TopicMessage& Envelope::topic_message() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_message)
  return _internal_topic_message();
}
inline ::server::TopicMessage* Envelope::unsafe_arena_release_topic_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topic_message)
  if (_internal_has_topic_message()) {
    clear_has_payload();
    ::server::TopicMessage* temp = payload_.topic_message_;
    payload_.topic_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topic_message(::server::TopicMessage* topic_message) {
  clear_payload();
  if (topic_message) {
    set_has_topic_message();
    payload_.topic_message_ = topic_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topic_message)
}
inline ::server::TopicMessage* Envelope::_internal_mutable_topic_message() {
  if (!_internal_has_topic_message()) {
    clear_payload();
    set_has_topic_message();
    payload_.topic_message_ = CreateMaybeMessage< ::server::TopicMessage >(GetArena());
  }
  return payload_.topic_message_;
}
inline ::server::TopicMessage* Envelope::mutable_topic_message() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_message)
  return _internal_mutable_topic_message();
}

// .server.TTopicMessages topic_messages = 39;
inline bool Envelope::_internal_has_topic_messages() const {
  return payload_case() == kTopicMessages;
}
inline bool Envelope::has_topic_messages() const {
  return _internal_has_topic_messages();
}
inline void Envelope::set_has_topic_messages() {
  _oneof_case_[0] = kTopicMessages;
}
inline void Envelope::clear_topic_messages() {
  if (_internal_has_topic_messages()) {
    if (GetArena() == nullptr) {
      delete payload_.topic_messages_;
    }
    clear_has_payload();
  }
}
inline ::server::TTopicMessages* Envelope::release_topic_messages() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_messages)
  if (_internal_has_topic_messages()) {
    clear_has_payload();
      ::server::TTopicMessages* temp = payload_.topic_messages_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topic_messages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TTopicMessages& Envelope::_internal_topic_messages() const {
  return _internal_has_topic_messages()
      ? *payload_.topic_messages_
      : reinterpret_cast< ::server::TTopicMessages&>(::server::_TTopicMessages_default_instance_);
}
inline const ::server::TTopicMessages& Envelope::topic_messages() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_messages)
  return _internal_topic_messages();
}
inline ::server::TTopicMessages* Envelope::unsafe_arena_release_topic_messages() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topic_messages)
  if (_internal_has_topic_messages()) {
    clear_has_payload();
    ::server::TTopicMessages* temp = payload_.topic_messages_;
    payload_.topic_messages_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topic_messages(::server::TTopicMessages* topic_messages) {
  clear_payload();
  if (topic_messages) {
    set_has_topic_messages();
    payload_.topic_messages_ = topic_messages;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topic_messages)
}
inline ::server::TTopicMessages* Envelope::_internal_mutable_topic_messages() {
  if (!_internal_has_topic_messages()) {
    clear_payload();
    set_has_topic_messages();
    payload_.topic_messages_ = CreateMaybeMessage< ::server::TTopicMessages >(GetArena());
  }
  return payload_.topic_messages_;
}
inline ::server::TTopicMessages* Envelope::mutable_topic_messages() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_messages)
  return _internal_mutable_topic_messages();
}

// .server.TopicPresence topic_presence = 40;
inline bool Envelope::_internal_has_topic_presence() const {
  return payload_case() == kTopicPresence;
}
inline bool Envelope::has_topic_presence() const {
  return _internal_has_topic_presence();
}
inline void Envelope::set_has_topic_presence() {
  _oneof_case_[0] = kTopicPresence;
}
inline void Envelope::clear_topic_presence() {
  if (_internal_has_topic_presence()) {
    if (GetArena() == nullptr) {
      delete payload_.topic_presence_;
    }
    clear_has_payload();
  }
}
inline ::server::TopicPresence* Envelope::release_topic_presence() {
  // @@protoc_insertion_point(field_release:server.Envelope.topic_presence)
  if (_internal_has_topic_presence()) {
    clear_has_payload();
      ::server::TopicPresence* temp = payload_.topic_presence_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.topic_presence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TopicPresence& Envelope::_internal_topic_presence() const {
  return _internal_has_topic_presence()
      ? *payload_.topic_presence_
      : reinterpret_cast< ::server::TopicPresence&>(::server::_TopicPresence_default_instance_);
}
inline const ::server::TopicPresence& Envelope::topic_presence() const {
  // @@protoc_insertion_point(field_get:server.Envelope.topic_presence)
  return _internal_topic_presence();
}
inline ::server::TopicPresence* Envelope::unsafe_arena_release_topic_presence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.topic_presence)
  if (_internal_has_topic_presence()) {
    clear_has_payload();
    ::server::TopicPresence* temp = payload_.topic_presence_;
    payload_.topic_presence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_topic_presence(::server::TopicPresence* topic_presence) {
  clear_payload();
  if (topic_presence) {
    set_has_topic_presence();
    payload_.topic_presence_ = topic_presence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.topic_presence)
}
inline ::server::TopicPresence* Envelope::_internal_mutable_topic_presence() {
  if (!_internal_has_topic_presence()) {
    clear_payload();
    set_has_topic_presence();
    payload_.topic_presence_ = CreateMaybeMessage< ::server::TopicPresence >(GetArena());
  }
  return payload_.topic_presence_;
}
inline ::server::TopicPresence* Envelope::mutable_topic_presence() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.topic_presence)
  return _internal_mutable_topic_presence();
}

// .server.TMatchCreate match_create = 41;
inline bool Envelope::_internal_has_match_create() const {
  return payload_case() == kMatchCreate;
}
inline bool Envelope::has_match_create() const {
  return _internal_has_match_create();
}
inline void Envelope::set_has_match_create() {
  _oneof_case_[0] = kMatchCreate;
}
inline void Envelope::clear_match_create() {
  if (_internal_has_match_create()) {
    if (GetArena() == nullptr) {
      delete payload_.match_create_;
    }
    clear_has_payload();
  }
}
inline ::server::TMatchCreate* Envelope::release_match_create() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_create)
  if (_internal_has_match_create()) {
    clear_has_payload();
      ::server::TMatchCreate* temp = payload_.match_create_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.match_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TMatchCreate& Envelope::_internal_match_create() const {
  return _internal_has_match_create()
      ? *payload_.match_create_
      : reinterpret_cast< ::server::TMatchCreate&>(::server::_TMatchCreate_default_instance_);
}
inline const ::server::TMatchCreate& Envelope::match_create() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_create)
  return _internal_match_create();
}
inline ::server::TMatchCreate* Envelope::unsafe_arena_release_match_create() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.match_create)
  if (_internal_has_match_create()) {
    clear_has_payload();
    ::server::TMatchCreate* temp = payload_.match_create_;
    payload_.match_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_match_create(::server::TMatchCreate* match_create) {
  clear_payload();
  if (match_create) {
    set_has_match_create();
    payload_.match_create_ = match_create;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.match_create)
}
inline ::server::TMatchCreate* Envelope::_internal_mutable_match_create() {
  if (!_internal_has_match_create()) {
    clear_payload();
    set_has_match_create();
    payload_.match_create_ = CreateMaybeMessage< ::server::TMatchCreate >(GetArena());
  }
  return payload_.match_create_;
}
inline ::server::TMatchCreate* Envelope::mutable_match_create() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_create)
  return _internal_mutable_match_create();
}

// .server.TMatchesJoin matches_join = 42;
inline bool Envelope::_internal_has_matches_join() const {
  return payload_case() == kMatchesJoin;
}
inline bool Envelope::has_matches_join() const {
  return _internal_has_matches_join();
}
inline void Envelope::set_has_matches_join() {
  _oneof_case_[0] = kMatchesJoin;
}
inline void Envelope::clear_matches_join() {
  if (_internal_has_matches_join()) {
    if (GetArena() == nullptr) {
      delete payload_.matches_join_;
    }
    clear_has_payload();
  }
}
inline ::server::TMatchesJoin* Envelope::release_matches_join() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches_join)
  if (_internal_has_matches_join()) {
    clear_has_payload();
      ::server::TMatchesJoin* temp = payload_.matches_join_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.matches_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TMatchesJoin& Envelope::_internal_matches_join() const {
  return _internal_has_matches_join()
      ? *payload_.matches_join_
      : reinterpret_cast< ::server::TMatchesJoin&>(::server::_TMatchesJoin_default_instance_);
}
inline const ::server::TMatchesJoin& Envelope::matches_join() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches_join)
  return _internal_matches_join();
}
inline ::server::TMatchesJoin* Envelope::unsafe_arena_release_matches_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.matches_join)
  if (_internal_has_matches_join()) {
    clear_has_payload();
    ::server::TMatchesJoin* temp = payload_.matches_join_;
    payload_.matches_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_matches_join(::server::TMatchesJoin* matches_join) {
  clear_payload();
  if (matches_join) {
    set_has_matches_join();
    payload_.matches_join_ = matches_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.matches_join)
}
inline ::server::TMatchesJoin* Envelope::_internal_mutable_matches_join() {
  if (!_internal_has_matches_join()) {
    clear_payload();
    set_has_matches_join();
    payload_.matches_join_ = CreateMaybeMessage< ::server::TMatchesJoin >(GetArena());
  }
  return payload_.matches_join_;
}
inline ::server::TMatchesJoin* Envelope::mutable_matches_join() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches_join)
  return _internal_mutable_matches_join();
}

// .server.TMatchesLeave matches_leave = 43;
inline bool Envelope::_internal_has_matches_leave() const {
  return payload_case() == kMatchesLeave;
}
inline bool Envelope::has_matches_leave() const {
  return _internal_has_matches_leave();
}
inline void Envelope::set_has_matches_leave() {
  _oneof_case_[0] = kMatchesLeave;
}
inline void Envelope::clear_matches_leave() {
  if (_internal_has_matches_leave()) {
    if (GetArena() == nullptr) {
      delete payload_.matches_leave_;
    }
    clear_has_payload();
  }
}
inline ::server::TMatchesLeave* Envelope::release_matches_leave() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches_leave)
  if (_internal_has_matches_leave()) {
    clear_has_payload();
      ::server::TMatchesLeave* temp = payload_.matches_leave_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.matches_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TMatchesLeave& Envelope::_internal_matches_leave() const {
  return _internal_has_matches_leave()
      ? *payload_.matches_leave_
      : reinterpret_cast< ::server::TMatchesLeave&>(::server::_TMatchesLeave_default_instance_);
}
inline const ::server::TMatchesLeave& Envelope::matches_leave() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches_leave)
  return _internal_matches_leave();
}
inline ::server::TMatchesLeave* Envelope::unsafe_arena_release_matches_leave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.matches_leave)
  if (_internal_has_matches_leave()) {
    clear_has_payload();
    ::server::TMatchesLeave* temp = payload_.matches_leave_;
    payload_.matches_leave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_matches_leave(::server::TMatchesLeave* matches_leave) {
  clear_payload();
  if (matches_leave) {
    set_has_matches_leave();
    payload_.matches_leave_ = matches_leave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.matches_leave)
}
inline ::server::TMatchesLeave* Envelope::_internal_mutable_matches_leave() {
  if (!_internal_has_matches_leave()) {
    clear_payload();
    set_has_matches_leave();
    payload_.matches_leave_ = CreateMaybeMessage< ::server::TMatchesLeave >(GetArena());
  }
  return payload_.matches_leave_;
}
inline ::server::TMatchesLeave* Envelope::mutable_matches_leave() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches_leave)
  return _internal_mutable_matches_leave();
}

// .server.MatchDataSend match_data_send = 44;
inline bool Envelope::_internal_has_match_data_send() const {
  return payload_case() == kMatchDataSend;
}
inline bool Envelope::has_match_data_send() const {
  return _internal_has_match_data_send();
}
inline void Envelope::set_has_match_data_send() {
  _oneof_case_[0] = kMatchDataSend;
}
inline void Envelope::clear_match_data_send() {
  if (_internal_has_match_data_send()) {
    if (GetArena() == nullptr) {
      delete payload_.match_data_send_;
    }
    clear_has_payload();
  }
}
inline ::server::MatchDataSend* Envelope::release_match_data_send() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_data_send)
  if (_internal_has_match_data_send()) {
    clear_has_payload();
      ::server::MatchDataSend* temp = payload_.match_data_send_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.match_data_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::MatchDataSend& Envelope::_internal_match_data_send() const {
  return _internal_has_match_data_send()
      ? *payload_.match_data_send_
      : reinterpret_cast< ::server::MatchDataSend&>(::server::_MatchDataSend_default_instance_);
}
inline const ::server::MatchDataSend& Envelope::match_data_send() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_data_send)
  return _internal_match_data_send();
}
inline ::server::MatchDataSend* Envelope::unsafe_arena_release_match_data_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.match_data_send)
  if (_internal_has_match_data_send()) {
    clear_has_payload();
    ::server::MatchDataSend* temp = payload_.match_data_send_;
    payload_.match_data_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_match_data_send(::server::MatchDataSend* match_data_send) {
  clear_payload();
  if (match_data_send) {
    set_has_match_data_send();
    payload_.match_data_send_ = match_data_send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.match_data_send)
}
inline ::server::MatchDataSend* Envelope::_internal_mutable_match_data_send() {
  if (!_internal_has_match_data_send()) {
    clear_payload();
    set_has_match_data_send();
    payload_.match_data_send_ = CreateMaybeMessage< ::server::MatchDataSend >(GetArena());
  }
  return payload_.match_data_send_;
}
inline ::server::MatchDataSend* Envelope::mutable_match_data_send() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_data_send)
  return _internal_mutable_match_data_send();
}

// .server.TMatch match = 45;
inline bool Envelope::_internal_has_match() const {
  return payload_case() == kMatch;
}
inline bool Envelope::has_match() const {
  return _internal_has_match();
}
inline void Envelope::set_has_match() {
  _oneof_case_[0] = kMatch;
}
inline void Envelope::clear_match() {
  if (_internal_has_match()) {
    if (GetArena() == nullptr) {
      delete payload_.match_;
    }
    clear_has_payload();
  }
}
inline ::server::TMatch* Envelope::release_match() {
  // @@protoc_insertion_point(field_release:server.Envelope.match)
  if (_internal_has_match()) {
    clear_has_payload();
      ::server::TMatch* temp = payload_.match_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TMatch& Envelope::_internal_match() const {
  return _internal_has_match()
      ? *payload_.match_
      : reinterpret_cast< ::server::TMatch&>(::server::_TMatch_default_instance_);
}
inline const ::server::TMatch& Envelope::match() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match)
  return _internal_match();
}
inline ::server::TMatch* Envelope::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.match)
  if (_internal_has_match()) {
    clear_has_payload();
    ::server::TMatch* temp = payload_.match_;
    payload_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_match(::server::TMatch* match) {
  clear_payload();
  if (match) {
    set_has_match();
    payload_.match_ = match;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.match)
}
inline ::server::TMatch* Envelope::_internal_mutable_match() {
  if (!_internal_has_match()) {
    clear_payload();
    set_has_match();
    payload_.match_ = CreateMaybeMessage< ::server::TMatch >(GetArena());
  }
  return payload_.match_;
}
inline ::server::TMatch* Envelope::mutable_match() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.match)
  return _internal_mutable_match();
}

// .server.TMatches matches = 46;
inline bool Envelope::_internal_has_matches() const {
  return payload_case() == kMatches;
}
inline bool Envelope::has_matches() const {
  return _internal_has_matches();
}
inline void Envelope::set_has_matches() {
  _oneof_case_[0] = kMatches;
}
inline void Envelope::clear_matches() {
  if (_internal_has_matches()) {
    if (GetArena() == nullptr) {
      delete payload_.matches_;
    }
    clear_has_payload();
  }
}
inline ::server::TMatches* Envelope::release_matches() {
  // @@protoc_insertion_point(field_release:server.Envelope.matches)
  if (_internal_has_matches()) {
    clear_has_payload();
      ::server::TMatches* temp = payload_.matches_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.matches_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TMatches& Envelope::_internal_matches() const {
  return _internal_has_matches()
      ? *payload_.matches_
      : reinterpret_cast< ::server::TMatches&>(::server::_TMatches_default_instance_);
}
inline const ::server::TMatches& Envelope::matches() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matches)
  return _internal_matches();
}
inline ::server::TMatches* Envelope::unsafe_arena_release_matches() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.matches)
  if (_internal_has_matches()) {
    clear_has_payload();
    ::server::TMatches* temp = payload_.matches_;
    payload_.matches_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_matches(::server::TMatches* matches) {
  clear_payload();
  if (matches) {
    set_has_matches();
    payload_.matches_ = matches;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.matches)
}
inline ::server::TMatches* Envelope::_internal_mutable_matches() {
  if (!_internal_has_matches()) {
    clear_payload();
    set_has_matches();
    payload_.matches_ = CreateMaybeMessage< ::server::TMatches >(GetArena());
  }
  return payload_.matches_;
}
inline ::server::TMatches* Envelope::mutable_matches() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.matches)
  return _internal_mutable_matches();
}

// .server.MatchData match_data = 47;
inline bool Envelope::_internal_has_match_data() const {
  return payload_case() == kMatchData;
}
inline bool Envelope::has_match_data() const {
  return _internal_has_match_data();
}
inline void Envelope::set_has_match_data() {
  _oneof_case_[0] = kMatchData;
}
inline void Envelope::clear_match_data() {
  if (_internal_has_match_data()) {
    if (GetArena() == nullptr) {
      delete payload_.match_data_;
    }
    clear_has_payload();
  }
}
inline ::server::MatchData* Envelope::release_match_data() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_data)
  if (_internal_has_match_data()) {
    clear_has_payload();
      ::server::MatchData* temp = payload_.match_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.match_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::MatchData& Envelope::_internal_match_data() const {
  return _internal_has_match_data()
      ? *payload_.match_data_
      : reinterpret_cast< ::server::MatchData&>(::server::_MatchData_default_instance_);
}
inline const ::server::MatchData& Envelope::match_data() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_data)
  return _internal_match_data();
}
inline ::server::MatchData* Envelope::unsafe_arena_release_match_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.match_data)
  if (_internal_has_match_data()) {
    clear_has_payload();
    ::server::MatchData* temp = payload_.match_data_;
    payload_.match_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_match_data(::server::MatchData* match_data) {
  clear_payload();
  if (match_data) {
    set_has_match_data();
    payload_.match_data_ = match_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.match_data)
}
inline ::server::MatchData* Envelope::_internal_mutable_match_data() {
  if (!_internal_has_match_data()) {
    clear_payload();
    set_has_match_data();
    payload_.match_data_ = CreateMaybeMessage< ::server::MatchData >(GetArena());
  }
  return payload_.match_data_;
}
inline ::server::MatchData* Envelope::mutable_match_data() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_data)
  return _internal_mutable_match_data();
}

// .server.MatchPresence match_presence = 48;
inline bool Envelope::_internal_has_match_presence() const {
  return payload_case() == kMatchPresence;
}
inline bool Envelope::has_match_presence() const {
  return _internal_has_match_presence();
}
inline void Envelope::set_has_match_presence() {
  _oneof_case_[0] = kMatchPresence;
}
inline void Envelope::clear_match_presence() {
  if (_internal_has_match_presence()) {
    if (GetArena() == nullptr) {
      delete payload_.match_presence_;
    }
    clear_has_payload();
  }
}
inline ::server::MatchPresence* Envelope::release_match_presence() {
  // @@protoc_insertion_point(field_release:server.Envelope.match_presence)
  if (_internal_has_match_presence()) {
    clear_has_payload();
      ::server::MatchPresence* temp = payload_.match_presence_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.match_presence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::MatchPresence& Envelope::_internal_match_presence() const {
  return _internal_has_match_presence()
      ? *payload_.match_presence_
      : reinterpret_cast< ::server::MatchPresence&>(::server::_MatchPresence_default_instance_);
}
inline const ::server::MatchPresence& Envelope::match_presence() const {
  // @@protoc_insertion_point(field_get:server.Envelope.match_presence)
  return _internal_match_presence();
}
inline ::server::MatchPresence* Envelope::unsafe_arena_release_match_presence() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.match_presence)
  if (_internal_has_match_presence()) {
    clear_has_payload();
    ::server::MatchPresence* temp = payload_.match_presence_;
    payload_.match_presence_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_match_presence(::server::MatchPresence* match_presence) {
  clear_payload();
  if (match_presence) {
    set_has_match_presence();
    payload_.match_presence_ = match_presence;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.match_presence)
}
inline ::server::MatchPresence* Envelope::_internal_mutable_match_presence() {
  if (!_internal_has_match_presence()) {
    clear_payload();
    set_has_match_presence();
    payload_.match_presence_ = CreateMaybeMessage< ::server::MatchPresence >(GetArena());
  }
  return payload_.match_presence_;
}
inline ::server::MatchPresence* Envelope::mutable_match_presence() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.match_presence)
  return _internal_mutable_match_presence();
}

// .server.TStorageList storage_list = 49;
inline bool Envelope::_internal_has_storage_list() const {
  return payload_case() == kStorageList;
}
inline bool Envelope::has_storage_list() const {
  return _internal_has_storage_list();
}
inline void Envelope::set_has_storage_list() {
  _oneof_case_[0] = kStorageList;
}
inline void Envelope::clear_storage_list() {
  if (_internal_has_storage_list()) {
    if (GetArena() == nullptr) {
      delete payload_.storage_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TStorageList* Envelope::release_storage_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_list)
  if (_internal_has_storage_list()) {
    clear_has_payload();
      ::server::TStorageList* temp = payload_.storage_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.storage_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TStorageList& Envelope::_internal_storage_list() const {
  return _internal_has_storage_list()
      ? *payload_.storage_list_
      : reinterpret_cast< ::server::TStorageList&>(::server::_TStorageList_default_instance_);
}
inline const ::server::TStorageList& Envelope::storage_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_list)
  return _internal_storage_list();
}
inline ::server::TStorageList* Envelope::unsafe_arena_release_storage_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.storage_list)
  if (_internal_has_storage_list()) {
    clear_has_payload();
    ::server::TStorageList* temp = payload_.storage_list_;
    payload_.storage_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_storage_list(::server::TStorageList* storage_list) {
  clear_payload();
  if (storage_list) {
    set_has_storage_list();
    payload_.storage_list_ = storage_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.storage_list)
}
inline ::server::TStorageList* Envelope::_internal_mutable_storage_list() {
  if (!_internal_has_storage_list()) {
    clear_payload();
    set_has_storage_list();
    payload_.storage_list_ = CreateMaybeMessage< ::server::TStorageList >(GetArena());
  }
  return payload_.storage_list_;
}
inline ::server::TStorageList* Envelope::mutable_storage_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_list)
  return _internal_mutable_storage_list();
}

// .server.TStorageFetch storage_fetch = 50;
inline bool Envelope::_internal_has_storage_fetch() const {
  return payload_case() == kStorageFetch;
}
inline bool Envelope::has_storage_fetch() const {
  return _internal_has_storage_fetch();
}
inline void Envelope::set_has_storage_fetch() {
  _oneof_case_[0] = kStorageFetch;
}
inline void Envelope::clear_storage_fetch() {
  if (_internal_has_storage_fetch()) {
    if (GetArena() == nullptr) {
      delete payload_.storage_fetch_;
    }
    clear_has_payload();
  }
}
inline ::server::TStorageFetch* Envelope::release_storage_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_fetch)
  if (_internal_has_storage_fetch()) {
    clear_has_payload();
      ::server::TStorageFetch* temp = payload_.storage_fetch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.storage_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TStorageFetch& Envelope::_internal_storage_fetch() const {
  return _internal_has_storage_fetch()
      ? *payload_.storage_fetch_
      : reinterpret_cast< ::server::TStorageFetch&>(::server::_TStorageFetch_default_instance_);
}
inline const ::server::TStorageFetch& Envelope::storage_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_fetch)
  return _internal_storage_fetch();
}
inline ::server::TStorageFetch* Envelope::unsafe_arena_release_storage_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.storage_fetch)
  if (_internal_has_storage_fetch()) {
    clear_has_payload();
    ::server::TStorageFetch* temp = payload_.storage_fetch_;
    payload_.storage_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_storage_fetch(::server::TStorageFetch* storage_fetch) {
  clear_payload();
  if (storage_fetch) {
    set_has_storage_fetch();
    payload_.storage_fetch_ = storage_fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.storage_fetch)
}
inline ::server::TStorageFetch* Envelope::_internal_mutable_storage_fetch() {
  if (!_internal_has_storage_fetch()) {
    clear_payload();
    set_has_storage_fetch();
    payload_.storage_fetch_ = CreateMaybeMessage< ::server::TStorageFetch >(GetArena());
  }
  return payload_.storage_fetch_;
}
inline ::server::TStorageFetch* Envelope::mutable_storage_fetch() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_fetch)
  return _internal_mutable_storage_fetch();
}

// .server.TStorageWrite storage_write = 51;
inline bool Envelope::_internal_has_storage_write() const {
  return payload_case() == kStorageWrite;
}
inline bool Envelope::has_storage_write() const {
  return _internal_has_storage_write();
}
inline void Envelope::set_has_storage_write() {
  _oneof_case_[0] = kStorageWrite;
}
inline void Envelope::clear_storage_write() {
  if (_internal_has_storage_write()) {
    if (GetArena() == nullptr) {
      delete payload_.storage_write_;
    }
    clear_has_payload();
  }
}
inline ::server::TStorageWrite* Envelope::release_storage_write() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_write)
  if (_internal_has_storage_write()) {
    clear_has_payload();
      ::server::TStorageWrite* temp = payload_.storage_write_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.storage_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TStorageWrite& Envelope::_internal_storage_write() const {
  return _internal_has_storage_write()
      ? *payload_.storage_write_
      : reinterpret_cast< ::server::TStorageWrite&>(::server::_TStorageWrite_default_instance_);
}
inline const ::server::TStorageWrite& Envelope::storage_write() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_write)
  return _internal_storage_write();
}
inline ::server::TStorageWrite* Envelope::unsafe_arena_release_storage_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.storage_write)
  if (_internal_has_storage_write()) {
    clear_has_payload();
    ::server::TStorageWrite* temp = payload_.storage_write_;
    payload_.storage_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_storage_write(::server::TStorageWrite* storage_write) {
  clear_payload();
  if (storage_write) {
    set_has_storage_write();
    payload_.storage_write_ = storage_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.storage_write)
}
inline ::server::TStorageWrite* Envelope::_internal_mutable_storage_write() {
  if (!_internal_has_storage_write()) {
    clear_payload();
    set_has_storage_write();
    payload_.storage_write_ = CreateMaybeMessage< ::server::TStorageWrite >(GetArena());
  }
  return payload_.storage_write_;
}
inline ::server::TStorageWrite* Envelope::mutable_storage_write() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_write)
  return _internal_mutable_storage_write();
}

// .server.TStorageUpdate storage_update = 52;
inline bool Envelope::_internal_has_storage_update() const {
  return payload_case() == kStorageUpdate;
}
inline bool Envelope::has_storage_update() const {
  return _internal_has_storage_update();
}
inline void Envelope::set_has_storage_update() {
  _oneof_case_[0] = kStorageUpdate;
}
inline void Envelope::clear_storage_update() {
  if (_internal_has_storage_update()) {
    if (GetArena() == nullptr) {
      delete payload_.storage_update_;
    }
    clear_has_payload();
  }
}
inline ::server::TStorageUpdate* Envelope::release_storage_update() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_update)
  if (_internal_has_storage_update()) {
    clear_has_payload();
      ::server::TStorageUpdate* temp = payload_.storage_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.storage_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TStorageUpdate& Envelope::_internal_storage_update() const {
  return _internal_has_storage_update()
      ? *payload_.storage_update_
      : reinterpret_cast< ::server::TStorageUpdate&>(::server::_TStorageUpdate_default_instance_);
}
inline const ::server::TStorageUpdate& Envelope::storage_update() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_update)
  return _internal_storage_update();
}
inline ::server::TStorageUpdate* Envelope::unsafe_arena_release_storage_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.storage_update)
  if (_internal_has_storage_update()) {
    clear_has_payload();
    ::server::TStorageUpdate* temp = payload_.storage_update_;
    payload_.storage_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_storage_update(::server::TStorageUpdate* storage_update) {
  clear_payload();
  if (storage_update) {
    set_has_storage_update();
    payload_.storage_update_ = storage_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.storage_update)
}
inline ::server::TStorageUpdate* Envelope::_internal_mutable_storage_update() {
  if (!_internal_has_storage_update()) {
    clear_payload();
    set_has_storage_update();
    payload_.storage_update_ = CreateMaybeMessage< ::server::TStorageUpdate >(GetArena());
  }
  return payload_.storage_update_;
}
inline ::server::TStorageUpdate* Envelope::mutable_storage_update() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_update)
  return _internal_mutable_storage_update();
}

// .server.TStorageRemove storage_remove = 53;
inline bool Envelope::_internal_has_storage_remove() const {
  return payload_case() == kStorageRemove;
}
inline bool Envelope::has_storage_remove() const {
  return _internal_has_storage_remove();
}
inline void Envelope::set_has_storage_remove() {
  _oneof_case_[0] = kStorageRemove;
}
inline void Envelope::clear_storage_remove() {
  if (_internal_has_storage_remove()) {
    if (GetArena() == nullptr) {
      delete payload_.storage_remove_;
    }
    clear_has_payload();
  }
}
inline ::server::TStorageRemove* Envelope::release_storage_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_remove)
  if (_internal_has_storage_remove()) {
    clear_has_payload();
      ::server::TStorageRemove* temp = payload_.storage_remove_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.storage_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TStorageRemove& Envelope::_internal_storage_remove() const {
  return _internal_has_storage_remove()
      ? *payload_.storage_remove_
      : reinterpret_cast< ::server::TStorageRemove&>(::server::_TStorageRemove_default_instance_);
}
inline const ::server::TStorageRemove& Envelope::storage_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_remove)
  return _internal_storage_remove();
}
inline ::server::TStorageRemove* Envelope::unsafe_arena_release_storage_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.storage_remove)
  if (_internal_has_storage_remove()) {
    clear_has_payload();
    ::server::TStorageRemove* temp = payload_.storage_remove_;
    payload_.storage_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_storage_remove(::server::TStorageRemove* storage_remove) {
  clear_payload();
  if (storage_remove) {
    set_has_storage_remove();
    payload_.storage_remove_ = storage_remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.storage_remove)
}
inline ::server::TStorageRemove* Envelope::_internal_mutable_storage_remove() {
  if (!_internal_has_storage_remove()) {
    clear_payload();
    set_has_storage_remove();
    payload_.storage_remove_ = CreateMaybeMessage< ::server::TStorageRemove >(GetArena());
  }
  return payload_.storage_remove_;
}
inline ::server::TStorageRemove* Envelope::mutable_storage_remove() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_remove)
  return _internal_mutable_storage_remove();
}

// .server.TStorageData storage_data = 54;
inline bool Envelope::_internal_has_storage_data() const {
  return payload_case() == kStorageData;
}
inline bool Envelope::has_storage_data() const {
  return _internal_has_storage_data();
}
inline void Envelope::set_has_storage_data() {
  _oneof_case_[0] = kStorageData;
}
inline void Envelope::clear_storage_data() {
  if (_internal_has_storage_data()) {
    if (GetArena() == nullptr) {
      delete payload_.storage_data_;
    }
    clear_has_payload();
  }
}
inline ::server::TStorageData* Envelope::release_storage_data() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_data)
  if (_internal_has_storage_data()) {
    clear_has_payload();
      ::server::TStorageData* temp = payload_.storage_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.storage_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TStorageData& Envelope::_internal_storage_data() const {
  return _internal_has_storage_data()
      ? *payload_.storage_data_
      : reinterpret_cast< ::server::TStorageData&>(::server::_TStorageData_default_instance_);
}
inline const ::server::TStorageData& Envelope::storage_data() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_data)
  return _internal_storage_data();
}
inline ::server::TStorageData* Envelope::unsafe_arena_release_storage_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.storage_data)
  if (_internal_has_storage_data()) {
    clear_has_payload();
    ::server::TStorageData* temp = payload_.storage_data_;
    payload_.storage_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_storage_data(::server::TStorageData* storage_data) {
  clear_payload();
  if (storage_data) {
    set_has_storage_data();
    payload_.storage_data_ = storage_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.storage_data)
}
inline ::server::TStorageData* Envelope::_internal_mutable_storage_data() {
  if (!_internal_has_storage_data()) {
    clear_payload();
    set_has_storage_data();
    payload_.storage_data_ = CreateMaybeMessage< ::server::TStorageData >(GetArena());
  }
  return payload_.storage_data_;
}
inline ::server::TStorageData* Envelope::mutable_storage_data() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_data)
  return _internal_mutable_storage_data();
}

// .server.TStorageKeys storage_keys = 55;
inline bool Envelope::_internal_has_storage_keys() const {
  return payload_case() == kStorageKeys;
}
inline bool Envelope::has_storage_keys() const {
  return _internal_has_storage_keys();
}
inline void Envelope::set_has_storage_keys() {
  _oneof_case_[0] = kStorageKeys;
}
inline void Envelope::clear_storage_keys() {
  if (_internal_has_storage_keys()) {
    if (GetArena() == nullptr) {
      delete payload_.storage_keys_;
    }
    clear_has_payload();
  }
}
inline ::server::TStorageKeys* Envelope::release_storage_keys() {
  // @@protoc_insertion_point(field_release:server.Envelope.storage_keys)
  if (_internal_has_storage_keys()) {
    clear_has_payload();
      ::server::TStorageKeys* temp = payload_.storage_keys_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.storage_keys_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TStorageKeys& Envelope::_internal_storage_keys() const {
  return _internal_has_storage_keys()
      ? *payload_.storage_keys_
      : reinterpret_cast< ::server::TStorageKeys&>(::server::_TStorageKeys_default_instance_);
}
inline const ::server::TStorageKeys& Envelope::storage_keys() const {
  // @@protoc_insertion_point(field_get:server.Envelope.storage_keys)
  return _internal_storage_keys();
}
inline ::server::TStorageKeys* Envelope::unsafe_arena_release_storage_keys() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.storage_keys)
  if (_internal_has_storage_keys()) {
    clear_has_payload();
    ::server::TStorageKeys* temp = payload_.storage_keys_;
    payload_.storage_keys_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_storage_keys(::server::TStorageKeys* storage_keys) {
  clear_payload();
  if (storage_keys) {
    set_has_storage_keys();
    payload_.storage_keys_ = storage_keys;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.storage_keys)
}
inline ::server::TStorageKeys* Envelope::_internal_mutable_storage_keys() {
  if (!_internal_has_storage_keys()) {
    clear_payload();
    set_has_storage_keys();
    payload_.storage_keys_ = CreateMaybeMessage< ::server::TStorageKeys >(GetArena());
  }
  return payload_.storage_keys_;
}
inline ::server::TStorageKeys* Envelope::mutable_storage_keys() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.storage_keys)
  return _internal_mutable_storage_keys();
}

// .server.TLeaderboardsList leaderboards_list = 56;
inline bool Envelope::_internal_has_leaderboards_list() const {
  return payload_case() == kLeaderboardsList;
}
inline bool Envelope::has_leaderboards_list() const {
  return _internal_has_leaderboards_list();
}
inline void Envelope::set_has_leaderboards_list() {
  _oneof_case_[0] = kLeaderboardsList;
}
inline void Envelope::clear_leaderboards_list() {
  if (_internal_has_leaderboards_list()) {
    if (GetArena() == nullptr) {
      delete payload_.leaderboards_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TLeaderboardsList* Envelope::release_leaderboards_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboards_list)
  if (_internal_has_leaderboards_list()) {
    clear_has_payload();
      ::server::TLeaderboardsList* temp = payload_.leaderboards_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.leaderboards_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TLeaderboardsList& Envelope::_internal_leaderboards_list() const {
  return _internal_has_leaderboards_list()
      ? *payload_.leaderboards_list_
      : reinterpret_cast< ::server::TLeaderboardsList&>(::server::_TLeaderboardsList_default_instance_);
}
inline const ::server::TLeaderboardsList& Envelope::leaderboards_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboards_list)
  return _internal_leaderboards_list();
}
inline ::server::TLeaderboardsList* Envelope::unsafe_arena_release_leaderboards_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.leaderboards_list)
  if (_internal_has_leaderboards_list()) {
    clear_has_payload();
    ::server::TLeaderboardsList* temp = payload_.leaderboards_list_;
    payload_.leaderboards_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_leaderboards_list(::server::TLeaderboardsList* leaderboards_list) {
  clear_payload();
  if (leaderboards_list) {
    set_has_leaderboards_list();
    payload_.leaderboards_list_ = leaderboards_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.leaderboards_list)
}
inline ::server::TLeaderboardsList* Envelope::_internal_mutable_leaderboards_list() {
  if (!_internal_has_leaderboards_list()) {
    clear_payload();
    set_has_leaderboards_list();
    payload_.leaderboards_list_ = CreateMaybeMessage< ::server::TLeaderboardsList >(GetArena());
  }
  return payload_.leaderboards_list_;
}
inline ::server::TLeaderboardsList* Envelope::mutable_leaderboards_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboards_list)
  return _internal_mutable_leaderboards_list();
}

// .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
inline bool Envelope::_internal_has_leaderboard_records_write() const {
  return payload_case() == kLeaderboardRecordsWrite;
}
inline bool Envelope::has_leaderboard_records_write() const {
  return _internal_has_leaderboard_records_write();
}
inline void Envelope::set_has_leaderboard_records_write() {
  _oneof_case_[0] = kLeaderboardRecordsWrite;
}
inline void Envelope::clear_leaderboard_records_write() {
  if (_internal_has_leaderboard_records_write()) {
    if (GetArena() == nullptr) {
      delete payload_.leaderboard_records_write_;
    }
    clear_has_payload();
  }
}
inline ::server::TLeaderboardRecordsWrite* Envelope::release_leaderboard_records_write() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_write)
  if (_internal_has_leaderboard_records_write()) {
    clear_has_payload();
      ::server::TLeaderboardRecordsWrite* temp = payload_.leaderboard_records_write_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.leaderboard_records_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TLeaderboardRecordsWrite& Envelope::_internal_leaderboard_records_write() const {
  return _internal_has_leaderboard_records_write()
      ? *payload_.leaderboard_records_write_
      : reinterpret_cast< ::server::TLeaderboardRecordsWrite&>(::server::_TLeaderboardRecordsWrite_default_instance_);
}
inline const ::server::TLeaderboardRecordsWrite& Envelope::leaderboard_records_write() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_write)
  return _internal_leaderboard_records_write();
}
inline ::server::TLeaderboardRecordsWrite* Envelope::unsafe_arena_release_leaderboard_records_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.leaderboard_records_write)
  if (_internal_has_leaderboard_records_write()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsWrite* temp = payload_.leaderboard_records_write_;
    payload_.leaderboard_records_write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_leaderboard_records_write(::server::TLeaderboardRecordsWrite* leaderboard_records_write) {
  clear_payload();
  if (leaderboard_records_write) {
    set_has_leaderboard_records_write();
    payload_.leaderboard_records_write_ = leaderboard_records_write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.leaderboard_records_write)
}
inline ::server::TLeaderboardRecordsWrite* Envelope::_internal_mutable_leaderboard_records_write() {
  if (!_internal_has_leaderboard_records_write()) {
    clear_payload();
    set_has_leaderboard_records_write();
    payload_.leaderboard_records_write_ = CreateMaybeMessage< ::server::TLeaderboardRecordsWrite >(GetArena());
  }
  return payload_.leaderboard_records_write_;
}
inline ::server::TLeaderboardRecordsWrite* Envelope::mutable_leaderboard_records_write() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_write)
  return _internal_mutable_leaderboard_records_write();
}

// .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
inline bool Envelope::_internal_has_leaderboard_records_fetch() const {
  return payload_case() == kLeaderboardRecordsFetch;
}
inline bool Envelope::has_leaderboard_records_fetch() const {
  return _internal_has_leaderboard_records_fetch();
}
inline void Envelope::set_has_leaderboard_records_fetch() {
  _oneof_case_[0] = kLeaderboardRecordsFetch;
}
inline void Envelope::clear_leaderboard_records_fetch() {
  if (_internal_has_leaderboard_records_fetch()) {
    if (GetArena() == nullptr) {
      delete payload_.leaderboard_records_fetch_;
    }
    clear_has_payload();
  }
}
inline ::server::TLeaderboardRecordsFetch* Envelope::release_leaderboard_records_fetch() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_fetch)
  if (_internal_has_leaderboard_records_fetch()) {
    clear_has_payload();
      ::server::TLeaderboardRecordsFetch* temp = payload_.leaderboard_records_fetch_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.leaderboard_records_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TLeaderboardRecordsFetch& Envelope::_internal_leaderboard_records_fetch() const {
  return _internal_has_leaderboard_records_fetch()
      ? *payload_.leaderboard_records_fetch_
      : reinterpret_cast< ::server::TLeaderboardRecordsFetch&>(::server::_TLeaderboardRecordsFetch_default_instance_);
}
inline const ::server::TLeaderboardRecordsFetch& Envelope::leaderboard_records_fetch() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_fetch)
  return _internal_leaderboard_records_fetch();
}
inline ::server::TLeaderboardRecordsFetch* Envelope::unsafe_arena_release_leaderboard_records_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.leaderboard_records_fetch)
  if (_internal_has_leaderboard_records_fetch()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsFetch* temp = payload_.leaderboard_records_fetch_;
    payload_.leaderboard_records_fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_leaderboard_records_fetch(::server::TLeaderboardRecordsFetch* leaderboard_records_fetch) {
  clear_payload();
  if (leaderboard_records_fetch) {
    set_has_leaderboard_records_fetch();
    payload_.leaderboard_records_fetch_ = leaderboard_records_fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.leaderboard_records_fetch)
}
inline ::server::TLeaderboardRecordsFetch* Envelope::_internal_mutable_leaderboard_records_fetch() {
  if (!_internal_has_leaderboard_records_fetch()) {
    clear_payload();
    set_has_leaderboard_records_fetch();
    payload_.leaderboard_records_fetch_ = CreateMaybeMessage< ::server::TLeaderboardRecordsFetch >(GetArena());
  }
  return payload_.leaderboard_records_fetch_;
}
inline ::server::TLeaderboardRecordsFetch* Envelope::mutable_leaderboard_records_fetch() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_fetch)
  return _internal_mutable_leaderboard_records_fetch();
}

// .server.TLeaderboardRecordsList leaderboard_records_list = 59;
inline bool Envelope::_internal_has_leaderboard_records_list() const {
  return payload_case() == kLeaderboardRecordsList;
}
inline bool Envelope::has_leaderboard_records_list() const {
  return _internal_has_leaderboard_records_list();
}
inline void Envelope::set_has_leaderboard_records_list() {
  _oneof_case_[0] = kLeaderboardRecordsList;
}
inline void Envelope::clear_leaderboard_records_list() {
  if (_internal_has_leaderboard_records_list()) {
    if (GetArena() == nullptr) {
      delete payload_.leaderboard_records_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TLeaderboardRecordsList* Envelope::release_leaderboard_records_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records_list)
  if (_internal_has_leaderboard_records_list()) {
    clear_has_payload();
      ::server::TLeaderboardRecordsList* temp = payload_.leaderboard_records_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.leaderboard_records_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TLeaderboardRecordsList& Envelope::_internal_leaderboard_records_list() const {
  return _internal_has_leaderboard_records_list()
      ? *payload_.leaderboard_records_list_
      : reinterpret_cast< ::server::TLeaderboardRecordsList&>(::server::_TLeaderboardRecordsList_default_instance_);
}
inline const ::server::TLeaderboardRecordsList& Envelope::leaderboard_records_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records_list)
  return _internal_leaderboard_records_list();
}
inline ::server::TLeaderboardRecordsList* Envelope::unsafe_arena_release_leaderboard_records_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.leaderboard_records_list)
  if (_internal_has_leaderboard_records_list()) {
    clear_has_payload();
    ::server::TLeaderboardRecordsList* temp = payload_.leaderboard_records_list_;
    payload_.leaderboard_records_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_leaderboard_records_list(::server::TLeaderboardRecordsList* leaderboard_records_list) {
  clear_payload();
  if (leaderboard_records_list) {
    set_has_leaderboard_records_list();
    payload_.leaderboard_records_list_ = leaderboard_records_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.leaderboard_records_list)
}
inline ::server::TLeaderboardRecordsList* Envelope::_internal_mutable_leaderboard_records_list() {
  if (!_internal_has_leaderboard_records_list()) {
    clear_payload();
    set_has_leaderboard_records_list();
    payload_.leaderboard_records_list_ = CreateMaybeMessage< ::server::TLeaderboardRecordsList >(GetArena());
  }
  return payload_.leaderboard_records_list_;
}
inline ::server::TLeaderboardRecordsList* Envelope::mutable_leaderboard_records_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records_list)
  return _internal_mutable_leaderboard_records_list();
}

// .server.TLeaderboards leaderboards = 60;
inline bool Envelope::_internal_has_leaderboards() const {
  return payload_case() == kLeaderboards;
}
inline bool Envelope::has_leaderboards() const {
  return _internal_has_leaderboards();
}
inline void Envelope::set_has_leaderboards() {
  _oneof_case_[0] = kLeaderboards;
}
inline void Envelope::clear_leaderboards() {
  if (_internal_has_leaderboards()) {
    if (GetArena() == nullptr) {
      delete payload_.leaderboards_;
    }
    clear_has_payload();
  }
}
inline ::server::TLeaderboards* Envelope::release_leaderboards() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboards)
  if (_internal_has_leaderboards()) {
    clear_has_payload();
      ::server::TLeaderboards* temp = payload_.leaderboards_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.leaderboards_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TLeaderboards& Envelope::_internal_leaderboards() const {
  return _internal_has_leaderboards()
      ? *payload_.leaderboards_
      : reinterpret_cast< ::server::TLeaderboards&>(::server::_TLeaderboards_default_instance_);
}
inline const ::server::TLeaderboards& Envelope::leaderboards() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboards)
  return _internal_leaderboards();
}
inline ::server::TLeaderboards* Envelope::unsafe_arena_release_leaderboards() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.leaderboards)
  if (_internal_has_leaderboards()) {
    clear_has_payload();
    ::server::TLeaderboards* temp = payload_.leaderboards_;
    payload_.leaderboards_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_leaderboards(::server::TLeaderboards* leaderboards) {
  clear_payload();
  if (leaderboards) {
    set_has_leaderboards();
    payload_.leaderboards_ = leaderboards;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.leaderboards)
}
inline ::server::TLeaderboards* Envelope::_internal_mutable_leaderboards() {
  if (!_internal_has_leaderboards()) {
    clear_payload();
    set_has_leaderboards();
    payload_.leaderboards_ = CreateMaybeMessage< ::server::TLeaderboards >(GetArena());
  }
  return payload_.leaderboards_;
}
inline ::server::TLeaderboards* Envelope::mutable_leaderboards() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboards)
  return _internal_mutable_leaderboards();
}

// .server.TLeaderboardRecords leaderboard_records = 61;
inline bool Envelope::_internal_has_leaderboard_records() const {
  return payload_case() == kLeaderboardRecords;
}
inline bool Envelope::has_leaderboard_records() const {
  return _internal_has_leaderboard_records();
}
inline void Envelope::set_has_leaderboard_records() {
  _oneof_case_[0] = kLeaderboardRecords;
}
inline void Envelope::clear_leaderboard_records() {
  if (_internal_has_leaderboard_records()) {
    if (GetArena() == nullptr) {
      delete payload_.leaderboard_records_;
    }
    clear_has_payload();
  }
}
inline ::server::TLeaderboardRecords* Envelope::release_leaderboard_records() {
  // @@protoc_insertion_point(field_release:server.Envelope.leaderboard_records)
  if (_internal_has_leaderboard_records()) {
    clear_has_payload();
      ::server::TLeaderboardRecords* temp = payload_.leaderboard_records_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.leaderboard_records_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TLeaderboardRecords& Envelope::_internal_leaderboard_records() const {
  return _internal_has_leaderboard_records()
      ? *payload_.leaderboard_records_
      : reinterpret_cast< ::server::TLeaderboardRecords&>(::server::_TLeaderboardRecords_default_instance_);
}
inline const ::server::TLeaderboardRecords& Envelope::leaderboard_records() const {
  // @@protoc_insertion_point(field_get:server.Envelope.leaderboard_records)
  return _internal_leaderboard_records();
}
inline ::server::TLeaderboardRecords* Envelope::unsafe_arena_release_leaderboard_records() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.leaderboard_records)
  if (_internal_has_leaderboard_records()) {
    clear_has_payload();
    ::server::TLeaderboardRecords* temp = payload_.leaderboard_records_;
    payload_.leaderboard_records_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_leaderboard_records(::server::TLeaderboardRecords* leaderboard_records) {
  clear_payload();
  if (leaderboard_records) {
    set_has_leaderboard_records();
    payload_.leaderboard_records_ = leaderboard_records;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.leaderboard_records)
}
inline ::server::TLeaderboardRecords* Envelope::_internal_mutable_leaderboard_records() {
  if (!_internal_has_leaderboard_records()) {
    clear_payload();
    set_has_leaderboard_records();
    payload_.leaderboard_records_ = CreateMaybeMessage< ::server::TLeaderboardRecords >(GetArena());
  }
  return payload_.leaderboard_records_;
}
inline ::server::TLeaderboardRecords* Envelope::mutable_leaderboard_records() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.leaderboard_records)
  return _internal_mutable_leaderboard_records();
}

// .server.TMatchmakeAdd matchmake_add = 62;
inline bool Envelope::_internal_has_matchmake_add() const {
  return payload_case() == kMatchmakeAdd;
}
inline bool Envelope::has_matchmake_add() const {
  return _internal_has_matchmake_add();
}
inline void Envelope::set_has_matchmake_add() {
  _oneof_case_[0] = kMatchmakeAdd;
}
inline void Envelope::clear_matchmake_add() {
  if (_internal_has_matchmake_add()) {
    if (GetArena() == nullptr) {
      delete payload_.matchmake_add_;
    }
    clear_has_payload();
  }
}
inline ::server::TMatchmakeAdd* Envelope::release_matchmake_add() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_add)
  if (_internal_has_matchmake_add()) {
    clear_has_payload();
      ::server::TMatchmakeAdd* temp = payload_.matchmake_add_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.matchmake_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TMatchmakeAdd& Envelope::_internal_matchmake_add() const {
  return _internal_has_matchmake_add()
      ? *payload_.matchmake_add_
      : reinterpret_cast< ::server::TMatchmakeAdd&>(::server::_TMatchmakeAdd_default_instance_);
}
inline const ::server::TMatchmakeAdd& Envelope::matchmake_add() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_add)
  return _internal_matchmake_add();
}
inline ::server::TMatchmakeAdd* Envelope::unsafe_arena_release_matchmake_add() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.matchmake_add)
  if (_internal_has_matchmake_add()) {
    clear_has_payload();
    ::server::TMatchmakeAdd* temp = payload_.matchmake_add_;
    payload_.matchmake_add_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_matchmake_add(::server::TMatchmakeAdd* matchmake_add) {
  clear_payload();
  if (matchmake_add) {
    set_has_matchmake_add();
    payload_.matchmake_add_ = matchmake_add;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.matchmake_add)
}
inline ::server::TMatchmakeAdd* Envelope::_internal_mutable_matchmake_add() {
  if (!_internal_has_matchmake_add()) {
    clear_payload();
    set_has_matchmake_add();
    payload_.matchmake_add_ = CreateMaybeMessage< ::server::TMatchmakeAdd >(GetArena());
  }
  return payload_.matchmake_add_;
}
inline ::server::TMatchmakeAdd* Envelope::mutable_matchmake_add() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_add)
  return _internal_mutable_matchmake_add();
}

// .server.TMatchmakeRemove matchmake_remove = 63;
inline bool Envelope::_internal_has_matchmake_remove() const {
  return payload_case() == kMatchmakeRemove;
}
inline bool Envelope::has_matchmake_remove() const {
  return _internal_has_matchmake_remove();
}
inline void Envelope::set_has_matchmake_remove() {
  _oneof_case_[0] = kMatchmakeRemove;
}
inline void Envelope::clear_matchmake_remove() {
  if (_internal_has_matchmake_remove()) {
    if (GetArena() == nullptr) {
      delete payload_.matchmake_remove_;
    }
    clear_has_payload();
  }
}
inline ::server::TMatchmakeRemove* Envelope::release_matchmake_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_remove)
  if (_internal_has_matchmake_remove()) {
    clear_has_payload();
      ::server::TMatchmakeRemove* temp = payload_.matchmake_remove_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.matchmake_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TMatchmakeRemove& Envelope::_internal_matchmake_remove() const {
  return _internal_has_matchmake_remove()
      ? *payload_.matchmake_remove_
      : reinterpret_cast< ::server::TMatchmakeRemove&>(::server::_TMatchmakeRemove_default_instance_);
}
inline const ::server::TMatchmakeRemove& Envelope::matchmake_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_remove)
  return _internal_matchmake_remove();
}
inline ::server::TMatchmakeRemove* Envelope::unsafe_arena_release_matchmake_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.matchmake_remove)
  if (_internal_has_matchmake_remove()) {
    clear_has_payload();
    ::server::TMatchmakeRemove* temp = payload_.matchmake_remove_;
    payload_.matchmake_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_matchmake_remove(::server::TMatchmakeRemove* matchmake_remove) {
  clear_payload();
  if (matchmake_remove) {
    set_has_matchmake_remove();
    payload_.matchmake_remove_ = matchmake_remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.matchmake_remove)
}
inline ::server::TMatchmakeRemove* Envelope::_internal_mutable_matchmake_remove() {
  if (!_internal_has_matchmake_remove()) {
    clear_payload();
    set_has_matchmake_remove();
    payload_.matchmake_remove_ = CreateMaybeMessage< ::server::TMatchmakeRemove >(GetArena());
  }
  return payload_.matchmake_remove_;
}
inline ::server::TMatchmakeRemove* Envelope::mutable_matchmake_remove() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_remove)
  return _internal_mutable_matchmake_remove();
}

// .server.TMatchmakeTicket matchmake_ticket = 64;
inline bool Envelope::_internal_has_matchmake_ticket() const {
  return payload_case() == kMatchmakeTicket;
}
inline bool Envelope::has_matchmake_ticket() const {
  return _internal_has_matchmake_ticket();
}
inline void Envelope::set_has_matchmake_ticket() {
  _oneof_case_[0] = kMatchmakeTicket;
}
inline void Envelope::clear_matchmake_ticket() {
  if (_internal_has_matchmake_ticket()) {
    if (GetArena() == nullptr) {
      delete payload_.matchmake_ticket_;
    }
    clear_has_payload();
  }
}
inline ::server::TMatchmakeTicket* Envelope::release_matchmake_ticket() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_ticket)
  if (_internal_has_matchmake_ticket()) {
    clear_has_payload();
      ::server::TMatchmakeTicket* temp = payload_.matchmake_ticket_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.matchmake_ticket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TMatchmakeTicket& Envelope::_internal_matchmake_ticket() const {
  return _internal_has_matchmake_ticket()
      ? *payload_.matchmake_ticket_
      : reinterpret_cast< ::server::TMatchmakeTicket&>(::server::_TMatchmakeTicket_default_instance_);
}
inline const ::server::TMatchmakeTicket& Envelope::matchmake_ticket() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_ticket)
  return _internal_matchmake_ticket();
}
inline ::server::TMatchmakeTicket* Envelope::unsafe_arena_release_matchmake_ticket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.matchmake_ticket)
  if (_internal_has_matchmake_ticket()) {
    clear_has_payload();
    ::server::TMatchmakeTicket* temp = payload_.matchmake_ticket_;
    payload_.matchmake_ticket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_matchmake_ticket(::server::TMatchmakeTicket* matchmake_ticket) {
  clear_payload();
  if (matchmake_ticket) {
    set_has_matchmake_ticket();
    payload_.matchmake_ticket_ = matchmake_ticket;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.matchmake_ticket)
}
inline ::server::TMatchmakeTicket* Envelope::_internal_mutable_matchmake_ticket() {
  if (!_internal_has_matchmake_ticket()) {
    clear_payload();
    set_has_matchmake_ticket();
    payload_.matchmake_ticket_ = CreateMaybeMessage< ::server::TMatchmakeTicket >(GetArena());
  }
  return payload_.matchmake_ticket_;
}
inline ::server::TMatchmakeTicket* Envelope::mutable_matchmake_ticket() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_ticket)
  return _internal_mutable_matchmake_ticket();
}

// .server.MatchmakeMatched matchmake_matched = 65;
inline bool Envelope::_internal_has_matchmake_matched() const {
  return payload_case() == kMatchmakeMatched;
}
inline bool Envelope::has_matchmake_matched() const {
  return _internal_has_matchmake_matched();
}
inline void Envelope::set_has_matchmake_matched() {
  _oneof_case_[0] = kMatchmakeMatched;
}
inline void Envelope::clear_matchmake_matched() {
  if (_internal_has_matchmake_matched()) {
    if (GetArena() == nullptr) {
      delete payload_.matchmake_matched_;
    }
    clear_has_payload();
  }
}
inline ::server::MatchmakeMatched* Envelope::release_matchmake_matched() {
  // @@protoc_insertion_point(field_release:server.Envelope.matchmake_matched)
  if (_internal_has_matchmake_matched()) {
    clear_has_payload();
      ::server::MatchmakeMatched* temp = payload_.matchmake_matched_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.matchmake_matched_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::MatchmakeMatched& Envelope::_internal_matchmake_matched() const {
  return _internal_has_matchmake_matched()
      ? *payload_.matchmake_matched_
      : reinterpret_cast< ::server::MatchmakeMatched&>(::server::_MatchmakeMatched_default_instance_);
}
inline const ::server::MatchmakeMatched& Envelope::matchmake_matched() const {
  // @@protoc_insertion_point(field_get:server.Envelope.matchmake_matched)
  return _internal_matchmake_matched();
}
inline ::server::MatchmakeMatched* Envelope::unsafe_arena_release_matchmake_matched() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.matchmake_matched)
  if (_internal_has_matchmake_matched()) {
    clear_has_payload();
    ::server::MatchmakeMatched* temp = payload_.matchmake_matched_;
    payload_.matchmake_matched_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_matchmake_matched(::server::MatchmakeMatched* matchmake_matched) {
  clear_payload();
  if (matchmake_matched) {
    set_has_matchmake_matched();
    payload_.matchmake_matched_ = matchmake_matched;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.matchmake_matched)
}
inline ::server::MatchmakeMatched* Envelope::_internal_mutable_matchmake_matched() {
  if (!_internal_has_matchmake_matched()) {
    clear_payload();
    set_has_matchmake_matched();
    payload_.matchmake_matched_ = CreateMaybeMessage< ::server::MatchmakeMatched >(GetArena());
  }
  return payload_.matchmake_matched_;
}
inline ::server::MatchmakeMatched* Envelope::mutable_matchmake_matched() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.matchmake_matched)
  return _internal_mutable_matchmake_matched();
}

// .server.TRpc rpc = 66;
inline bool Envelope::_internal_has_rpc() const {
  return payload_case() == kRpc;
}
inline bool Envelope::has_rpc() const {
  return _internal_has_rpc();
}
inline void Envelope::set_has_rpc() {
  _oneof_case_[0] = kRpc;
}
inline void Envelope::clear_rpc() {
  if (_internal_has_rpc()) {
    if (GetArena() == nullptr) {
      delete payload_.rpc_;
    }
    clear_has_payload();
  }
}
inline ::server::TRpc* Envelope::release_rpc() {
  // @@protoc_insertion_point(field_release:server.Envelope.rpc)
  if (_internal_has_rpc()) {
    clear_has_payload();
      ::server::TRpc* temp = payload_.rpc_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.rpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TRpc& Envelope::_internal_rpc() const {
  return _internal_has_rpc()
      ? *payload_.rpc_
      : reinterpret_cast< ::server::TRpc&>(::server::_TRpc_default_instance_);
}
inline const ::server::TRpc& Envelope::rpc() const {
  // @@protoc_insertion_point(field_get:server.Envelope.rpc)
  return _internal_rpc();
}
inline ::server::TRpc* Envelope::unsafe_arena_release_rpc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.rpc)
  if (_internal_has_rpc()) {
    clear_has_payload();
    ::server::TRpc* temp = payload_.rpc_;
    payload_.rpc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_rpc(::server::TRpc* rpc) {
  clear_payload();
  if (rpc) {
    set_has_rpc();
    payload_.rpc_ = rpc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.rpc)
}
inline ::server::TRpc* Envelope::_internal_mutable_rpc() {
  if (!_internal_has_rpc()) {
    clear_payload();
    set_has_rpc();
    payload_.rpc_ = CreateMaybeMessage< ::server::TRpc >(GetArena());
  }
  return payload_.rpc_;
}
inline ::server::TRpc* Envelope::mutable_rpc() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.rpc)
  return _internal_mutable_rpc();
}

// .server.TPurchaseValidation purchase = 67;
inline bool Envelope::_internal_has_purchase() const {
  return payload_case() == kPurchase;
}
inline bool Envelope::has_purchase() const {
  return _internal_has_purchase();
}
inline void Envelope::set_has_purchase() {
  _oneof_case_[0] = kPurchase;
}
inline void Envelope::clear_purchase() {
  if (_internal_has_purchase()) {
    if (GetArena() == nullptr) {
      delete payload_.purchase_;
    }
    clear_has_payload();
  }
}
inline ::server::TPurchaseValidation* Envelope::release_purchase() {
  // @@protoc_insertion_point(field_release:server.Envelope.purchase)
  if (_internal_has_purchase()) {
    clear_has_payload();
      ::server::TPurchaseValidation* temp = payload_.purchase_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.purchase_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TPurchaseValidation& Envelope::_internal_purchase() const {
  return _internal_has_purchase()
      ? *payload_.purchase_
      : reinterpret_cast< ::server::TPurchaseValidation&>(::server::_TPurchaseValidation_default_instance_);
}
inline const ::server::TPurchaseValidation& Envelope::purchase() const {
  // @@protoc_insertion_point(field_get:server.Envelope.purchase)
  return _internal_purchase();
}
inline ::server::TPurchaseValidation* Envelope::unsafe_arena_release_purchase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.purchase)
  if (_internal_has_purchase()) {
    clear_has_payload();
    ::server::TPurchaseValidation* temp = payload_.purchase_;
    payload_.purchase_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_purchase(::server::TPurchaseValidation* purchase) {
  clear_payload();
  if (purchase) {
    set_has_purchase();
    payload_.purchase_ = purchase;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.purchase)
}
inline ::server::TPurchaseValidation* Envelope::_internal_mutable_purchase() {
  if (!_internal_has_purchase()) {
    clear_payload();
    set_has_purchase();
    payload_.purchase_ = CreateMaybeMessage< ::server::TPurchaseValidation >(GetArena());
  }
  return payload_.purchase_;
}
inline ::server::TPurchaseValidation* Envelope::mutable_purchase() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.purchase)
  return _internal_mutable_purchase();
}

// .server.TPurchaseRecord purchase_record = 68;
inline bool Envelope::_internal_has_purchase_record() const {
  return payload_case() == kPurchaseRecord;
}
inline bool Envelope::has_purchase_record() const {
  return _internal_has_purchase_record();
}
inline void Envelope::set_has_purchase_record() {
  _oneof_case_[0] = kPurchaseRecord;
}
inline void Envelope::clear_purchase_record() {
  if (_internal_has_purchase_record()) {
    if (GetArena() == nullptr) {
      delete payload_.purchase_record_;
    }
    clear_has_payload();
  }
}
inline ::server::TPurchaseRecord* Envelope::release_purchase_record() {
  // @@protoc_insertion_point(field_release:server.Envelope.purchase_record)
  if (_internal_has_purchase_record()) {
    clear_has_payload();
      ::server::TPurchaseRecord* temp = payload_.purchase_record_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.purchase_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TPurchaseRecord& Envelope::_internal_purchase_record() const {
  return _internal_has_purchase_record()
      ? *payload_.purchase_record_
      : reinterpret_cast< ::server::TPurchaseRecord&>(::server::_TPurchaseRecord_default_instance_);
}
inline const ::server::TPurchaseRecord& Envelope::purchase_record() const {
  // @@protoc_insertion_point(field_get:server.Envelope.purchase_record)
  return _internal_purchase_record();
}
inline ::server::TPurchaseRecord* Envelope::unsafe_arena_release_purchase_record() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.purchase_record)
  if (_internal_has_purchase_record()) {
    clear_has_payload();
    ::server::TPurchaseRecord* temp = payload_.purchase_record_;
    payload_.purchase_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_purchase_record(::server::TPurchaseRecord* purchase_record) {
  clear_payload();
  if (purchase_record) {
    set_has_purchase_record();
    payload_.purchase_record_ = purchase_record;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.purchase_record)
}
inline ::server::TPurchaseRecord* Envelope::_internal_mutable_purchase_record() {
  if (!_internal_has_purchase_record()) {
    clear_payload();
    set_has_purchase_record();
    payload_.purchase_record_ = CreateMaybeMessage< ::server::TPurchaseRecord >(GetArena());
  }
  return payload_.purchase_record_;
}
inline ::server::TPurchaseRecord* Envelope::mutable_purchase_record() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.purchase_record)
  return _internal_mutable_purchase_record();
}

// .server.TNotificationsList notifications_list = 69;
inline bool Envelope::_internal_has_notifications_list() const {
  return payload_case() == kNotificationsList;
}
inline bool Envelope::has_notifications_list() const {
  return _internal_has_notifications_list();
}
inline void Envelope::set_has_notifications_list() {
  _oneof_case_[0] = kNotificationsList;
}
inline void Envelope::clear_notifications_list() {
  if (_internal_has_notifications_list()) {
    if (GetArena() == nullptr) {
      delete payload_.notifications_list_;
    }
    clear_has_payload();
  }
}
inline ::server::TNotificationsList* Envelope::release_notifications_list() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications_list)
  if (_internal_has_notifications_list()) {
    clear_has_payload();
      ::server::TNotificationsList* temp = payload_.notifications_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifications_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TNotificationsList& Envelope::_internal_notifications_list() const {
  return _internal_has_notifications_list()
      ? *payload_.notifications_list_
      : reinterpret_cast< ::server::TNotificationsList&>(::server::_TNotificationsList_default_instance_);
}
inline const ::server::TNotificationsList& Envelope::notifications_list() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications_list)
  return _internal_notifications_list();
}
inline ::server::TNotificationsList* Envelope::unsafe_arena_release_notifications_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.notifications_list)
  if (_internal_has_notifications_list()) {
    clear_has_payload();
    ::server::TNotificationsList* temp = payload_.notifications_list_;
    payload_.notifications_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_notifications_list(::server::TNotificationsList* notifications_list) {
  clear_payload();
  if (notifications_list) {
    set_has_notifications_list();
    payload_.notifications_list_ = notifications_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.notifications_list)
}
inline ::server::TNotificationsList* Envelope::_internal_mutable_notifications_list() {
  if (!_internal_has_notifications_list()) {
    clear_payload();
    set_has_notifications_list();
    payload_.notifications_list_ = CreateMaybeMessage< ::server::TNotificationsList >(GetArena());
  }
  return payload_.notifications_list_;
}
inline ::server::TNotificationsList* Envelope::mutable_notifications_list() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications_list)
  return _internal_mutable_notifications_list();
}

// .server.TNotificationsRemove notifications_remove = 70;
inline bool Envelope::_internal_has_notifications_remove() const {
  return payload_case() == kNotificationsRemove;
}
inline bool Envelope::has_notifications_remove() const {
  return _internal_has_notifications_remove();
}
inline void Envelope::set_has_notifications_remove() {
  _oneof_case_[0] = kNotificationsRemove;
}
inline void Envelope::clear_notifications_remove() {
  if (_internal_has_notifications_remove()) {
    if (GetArena() == nullptr) {
      delete payload_.notifications_remove_;
    }
    clear_has_payload();
  }
}
inline ::server::TNotificationsRemove* Envelope::release_notifications_remove() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications_remove)
  if (_internal_has_notifications_remove()) {
    clear_has_payload();
      ::server::TNotificationsRemove* temp = payload_.notifications_remove_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifications_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TNotificationsRemove& Envelope::_internal_notifications_remove() const {
  return _internal_has_notifications_remove()
      ? *payload_.notifications_remove_
      : reinterpret_cast< ::server::TNotificationsRemove&>(::server::_TNotificationsRemove_default_instance_);
}
inline const ::server::TNotificationsRemove& Envelope::notifications_remove() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications_remove)
  return _internal_notifications_remove();
}
inline ::server::TNotificationsRemove* Envelope::unsafe_arena_release_notifications_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.notifications_remove)
  if (_internal_has_notifications_remove()) {
    clear_has_payload();
    ::server::TNotificationsRemove* temp = payload_.notifications_remove_;
    payload_.notifications_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_notifications_remove(::server::TNotificationsRemove* notifications_remove) {
  clear_payload();
  if (notifications_remove) {
    set_has_notifications_remove();
    payload_.notifications_remove_ = notifications_remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.notifications_remove)
}
inline ::server::TNotificationsRemove* Envelope::_internal_mutable_notifications_remove() {
  if (!_internal_has_notifications_remove()) {
    clear_payload();
    set_has_notifications_remove();
    payload_.notifications_remove_ = CreateMaybeMessage< ::server::TNotificationsRemove >(GetArena());
  }
  return payload_.notifications_remove_;
}
inline ::server::TNotificationsRemove* Envelope::mutable_notifications_remove() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications_remove)
  return _internal_mutable_notifications_remove();
}

// .server.TNotifications notifications = 71;
inline bool Envelope::_internal_has_notifications() const {
  return payload_case() == kNotifications;
}
inline bool Envelope::has_notifications() const {
  return _internal_has_notifications();
}
inline void Envelope::set_has_notifications() {
  _oneof_case_[0] = kNotifications;
}
inline void Envelope::clear_notifications() {
  if (_internal_has_notifications()) {
    if (GetArena() == nullptr) {
      delete payload_.notifications_;
    }
    clear_has_payload();
  }
}
inline ::server::TNotifications* Envelope::release_notifications() {
  // @@protoc_insertion_point(field_release:server.Envelope.notifications)
  if (_internal_has_notifications()) {
    clear_has_payload();
      ::server::TNotifications* temp = payload_.notifications_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.notifications_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TNotifications& Envelope::_internal_notifications() const {
  return _internal_has_notifications()
      ? *payload_.notifications_
      : reinterpret_cast< ::server::TNotifications&>(::server::_TNotifications_default_instance_);
}
inline const ::server::TNotifications& Envelope::notifications() const {
  // @@protoc_insertion_point(field_get:server.Envelope.notifications)
  return _internal_notifications();
}
inline ::server::TNotifications* Envelope::unsafe_arena_release_notifications() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.notifications)
  if (_internal_has_notifications()) {
    clear_has_payload();
    ::server::TNotifications* temp = payload_.notifications_;
    payload_.notifications_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_notifications(::server::TNotifications* notifications) {
  clear_payload();
  if (notifications) {
    set_has_notifications();
    payload_.notifications_ = notifications;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.notifications)
}
inline ::server::TNotifications* Envelope::_internal_mutable_notifications() {
  if (!_internal_has_notifications()) {
    clear_payload();
    set_has_notifications();
    payload_.notifications_ = CreateMaybeMessage< ::server::TNotifications >(GetArena());
  }
  return payload_.notifications_;
}
inline ::server::TNotifications* Envelope::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.notifications)
  return _internal_mutable_notifications();
}

// .server.Notifications live_notifications = 72;
inline bool Envelope::_internal_has_live_notifications() const {
  return payload_case() == kLiveNotifications;
}
inline bool Envelope::has_live_notifications() const {
  return _internal_has_live_notifications();
}
inline void Envelope::set_has_live_notifications() {
  _oneof_case_[0] = kLiveNotifications;
}
inline void Envelope::clear_live_notifications() {
  if (_internal_has_live_notifications()) {
    if (GetArena() == nullptr) {
      delete payload_.live_notifications_;
    }
    clear_has_payload();
  }
}
inline ::server::Notifications* Envelope::release_live_notifications() {
  // @@protoc_insertion_point(field_release:server.Envelope.live_notifications)
  if (_internal_has_live_notifications()) {
    clear_has_payload();
      ::server::Notifications* temp = payload_.live_notifications_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.live_notifications_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::Notifications& Envelope::_internal_live_notifications() const {
  return _internal_has_live_notifications()
      ? *payload_.live_notifications_
      : reinterpret_cast< ::server::Notifications&>(::server::_Notifications_default_instance_);
}
inline const ::server::Notifications& Envelope::live_notifications() const {
  // @@protoc_insertion_point(field_get:server.Envelope.live_notifications)
  return _internal_live_notifications();
}
inline ::server::Notifications* Envelope::unsafe_arena_release_live_notifications() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.Envelope.live_notifications)
  if (_internal_has_live_notifications()) {
    clear_has_payload();
    ::server::Notifications* temp = payload_.live_notifications_;
    payload_.live_notifications_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Envelope::unsafe_arena_set_allocated_live_notifications(::server::Notifications* live_notifications) {
  clear_payload();
  if (live_notifications) {
    set_has_live_notifications();
    payload_.live_notifications_ = live_notifications;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Envelope.live_notifications)
}
inline ::server::Notifications* Envelope::_internal_mutable_live_notifications() {
  if (!_internal_has_live_notifications()) {
    clear_payload();
    set_has_live_notifications();
    payload_.live_notifications_ = CreateMaybeMessage< ::server::Notifications >(GetArena());
  }
  return payload_.live_notifications_;
}
inline ::server::Notifications* Envelope::mutable_live_notifications() {
  // @@protoc_insertion_point(field_mutable:server.Envelope.live_notifications)
  return _internal_mutable_live_notifications();
}

inline bool Envelope::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void Envelope::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline Envelope::PayloadCase Envelope::payload_case() const {
  return Envelope::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Logout

// -------------------------------------------------------------------

// TLink

// .server.AuthenticateRequest.Email email = 1;
inline bool TLink::_internal_has_email() const {
  return id_case() == kEmail;
}
inline bool TLink::has_email() const {
  return _internal_has_email();
}
inline void TLink::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void TLink::clear_email() {
  if (_internal_has_email()) {
    if (GetArena() == nullptr) {
      delete id_.email_;
    }
    clear_has_id();
  }
}
inline ::server::AuthenticateRequest_Email* TLink::release_email() {
  // @@protoc_insertion_point(field_release:server.TLink.email)
  if (_internal_has_email()) {
    clear_has_id();
      ::server::AuthenticateRequest_Email* temp = id_.email_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_.email_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::AuthenticateRequest_Email& TLink::_internal_email() const {
  return _internal_has_email()
      ? *id_.email_
      : reinterpret_cast< ::server::AuthenticateRequest_Email&>(::server::_AuthenticateRequest_Email_default_instance_);
}
inline const ::server::AuthenticateRequest_Email& TLink::email() const {
  // @@protoc_insertion_point(field_get:server.TLink.email)
  return _internal_email();
}
inline ::server::AuthenticateRequest_Email* TLink::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.TLink.email)
  if (_internal_has_email()) {
    clear_has_id();
    ::server::AuthenticateRequest_Email* temp = id_.email_;
    id_.email_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TLink::unsafe_arena_set_allocated_email(::server::AuthenticateRequest_Email* email) {
  clear_id();
  if (email) {
    set_has_email();
    id_.email_ = email;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TLink.email)
}
inline ::server::AuthenticateRequest_Email* TLink::_internal_mutable_email() {
  if (!_internal_has_email()) {
    clear_id();
    set_has_email();
    id_.email_ = CreateMaybeMessage< ::server::AuthenticateRequest_Email >(GetArena());
  }
  return id_.email_;
}
inline ::server::AuthenticateRequest_Email* TLink::mutable_email() {
  // @@protoc_insertion_point(field_mutable:server.TLink.email)
  return _internal_mutable_email();
}

// string facebook = 2;
inline bool TLink::_internal_has_facebook() const {
  return id_case() == kFacebook;
}
inline void TLink::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
inline void TLink::clear_facebook() {
  if (_internal_has_facebook()) {
    id_.facebook_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TLink::facebook() const {
  // @@protoc_insertion_point(field_get:server.TLink.facebook)
  return _internal_facebook();
}
inline void TLink::set_facebook(const std::string& value) {
  _internal_set_facebook(value);
  // @@protoc_insertion_point(field_set:server.TLink.facebook)
}
inline std::string* TLink::mutable_facebook() {
  // @@protoc_insertion_point(field_mutable:server.TLink.facebook)
  return _internal_mutable_facebook();
}
inline const std::string& TLink::_internal_facebook() const {
  if (_internal_has_facebook()) {
    return id_.facebook_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::_internal_set_facebook(const std::string& value) {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLink::set_facebook(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLink.facebook)
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLink.facebook)
}
inline void TLink::set_facebook(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLink.facebook)
}
inline void TLink::set_facebook(const char* value,
                             size_t size) {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLink.facebook)
}
inline std::string* TLink::_internal_mutable_facebook() {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.facebook_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLink::release_facebook() {
  // @@protoc_insertion_point(field_release:server.TLink.facebook)
  if (_internal_has_facebook()) {
    clear_has_id();
    return id_.facebook_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLink::set_allocated_facebook(std::string* facebook) {
  if (has_id()) {
    clear_id();
  }
  if (facebook != nullptr) {
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(facebook);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(facebook);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.facebook)
}

// string google = 3;
inline bool TLink::_internal_has_google() const {
  return id_case() == kGoogle;
}
inline void TLink::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
inline void TLink::clear_google() {
  if (_internal_has_google()) {
    id_.google_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TLink::google() const {
  // @@protoc_insertion_point(field_get:server.TLink.google)
  return _internal_google();
}
inline void TLink::set_google(const std::string& value) {
  _internal_set_google(value);
  // @@protoc_insertion_point(field_set:server.TLink.google)
}
inline std::string* TLink::mutable_google() {
  // @@protoc_insertion_point(field_mutable:server.TLink.google)
  return _internal_mutable_google();
}
inline const std::string& TLink::_internal_google() const {
  if (_internal_has_google()) {
    return id_.google_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::_internal_set_google(const std::string& value) {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLink::set_google(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLink.google)
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLink.google)
}
inline void TLink::set_google(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLink.google)
}
inline void TLink::set_google(const char* value,
                             size_t size) {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLink.google)
}
inline std::string* TLink::_internal_mutable_google() {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.google_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLink::release_google() {
  // @@protoc_insertion_point(field_release:server.TLink.google)
  if (_internal_has_google()) {
    clear_has_id();
    return id_.google_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLink::set_allocated_google(std::string* google) {
  if (has_id()) {
    clear_id();
  }
  if (google != nullptr) {
    set_has_google();
    id_.google_.UnsafeSetDefault(google);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(google);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.google)
}

// .server.AuthenticateRequest.GameCenter game_center = 4;
inline bool TLink::_internal_has_game_center() const {
  return id_case() == kGameCenter;
}
inline bool TLink::has_game_center() const {
  return _internal_has_game_center();
}
inline void TLink::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
inline void TLink::clear_game_center() {
  if (_internal_has_game_center()) {
    if (GetArena() == nullptr) {
      delete id_.game_center_;
    }
    clear_has_id();
  }
}
inline ::server::AuthenticateRequest_GameCenter* TLink::release_game_center() {
  // @@protoc_insertion_point(field_release:server.TLink.game_center)
  if (_internal_has_game_center()) {
    clear_has_id();
      ::server::AuthenticateRequest_GameCenter* temp = id_.game_center_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_.game_center_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::AuthenticateRequest_GameCenter& TLink::_internal_game_center() const {
  return _internal_has_game_center()
      ? *id_.game_center_
      : reinterpret_cast< ::server::AuthenticateRequest_GameCenter&>(::server::_AuthenticateRequest_GameCenter_default_instance_);
}
inline const ::server::AuthenticateRequest_GameCenter& TLink::game_center() const {
  // @@protoc_insertion_point(field_get:server.TLink.game_center)
  return _internal_game_center();
}
inline ::server::AuthenticateRequest_GameCenter* TLink::unsafe_arena_release_game_center() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.TLink.game_center)
  if (_internal_has_game_center()) {
    clear_has_id();
    ::server::AuthenticateRequest_GameCenter* temp = id_.game_center_;
    id_.game_center_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TLink::unsafe_arena_set_allocated_game_center(::server::AuthenticateRequest_GameCenter* game_center) {
  clear_id();
  if (game_center) {
    set_has_game_center();
    id_.game_center_ = game_center;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TLink.game_center)
}
inline ::server::AuthenticateRequest_GameCenter* TLink::_internal_mutable_game_center() {
  if (!_internal_has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_ = CreateMaybeMessage< ::server::AuthenticateRequest_GameCenter >(GetArena());
  }
  return id_.game_center_;
}
inline ::server::AuthenticateRequest_GameCenter* TLink::mutable_game_center() {
  // @@protoc_insertion_point(field_mutable:server.TLink.game_center)
  return _internal_mutable_game_center();
}

// string steam = 5;
inline bool TLink::_internal_has_steam() const {
  return id_case() == kSteam;
}
inline void TLink::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
inline void TLink::clear_steam() {
  if (_internal_has_steam()) {
    id_.steam_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TLink::steam() const {
  // @@protoc_insertion_point(field_get:server.TLink.steam)
  return _internal_steam();
}
inline void TLink::set_steam(const std::string& value) {
  _internal_set_steam(value);
  // @@protoc_insertion_point(field_set:server.TLink.steam)
}
inline std::string* TLink::mutable_steam() {
  // @@protoc_insertion_point(field_mutable:server.TLink.steam)
  return _internal_mutable_steam();
}
inline const std::string& TLink::_internal_steam() const {
  if (_internal_has_steam()) {
    return id_.steam_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::_internal_set_steam(const std::string& value) {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLink::set_steam(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLink.steam)
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLink.steam)
}
inline void TLink::set_steam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLink.steam)
}
inline void TLink::set_steam(const char* value,
                             size_t size) {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLink.steam)
}
inline std::string* TLink::_internal_mutable_steam() {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.steam_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLink::release_steam() {
  // @@protoc_insertion_point(field_release:server.TLink.steam)
  if (_internal_has_steam()) {
    clear_has_id();
    return id_.steam_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLink::set_allocated_steam(std::string* steam) {
  if (has_id()) {
    clear_id();
  }
  if (steam != nullptr) {
    set_has_steam();
    id_.steam_.UnsafeSetDefault(steam);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(steam);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.steam)
}

// string device = 6;
inline bool TLink::_internal_has_device() const {
  return id_case() == kDevice;
}
inline void TLink::set_has_device() {
  _oneof_case_[0] = kDevice;
}
inline void TLink::clear_device() {
  if (_internal_has_device()) {
    id_.device_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TLink::device() const {
  // @@protoc_insertion_point(field_get:server.TLink.device)
  return _internal_device();
}
inline void TLink::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:server.TLink.device)
}
inline std::string* TLink::mutable_device() {
  // @@protoc_insertion_point(field_mutable:server.TLink.device)
  return _internal_mutable_device();
}
inline const std::string& TLink::_internal_device() const {
  if (_internal_has_device()) {
    return id_.device_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::_internal_set_device(const std::string& value) {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLink::set_device(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLink.device)
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLink.device)
}
inline void TLink::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLink.device)
}
inline void TLink::set_device(const char* value,
                             size_t size) {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLink.device)
}
inline std::string* TLink::_internal_mutable_device() {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.device_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLink::release_device() {
  // @@protoc_insertion_point(field_release:server.TLink.device)
  if (_internal_has_device()) {
    clear_has_id();
    return id_.device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLink::set_allocated_device(std::string* device) {
  if (has_id()) {
    clear_id();
  }
  if (device != nullptr) {
    set_has_device();
    id_.device_.UnsafeSetDefault(device);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(device);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.device)
}

// string custom = 7;
inline bool TLink::_internal_has_custom() const {
  return id_case() == kCustom;
}
inline void TLink::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void TLink::clear_custom() {
  if (_internal_has_custom()) {
    id_.custom_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TLink::custom() const {
  // @@protoc_insertion_point(field_get:server.TLink.custom)
  return _internal_custom();
}
inline void TLink::set_custom(const std::string& value) {
  _internal_set_custom(value);
  // @@protoc_insertion_point(field_set:server.TLink.custom)
}
inline std::string* TLink::mutable_custom() {
  // @@protoc_insertion_point(field_mutable:server.TLink.custom)
  return _internal_mutable_custom();
}
inline const std::string& TLink::_internal_custom() const {
  if (_internal_has_custom()) {
    return id_.custom_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLink::_internal_set_custom(const std::string& value) {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLink::set_custom(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLink.custom)
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLink.custom)
}
inline void TLink::set_custom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLink.custom)
}
inline void TLink::set_custom(const char* value,
                             size_t size) {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLink.custom)
}
inline std::string* TLink::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.custom_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLink::release_custom() {
  // @@protoc_insertion_point(field_release:server.TLink.custom)
  if (_internal_has_custom()) {
    clear_has_id();
    return id_.custom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLink::set_allocated_custom(std::string* custom) {
  if (has_id()) {
    clear_id();
  }
  if (custom != nullptr) {
    set_has_custom();
    id_.custom_.UnsafeSetDefault(custom);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(custom);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLink.custom)
}

inline bool TLink::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TLink::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TLink::IdCase TLink::id_case() const {
  return TLink::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TUnlink

// string email = 1;
inline bool TUnlink::_internal_has_email() const {
  return id_case() == kEmail;
}
inline void TUnlink::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void TUnlink::clear_email() {
  if (_internal_has_email()) {
    id_.email_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUnlink::email() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.email)
  return _internal_email();
}
inline void TUnlink::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:server.TUnlink.email)
}
inline std::string* TUnlink::mutable_email() {
  // @@protoc_insertion_point(field_mutable:server.TUnlink.email)
  return _internal_mutable_email();
}
inline const std::string& TUnlink::_internal_email() const {
  if (_internal_has_email()) {
    return id_.email_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::_internal_set_email(const std::string& value) {
  if (!_internal_has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUnlink::set_email(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.email)
  if (!_internal_has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUnlink.email)
}
inline void TUnlink::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUnlink.email)
}
inline void TUnlink::set_email(const char* value,
                             size_t size) {
  if (!_internal_has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.email_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.email)
}
inline std::string* TUnlink::_internal_mutable_email() {
  if (!_internal_has_email()) {
    clear_id();
    set_has_email();
    id_.email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUnlink::release_email() {
  // @@protoc_insertion_point(field_release:server.TUnlink.email)
  if (_internal_has_email()) {
    clear_has_id();
    return id_.email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUnlink::set_allocated_email(std::string* email) {
  if (has_id()) {
    clear_id();
  }
  if (email != nullptr) {
    set_has_email();
    id_.email_.UnsafeSetDefault(email);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(email);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.email)
}

// string facebook = 2;
inline bool TUnlink::_internal_has_facebook() const {
  return id_case() == kFacebook;
}
inline void TUnlink::set_has_facebook() {
  _oneof_case_[0] = kFacebook;
}
inline void TUnlink::clear_facebook() {
  if (_internal_has_facebook()) {
    id_.facebook_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUnlink::facebook() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.facebook)
  return _internal_facebook();
}
inline void TUnlink::set_facebook(const std::string& value) {
  _internal_set_facebook(value);
  // @@protoc_insertion_point(field_set:server.TUnlink.facebook)
}
inline std::string* TUnlink::mutable_facebook() {
  // @@protoc_insertion_point(field_mutable:server.TUnlink.facebook)
  return _internal_mutable_facebook();
}
inline const std::string& TUnlink::_internal_facebook() const {
  if (_internal_has_facebook()) {
    return id_.facebook_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::_internal_set_facebook(const std::string& value) {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUnlink::set_facebook(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.facebook)
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUnlink.facebook)
}
inline void TUnlink::set_facebook(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUnlink.facebook)
}
inline void TUnlink::set_facebook(const char* value,
                             size_t size) {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.facebook_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.facebook)
}
inline std::string* TUnlink::_internal_mutable_facebook() {
  if (!_internal_has_facebook()) {
    clear_id();
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.facebook_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUnlink::release_facebook() {
  // @@protoc_insertion_point(field_release:server.TUnlink.facebook)
  if (_internal_has_facebook()) {
    clear_has_id();
    return id_.facebook_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUnlink::set_allocated_facebook(std::string* facebook) {
  if (has_id()) {
    clear_id();
  }
  if (facebook != nullptr) {
    set_has_facebook();
    id_.facebook_.UnsafeSetDefault(facebook);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(facebook);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.facebook)
}

// string google = 3;
inline bool TUnlink::_internal_has_google() const {
  return id_case() == kGoogle;
}
inline void TUnlink::set_has_google() {
  _oneof_case_[0] = kGoogle;
}
inline void TUnlink::clear_google() {
  if (_internal_has_google()) {
    id_.google_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUnlink::google() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.google)
  return _internal_google();
}
inline void TUnlink::set_google(const std::string& value) {
  _internal_set_google(value);
  // @@protoc_insertion_point(field_set:server.TUnlink.google)
}
inline std::string* TUnlink::mutable_google() {
  // @@protoc_insertion_point(field_mutable:server.TUnlink.google)
  return _internal_mutable_google();
}
inline const std::string& TUnlink::_internal_google() const {
  if (_internal_has_google()) {
    return id_.google_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::_internal_set_google(const std::string& value) {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUnlink::set_google(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.google)
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUnlink.google)
}
inline void TUnlink::set_google(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUnlink.google)
}
inline void TUnlink::set_google(const char* value,
                             size_t size) {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.google_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.google)
}
inline std::string* TUnlink::_internal_mutable_google() {
  if (!_internal_has_google()) {
    clear_id();
    set_has_google();
    id_.google_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.google_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUnlink::release_google() {
  // @@protoc_insertion_point(field_release:server.TUnlink.google)
  if (_internal_has_google()) {
    clear_has_id();
    return id_.google_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUnlink::set_allocated_google(std::string* google) {
  if (has_id()) {
    clear_id();
  }
  if (google != nullptr) {
    set_has_google();
    id_.google_.UnsafeSetDefault(google);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(google);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.google)
}

// string game_center = 4;
inline bool TUnlink::_internal_has_game_center() const {
  return id_case() == kGameCenter;
}
inline void TUnlink::set_has_game_center() {
  _oneof_case_[0] = kGameCenter;
}
inline void TUnlink::clear_game_center() {
  if (_internal_has_game_center()) {
    id_.game_center_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUnlink::game_center() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.game_center)
  return _internal_game_center();
}
inline void TUnlink::set_game_center(const std::string& value) {
  _internal_set_game_center(value);
  // @@protoc_insertion_point(field_set:server.TUnlink.game_center)
}
inline std::string* TUnlink::mutable_game_center() {
  // @@protoc_insertion_point(field_mutable:server.TUnlink.game_center)
  return _internal_mutable_game_center();
}
inline const std::string& TUnlink::_internal_game_center() const {
  if (_internal_has_game_center()) {
    return id_.game_center_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::_internal_set_game_center(const std::string& value) {
  if (!_internal_has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUnlink::set_game_center(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.game_center)
  if (!_internal_has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUnlink.game_center)
}
inline void TUnlink::set_game_center(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUnlink.game_center)
}
inline void TUnlink::set_game_center(const char* value,
                             size_t size) {
  if (!_internal_has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.game_center_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.game_center)
}
inline std::string* TUnlink::_internal_mutable_game_center() {
  if (!_internal_has_game_center()) {
    clear_id();
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.game_center_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUnlink::release_game_center() {
  // @@protoc_insertion_point(field_release:server.TUnlink.game_center)
  if (_internal_has_game_center()) {
    clear_has_id();
    return id_.game_center_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUnlink::set_allocated_game_center(std::string* game_center) {
  if (has_id()) {
    clear_id();
  }
  if (game_center != nullptr) {
    set_has_game_center();
    id_.game_center_.UnsafeSetDefault(game_center);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(game_center);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.game_center)
}

// string steam = 5;
inline bool TUnlink::_internal_has_steam() const {
  return id_case() == kSteam;
}
inline void TUnlink::set_has_steam() {
  _oneof_case_[0] = kSteam;
}
inline void TUnlink::clear_steam() {
  if (_internal_has_steam()) {
    id_.steam_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUnlink::steam() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.steam)
  return _internal_steam();
}
inline void TUnlink::set_steam(const std::string& value) {
  _internal_set_steam(value);
  // @@protoc_insertion_point(field_set:server.TUnlink.steam)
}
inline std::string* TUnlink::mutable_steam() {
  // @@protoc_insertion_point(field_mutable:server.TUnlink.steam)
  return _internal_mutable_steam();
}
inline const std::string& TUnlink::_internal_steam() const {
  if (_internal_has_steam()) {
    return id_.steam_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::_internal_set_steam(const std::string& value) {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUnlink::set_steam(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.steam)
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUnlink.steam)
}
inline void TUnlink::set_steam(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUnlink.steam)
}
inline void TUnlink::set_steam(const char* value,
                             size_t size) {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.steam_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.steam)
}
inline std::string* TUnlink::_internal_mutable_steam() {
  if (!_internal_has_steam()) {
    clear_id();
    set_has_steam();
    id_.steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.steam_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUnlink::release_steam() {
  // @@protoc_insertion_point(field_release:server.TUnlink.steam)
  if (_internal_has_steam()) {
    clear_has_id();
    return id_.steam_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUnlink::set_allocated_steam(std::string* steam) {
  if (has_id()) {
    clear_id();
  }
  if (steam != nullptr) {
    set_has_steam();
    id_.steam_.UnsafeSetDefault(steam);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(steam);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.steam)
}

// string device = 6;
inline bool TUnlink::_internal_has_device() const {
  return id_case() == kDevice;
}
inline void TUnlink::set_has_device() {
  _oneof_case_[0] = kDevice;
}
inline void TUnlink::clear_device() {
  if (_internal_has_device()) {
    id_.device_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUnlink::device() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.device)
  return _internal_device();
}
inline void TUnlink::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:server.TUnlink.device)
}
inline std::string* TUnlink::mutable_device() {
  // @@protoc_insertion_point(field_mutable:server.TUnlink.device)
  return _internal_mutable_device();
}
inline const std::string& TUnlink::_internal_device() const {
  if (_internal_has_device()) {
    return id_.device_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::_internal_set_device(const std::string& value) {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUnlink::set_device(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.device)
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUnlink.device)
}
inline void TUnlink::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUnlink.device)
}
inline void TUnlink::set_device(const char* value,
                             size_t size) {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.device_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.device)
}
inline std::string* TUnlink::_internal_mutable_device() {
  if (!_internal_has_device()) {
    clear_id();
    set_has_device();
    id_.device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.device_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUnlink::release_device() {
  // @@protoc_insertion_point(field_release:server.TUnlink.device)
  if (_internal_has_device()) {
    clear_has_id();
    return id_.device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUnlink::set_allocated_device(std::string* device) {
  if (has_id()) {
    clear_id();
  }
  if (device != nullptr) {
    set_has_device();
    id_.device_.UnsafeSetDefault(device);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(device);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.device)
}

// string custom = 7;
inline bool TUnlink::_internal_has_custom() const {
  return id_case() == kCustom;
}
inline void TUnlink::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void TUnlink::clear_custom() {
  if (_internal_has_custom()) {
    id_.custom_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUnlink::custom() const {
  // @@protoc_insertion_point(field_get:server.TUnlink.custom)
  return _internal_custom();
}
inline void TUnlink::set_custom(const std::string& value) {
  _internal_set_custom(value);
  // @@protoc_insertion_point(field_set:server.TUnlink.custom)
}
inline std::string* TUnlink::mutable_custom() {
  // @@protoc_insertion_point(field_mutable:server.TUnlink.custom)
  return _internal_mutable_custom();
}
inline const std::string& TUnlink::_internal_custom() const {
  if (_internal_has_custom()) {
    return id_.custom_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUnlink::_internal_set_custom(const std::string& value) {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUnlink::set_custom(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUnlink.custom)
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUnlink.custom)
}
inline void TUnlink::set_custom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUnlink.custom)
}
inline void TUnlink::set_custom(const char* value,
                             size_t size) {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.custom_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUnlink.custom)
}
inline std::string* TUnlink::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_id();
    set_has_custom();
    id_.custom_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.custom_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUnlink::release_custom() {
  // @@protoc_insertion_point(field_release:server.TUnlink.custom)
  if (_internal_has_custom()) {
    clear_has_id();
    return id_.custom_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUnlink::set_allocated_custom(std::string* custom) {
  if (has_id()) {
    clear_id();
  }
  if (custom != nullptr) {
    set_has_custom();
    id_.custom_.UnsafeSetDefault(custom);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(custom);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUnlink.custom)
}

inline bool TUnlink::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TUnlink::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TUnlink::IdCase TUnlink::id_case() const {
  return TUnlink::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// User

// string id = 1;
inline void User::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::id() const {
  // @@protoc_insertion_point(field_get:server.User.id)
  return _internal_id();
}
inline void User::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:server.User.id)
}
inline std::string* User::mutable_id() {
  // @@protoc_insertion_point(field_mutable:server.User.id)
  return _internal_mutable_id();
}
inline const std::string& User::_internal_id() const {
  return id_.Get();
}
inline void User::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.User.id)
}
inline void User::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.User.id)
}
inline void User::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.User.id)
}
inline std::string* User::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:server.User.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.User.id)
}

// string handle = 2;
inline void User::clear_handle() {
  handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::handle() const {
  // @@protoc_insertion_point(field_get:server.User.handle)
  return _internal_handle();
}
inline void User::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:server.User.handle)
}
inline std::string* User::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:server.User.handle)
  return _internal_mutable_handle();
}
inline const std::string& User::_internal_handle() const {
  return handle_.Get();
}
inline void User::_internal_set_handle(const std::string& value) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_handle(std::string&& value) {
  
  handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.User.handle)
}
inline void User::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.User.handle)
}
inline void User::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.User.handle)
}
inline std::string* User::_internal_mutable_handle() {
  
  return handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_handle() {
  // @@protoc_insertion_point(field_release:server.User.handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.User.handle)
}

// string fullname = 3;
inline void User::clear_fullname() {
  fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::fullname() const {
  // @@protoc_insertion_point(field_get:server.User.fullname)
  return _internal_fullname();
}
inline void User::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:server.User.fullname)
}
inline std::string* User::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:server.User.fullname)
  return _internal_mutable_fullname();
}
inline const std::string& User::_internal_fullname() const {
  return fullname_.Get();
}
inline void User::_internal_set_fullname(const std::string& value) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_fullname(std::string&& value) {
  
  fullname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.User.fullname)
}
inline void User::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.User.fullname)
}
inline void User::set_fullname(const char* value,
    size_t size) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.User.fullname)
}
inline std::string* User::_internal_mutable_fullname() {
  
  return fullname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_fullname() {
  // @@protoc_insertion_point(field_release:server.User.fullname)
  return fullname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.User.fullname)
}

// string avatar_url = 4;
inline void User::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.User.avatar_url)
  return _internal_avatar_url();
}
inline void User::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:server.User.avatar_url)
}
inline std::string* User::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:server.User.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& User::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void User::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.User.avatar_url)
}
inline void User::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.User.avatar_url)
}
inline void User::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.User.avatar_url)
}
inline std::string* User::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.User.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.User.avatar_url)
}

// string lang = 5;
inline void User::clear_lang() {
  lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::lang() const {
  // @@protoc_insertion_point(field_get:server.User.lang)
  return _internal_lang();
}
inline void User::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:server.User.lang)
}
inline std::string* User::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:server.User.lang)
  return _internal_mutable_lang();
}
inline const std::string& User::_internal_lang() const {
  return lang_.Get();
}
inline void User::_internal_set_lang(const std::string& value) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_lang(std::string&& value) {
  
  lang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.User.lang)
}
inline void User::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.User.lang)
}
inline void User::set_lang(const char* value,
    size_t size) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.User.lang)
}
inline std::string* User::_internal_mutable_lang() {
  
  return lang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_lang() {
  // @@protoc_insertion_point(field_release:server.User.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.User.lang)
}

// string location = 6;
inline void User::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::location() const {
  // @@protoc_insertion_point(field_get:server.User.location)
  return _internal_location();
}
inline void User::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:server.User.location)
}
inline std::string* User::mutable_location() {
  // @@protoc_insertion_point(field_mutable:server.User.location)
  return _internal_mutable_location();
}
inline const std::string& User::_internal_location() const {
  return location_.Get();
}
inline void User::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.User.location)
}
inline void User::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.User.location)
}
inline void User::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.User.location)
}
inline std::string* User::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_location() {
  // @@protoc_insertion_point(field_release:server.User.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.User.location)
}

// string timezone = 7;
inline void User::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::timezone() const {
  // @@protoc_insertion_point(field_get:server.User.timezone)
  return _internal_timezone();
}
inline void User::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:server.User.timezone)
}
inline std::string* User::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:server.User.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& User::_internal_timezone() const {
  return timezone_.Get();
}
inline void User::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_timezone(std::string&& value) {
  
  timezone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.User.timezone)
}
inline void User::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.User.timezone)
}
inline void User::set_timezone(const char* value,
    size_t size) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.User.timezone)
}
inline std::string* User::_internal_mutable_timezone() {
  
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_timezone() {
  // @@protoc_insertion_point(field_release:server.User.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.User.timezone)
}

// string metadata = 8;
inline void User::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::metadata() const {
  // @@protoc_insertion_point(field_get:server.User.metadata)
  return _internal_metadata();
}
inline void User::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:server.User.metadata)
}
inline std::string* User::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:server.User.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& User::_internal_metadata() const {
  return metadata_.Get();
}
inline void User::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.User.metadata)
}
inline void User::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.User.metadata)
}
inline void User::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.User.metadata)
}
inline std::string* User::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_metadata() {
  // @@protoc_insertion_point(field_release:server.User.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.User.metadata)
}

// int64 created_at = 9;
inline void User::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::created_at() const {
  // @@protoc_insertion_point(field_get:server.User.created_at)
  return _internal_created_at();
}
inline void User::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void User::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:server.User.created_at)
}

// int64 updated_at = 10;
inline void User::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::updated_at() const {
  // @@protoc_insertion_point(field_get:server.User.updated_at)
  return _internal_updated_at();
}
inline void User::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updated_at_ = value;
}
inline void User::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:server.User.updated_at)
}

// int64 last_online_at = 11;
inline void User::clear_last_online_at() {
  last_online_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::_internal_last_online_at() const {
  return last_online_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 User::last_online_at() const {
  // @@protoc_insertion_point(field_get:server.User.last_online_at)
  return _internal_last_online_at();
}
inline void User::_internal_set_last_online_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_online_at_ = value;
}
inline void User::set_last_online_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_online_at(value);
  // @@protoc_insertion_point(field_set:server.User.last_online_at)
}

// -------------------------------------------------------------------

// Self

// .server.User user = 1;
inline bool Self::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Self::has_user() const {
  return _internal_has_user();
}
inline void Self::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::server::User& Self::_internal_user() const {
  const ::server::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::User&>(
      ::server::_User_default_instance_);
}
inline const ::server::User& Self::user() const {
  // @@protoc_insertion_point(field_get:server.Self.user)
  return _internal_user();
}
inline void Self::unsafe_arena_set_allocated_user(
    ::server::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Self.user)
}
inline ::server::User* Self::release_user() {
  
  ::server::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::User* Self::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:server.Self.user)
  
  ::server::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::server::User* Self::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::server::User* Self::mutable_user() {
  // @@protoc_insertion_point(field_mutable:server.Self.user)
  return _internal_mutable_user();
}
inline void Self::set_allocated_user(::server::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:server.Self.user)
}

// bool verified = 2;
inline void Self::clear_verified() {
  verified_ = false;
}
inline bool Self::_internal_verified() const {
  return verified_;
}
inline bool Self::verified() const {
  // @@protoc_insertion_point(field_get:server.Self.verified)
  return _internal_verified();
}
inline void Self::_internal_set_verified(bool value) {
  
  verified_ = value;
}
inline void Self::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:server.Self.verified)
}

// string email = 3;
inline void Self::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Self::email() const {
  // @@protoc_insertion_point(field_get:server.Self.email)
  return _internal_email();
}
inline void Self::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:server.Self.email)
}
inline std::string* Self::mutable_email() {
  // @@protoc_insertion_point(field_mutable:server.Self.email)
  return _internal_mutable_email();
}
inline const std::string& Self::_internal_email() const {
  return email_.Get();
}
inline void Self::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Self::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Self.email)
}
inline void Self::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Self.email)
}
inline void Self::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Self.email)
}
inline std::string* Self::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Self::release_email() {
  // @@protoc_insertion_point(field_release:server.Self.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Self::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Self.email)
}

// repeated string device_ids = 4;
inline int Self::_internal_device_ids_size() const {
  return device_ids_.size();
}
inline int Self::device_ids_size() const {
  return _internal_device_ids_size();
}
inline void Self::clear_device_ids() {
  device_ids_.Clear();
}
inline std::string* Self::add_device_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.Self.device_ids)
  return _internal_add_device_ids();
}
inline const std::string& Self::_internal_device_ids(int index) const {
  return device_ids_.Get(index);
}
inline const std::string& Self::device_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.Self.device_ids)
  return _internal_device_ids(index);
}
inline std::string* Self::mutable_device_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.Self.device_ids)
  return device_ids_.Mutable(index);
}
inline void Self::set_device_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.Self.device_ids)
  device_ids_.Mutable(index)->assign(value);
}
inline void Self::set_device_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.Self.device_ids)
  device_ids_.Mutable(index)->assign(std::move(value));
}
inline void Self::set_device_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.Self.device_ids)
}
inline void Self::set_device_ids(int index, const char* value, size_t size) {
  device_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.Self.device_ids)
}
inline std::string* Self::_internal_add_device_ids() {
  return device_ids_.Add();
}
inline void Self::add_device_ids(const std::string& value) {
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.Self.device_ids)
}
inline void Self::add_device_ids(std::string&& value) {
  device_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.Self.device_ids)
}
inline void Self::add_device_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.Self.device_ids)
}
inline void Self::add_device_ids(const char* value, size_t size) {
  device_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.Self.device_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Self::device_ids() const {
  // @@protoc_insertion_point(field_list:server.Self.device_ids)
  return device_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Self::mutable_device_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.Self.device_ids)
  return &device_ids_;
}

// string facebook_id = 5;
inline void Self::clear_facebook_id() {
  facebook_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Self::facebook_id() const {
  // @@protoc_insertion_point(field_get:server.Self.facebook_id)
  return _internal_facebook_id();
}
inline void Self::set_facebook_id(const std::string& value) {
  _internal_set_facebook_id(value);
  // @@protoc_insertion_point(field_set:server.Self.facebook_id)
}
inline std::string* Self::mutable_facebook_id() {
  // @@protoc_insertion_point(field_mutable:server.Self.facebook_id)
  return _internal_mutable_facebook_id();
}
inline const std::string& Self::_internal_facebook_id() const {
  return facebook_id_.Get();
}
inline void Self::_internal_set_facebook_id(const std::string& value) {
  
  facebook_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Self::set_facebook_id(std::string&& value) {
  
  facebook_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Self.facebook_id)
}
inline void Self::set_facebook_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  facebook_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Self.facebook_id)
}
inline void Self::set_facebook_id(const char* value,
    size_t size) {
  
  facebook_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Self.facebook_id)
}
inline std::string* Self::_internal_mutable_facebook_id() {
  
  return facebook_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Self::release_facebook_id() {
  // @@protoc_insertion_point(field_release:server.Self.facebook_id)
  return facebook_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Self::set_allocated_facebook_id(std::string* facebook_id) {
  if (facebook_id != nullptr) {
    
  } else {
    
  }
  facebook_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), facebook_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Self.facebook_id)
}

// string google_id = 6;
inline void Self::clear_google_id() {
  google_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Self::google_id() const {
  // @@protoc_insertion_point(field_get:server.Self.google_id)
  return _internal_google_id();
}
inline void Self::set_google_id(const std::string& value) {
  _internal_set_google_id(value);
  // @@protoc_insertion_point(field_set:server.Self.google_id)
}
inline std::string* Self::mutable_google_id() {
  // @@protoc_insertion_point(field_mutable:server.Self.google_id)
  return _internal_mutable_google_id();
}
inline const std::string& Self::_internal_google_id() const {
  return google_id_.Get();
}
inline void Self::_internal_set_google_id(const std::string& value) {
  
  google_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Self::set_google_id(std::string&& value) {
  
  google_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Self.google_id)
}
inline void Self::set_google_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  google_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Self.google_id)
}
inline void Self::set_google_id(const char* value,
    size_t size) {
  
  google_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Self.google_id)
}
inline std::string* Self::_internal_mutable_google_id() {
  
  return google_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Self::release_google_id() {
  // @@protoc_insertion_point(field_release:server.Self.google_id)
  return google_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Self::set_allocated_google_id(std::string* google_id) {
  if (google_id != nullptr) {
    
  } else {
    
  }
  google_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), google_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Self.google_id)
}

// string gamecenter_id = 7;
inline void Self::clear_gamecenter_id() {
  gamecenter_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Self::gamecenter_id() const {
  // @@protoc_insertion_point(field_get:server.Self.gamecenter_id)
  return _internal_gamecenter_id();
}
inline void Self::set_gamecenter_id(const std::string& value) {
  _internal_set_gamecenter_id(value);
  // @@protoc_insertion_point(field_set:server.Self.gamecenter_id)
}
inline std::string* Self::mutable_gamecenter_id() {
  // @@protoc_insertion_point(field_mutable:server.Self.gamecenter_id)
  return _internal_mutable_gamecenter_id();
}
inline const std::string& Self::_internal_gamecenter_id() const {
  return gamecenter_id_.Get();
}
inline void Self::_internal_set_gamecenter_id(const std::string& value) {
  
  gamecenter_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Self::set_gamecenter_id(std::string&& value) {
  
  gamecenter_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Self.gamecenter_id)
}
inline void Self::set_gamecenter_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gamecenter_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Self.gamecenter_id)
}
inline void Self::set_gamecenter_id(const char* value,
    size_t size) {
  
  gamecenter_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Self.gamecenter_id)
}
inline std::string* Self::_internal_mutable_gamecenter_id() {
  
  return gamecenter_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Self::release_gamecenter_id() {
  // @@protoc_insertion_point(field_release:server.Self.gamecenter_id)
  return gamecenter_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Self::set_allocated_gamecenter_id(std::string* gamecenter_id) {
  if (gamecenter_id != nullptr) {
    
  } else {
    
  }
  gamecenter_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamecenter_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Self.gamecenter_id)
}

// string steam_id = 8;
inline void Self::clear_steam_id() {
  steam_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Self::steam_id() const {
  // @@protoc_insertion_point(field_get:server.Self.steam_id)
  return _internal_steam_id();
}
inline void Self::set_steam_id(const std::string& value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:server.Self.steam_id)
}
inline std::string* Self::mutable_steam_id() {
  // @@protoc_insertion_point(field_mutable:server.Self.steam_id)
  return _internal_mutable_steam_id();
}
inline const std::string& Self::_internal_steam_id() const {
  return steam_id_.Get();
}
inline void Self::_internal_set_steam_id(const std::string& value) {
  
  steam_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Self::set_steam_id(std::string&& value) {
  
  steam_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Self.steam_id)
}
inline void Self::set_steam_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  steam_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Self.steam_id)
}
inline void Self::set_steam_id(const char* value,
    size_t size) {
  
  steam_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Self.steam_id)
}
inline std::string* Self::_internal_mutable_steam_id() {
  
  return steam_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Self::release_steam_id() {
  // @@protoc_insertion_point(field_release:server.Self.steam_id)
  return steam_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Self::set_allocated_steam_id(std::string* steam_id) {
  if (steam_id != nullptr) {
    
  } else {
    
  }
  steam_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), steam_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Self.steam_id)
}

// string custom_id = 9;
inline void Self::clear_custom_id() {
  custom_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Self::custom_id() const {
  // @@protoc_insertion_point(field_get:server.Self.custom_id)
  return _internal_custom_id();
}
inline void Self::set_custom_id(const std::string& value) {
  _internal_set_custom_id(value);
  // @@protoc_insertion_point(field_set:server.Self.custom_id)
}
inline std::string* Self::mutable_custom_id() {
  // @@protoc_insertion_point(field_mutable:server.Self.custom_id)
  return _internal_mutable_custom_id();
}
inline const std::string& Self::_internal_custom_id() const {
  return custom_id_.Get();
}
inline void Self::_internal_set_custom_id(const std::string& value) {
  
  custom_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Self::set_custom_id(std::string&& value) {
  
  custom_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Self.custom_id)
}
inline void Self::set_custom_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  custom_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Self.custom_id)
}
inline void Self::set_custom_id(const char* value,
    size_t size) {
  
  custom_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Self.custom_id)
}
inline std::string* Self::_internal_mutable_custom_id() {
  
  return custom_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Self::release_custom_id() {
  // @@protoc_insertion_point(field_release:server.Self.custom_id)
  return custom_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Self::set_allocated_custom_id(std::string* custom_id) {
  if (custom_id != nullptr) {
    
  } else {
    
  }
  custom_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Self.custom_id)
}

// -------------------------------------------------------------------

// TSelfFetch

// -------------------------------------------------------------------

// TSelf

// .server.Self self = 1;
inline bool TSelf::_internal_has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline bool TSelf::has_self() const {
  return _internal_has_self();
}
inline void TSelf::clear_self() {
  if (GetArena() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
inline const ::server::Self& TSelf::_internal_self() const {
  const ::server::Self* p = self_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::Self&>(
      ::server::_Self_default_instance_);
}
inline const ::server::Self& TSelf::self() const {
  // @@protoc_insertion_point(field_get:server.TSelf.self)
  return _internal_self();
}
inline void TSelf::unsafe_arena_set_allocated_self(
    ::server::Self* self) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TSelf.self)
}
inline ::server::Self* TSelf::release_self() {
  
  ::server::Self* temp = self_;
  self_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::Self* TSelf::unsafe_arena_release_self() {
  // @@protoc_insertion_point(field_release:server.TSelf.self)
  
  ::server::Self* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::server::Self* TSelf::_internal_mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::Self>(GetArena());
    self_ = p;
  }
  return self_;
}
inline ::server::Self* TSelf::mutable_self() {
  // @@protoc_insertion_point(field_mutable:server.TSelf.self)
  return _internal_mutable_self();
}
inline void TSelf::set_allocated_self(::server::Self* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete self_;
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self);
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:server.TSelf.self)
}

// -------------------------------------------------------------------

// TSelfUpdate

// string handle = 1;
inline void TSelfUpdate::clear_handle() {
  handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TSelfUpdate::handle() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.handle)
  return _internal_handle();
}
inline void TSelfUpdate::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.handle)
}
inline std::string* TSelfUpdate::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.handle)
  return _internal_mutable_handle();
}
inline const std::string& TSelfUpdate::_internal_handle() const {
  return handle_.Get();
}
inline void TSelfUpdate::_internal_set_handle(const std::string& value) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TSelfUpdate::set_handle(std::string&& value) {
  
  handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TSelfUpdate.handle)
}
inline void TSelfUpdate::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.handle)
}
inline void TSelfUpdate::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.handle)
}
inline std::string* TSelfUpdate::_internal_mutable_handle() {
  
  return handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TSelfUpdate::release_handle() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSelfUpdate::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.handle)
}

// string fullname = 2;
inline void TSelfUpdate::clear_fullname() {
  fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TSelfUpdate::fullname() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.fullname)
  return _internal_fullname();
}
inline void TSelfUpdate::set_fullname(const std::string& value) {
  _internal_set_fullname(value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.fullname)
}
inline std::string* TSelfUpdate::mutable_fullname() {
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.fullname)
  return _internal_mutable_fullname();
}
inline const std::string& TSelfUpdate::_internal_fullname() const {
  return fullname_.Get();
}
inline void TSelfUpdate::_internal_set_fullname(const std::string& value) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TSelfUpdate::set_fullname(std::string&& value) {
  
  fullname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TSelfUpdate.fullname)
}
inline void TSelfUpdate::set_fullname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.fullname)
}
inline void TSelfUpdate::set_fullname(const char* value,
    size_t size) {
  
  fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.fullname)
}
inline std::string* TSelfUpdate::_internal_mutable_fullname() {
  
  return fullname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TSelfUpdate::release_fullname() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.fullname)
  return fullname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSelfUpdate::set_allocated_fullname(std::string* fullname) {
  if (fullname != nullptr) {
    
  } else {
    
  }
  fullname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fullname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.fullname)
}

// string timezone = 3;
inline void TSelfUpdate::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TSelfUpdate::timezone() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.timezone)
  return _internal_timezone();
}
inline void TSelfUpdate::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.timezone)
}
inline std::string* TSelfUpdate::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& TSelfUpdate::_internal_timezone() const {
  return timezone_.Get();
}
inline void TSelfUpdate::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TSelfUpdate::set_timezone(std::string&& value) {
  
  timezone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TSelfUpdate.timezone)
}
inline void TSelfUpdate::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.timezone)
}
inline void TSelfUpdate::set_timezone(const char* value,
    size_t size) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.timezone)
}
inline std::string* TSelfUpdate::_internal_mutable_timezone() {
  
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TSelfUpdate::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSelfUpdate::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.timezone)
}

// string location = 4;
inline void TSelfUpdate::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TSelfUpdate::location() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.location)
  return _internal_location();
}
inline void TSelfUpdate::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.location)
}
inline std::string* TSelfUpdate::mutable_location() {
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.location)
  return _internal_mutable_location();
}
inline const std::string& TSelfUpdate::_internal_location() const {
  return location_.Get();
}
inline void TSelfUpdate::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TSelfUpdate::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TSelfUpdate.location)
}
inline void TSelfUpdate::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.location)
}
inline void TSelfUpdate::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.location)
}
inline std::string* TSelfUpdate::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TSelfUpdate::release_location() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSelfUpdate::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.location)
}

// string lang = 5;
inline void TSelfUpdate::clear_lang() {
  lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TSelfUpdate::lang() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.lang)
  return _internal_lang();
}
inline void TSelfUpdate::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.lang)
}
inline std::string* TSelfUpdate::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.lang)
  return _internal_mutable_lang();
}
inline const std::string& TSelfUpdate::_internal_lang() const {
  return lang_.Get();
}
inline void TSelfUpdate::_internal_set_lang(const std::string& value) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TSelfUpdate::set_lang(std::string&& value) {
  
  lang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TSelfUpdate.lang)
}
inline void TSelfUpdate::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.lang)
}
inline void TSelfUpdate::set_lang(const char* value,
    size_t size) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.lang)
}
inline std::string* TSelfUpdate::_internal_mutable_lang() {
  
  return lang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TSelfUpdate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSelfUpdate::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.lang)
}

// string metadata = 6;
inline void TSelfUpdate::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TSelfUpdate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.metadata)
  return _internal_metadata();
}
inline void TSelfUpdate::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.metadata)
}
inline std::string* TSelfUpdate::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& TSelfUpdate::_internal_metadata() const {
  return metadata_.Get();
}
inline void TSelfUpdate::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TSelfUpdate::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TSelfUpdate.metadata)
}
inline void TSelfUpdate::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.metadata)
}
inline void TSelfUpdate::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.metadata)
}
inline std::string* TSelfUpdate::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TSelfUpdate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSelfUpdate::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.metadata)
}

// string avatar_url = 7;
inline void TSelfUpdate::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TSelfUpdate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TSelfUpdate.avatar_url)
  return _internal_avatar_url();
}
inline void TSelfUpdate::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:server.TSelfUpdate.avatar_url)
}
inline std::string* TSelfUpdate::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:server.TSelfUpdate.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& TSelfUpdate::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void TSelfUpdate::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TSelfUpdate::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TSelfUpdate.avatar_url)
}
inline void TSelfUpdate::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TSelfUpdate.avatar_url)
}
inline void TSelfUpdate::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TSelfUpdate.avatar_url)
}
inline std::string* TSelfUpdate::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TSelfUpdate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TSelfUpdate.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TSelfUpdate::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TSelfUpdate.avatar_url)
}

// -------------------------------------------------------------------

// TUsersFetch_UsersFetch

// string user_id = 1;
inline bool TUsersFetch_UsersFetch::_internal_has_user_id() const {
  return id_case() == kUserId;
}
inline void TUsersFetch_UsersFetch::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
inline void TUsersFetch_UsersFetch::clear_user_id() {
  if (_internal_has_user_id()) {
    id_.user_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUsersFetch_UsersFetch::user_id() const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.UsersFetch.user_id)
  return _internal_user_id();
}
inline void TUsersFetch_UsersFetch::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.user_id)
}
inline std::string* TUsersFetch_UsersFetch::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.UsersFetch.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TUsersFetch_UsersFetch::_internal_user_id() const {
  if (_internal_has_user_id()) {
    return id_.user_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUsersFetch_UsersFetch::_internal_set_user_id(const std::string& value) {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUsersFetch_UsersFetch::set_user_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.user_id)
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUsersFetch.UsersFetch.user_id)
}
inline void TUsersFetch_UsersFetch::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUsersFetch.UsersFetch.user_id)
}
inline void TUsersFetch_UsersFetch::set_user_id(const char* value,
                             size_t size) {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUsersFetch.UsersFetch.user_id)
}
inline std::string* TUsersFetch_UsersFetch::_internal_mutable_user_id() {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUsersFetch_UsersFetch::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TUsersFetch.UsersFetch.user_id)
  if (_internal_has_user_id()) {
    clear_has_id();
    return id_.user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUsersFetch_UsersFetch::set_allocated_user_id(std::string* user_id) {
  if (has_id()) {
    clear_id();
  }
  if (user_id != nullptr) {
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(user_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(user_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUsersFetch.UsersFetch.user_id)
}

// string handle = 2;
inline bool TUsersFetch_UsersFetch::_internal_has_handle() const {
  return id_case() == kHandle;
}
inline void TUsersFetch_UsersFetch::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
inline void TUsersFetch_UsersFetch::clear_handle() {
  if (_internal_has_handle()) {
    id_.handle_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TUsersFetch_UsersFetch::handle() const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.UsersFetch.handle)
  return _internal_handle();
}
inline void TUsersFetch_UsersFetch::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.handle)
}
inline std::string* TUsersFetch_UsersFetch::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.UsersFetch.handle)
  return _internal_mutable_handle();
}
inline const std::string& TUsersFetch_UsersFetch::_internal_handle() const {
  if (_internal_has_handle()) {
    return id_.handle_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TUsersFetch_UsersFetch::_internal_set_handle(const std::string& value) {
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TUsersFetch_UsersFetch::set_handle(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TUsersFetch.UsersFetch.handle)
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TUsersFetch.UsersFetch.handle)
}
inline void TUsersFetch_UsersFetch::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TUsersFetch.UsersFetch.handle)
}
inline void TUsersFetch_UsersFetch::set_handle(const char* value,
                             size_t size) {
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TUsersFetch.UsersFetch.handle)
}
inline std::string* TUsersFetch_UsersFetch::_internal_mutable_handle() {
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TUsersFetch_UsersFetch::release_handle() {
  // @@protoc_insertion_point(field_release:server.TUsersFetch.UsersFetch.handle)
  if (_internal_has_handle()) {
    clear_has_id();
    return id_.handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TUsersFetch_UsersFetch::set_allocated_handle(std::string* handle) {
  if (has_id()) {
    clear_id();
  }
  if (handle != nullptr) {
    set_has_handle();
    id_.handle_.UnsafeSetDefault(handle);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(handle);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TUsersFetch.UsersFetch.handle)
}

inline bool TUsersFetch_UsersFetch::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TUsersFetch_UsersFetch::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TUsersFetch_UsersFetch::IdCase TUsersFetch_UsersFetch::id_case() const {
  return TUsersFetch_UsersFetch::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TUsersFetch

// repeated .server.TUsersFetch.UsersFetch users = 1;
inline int TUsersFetch::_internal_users_size() const {
  return users_.size();
}
inline int TUsersFetch::users_size() const {
  return _internal_users_size();
}
inline void TUsersFetch::clear_users() {
  users_.Clear();
}
inline ::server::TUsersFetch_UsersFetch* TUsersFetch::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TUsersFetch.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >*
TUsersFetch::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TUsersFetch.users)
  return &users_;
}
inline const ::server::TUsersFetch_UsersFetch& TUsersFetch::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::server::TUsersFetch_UsersFetch& TUsersFetch::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TUsersFetch.users)
  return _internal_users(index);
}
inline ::server::TUsersFetch_UsersFetch* TUsersFetch::_internal_add_users() {
  return users_.Add();
}
inline ::server::TUsersFetch_UsersFetch* TUsersFetch::add_users() {
  // @@protoc_insertion_point(field_add:server.TUsersFetch.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TUsersFetch_UsersFetch >&
TUsersFetch::users() const {
  // @@protoc_insertion_point(field_list:server.TUsersFetch.users)
  return users_;
}

// -------------------------------------------------------------------

// TUsers

// repeated .server.User users = 1;
inline int TUsers::_internal_users_size() const {
  return users_.size();
}
inline int TUsers::users_size() const {
  return _internal_users_size();
}
inline void TUsers::clear_users() {
  users_.Clear();
}
inline ::server::User* TUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TUsers.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::User >*
TUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TUsers.users)
  return &users_;
}
inline const ::server::User& TUsers::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::server::User& TUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TUsers.users)
  return _internal_users(index);
}
inline ::server::User* TUsers::_internal_add_users() {
  return users_.Add();
}
inline ::server::User* TUsers::add_users() {
  // @@protoc_insertion_point(field_add:server.TUsers.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::User >&
TUsers::users() const {
  // @@protoc_insertion_point(field_list:server.TUsers.users)
  return users_;
}

// -------------------------------------------------------------------

// Friend

// .server.User user = 1;
inline bool Friend::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool Friend::has_user() const {
  return _internal_has_user();
}
inline void Friend::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::server::User& Friend::_internal_user() const {
  const ::server::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::User&>(
      ::server::_User_default_instance_);
}
inline const ::server::User& Friend::user() const {
  // @@protoc_insertion_point(field_get:server.Friend.user)
  return _internal_user();
}
inline void Friend::unsafe_arena_set_allocated_user(
    ::server::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Friend.user)
}
inline ::server::User* Friend::release_user() {
  
  ::server::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::User* Friend::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:server.Friend.user)
  
  ::server::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::server::User* Friend::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::server::User* Friend::mutable_user() {
  // @@protoc_insertion_point(field_mutable:server.Friend.user)
  return _internal_mutable_user();
}
inline void Friend::set_allocated_user(::server::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:server.Friend.user)
}

// int64 state = 2;
inline void Friend::clear_state() {
  state_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Friend::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Friend::state() const {
  // @@protoc_insertion_point(field_get:server.Friend.state)
  return _internal_state();
}
inline void Friend::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  state_ = value;
}
inline void Friend::set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:server.Friend.state)
}

// -------------------------------------------------------------------

// TFriendsAdd_FriendsAdd

// string user_id = 1;
inline bool TFriendsAdd_FriendsAdd::_internal_has_user_id() const {
  return id_case() == kUserId;
}
inline void TFriendsAdd_FriendsAdd::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
inline void TFriendsAdd_FriendsAdd::clear_user_id() {
  if (_internal_has_user_id()) {
    id_.user_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TFriendsAdd_FriendsAdd::user_id() const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.FriendsAdd.user_id)
  return _internal_user_id();
}
inline void TFriendsAdd_FriendsAdd::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.user_id)
}
inline std::string* TFriendsAdd_FriendsAdd::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.FriendsAdd.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TFriendsAdd_FriendsAdd::_internal_user_id() const {
  if (_internal_has_user_id()) {
    return id_.user_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TFriendsAdd_FriendsAdd::_internal_set_user_id(const std::string& value) {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TFriendsAdd_FriendsAdd::set_user_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.user_id)
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TFriendsAdd.FriendsAdd.user_id)
}
inline void TFriendsAdd_FriendsAdd::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TFriendsAdd.FriendsAdd.user_id)
}
inline void TFriendsAdd_FriendsAdd::set_user_id(const char* value,
                             size_t size) {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsAdd.FriendsAdd.user_id)
}
inline std::string* TFriendsAdd_FriendsAdd::_internal_mutable_user_id() {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TFriendsAdd_FriendsAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TFriendsAdd.FriendsAdd.user_id)
  if (_internal_has_user_id()) {
    clear_has_id();
    return id_.user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TFriendsAdd_FriendsAdd::set_allocated_user_id(std::string* user_id) {
  if (has_id()) {
    clear_id();
  }
  if (user_id != nullptr) {
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(user_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(user_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TFriendsAdd.FriendsAdd.user_id)
}

// string handle = 2;
inline bool TFriendsAdd_FriendsAdd::_internal_has_handle() const {
  return id_case() == kHandle;
}
inline void TFriendsAdd_FriendsAdd::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
inline void TFriendsAdd_FriendsAdd::clear_handle() {
  if (_internal_has_handle()) {
    id_.handle_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TFriendsAdd_FriendsAdd::handle() const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.FriendsAdd.handle)
  return _internal_handle();
}
inline void TFriendsAdd_FriendsAdd::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.handle)
}
inline std::string* TFriendsAdd_FriendsAdd::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.FriendsAdd.handle)
  return _internal_mutable_handle();
}
inline const std::string& TFriendsAdd_FriendsAdd::_internal_handle() const {
  if (_internal_has_handle()) {
    return id_.handle_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TFriendsAdd_FriendsAdd::_internal_set_handle(const std::string& value) {
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TFriendsAdd_FriendsAdd::set_handle(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsAdd.FriendsAdd.handle)
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TFriendsAdd.FriendsAdd.handle)
}
inline void TFriendsAdd_FriendsAdd::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TFriendsAdd.FriendsAdd.handle)
}
inline void TFriendsAdd_FriendsAdd::set_handle(const char* value,
                             size_t size) {
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.handle_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsAdd.FriendsAdd.handle)
}
inline std::string* TFriendsAdd_FriendsAdd::_internal_mutable_handle() {
  if (!_internal_has_handle()) {
    clear_id();
    set_has_handle();
    id_.handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TFriendsAdd_FriendsAdd::release_handle() {
  // @@protoc_insertion_point(field_release:server.TFriendsAdd.FriendsAdd.handle)
  if (_internal_has_handle()) {
    clear_has_id();
    return id_.handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TFriendsAdd_FriendsAdd::set_allocated_handle(std::string* handle) {
  if (has_id()) {
    clear_id();
  }
  if (handle != nullptr) {
    set_has_handle();
    id_.handle_.UnsafeSetDefault(handle);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(handle);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TFriendsAdd.FriendsAdd.handle)
}

inline bool TFriendsAdd_FriendsAdd::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TFriendsAdd_FriendsAdd::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TFriendsAdd_FriendsAdd::IdCase TFriendsAdd_FriendsAdd::id_case() const {
  return TFriendsAdd_FriendsAdd::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TFriendsAdd

// repeated .server.TFriendsAdd.FriendsAdd friends = 1;
inline int TFriendsAdd::_internal_friends_size() const {
  return friends_.size();
}
inline int TFriendsAdd::friends_size() const {
  return _internal_friends_size();
}
inline void TFriendsAdd::clear_friends() {
  friends_.Clear();
}
inline ::server::TFriendsAdd_FriendsAdd* TFriendsAdd::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsAdd.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >*
TFriendsAdd::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsAdd.friends)
  return &friends_;
}
inline const ::server::TFriendsAdd_FriendsAdd& TFriendsAdd::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::server::TFriendsAdd_FriendsAdd& TFriendsAdd::friends(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsAdd.friends)
  return _internal_friends(index);
}
inline ::server::TFriendsAdd_FriendsAdd* TFriendsAdd::_internal_add_friends() {
  return friends_.Add();
}
inline ::server::TFriendsAdd_FriendsAdd* TFriendsAdd::add_friends() {
  // @@protoc_insertion_point(field_add:server.TFriendsAdd.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TFriendsAdd_FriendsAdd >&
TFriendsAdd::friends() const {
  // @@protoc_insertion_point(field_list:server.TFriendsAdd.friends)
  return friends_;
}

// -------------------------------------------------------------------

// TFriendsRemove

// repeated string user_ids = 1;
inline int TFriendsRemove::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int TFriendsRemove::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void TFriendsRemove::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* TFriendsRemove::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TFriendsRemove.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& TFriendsRemove::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& TFriendsRemove::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsRemove.user_ids)
  return _internal_user_ids(index);
}
inline std::string* TFriendsRemove::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsRemove.user_ids)
  return user_ids_.Mutable(index);
}
inline void TFriendsRemove::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsRemove.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void TFriendsRemove::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsRemove.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void TFriendsRemove::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TFriendsRemove.user_ids)
}
inline void TFriendsRemove::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsRemove.user_ids)
}
inline std::string* TFriendsRemove::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void TFriendsRemove::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TFriendsRemove.user_ids)
}
inline void TFriendsRemove::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TFriendsRemove.user_ids)
}
inline void TFriendsRemove::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TFriendsRemove.user_ids)
}
inline void TFriendsRemove::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TFriendsRemove.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TFriendsRemove::user_ids() const {
  // @@protoc_insertion_point(field_list:server.TFriendsRemove.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TFriendsRemove::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsRemove.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// TFriendsBlock

// repeated string user_ids = 1;
inline int TFriendsBlock::_internal_user_ids_size() const {
  return user_ids_.size();
}
inline int TFriendsBlock::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void TFriendsBlock::clear_user_ids() {
  user_ids_.Clear();
}
inline std::string* TFriendsBlock::add_user_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TFriendsBlock.user_ids)
  return _internal_add_user_ids();
}
inline const std::string& TFriendsBlock::_internal_user_ids(int index) const {
  return user_ids_.Get(index);
}
inline const std::string& TFriendsBlock::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriendsBlock.user_ids)
  return _internal_user_ids(index);
}
inline std::string* TFriendsBlock::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriendsBlock.user_ids)
  return user_ids_.Mutable(index);
}
inline void TFriendsBlock::set_user_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsBlock.user_ids)
  user_ids_.Mutable(index)->assign(value);
}
inline void TFriendsBlock::set_user_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TFriendsBlock.user_ids)
  user_ids_.Mutable(index)->assign(std::move(value));
}
inline void TFriendsBlock::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TFriendsBlock.user_ids)
}
inline void TFriendsBlock::set_user_ids(int index, const char* value, size_t size) {
  user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TFriendsBlock.user_ids)
}
inline std::string* TFriendsBlock::_internal_add_user_ids() {
  return user_ids_.Add();
}
inline void TFriendsBlock::add_user_ids(const std::string& value) {
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TFriendsBlock.user_ids)
}
inline void TFriendsBlock::add_user_ids(std::string&& value) {
  user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TFriendsBlock.user_ids)
}
inline void TFriendsBlock::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TFriendsBlock.user_ids)
}
inline void TFriendsBlock::add_user_ids(const char* value, size_t size) {
  user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TFriendsBlock.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TFriendsBlock::user_ids() const {
  // @@protoc_insertion_point(field_list:server.TFriendsBlock.user_ids)
  return user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TFriendsBlock::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriendsBlock.user_ids)
  return &user_ids_;
}

// -------------------------------------------------------------------

// TFriendsList

// -------------------------------------------------------------------

// TFriends

// repeated .server.Friend friends = 1;
inline int TFriends::_internal_friends_size() const {
  return friends_.size();
}
inline int TFriends::friends_size() const {
  return _internal_friends_size();
}
inline void TFriends::clear_friends() {
  friends_.Clear();
}
inline ::server::Friend* TFriends::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:server.TFriends.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Friend >*
TFriends::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:server.TFriends.friends)
  return &friends_;
}
inline const ::server::Friend& TFriends::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::server::Friend& TFriends::friends(int index) const {
  // @@protoc_insertion_point(field_get:server.TFriends.friends)
  return _internal_friends(index);
}
inline ::server::Friend* TFriends::_internal_add_friends() {
  return friends_.Add();
}
inline ::server::Friend* TFriends::add_friends() {
  // @@protoc_insertion_point(field_add:server.TFriends.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Friend >&
TFriends::friends() const {
  // @@protoc_insertion_point(field_list:server.TFriends.friends)
  return friends_;
}

// -------------------------------------------------------------------

// Group

// string id = 1;
inline void Group::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::id() const {
  // @@protoc_insertion_point(field_get:server.Group.id)
  return _internal_id();
}
inline void Group::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:server.Group.id)
}
inline std::string* Group::mutable_id() {
  // @@protoc_insertion_point(field_mutable:server.Group.id)
  return _internal_mutable_id();
}
inline const std::string& Group::_internal_id() const {
  return id_.Get();
}
inline void Group::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Group.id)
}
inline void Group::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Group.id)
}
inline void Group::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Group.id)
}
inline std::string* Group::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_id() {
  // @@protoc_insertion_point(field_release:server.Group.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Group.id)
}

// bool private = 2;
inline void Group::clear_private_() {
  private__ = false;
}
inline bool Group::_internal_private_() const {
  return private__;
}
inline bool Group::private_() const {
  // @@protoc_insertion_point(field_get:server.Group.private)
  return _internal_private_();
}
inline void Group::_internal_set_private_(bool value) {
  
  private__ = value;
}
inline void Group::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:server.Group.private)
}

// string creator_id = 3;
inline void Group::clear_creator_id() {
  creator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::creator_id() const {
  // @@protoc_insertion_point(field_get:server.Group.creator_id)
  return _internal_creator_id();
}
inline void Group::set_creator_id(const std::string& value) {
  _internal_set_creator_id(value);
  // @@protoc_insertion_point(field_set:server.Group.creator_id)
}
inline std::string* Group::mutable_creator_id() {
  // @@protoc_insertion_point(field_mutable:server.Group.creator_id)
  return _internal_mutable_creator_id();
}
inline const std::string& Group::_internal_creator_id() const {
  return creator_id_.Get();
}
inline void Group::_internal_set_creator_id(const std::string& value) {
  
  creator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_creator_id(std::string&& value) {
  
  creator_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Group.creator_id)
}
inline void Group::set_creator_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Group.creator_id)
}
inline void Group::set_creator_id(const char* value,
    size_t size) {
  
  creator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Group.creator_id)
}
inline std::string* Group::_internal_mutable_creator_id() {
  
  return creator_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_creator_id() {
  // @@protoc_insertion_point(field_release:server.Group.creator_id)
  return creator_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_creator_id(std::string* creator_id) {
  if (creator_id != nullptr) {
    
  } else {
    
  }
  creator_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Group.creator_id)
}

// string name = 4;
inline void Group::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::name() const {
  // @@protoc_insertion_point(field_get:server.Group.name)
  return _internal_name();
}
inline void Group::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:server.Group.name)
}
inline std::string* Group::mutable_name() {
  // @@protoc_insertion_point(field_mutable:server.Group.name)
  return _internal_mutable_name();
}
inline const std::string& Group::_internal_name() const {
  return name_.Get();
}
inline void Group::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Group.name)
}
inline void Group::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Group.name)
}
inline void Group::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Group.name)
}
inline std::string* Group::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_name() {
  // @@protoc_insertion_point(field_release:server.Group.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Group.name)
}

// string description = 5;
inline void Group::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::description() const {
  // @@protoc_insertion_point(field_get:server.Group.description)
  return _internal_description();
}
inline void Group::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:server.Group.description)
}
inline std::string* Group::mutable_description() {
  // @@protoc_insertion_point(field_mutable:server.Group.description)
  return _internal_mutable_description();
}
inline const std::string& Group::_internal_description() const {
  return description_.Get();
}
inline void Group::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Group.description)
}
inline void Group::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Group.description)
}
inline void Group::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Group.description)
}
inline std::string* Group::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_description() {
  // @@protoc_insertion_point(field_release:server.Group.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Group.description)
}

// string avatar_url = 6;
inline void Group::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.Group.avatar_url)
  return _internal_avatar_url();
}
inline void Group::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:server.Group.avatar_url)
}
inline std::string* Group::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:server.Group.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& Group::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void Group::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Group.avatar_url)
}
inline void Group::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Group.avatar_url)
}
inline void Group::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Group.avatar_url)
}
inline std::string* Group::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.Group.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Group.avatar_url)
}

// string lang = 7;
inline void Group::clear_lang() {
  lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::lang() const {
  // @@protoc_insertion_point(field_get:server.Group.lang)
  return _internal_lang();
}
inline void Group::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:server.Group.lang)
}
inline std::string* Group::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:server.Group.lang)
  return _internal_mutable_lang();
}
inline const std::string& Group::_internal_lang() const {
  return lang_.Get();
}
inline void Group::_internal_set_lang(const std::string& value) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_lang(std::string&& value) {
  
  lang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Group.lang)
}
inline void Group::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Group.lang)
}
inline void Group::set_lang(const char* value,
    size_t size) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Group.lang)
}
inline std::string* Group::_internal_mutable_lang() {
  
  return lang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_lang() {
  // @@protoc_insertion_point(field_release:server.Group.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Group.lang)
}

// int64 utc_offset_ms = 8;
inline void Group::clear_utc_offset_ms() {
  utc_offset_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Group::_internal_utc_offset_ms() const {
  return utc_offset_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Group::utc_offset_ms() const {
  // @@protoc_insertion_point(field_get:server.Group.utc_offset_ms)
  return _internal_utc_offset_ms();
}
inline void Group::_internal_set_utc_offset_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  utc_offset_ms_ = value;
}
inline void Group::set_utc_offset_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_utc_offset_ms(value);
  // @@protoc_insertion_point(field_set:server.Group.utc_offset_ms)
}

// string metadata = 9;
inline void Group::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Group::metadata() const {
  // @@protoc_insertion_point(field_get:server.Group.metadata)
  return _internal_metadata();
}
inline void Group::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:server.Group.metadata)
}
inline std::string* Group::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:server.Group.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& Group::_internal_metadata() const {
  return metadata_.Get();
}
inline void Group::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Group::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Group.metadata)
}
inline void Group::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Group.metadata)
}
inline void Group::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Group.metadata)
}
inline std::string* Group::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Group::release_metadata() {
  // @@protoc_insertion_point(field_release:server.Group.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Group::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Group.metadata)
}

// int64 count = 10;
inline void Group::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Group::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Group::count() const {
  // @@protoc_insertion_point(field_get:server.Group.count)
  return _internal_count();
}
inline void Group::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void Group::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:server.Group.count)
}

// int64 created_at = 11;
inline void Group::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Group::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Group::created_at() const {
  // @@protoc_insertion_point(field_get:server.Group.created_at)
  return _internal_created_at();
}
inline void Group::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void Group::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:server.Group.created_at)
}

// int64 updated_at = 12;
inline void Group::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Group::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Group::updated_at() const {
  // @@protoc_insertion_point(field_get:server.Group.updated_at)
  return _internal_updated_at();
}
inline void Group::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updated_at_ = value;
}
inline void Group::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:server.Group.updated_at)
}

// -------------------------------------------------------------------

// TGroupsCreate_GroupCreate

// string name = 1;
inline void TGroupsCreate_GroupCreate::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsCreate_GroupCreate::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.name)
  return _internal_name();
}
inline void TGroupsCreate_GroupCreate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.name)
}
inline std::string* TGroupsCreate_GroupCreate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.name)
  return _internal_mutable_name();
}
inline const std::string& TGroupsCreate_GroupCreate::_internal_name() const {
  return name_.Get();
}
inline void TGroupsCreate_GroupCreate::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsCreate_GroupCreate::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsCreate.GroupCreate.name)
}
inline void TGroupsCreate_GroupCreate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.name)
}
inline void TGroupsCreate_GroupCreate::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.name)
}
inline std::string* TGroupsCreate_GroupCreate::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsCreate_GroupCreate::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsCreate_GroupCreate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.name)
}

// string description = 2;
inline void TGroupsCreate_GroupCreate::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsCreate_GroupCreate::description() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.description)
  return _internal_description();
}
inline void TGroupsCreate_GroupCreate::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.description)
}
inline std::string* TGroupsCreate_GroupCreate::mutable_description() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.description)
  return _internal_mutable_description();
}
inline const std::string& TGroupsCreate_GroupCreate::_internal_description() const {
  return description_.Get();
}
inline void TGroupsCreate_GroupCreate::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsCreate_GroupCreate::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsCreate.GroupCreate.description)
}
inline void TGroupsCreate_GroupCreate::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.description)
}
inline void TGroupsCreate_GroupCreate::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.description)
}
inline std::string* TGroupsCreate_GroupCreate::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsCreate_GroupCreate::release_description() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsCreate_GroupCreate::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.description)
}

// string avatar_url = 3;
inline void TGroupsCreate_GroupCreate::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsCreate_GroupCreate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.avatar_url)
  return _internal_avatar_url();
}
inline void TGroupsCreate_GroupCreate::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.avatar_url)
}
inline std::string* TGroupsCreate_GroupCreate::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& TGroupsCreate_GroupCreate::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void TGroupsCreate_GroupCreate::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsCreate_GroupCreate::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsCreate.GroupCreate.avatar_url)
}
inline void TGroupsCreate_GroupCreate::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.avatar_url)
}
inline void TGroupsCreate_GroupCreate::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.avatar_url)
}
inline std::string* TGroupsCreate_GroupCreate::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsCreate_GroupCreate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsCreate_GroupCreate::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.avatar_url)
}

// string lang = 4;
inline void TGroupsCreate_GroupCreate::clear_lang() {
  lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsCreate_GroupCreate::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.lang)
  return _internal_lang();
}
inline void TGroupsCreate_GroupCreate::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.lang)
}
inline std::string* TGroupsCreate_GroupCreate::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.lang)
  return _internal_mutable_lang();
}
inline const std::string& TGroupsCreate_GroupCreate::_internal_lang() const {
  return lang_.Get();
}
inline void TGroupsCreate_GroupCreate::_internal_set_lang(const std::string& value) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsCreate_GroupCreate::set_lang(std::string&& value) {
  
  lang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsCreate.GroupCreate.lang)
}
inline void TGroupsCreate_GroupCreate::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.lang)
}
inline void TGroupsCreate_GroupCreate::set_lang(const char* value,
    size_t size) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.lang)
}
inline std::string* TGroupsCreate_GroupCreate::_internal_mutable_lang() {
  
  return lang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsCreate_GroupCreate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsCreate_GroupCreate::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.lang)
}

// string metadata = 5;
inline void TGroupsCreate_GroupCreate::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsCreate_GroupCreate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.metadata)
  return _internal_metadata();
}
inline void TGroupsCreate_GroupCreate::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.metadata)
}
inline std::string* TGroupsCreate_GroupCreate::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.GroupCreate.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& TGroupsCreate_GroupCreate::_internal_metadata() const {
  return metadata_.Get();
}
inline void TGroupsCreate_GroupCreate::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsCreate_GroupCreate::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsCreate.GroupCreate.metadata)
}
inline void TGroupsCreate_GroupCreate::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsCreate.GroupCreate.metadata)
}
inline void TGroupsCreate_GroupCreate::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsCreate.GroupCreate.metadata)
}
inline std::string* TGroupsCreate_GroupCreate::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsCreate_GroupCreate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TGroupsCreate.GroupCreate.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsCreate_GroupCreate::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsCreate.GroupCreate.metadata)
}

// bool private = 6;
inline void TGroupsCreate_GroupCreate::clear_private_() {
  private__ = false;
}
inline bool TGroupsCreate_GroupCreate::_internal_private_() const {
  return private__;
}
inline bool TGroupsCreate_GroupCreate::private_() const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.GroupCreate.private)
  return _internal_private_();
}
inline void TGroupsCreate_GroupCreate::_internal_set_private_(bool value) {
  
  private__ = value;
}
inline void TGroupsCreate_GroupCreate::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:server.TGroupsCreate.GroupCreate.private)
}

// -------------------------------------------------------------------

// TGroupsCreate

// repeated .server.TGroupsCreate.GroupCreate groups = 1;
inline int TGroupsCreate::_internal_groups_size() const {
  return groups_.size();
}
inline int TGroupsCreate::groups_size() const {
  return _internal_groups_size();
}
inline void TGroupsCreate::clear_groups() {
  groups_.Clear();
}
inline ::server::TGroupsCreate_GroupCreate* TGroupsCreate::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsCreate.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >*
TGroupsCreate::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsCreate.groups)
  return &groups_;
}
inline const ::server::TGroupsCreate_GroupCreate& TGroupsCreate::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::server::TGroupsCreate_GroupCreate& TGroupsCreate::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsCreate.groups)
  return _internal_groups(index);
}
inline ::server::TGroupsCreate_GroupCreate* TGroupsCreate::_internal_add_groups() {
  return groups_.Add();
}
inline ::server::TGroupsCreate_GroupCreate* TGroupsCreate::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsCreate.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsCreate_GroupCreate >&
TGroupsCreate::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsCreate.groups)
  return groups_;
}

// -------------------------------------------------------------------

// TGroupsUpdate_GroupUpdate

// string group_id = 1;
inline void TGroupsUpdate_GroupUpdate::clear_group_id() {
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsUpdate_GroupUpdate::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.group_id)
  return _internal_group_id();
}
inline void TGroupsUpdate_GroupUpdate::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.group_id)
}
inline std::string* TGroupsUpdate_GroupUpdate::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TGroupsUpdate_GroupUpdate::_internal_group_id() const {
  return group_id_.Get();
}
inline void TGroupsUpdate_GroupUpdate::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_group_id(std::string&& value) {
  
  group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsUpdate.GroupUpdate.group_id)
}
inline void TGroupsUpdate_GroupUpdate::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.group_id)
}
inline void TGroupsUpdate_GroupUpdate::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.group_id)
}
inline std::string* TGroupsUpdate_GroupUpdate::_internal_mutable_group_id() {
  
  return group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsUpdate_GroupUpdate::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.group_id)
}

// bool private = 2;
inline void TGroupsUpdate_GroupUpdate::clear_private_() {
  private__ = false;
}
inline bool TGroupsUpdate_GroupUpdate::_internal_private_() const {
  return private__;
}
inline bool TGroupsUpdate_GroupUpdate::private_() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.private)
  return _internal_private_();
}
inline void TGroupsUpdate_GroupUpdate::_internal_set_private_(bool value) {
  
  private__ = value;
}
inline void TGroupsUpdate_GroupUpdate::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.private)
}

// string name = 3;
inline void TGroupsUpdate_GroupUpdate::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsUpdate_GroupUpdate::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.name)
  return _internal_name();
}
inline void TGroupsUpdate_GroupUpdate::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.name)
}
inline std::string* TGroupsUpdate_GroupUpdate::mutable_name() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.name)
  return _internal_mutable_name();
}
inline const std::string& TGroupsUpdate_GroupUpdate::_internal_name() const {
  return name_.Get();
}
inline void TGroupsUpdate_GroupUpdate::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsUpdate.GroupUpdate.name)
}
inline void TGroupsUpdate_GroupUpdate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.name)
}
inline void TGroupsUpdate_GroupUpdate::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.name)
}
inline std::string* TGroupsUpdate_GroupUpdate::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsUpdate_GroupUpdate::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.name)
}

// string description = 4;
inline void TGroupsUpdate_GroupUpdate::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsUpdate_GroupUpdate::description() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.description)
  return _internal_description();
}
inline void TGroupsUpdate_GroupUpdate::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.description)
}
inline std::string* TGroupsUpdate_GroupUpdate::mutable_description() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.description)
  return _internal_mutable_description();
}
inline const std::string& TGroupsUpdate_GroupUpdate::_internal_description() const {
  return description_.Get();
}
inline void TGroupsUpdate_GroupUpdate::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsUpdate.GroupUpdate.description)
}
inline void TGroupsUpdate_GroupUpdate::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.description)
}
inline void TGroupsUpdate_GroupUpdate::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.description)
}
inline std::string* TGroupsUpdate_GroupUpdate::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsUpdate_GroupUpdate::release_description() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.description)
}

// string avatar_url = 5;
inline void TGroupsUpdate_GroupUpdate::clear_avatar_url() {
  avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsUpdate_GroupUpdate::avatar_url() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.avatar_url)
  return _internal_avatar_url();
}
inline void TGroupsUpdate_GroupUpdate::set_avatar_url(const std::string& value) {
  _internal_set_avatar_url(value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
inline std::string* TGroupsUpdate_GroupUpdate::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& TGroupsUpdate_GroupUpdate::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void TGroupsUpdate_GroupUpdate::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_avatar_url(std::string&& value) {
  
  avatar_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
inline void TGroupsUpdate_GroupUpdate::set_avatar_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
inline void TGroupsUpdate_GroupUpdate::set_avatar_url(const char* value,
    size_t size) {
  
  avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.avatar_url)
}
inline std::string* TGroupsUpdate_GroupUpdate::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsUpdate_GroupUpdate::release_avatar_url() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.avatar_url)
}

// string lang = 6;
inline void TGroupsUpdate_GroupUpdate::clear_lang() {
  lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsUpdate_GroupUpdate::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.lang)
  return _internal_lang();
}
inline void TGroupsUpdate_GroupUpdate::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.lang)
}
inline std::string* TGroupsUpdate_GroupUpdate::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.lang)
  return _internal_mutable_lang();
}
inline const std::string& TGroupsUpdate_GroupUpdate::_internal_lang() const {
  return lang_.Get();
}
inline void TGroupsUpdate_GroupUpdate::_internal_set_lang(const std::string& value) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_lang(std::string&& value) {
  
  lang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsUpdate.GroupUpdate.lang)
}
inline void TGroupsUpdate_GroupUpdate::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.lang)
}
inline void TGroupsUpdate_GroupUpdate::set_lang(const char* value,
    size_t size) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.lang)
}
inline std::string* TGroupsUpdate_GroupUpdate::_internal_mutable_lang() {
  
  return lang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsUpdate_GroupUpdate::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.lang)
}

// string metadata = 7;
inline void TGroupsUpdate_GroupUpdate::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsUpdate_GroupUpdate::metadata() const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.GroupUpdate.metadata)
  return _internal_metadata();
}
inline void TGroupsUpdate_GroupUpdate::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:server.TGroupsUpdate.GroupUpdate.metadata)
}
inline std::string* TGroupsUpdate_GroupUpdate::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.GroupUpdate.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& TGroupsUpdate_GroupUpdate::_internal_metadata() const {
  return metadata_.Get();
}
inline void TGroupsUpdate_GroupUpdate::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsUpdate.GroupUpdate.metadata)
}
inline void TGroupsUpdate_GroupUpdate::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsUpdate.GroupUpdate.metadata)
}
inline void TGroupsUpdate_GroupUpdate::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsUpdate.GroupUpdate.metadata)
}
inline std::string* TGroupsUpdate_GroupUpdate::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsUpdate_GroupUpdate::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TGroupsUpdate.GroupUpdate.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsUpdate_GroupUpdate::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsUpdate.GroupUpdate.metadata)
}

// -------------------------------------------------------------------

// TGroupsUpdate

// repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
inline int TGroupsUpdate::_internal_groups_size() const {
  return groups_.size();
}
inline int TGroupsUpdate::groups_size() const {
  return _internal_groups_size();
}
inline void TGroupsUpdate::clear_groups() {
  groups_.Clear();
}
inline ::server::TGroupsUpdate_GroupUpdate* TGroupsUpdate::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsUpdate.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >*
TGroupsUpdate::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsUpdate.groups)
  return &groups_;
}
inline const ::server::TGroupsUpdate_GroupUpdate& TGroupsUpdate::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::server::TGroupsUpdate_GroupUpdate& TGroupsUpdate::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsUpdate.groups)
  return _internal_groups(index);
}
inline ::server::TGroupsUpdate_GroupUpdate* TGroupsUpdate::_internal_add_groups() {
  return groups_.Add();
}
inline ::server::TGroupsUpdate_GroupUpdate* TGroupsUpdate::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsUpdate.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsUpdate_GroupUpdate >&
TGroupsUpdate::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsUpdate.groups)
  return groups_;
}

// -------------------------------------------------------------------

// TGroupsRemove

// repeated string group_ids = 1;
inline int TGroupsRemove::_internal_group_ids_size() const {
  return group_ids_.size();
}
inline int TGroupsRemove::group_ids_size() const {
  return _internal_group_ids_size();
}
inline void TGroupsRemove::clear_group_ids() {
  group_ids_.Clear();
}
inline std::string* TGroupsRemove::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsRemove.group_ids)
  return _internal_add_group_ids();
}
inline const std::string& TGroupsRemove::_internal_group_ids(int index) const {
  return group_ids_.Get(index);
}
inline const std::string& TGroupsRemove::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsRemove.group_ids)
  return _internal_group_ids(index);
}
inline std::string* TGroupsRemove::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsRemove.group_ids)
  return group_ids_.Mutable(index);
}
inline void TGroupsRemove::set_group_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsRemove.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
inline void TGroupsRemove::set_group_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsRemove.group_ids)
  group_ids_.Mutable(index)->assign(std::move(value));
}
inline void TGroupsRemove::set_group_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsRemove.group_ids)
}
inline void TGroupsRemove::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsRemove.group_ids)
}
inline std::string* TGroupsRemove::_internal_add_group_ids() {
  return group_ids_.Add();
}
inline void TGroupsRemove::add_group_ids(const std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsRemove.group_ids)
}
inline void TGroupsRemove::add_group_ids(std::string&& value) {
  group_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TGroupsRemove.group_ids)
}
inline void TGroupsRemove::add_group_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsRemove.group_ids)
}
inline void TGroupsRemove::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsRemove.group_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TGroupsRemove::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsRemove.group_ids)
  return group_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TGroupsRemove::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsRemove.group_ids)
  return &group_ids_;
}

// -------------------------------------------------------------------

// TGroupsSelfList

// -------------------------------------------------------------------

// TGroupsFetch_GroupFetch

// string group_id = 1;
inline bool TGroupsFetch_GroupFetch::_internal_has_group_id() const {
  return id_case() == kGroupId;
}
inline void TGroupsFetch_GroupFetch::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void TGroupsFetch_GroupFetch::clear_group_id() {
  if (_internal_has_group_id()) {
    id_.group_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TGroupsFetch_GroupFetch::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.GroupFetch.group_id)
  return _internal_group_id();
}
inline void TGroupsFetch_GroupFetch::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.group_id)
}
inline std::string* TGroupsFetch_GroupFetch::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.GroupFetch.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TGroupsFetch_GroupFetch::_internal_group_id() const {
  if (_internal_has_group_id()) {
    return id_.group_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TGroupsFetch_GroupFetch::_internal_set_group_id(const std::string& value) {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsFetch_GroupFetch::set_group_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.group_id)
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsFetch.GroupFetch.group_id)
}
inline void TGroupsFetch_GroupFetch::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsFetch.GroupFetch.group_id)
}
inline void TGroupsFetch_GroupFetch::set_group_id(const char* value,
                             size_t size) {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsFetch.GroupFetch.group_id)
}
inline std::string* TGroupsFetch_GroupFetch::_internal_mutable_group_id() {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsFetch_GroupFetch::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupsFetch.GroupFetch.group_id)
  if (_internal_has_group_id()) {
    clear_has_id();
    return id_.group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TGroupsFetch_GroupFetch::set_allocated_group_id(std::string* group_id) {
  if (has_id()) {
    clear_id();
  }
  if (group_id != nullptr) {
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(group_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(group_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsFetch.GroupFetch.group_id)
}

// string name = 2;
inline bool TGroupsFetch_GroupFetch::_internal_has_name() const {
  return id_case() == kName;
}
inline void TGroupsFetch_GroupFetch::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void TGroupsFetch_GroupFetch::clear_name() {
  if (_internal_has_name()) {
    id_.name_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TGroupsFetch_GroupFetch::name() const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.GroupFetch.name)
  return _internal_name();
}
inline void TGroupsFetch_GroupFetch::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.name)
}
inline std::string* TGroupsFetch_GroupFetch::mutable_name() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.GroupFetch.name)
  return _internal_mutable_name();
}
inline const std::string& TGroupsFetch_GroupFetch::_internal_name() const {
  if (_internal_has_name()) {
    return id_.name_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TGroupsFetch_GroupFetch::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsFetch_GroupFetch::set_name(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsFetch.GroupFetch.name)
  if (!_internal_has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsFetch.GroupFetch.name)
}
inline void TGroupsFetch_GroupFetch::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsFetch.GroupFetch.name)
}
inline void TGroupsFetch_GroupFetch::set_name(const char* value,
                             size_t size) {
  if (!_internal_has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.name_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsFetch.GroupFetch.name)
}
inline std::string* TGroupsFetch_GroupFetch::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_id();
    set_has_name();
    id_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsFetch_GroupFetch::release_name() {
  // @@protoc_insertion_point(field_release:server.TGroupsFetch.GroupFetch.name)
  if (_internal_has_name()) {
    clear_has_id();
    return id_.name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TGroupsFetch_GroupFetch::set_allocated_name(std::string* name) {
  if (has_id()) {
    clear_id();
  }
  if (name != nullptr) {
    set_has_name();
    id_.name_.UnsafeSetDefault(name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsFetch.GroupFetch.name)
}

inline bool TGroupsFetch_GroupFetch::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TGroupsFetch_GroupFetch::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TGroupsFetch_GroupFetch::IdCase TGroupsFetch_GroupFetch::id_case() const {
  return TGroupsFetch_GroupFetch::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TGroupsFetch

// repeated .server.TGroupsFetch.GroupFetch groups = 1;
inline int TGroupsFetch::_internal_groups_size() const {
  return groups_.size();
}
inline int TGroupsFetch::groups_size() const {
  return _internal_groups_size();
}
inline void TGroupsFetch::clear_groups() {
  groups_.Clear();
}
inline ::server::TGroupsFetch_GroupFetch* TGroupsFetch::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsFetch.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >*
TGroupsFetch::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsFetch.groups)
  return &groups_;
}
inline const ::server::TGroupsFetch_GroupFetch& TGroupsFetch::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::server::TGroupsFetch_GroupFetch& TGroupsFetch::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsFetch.groups)
  return _internal_groups(index);
}
inline ::server::TGroupsFetch_GroupFetch* TGroupsFetch::_internal_add_groups() {
  return groups_.Add();
}
inline ::server::TGroupsFetch_GroupFetch* TGroupsFetch::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroupsFetch.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsFetch_GroupFetch >&
TGroupsFetch::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroupsFetch.groups)
  return groups_;
}

// -------------------------------------------------------------------

// TGroupsList

// int64 page_limit = 1;
inline void TGroupsList::clear_page_limit() {
  page_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TGroupsList::_internal_page_limit() const {
  return page_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TGroupsList::page_limit() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.page_limit)
  return _internal_page_limit();
}
inline void TGroupsList::_internal_set_page_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  page_limit_ = value;
}
inline void TGroupsList::set_page_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_page_limit(value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.page_limit)
}

// bool order_by_asc = 2;
inline void TGroupsList::clear_order_by_asc() {
  order_by_asc_ = false;
}
inline bool TGroupsList::_internal_order_by_asc() const {
  return order_by_asc_;
}
inline bool TGroupsList::order_by_asc() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.order_by_asc)
  return _internal_order_by_asc();
}
inline void TGroupsList::_internal_set_order_by_asc(bool value) {
  
  order_by_asc_ = value;
}
inline void TGroupsList::set_order_by_asc(bool value) {
  _internal_set_order_by_asc(value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.order_by_asc)
}

// string lang = 3;
inline bool TGroupsList::_internal_has_lang() const {
  return filter_case() == kLang;
}
inline void TGroupsList::set_has_lang() {
  _oneof_case_[0] = kLang;
}
inline void TGroupsList::clear_lang() {
  if (_internal_has_lang()) {
    filter_.lang_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_filter();
  }
}
inline const std::string& TGroupsList::lang() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.lang)
  return _internal_lang();
}
inline void TGroupsList::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.lang)
}
inline std::string* TGroupsList::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsList.lang)
  return _internal_mutable_lang();
}
inline const std::string& TGroupsList::_internal_lang() const {
  if (_internal_has_lang()) {
    return filter_.lang_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TGroupsList::_internal_set_lang(const std::string& value) {
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsList::set_lang(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsList.lang)
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsList.lang)
}
inline void TGroupsList::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsList.lang)
}
inline void TGroupsList::set_lang(const char* value,
                             size_t size) {
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsList.lang)
}
inline std::string* TGroupsList::_internal_mutable_lang() {
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.lang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsList::release_lang() {
  // @@protoc_insertion_point(field_release:server.TGroupsList.lang)
  if (_internal_has_lang()) {
    clear_has_filter();
    return filter_.lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TGroupsList::set_allocated_lang(std::string* lang) {
  if (has_filter()) {
    clear_filter();
  }
  if (lang != nullptr) {
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(lang);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(lang);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsList.lang)
}

// int64 created_at = 4;
inline bool TGroupsList::_internal_has_created_at() const {
  return filter_case() == kCreatedAt;
}
inline void TGroupsList::set_has_created_at() {
  _oneof_case_[0] = kCreatedAt;
}
inline void TGroupsList::clear_created_at() {
  if (_internal_has_created_at()) {
    filter_.created_at_ = PROTOBUF_LONGLONG(0);
    clear_has_filter();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TGroupsList::_internal_created_at() const {
  if (_internal_has_created_at()) {
    return filter_.created_at_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TGroupsList::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_created_at()) {
    clear_filter();
    set_has_created_at();
  }
  filter_.created_at_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TGroupsList::created_at() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.created_at)
  return _internal_created_at();
}
inline void TGroupsList::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.created_at)
}

// int64 count = 5;
inline bool TGroupsList::_internal_has_count() const {
  return filter_case() == kCount;
}
inline void TGroupsList::set_has_count() {
  _oneof_case_[0] = kCount;
}
inline void TGroupsList::clear_count() {
  if (_internal_has_count()) {
    filter_.count_ = PROTOBUF_LONGLONG(0);
    clear_has_filter();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TGroupsList::_internal_count() const {
  if (_internal_has_count()) {
    return filter_.count_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TGroupsList::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_count()) {
    clear_filter();
    set_has_count();
  }
  filter_.count_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TGroupsList::count() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.count)
  return _internal_count();
}
inline void TGroupsList::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.count)
}

// string cursor = 7;
inline void TGroupsList::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TGroupsList.cursor)
  return _internal_cursor();
}
inline void TGroupsList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TGroupsList.cursor)
}
inline std::string* TGroupsList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TGroupsList::_internal_cursor() const {
  return cursor_.Get();
}
inline void TGroupsList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupsList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupsList.cursor)
}
inline void TGroupsList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupsList.cursor)
}
inline void TGroupsList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsList.cursor)
}
inline std::string* TGroupsList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TGroupsList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupsList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsList.cursor)
}

inline bool TGroupsList::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void TGroupsList::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
inline TGroupsList::FilterCase TGroupsList::filter_case() const {
  return TGroupsList::FilterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TGroups

// repeated .server.Group groups = 1;
inline int TGroups::_internal_groups_size() const {
  return groups_.size();
}
inline int TGroups::groups_size() const {
  return _internal_groups_size();
}
inline void TGroups::clear_groups() {
  groups_.Clear();
}
inline ::server::Group* TGroups::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroups.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Group >*
TGroups::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroups.groups)
  return &groups_;
}
inline const ::server::Group& TGroups::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::server::Group& TGroups::groups(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroups.groups)
  return _internal_groups(index);
}
inline ::server::Group* TGroups::_internal_add_groups() {
  return groups_.Add();
}
inline ::server::Group* TGroups::add_groups() {
  // @@protoc_insertion_point(field_add:server.TGroups.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Group >&
TGroups::groups() const {
  // @@protoc_insertion_point(field_list:server.TGroups.groups)
  return groups_;
}

// string cursor = 2;
inline void TGroups::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroups::cursor() const {
  // @@protoc_insertion_point(field_get:server.TGroups.cursor)
  return _internal_cursor();
}
inline void TGroups::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TGroups.cursor)
}
inline std::string* TGroups::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TGroups.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TGroups::_internal_cursor() const {
  return cursor_.Get();
}
inline void TGroups::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroups::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroups.cursor)
}
inline void TGroups::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroups.cursor)
}
inline void TGroups::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroups.cursor)
}
inline std::string* TGroups::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroups::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TGroups.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroups::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroups.cursor)
}

// -------------------------------------------------------------------

// TGroupsSelf_GroupSelf

// .server.Group group = 1;
inline bool TGroupsSelf_GroupSelf::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool TGroupsSelf_GroupSelf::has_group() const {
  return _internal_has_group();
}
inline void TGroupsSelf_GroupSelf::clear_group() {
  if (GetArena() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::server::Group& TGroupsSelf_GroupSelf::_internal_group() const {
  const ::server::Group* p = group_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::Group&>(
      ::server::_Group_default_instance_);
}
inline const ::server::Group& TGroupsSelf_GroupSelf::group() const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.GroupSelf.group)
  return _internal_group();
}
inline void TGroupsSelf_GroupSelf::unsafe_arena_set_allocated_group(
    ::server::Group* group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TGroupsSelf.GroupSelf.group)
}
inline ::server::Group* TGroupsSelf_GroupSelf::release_group() {
  
  ::server::Group* temp = group_;
  group_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::Group* TGroupsSelf_GroupSelf::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:server.TGroupsSelf.GroupSelf.group)
  
  ::server::Group* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::server::Group* TGroupsSelf_GroupSelf::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::Group>(GetArena());
    group_ = p;
  }
  return group_;
}
inline ::server::Group* TGroupsSelf_GroupSelf::mutable_group() {
  // @@protoc_insertion_point(field_mutable:server.TGroupsSelf.GroupSelf.group)
  return _internal_mutable_group();
}
inline void TGroupsSelf_GroupSelf::set_allocated_group(::server::Group* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:server.TGroupsSelf.GroupSelf.group)
}

// int64 state = 2;
inline void TGroupsSelf_GroupSelf::clear_state() {
  state_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TGroupsSelf_GroupSelf::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TGroupsSelf_GroupSelf::state() const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.GroupSelf.state)
  return _internal_state();
}
inline void TGroupsSelf_GroupSelf::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  state_ = value;
}
inline void TGroupsSelf_GroupSelf::set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:server.TGroupsSelf.GroupSelf.state)
}

// -------------------------------------------------------------------

// TGroupsSelf

// repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
inline int TGroupsSelf::_internal_groups_self_size() const {
  return groups_self_.size();
}
inline int TGroupsSelf::groups_self_size() const {
  return _internal_groups_self_size();
}
inline void TGroupsSelf::clear_groups_self() {
  groups_self_.Clear();
}
inline ::server::TGroupsSelf_GroupSelf* TGroupsSelf::mutable_groups_self(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsSelf.groups_self)
  return groups_self_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >*
TGroupsSelf::mutable_groups_self() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsSelf.groups_self)
  return &groups_self_;
}
inline const ::server::TGroupsSelf_GroupSelf& TGroupsSelf::_internal_groups_self(int index) const {
  return groups_self_.Get(index);
}
inline const ::server::TGroupsSelf_GroupSelf& TGroupsSelf::groups_self(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsSelf.groups_self)
  return _internal_groups_self(index);
}
inline ::server::TGroupsSelf_GroupSelf* TGroupsSelf::_internal_add_groups_self() {
  return groups_self_.Add();
}
inline ::server::TGroupsSelf_GroupSelf* TGroupsSelf::add_groups_self() {
  // @@protoc_insertion_point(field_add:server.TGroupsSelf.groups_self)
  return _internal_add_groups_self();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupsSelf_GroupSelf >&
TGroupsSelf::groups_self() const {
  // @@protoc_insertion_point(field_list:server.TGroupsSelf.groups_self)
  return groups_self_;
}

// -------------------------------------------------------------------

// GroupUser

// .server.User user = 1;
inline bool GroupUser::_internal_has_user() const {
  return this != internal_default_instance() && user_ != nullptr;
}
inline bool GroupUser::has_user() const {
  return _internal_has_user();
}
inline void GroupUser::clear_user() {
  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
}
inline const ::server::User& GroupUser::_internal_user() const {
  const ::server::User* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::User&>(
      ::server::_User_default_instance_);
}
inline const ::server::User& GroupUser::user() const {
  // @@protoc_insertion_point(field_get:server.GroupUser.user)
  return _internal_user();
}
inline void GroupUser::unsafe_arena_set_allocated_user(
    ::server::User* user) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.GroupUser.user)
}
inline ::server::User* GroupUser::release_user() {
  
  ::server::User* temp = user_;
  user_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::User* GroupUser::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:server.GroupUser.user)
  
  ::server::User* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::server::User* GroupUser::_internal_mutable_user() {
  
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::User>(GetArena());
    user_ = p;
  }
  return user_;
}
inline ::server::User* GroupUser::mutable_user() {
  // @@protoc_insertion_point(field_mutable:server.GroupUser.user)
  return _internal_mutable_user();
}
inline void GroupUser::set_allocated_user(::server::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:server.GroupUser.user)
}

// int64 state = 2;
inline void GroupUser::clear_state() {
  state_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUser::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GroupUser::state() const {
  // @@protoc_insertion_point(field_get:server.GroupUser.state)
  return _internal_state();
}
inline void GroupUser::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  state_ = value;
}
inline void GroupUser::set_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:server.GroupUser.state)
}

// -------------------------------------------------------------------

// TGroupUsersList

// string group_id = 1;
inline void TGroupUsersList::clear_group_id() {
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupUsersList::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersList.group_id)
  return _internal_group_id();
}
inline void TGroupUsersList::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersList.group_id)
}
inline std::string* TGroupUsersList::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersList.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TGroupUsersList::_internal_group_id() const {
  return group_id_.Get();
}
inline void TGroupUsersList::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupUsersList::set_group_id(std::string&& value) {
  
  group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupUsersList.group_id)
}
inline void TGroupUsersList::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersList.group_id)
}
inline void TGroupUsersList::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersList.group_id)
}
inline std::string* TGroupUsersList::_internal_mutable_group_id() {
  
  return group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupUsersList::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersList.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupUsersList::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersList.group_id)
}

// -------------------------------------------------------------------

// TGroupUsers

// repeated .server.GroupUser users = 1;
inline int TGroupUsers::_internal_users_size() const {
  return users_.size();
}
inline int TGroupUsers::users_size() const {
  return _internal_users_size();
}
inline void TGroupUsers::clear_users() {
  users_.Clear();
}
inline ::server::GroupUser* TGroupUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsers.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::GroupUser >*
TGroupUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsers.users)
  return &users_;
}
inline const ::server::GroupUser& TGroupUsers::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::server::GroupUser& TGroupUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsers.users)
  return _internal_users(index);
}
inline ::server::GroupUser* TGroupUsers::_internal_add_users() {
  return users_.Add();
}
inline ::server::GroupUser* TGroupUsers::add_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsers.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::GroupUser >&
TGroupUsers::users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsers.users)
  return users_;
}

// -------------------------------------------------------------------

// TGroupsJoin

// repeated string group_ids = 1;
inline int TGroupsJoin::_internal_group_ids_size() const {
  return group_ids_.size();
}
inline int TGroupsJoin::group_ids_size() const {
  return _internal_group_ids_size();
}
inline void TGroupsJoin::clear_group_ids() {
  group_ids_.Clear();
}
inline std::string* TGroupsJoin::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsJoin.group_ids)
  return _internal_add_group_ids();
}
inline const std::string& TGroupsJoin::_internal_group_ids(int index) const {
  return group_ids_.Get(index);
}
inline const std::string& TGroupsJoin::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsJoin.group_ids)
  return _internal_group_ids(index);
}
inline std::string* TGroupsJoin::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsJoin.group_ids)
  return group_ids_.Mutable(index);
}
inline void TGroupsJoin::set_group_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsJoin.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
inline void TGroupsJoin::set_group_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsJoin.group_ids)
  group_ids_.Mutable(index)->assign(std::move(value));
}
inline void TGroupsJoin::set_group_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsJoin.group_ids)
}
inline void TGroupsJoin::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsJoin.group_ids)
}
inline std::string* TGroupsJoin::_internal_add_group_ids() {
  return group_ids_.Add();
}
inline void TGroupsJoin::add_group_ids(const std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsJoin.group_ids)
}
inline void TGroupsJoin::add_group_ids(std::string&& value) {
  group_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TGroupsJoin.group_ids)
}
inline void TGroupsJoin::add_group_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsJoin.group_ids)
}
inline void TGroupsJoin::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsJoin.group_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TGroupsJoin::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsJoin.group_ids)
  return group_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TGroupsJoin::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsJoin.group_ids)
  return &group_ids_;
}

// -------------------------------------------------------------------

// TGroupsLeave

// repeated string group_ids = 1;
inline int TGroupsLeave::_internal_group_ids_size() const {
  return group_ids_.size();
}
inline int TGroupsLeave::group_ids_size() const {
  return _internal_group_ids_size();
}
inline void TGroupsLeave::clear_group_ids() {
  group_ids_.Clear();
}
inline std::string* TGroupsLeave::add_group_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TGroupsLeave.group_ids)
  return _internal_add_group_ids();
}
inline const std::string& TGroupsLeave::_internal_group_ids(int index) const {
  return group_ids_.Get(index);
}
inline const std::string& TGroupsLeave::group_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupsLeave.group_ids)
  return _internal_group_ids(index);
}
inline std::string* TGroupsLeave::mutable_group_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupsLeave.group_ids)
  return group_ids_.Mutable(index);
}
inline void TGroupsLeave::set_group_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsLeave.group_ids)
  group_ids_.Mutable(index)->assign(value);
}
inline void TGroupsLeave::set_group_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TGroupsLeave.group_ids)
  group_ids_.Mutable(index)->assign(std::move(value));
}
inline void TGroupsLeave::set_group_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TGroupsLeave.group_ids)
}
inline void TGroupsLeave::set_group_ids(int index, const char* value, size_t size) {
  group_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TGroupsLeave.group_ids)
}
inline std::string* TGroupsLeave::_internal_add_group_ids() {
  return group_ids_.Add();
}
inline void TGroupsLeave::add_group_ids(const std::string& value) {
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TGroupsLeave.group_ids)
}
inline void TGroupsLeave::add_group_ids(std::string&& value) {
  group_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TGroupsLeave.group_ids)
}
inline void TGroupsLeave::add_group_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TGroupsLeave.group_ids)
}
inline void TGroupsLeave::add_group_ids(const char* value, size_t size) {
  group_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TGroupsLeave.group_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TGroupsLeave::group_ids() const {
  // @@protoc_insertion_point(field_list:server.TGroupsLeave.group_ids)
  return group_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TGroupsLeave::mutable_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupsLeave.group_ids)
  return &group_ids_;
}

// -------------------------------------------------------------------

// TGroupUsersAdd_GroupUserAdd

// string group_id = 1;
inline void TGroupUsersAdd_GroupUserAdd::clear_group_id() {
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupUsersAdd_GroupUserAdd::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.GroupUserAdd.group_id)
  return _internal_group_id();
}
inline void TGroupUsersAdd_GroupUserAdd::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
inline std::string* TGroupUsersAdd_GroupUserAdd::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.GroupUserAdd.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TGroupUsersAdd_GroupUserAdd::_internal_group_id() const {
  return group_id_.Get();
}
inline void TGroupUsersAdd_GroupUserAdd::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupUsersAdd_GroupUserAdd::set_group_id(std::string&& value) {
  
  group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
inline void TGroupUsersAdd_GroupUserAdd::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
inline void TGroupUsersAdd_GroupUserAdd::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersAdd.GroupUserAdd.group_id)
}
inline std::string* TGroupUsersAdd_GroupUserAdd::_internal_mutable_group_id() {
  
  return group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupUsersAdd_GroupUserAdd::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersAdd.GroupUserAdd.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupUsersAdd_GroupUserAdd::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersAdd.GroupUserAdd.group_id)
}

// string user_id = 2;
inline void TGroupUsersAdd_GroupUserAdd::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupUsersAdd_GroupUserAdd::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.GroupUserAdd.user_id)
  return _internal_user_id();
}
inline void TGroupUsersAdd_GroupUserAdd::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
inline std::string* TGroupUsersAdd_GroupUserAdd::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.GroupUserAdd.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TGroupUsersAdd_GroupUserAdd::_internal_user_id() const {
  return user_id_.Get();
}
inline void TGroupUsersAdd_GroupUserAdd::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupUsersAdd_GroupUserAdd::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
inline void TGroupUsersAdd_GroupUserAdd::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
inline void TGroupUsersAdd_GroupUserAdd::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersAdd.GroupUserAdd.user_id)
}
inline std::string* TGroupUsersAdd_GroupUserAdd::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupUsersAdd_GroupUserAdd::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersAdd.GroupUserAdd.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupUsersAdd_GroupUserAdd::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersAdd.GroupUserAdd.user_id)
}

// -------------------------------------------------------------------

// TGroupUsersAdd

// repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
inline int TGroupUsersAdd::_internal_group_users_size() const {
  return group_users_.size();
}
inline int TGroupUsersAdd::group_users_size() const {
  return _internal_group_users_size();
}
inline void TGroupUsersAdd::clear_group_users() {
  group_users_.Clear();
}
inline ::server::TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersAdd.group_users)
  return group_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >*
TGroupUsersAdd::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersAdd.group_users)
  return &group_users_;
}
inline const ::server::TGroupUsersAdd_GroupUserAdd& TGroupUsersAdd::_internal_group_users(int index) const {
  return group_users_.Get(index);
}
inline const ::server::TGroupUsersAdd_GroupUserAdd& TGroupUsersAdd::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersAdd.group_users)
  return _internal_group_users(index);
}
inline ::server::TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd::_internal_add_group_users() {
  return group_users_.Add();
}
inline ::server::TGroupUsersAdd_GroupUserAdd* TGroupUsersAdd::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersAdd.group_users)
  return _internal_add_group_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersAdd_GroupUserAdd >&
TGroupUsersAdd::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersAdd.group_users)
  return group_users_;
}

// -------------------------------------------------------------------

// TGroupUsersKick_GroupUserKick

// string group_id = 1;
inline void TGroupUsersKick_GroupUserKick::clear_group_id() {
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupUsersKick_GroupUserKick::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.GroupUserKick.group_id)
  return _internal_group_id();
}
inline void TGroupUsersKick_GroupUserKick::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersKick.GroupUserKick.group_id)
}
inline std::string* TGroupUsersKick_GroupUserKick::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.GroupUserKick.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TGroupUsersKick_GroupUserKick::_internal_group_id() const {
  return group_id_.Get();
}
inline void TGroupUsersKick_GroupUserKick::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupUsersKick_GroupUserKick::set_group_id(std::string&& value) {
  
  group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupUsersKick.GroupUserKick.group_id)
}
inline void TGroupUsersKick_GroupUserKick::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersKick.GroupUserKick.group_id)
}
inline void TGroupUsersKick_GroupUserKick::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersKick.GroupUserKick.group_id)
}
inline std::string* TGroupUsersKick_GroupUserKick::_internal_mutable_group_id() {
  
  return group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupUsersKick_GroupUserKick::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersKick.GroupUserKick.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupUsersKick_GroupUserKick::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersKick.GroupUserKick.group_id)
}

// string user_id = 2;
inline void TGroupUsersKick_GroupUserKick::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupUsersKick_GroupUserKick::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.GroupUserKick.user_id)
  return _internal_user_id();
}
inline void TGroupUsersKick_GroupUserKick::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersKick.GroupUserKick.user_id)
}
inline std::string* TGroupUsersKick_GroupUserKick::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.GroupUserKick.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TGroupUsersKick_GroupUserKick::_internal_user_id() const {
  return user_id_.Get();
}
inline void TGroupUsersKick_GroupUserKick::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupUsersKick_GroupUserKick::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupUsersKick.GroupUserKick.user_id)
}
inline void TGroupUsersKick_GroupUserKick::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersKick.GroupUserKick.user_id)
}
inline void TGroupUsersKick_GroupUserKick::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersKick.GroupUserKick.user_id)
}
inline std::string* TGroupUsersKick_GroupUserKick::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupUsersKick_GroupUserKick::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersKick.GroupUserKick.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupUsersKick_GroupUserKick::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersKick.GroupUserKick.user_id)
}

// -------------------------------------------------------------------

// TGroupUsersKick

// repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
inline int TGroupUsersKick::_internal_group_users_size() const {
  return group_users_.size();
}
inline int TGroupUsersKick::group_users_size() const {
  return _internal_group_users_size();
}
inline void TGroupUsersKick::clear_group_users() {
  group_users_.Clear();
}
inline ::server::TGroupUsersKick_GroupUserKick* TGroupUsersKick::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersKick.group_users)
  return group_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >*
TGroupUsersKick::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersKick.group_users)
  return &group_users_;
}
inline const ::server::TGroupUsersKick_GroupUserKick& TGroupUsersKick::_internal_group_users(int index) const {
  return group_users_.Get(index);
}
inline const ::server::TGroupUsersKick_GroupUserKick& TGroupUsersKick::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersKick.group_users)
  return _internal_group_users(index);
}
inline ::server::TGroupUsersKick_GroupUserKick* TGroupUsersKick::_internal_add_group_users() {
  return group_users_.Add();
}
inline ::server::TGroupUsersKick_GroupUserKick* TGroupUsersKick::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersKick.group_users)
  return _internal_add_group_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersKick_GroupUserKick >&
TGroupUsersKick::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersKick.group_users)
  return group_users_;
}

// -------------------------------------------------------------------

// TGroupUsersPromote_GroupUserPromote

// string group_id = 1;
inline void TGroupUsersPromote_GroupUserPromote::clear_group_id() {
  group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupUsersPromote_GroupUserPromote::group_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.GroupUserPromote.group_id)
  return _internal_group_id();
}
inline void TGroupUsersPromote_GroupUserPromote::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
inline std::string* TGroupUsersPromote_GroupUserPromote::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.GroupUserPromote.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TGroupUsersPromote_GroupUserPromote::_internal_group_id() const {
  return group_id_.Get();
}
inline void TGroupUsersPromote_GroupUserPromote::_internal_set_group_id(const std::string& value) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupUsersPromote_GroupUserPromote::set_group_id(std::string&& value) {
  
  group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
inline void TGroupUsersPromote_GroupUserPromote::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
inline void TGroupUsersPromote_GroupUserPromote::set_group_id(const char* value,
    size_t size) {
  
  group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersPromote.GroupUserPromote.group_id)
}
inline std::string* TGroupUsersPromote_GroupUserPromote::_internal_mutable_group_id() {
  
  return group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupUsersPromote_GroupUserPromote::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersPromote.GroupUserPromote.group_id)
  return group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupUsersPromote_GroupUserPromote::set_allocated_group_id(std::string* group_id) {
  if (group_id != nullptr) {
    
  } else {
    
  }
  group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersPromote.GroupUserPromote.group_id)
}

// string user_id = 2;
inline void TGroupUsersPromote_GroupUserPromote::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TGroupUsersPromote_GroupUserPromote::user_id() const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.GroupUserPromote.user_id)
  return _internal_user_id();
}
inline void TGroupUsersPromote_GroupUserPromote::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
inline std::string* TGroupUsersPromote_GroupUserPromote::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.GroupUserPromote.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TGroupUsersPromote_GroupUserPromote::_internal_user_id() const {
  return user_id_.Get();
}
inline void TGroupUsersPromote_GroupUserPromote::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TGroupUsersPromote_GroupUserPromote::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
inline void TGroupUsersPromote_GroupUserPromote::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
inline void TGroupUsersPromote_GroupUserPromote::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TGroupUsersPromote.GroupUserPromote.user_id)
}
inline std::string* TGroupUsersPromote_GroupUserPromote::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TGroupUsersPromote_GroupUserPromote::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TGroupUsersPromote.GroupUserPromote.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TGroupUsersPromote_GroupUserPromote::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TGroupUsersPromote.GroupUserPromote.user_id)
}

// -------------------------------------------------------------------

// TGroupUsersPromote

// repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
inline int TGroupUsersPromote::_internal_group_users_size() const {
  return group_users_.size();
}
inline int TGroupUsersPromote::group_users_size() const {
  return _internal_group_users_size();
}
inline void TGroupUsersPromote::clear_group_users() {
  group_users_.Clear();
}
inline ::server::TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote::mutable_group_users(int index) {
  // @@protoc_insertion_point(field_mutable:server.TGroupUsersPromote.group_users)
  return group_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >*
TGroupUsersPromote::mutable_group_users() {
  // @@protoc_insertion_point(field_mutable_list:server.TGroupUsersPromote.group_users)
  return &group_users_;
}
inline const ::server::TGroupUsersPromote_GroupUserPromote& TGroupUsersPromote::_internal_group_users(int index) const {
  return group_users_.Get(index);
}
inline const ::server::TGroupUsersPromote_GroupUserPromote& TGroupUsersPromote::group_users(int index) const {
  // @@protoc_insertion_point(field_get:server.TGroupUsersPromote.group_users)
  return _internal_group_users(index);
}
inline ::server::TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote::_internal_add_group_users() {
  return group_users_.Add();
}
inline ::server::TGroupUsersPromote_GroupUserPromote* TGroupUsersPromote::add_group_users() {
  // @@protoc_insertion_point(field_add:server.TGroupUsersPromote.group_users)
  return _internal_add_group_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TGroupUsersPromote_GroupUserPromote >&
TGroupUsersPromote::group_users() const {
  // @@protoc_insertion_point(field_list:server.TGroupUsersPromote.group_users)
  return group_users_;
}

// -------------------------------------------------------------------

// TopicId

// string dm = 1;
inline bool TopicId::_internal_has_dm() const {
  return id_case() == kDm;
}
inline void TopicId::set_has_dm() {
  _oneof_case_[0] = kDm;
}
inline void TopicId::clear_dm() {
  if (_internal_has_dm()) {
    id_.dm_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TopicId::dm() const {
  // @@protoc_insertion_point(field_get:server.TopicId.dm)
  return _internal_dm();
}
inline void TopicId::set_dm(const std::string& value) {
  _internal_set_dm(value);
  // @@protoc_insertion_point(field_set:server.TopicId.dm)
}
inline std::string* TopicId::mutable_dm() {
  // @@protoc_insertion_point(field_mutable:server.TopicId.dm)
  return _internal_mutable_dm();
}
inline const std::string& TopicId::_internal_dm() const {
  if (_internal_has_dm()) {
    return id_.dm_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TopicId::_internal_set_dm(const std::string& value) {
  if (!_internal_has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopicId::set_dm(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.dm)
  if (!_internal_has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TopicId.dm)
}
inline void TopicId::set_dm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TopicId.dm)
}
inline void TopicId::set_dm(const char* value,
                             size_t size) {
  if (!_internal_has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.dm_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.dm)
}
inline std::string* TopicId::_internal_mutable_dm() {
  if (!_internal_has_dm()) {
    clear_id();
    set_has_dm();
    id_.dm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.dm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopicId::release_dm() {
  // @@protoc_insertion_point(field_release:server.TopicId.dm)
  if (_internal_has_dm()) {
    clear_has_id();
    return id_.dm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TopicId::set_allocated_dm(std::string* dm) {
  if (has_id()) {
    clear_id();
  }
  if (dm != nullptr) {
    set_has_dm();
    id_.dm_.UnsafeSetDefault(dm);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(dm);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.dm)
}

// string room = 2;
inline bool TopicId::_internal_has_room() const {
  return id_case() == kRoom;
}
inline void TopicId::set_has_room() {
  _oneof_case_[0] = kRoom;
}
inline void TopicId::clear_room() {
  if (_internal_has_room()) {
    id_.room_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TopicId::room() const {
  // @@protoc_insertion_point(field_get:server.TopicId.room)
  return _internal_room();
}
inline void TopicId::set_room(const std::string& value) {
  _internal_set_room(value);
  // @@protoc_insertion_point(field_set:server.TopicId.room)
}
inline std::string* TopicId::mutable_room() {
  // @@protoc_insertion_point(field_mutable:server.TopicId.room)
  return _internal_mutable_room();
}
inline const std::string& TopicId::_internal_room() const {
  if (_internal_has_room()) {
    return id_.room_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TopicId::_internal_set_room(const std::string& value) {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopicId::set_room(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.room)
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TopicId.room)
}
inline void TopicId::set_room(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TopicId.room)
}
inline void TopicId::set_room(const char* value,
                             size_t size) {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.room)
}
inline std::string* TopicId::_internal_mutable_room() {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.room_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopicId::release_room() {
  // @@protoc_insertion_point(field_release:server.TopicId.room)
  if (_internal_has_room()) {
    clear_has_id();
    return id_.room_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TopicId::set_allocated_room(std::string* room) {
  if (has_id()) {
    clear_id();
  }
  if (room != nullptr) {
    set_has_room();
    id_.room_.UnsafeSetDefault(room);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(room);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.room)
}

// string group_id = 3;
inline bool TopicId::_internal_has_group_id() const {
  return id_case() == kGroupId;
}
inline void TopicId::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void TopicId::clear_group_id() {
  if (_internal_has_group_id()) {
    id_.group_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TopicId::group_id() const {
  // @@protoc_insertion_point(field_get:server.TopicId.group_id)
  return _internal_group_id();
}
inline void TopicId::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TopicId.group_id)
}
inline std::string* TopicId::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TopicId.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TopicId::_internal_group_id() const {
  if (_internal_has_group_id()) {
    return id_.group_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TopicId::_internal_set_group_id(const std::string& value) {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopicId::set_group_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TopicId.group_id)
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TopicId.group_id)
}
inline void TopicId::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TopicId.group_id)
}
inline void TopicId::set_group_id(const char* value,
                             size_t size) {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TopicId.group_id)
}
inline std::string* TopicId::_internal_mutable_group_id() {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopicId::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TopicId.group_id)
  if (_internal_has_group_id()) {
    clear_has_id();
    return id_.group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TopicId::set_allocated_group_id(std::string* group_id) {
  if (has_id()) {
    clear_id();
  }
  if (group_id != nullptr) {
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(group_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(group_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TopicId.group_id)
}

inline bool TopicId::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TopicId::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TopicId::IdCase TopicId::id_case() const {
  return TopicId::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserPresence

// string user_id = 1;
inline void UserPresence::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserPresence::user_id() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.user_id)
  return _internal_user_id();
}
inline void UserPresence::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.UserPresence.user_id)
}
inline std::string* UserPresence::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.UserPresence.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& UserPresence::_internal_user_id() const {
  return user_id_.Get();
}
inline void UserPresence::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserPresence::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.UserPresence.user_id)
}
inline void UserPresence::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.UserPresence.user_id)
}
inline void UserPresence::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.user_id)
}
inline std::string* UserPresence::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserPresence::release_user_id() {
  // @@protoc_insertion_point(field_release:server.UserPresence.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPresence::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.user_id)
}

// string session_id = 2;
inline void UserPresence::clear_session_id() {
  session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserPresence::session_id() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.session_id)
  return _internal_session_id();
}
inline void UserPresence::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:server.UserPresence.session_id)
}
inline std::string* UserPresence::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:server.UserPresence.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& UserPresence::_internal_session_id() const {
  return session_id_.Get();
}
inline void UserPresence::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserPresence::set_session_id(std::string&& value) {
  
  session_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.UserPresence.session_id)
}
inline void UserPresence::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.UserPresence.session_id)
}
inline void UserPresence::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.session_id)
}
inline std::string* UserPresence::_internal_mutable_session_id() {
  
  return session_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserPresence::release_session_id() {
  // @@protoc_insertion_point(field_release:server.UserPresence.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPresence::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.session_id)
}

// string handle = 3;
inline void UserPresence::clear_handle() {
  handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserPresence::handle() const {
  // @@protoc_insertion_point(field_get:server.UserPresence.handle)
  return _internal_handle();
}
inline void UserPresence::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:server.UserPresence.handle)
}
inline std::string* UserPresence::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:server.UserPresence.handle)
  return _internal_mutable_handle();
}
inline const std::string& UserPresence::_internal_handle() const {
  return handle_.Get();
}
inline void UserPresence::_internal_set_handle(const std::string& value) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserPresence::set_handle(std::string&& value) {
  
  handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.UserPresence.handle)
}
inline void UserPresence::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.UserPresence.handle)
}
inline void UserPresence::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.UserPresence.handle)
}
inline std::string* UserPresence::_internal_mutable_handle() {
  
  return handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserPresence::release_handle() {
  // @@protoc_insertion_point(field_release:server.UserPresence.handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserPresence::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.UserPresence.handle)
}

// -------------------------------------------------------------------

// TTopicsJoin_TopicJoin

// string user_id = 1;
inline bool TTopicsJoin_TopicJoin::_internal_has_user_id() const {
  return id_case() == kUserId;
}
inline void TTopicsJoin_TopicJoin::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
inline void TTopicsJoin_TopicJoin::clear_user_id() {
  if (_internal_has_user_id()) {
    id_.user_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TTopicsJoin_TopicJoin::user_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.user_id)
  return _internal_user_id();
}
inline void TTopicsJoin_TopicJoin::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.user_id)
}
inline std::string* TTopicsJoin_TopicJoin::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TTopicsJoin_TopicJoin::_internal_user_id() const {
  if (_internal_has_user_id()) {
    return id_.user_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicsJoin_TopicJoin::_internal_set_user_id(const std::string& value) {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicsJoin_TopicJoin::set_user_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.user_id)
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicsJoin.TopicJoin.user_id)
}
inline void TTopicsJoin_TopicJoin::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.user_id)
}
inline void TTopicsJoin_TopicJoin::set_user_id(const char* value,
                             size_t size) {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.user_id)
}
inline std::string* TTopicsJoin_TopicJoin::_internal_mutable_user_id() {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicsJoin_TopicJoin::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.user_id)
  if (_internal_has_user_id()) {
    clear_has_id();
    return id_.user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TTopicsJoin_TopicJoin::set_allocated_user_id(std::string* user_id) {
  if (has_id()) {
    clear_id();
  }
  if (user_id != nullptr) {
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(user_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(user_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.user_id)
}

// string room = 2;
inline bool TTopicsJoin_TopicJoin::_internal_has_room() const {
  return id_case() == kRoom;
}
inline void TTopicsJoin_TopicJoin::set_has_room() {
  _oneof_case_[0] = kRoom;
}
inline void TTopicsJoin_TopicJoin::clear_room() {
  if (_internal_has_room()) {
    id_.room_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TTopicsJoin_TopicJoin::room() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.room)
  return _internal_room();
}
inline void TTopicsJoin_TopicJoin::set_room(const std::string& value) {
  _internal_set_room(value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.room)
}
inline std::string* TTopicsJoin_TopicJoin::mutable_room() {
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.room)
  return _internal_mutable_room();
}
inline const std::string& TTopicsJoin_TopicJoin::_internal_room() const {
  if (_internal_has_room()) {
    return id_.room_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicsJoin_TopicJoin::_internal_set_room(const std::string& value) {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicsJoin_TopicJoin::set_room(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.room)
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicsJoin.TopicJoin.room)
}
inline void TTopicsJoin_TopicJoin::set_room(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.room)
}
inline void TTopicsJoin_TopicJoin::set_room(const char* value,
                             size_t size) {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.room)
}
inline std::string* TTopicsJoin_TopicJoin::_internal_mutable_room() {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.room_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicsJoin_TopicJoin::release_room() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.room)
  if (_internal_has_room()) {
    clear_has_id();
    return id_.room_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TTopicsJoin_TopicJoin::set_allocated_room(std::string* room) {
  if (has_id()) {
    clear_id();
  }
  if (room != nullptr) {
    set_has_room();
    id_.room_.UnsafeSetDefault(room);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(room);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.room)
}

// string group_id = 3;
inline bool TTopicsJoin_TopicJoin::_internal_has_group_id() const {
  return id_case() == kGroupId;
}
inline void TTopicsJoin_TopicJoin::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void TTopicsJoin_TopicJoin::clear_group_id() {
  if (_internal_has_group_id()) {
    id_.group_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TTopicsJoin_TopicJoin::group_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.TopicJoin.group_id)
  return _internal_group_id();
}
inline void TTopicsJoin_TopicJoin::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.group_id)
}
inline std::string* TTopicsJoin_TopicJoin::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.TopicJoin.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TTopicsJoin_TopicJoin::_internal_group_id() const {
  if (_internal_has_group_id()) {
    return id_.group_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicsJoin_TopicJoin::_internal_set_group_id(const std::string& value) {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicsJoin_TopicJoin::set_group_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TTopicsJoin.TopicJoin.group_id)
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicsJoin.TopicJoin.group_id)
}
inline void TTopicsJoin_TopicJoin::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicsJoin.TopicJoin.group_id)
}
inline void TTopicsJoin_TopicJoin::set_group_id(const char* value,
                             size_t size) {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicsJoin.TopicJoin.group_id)
}
inline std::string* TTopicsJoin_TopicJoin::_internal_mutable_group_id() {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicsJoin_TopicJoin::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TTopicsJoin.TopicJoin.group_id)
  if (_internal_has_group_id()) {
    clear_has_id();
    return id_.group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TTopicsJoin_TopicJoin::set_allocated_group_id(std::string* group_id) {
  if (has_id()) {
    clear_id();
  }
  if (group_id != nullptr) {
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(group_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(group_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicsJoin.TopicJoin.group_id)
}

inline bool TTopicsJoin_TopicJoin::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TTopicsJoin_TopicJoin::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TTopicsJoin_TopicJoin::IdCase TTopicsJoin_TopicJoin::id_case() const {
  return TTopicsJoin_TopicJoin::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TTopicsJoin

// repeated .server.TTopicsJoin.TopicJoin joins = 1;
inline int TTopicsJoin::_internal_joins_size() const {
  return joins_.size();
}
inline int TTopicsJoin::joins_size() const {
  return _internal_joins_size();
}
inline void TTopicsJoin::clear_joins() {
  joins_.Clear();
}
inline ::server::TTopicsJoin_TopicJoin* TTopicsJoin::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicsJoin.joins)
  return joins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >*
TTopicsJoin::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicsJoin.joins)
  return &joins_;
}
inline const ::server::TTopicsJoin_TopicJoin& TTopicsJoin::_internal_joins(int index) const {
  return joins_.Get(index);
}
inline const ::server::TTopicsJoin_TopicJoin& TTopicsJoin::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicsJoin.joins)
  return _internal_joins(index);
}
inline ::server::TTopicsJoin_TopicJoin* TTopicsJoin::_internal_add_joins() {
  return joins_.Add();
}
inline ::server::TTopicsJoin_TopicJoin* TTopicsJoin::add_joins() {
  // @@protoc_insertion_point(field_add:server.TTopicsJoin.joins)
  return _internal_add_joins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopicsJoin_TopicJoin >&
TTopicsJoin::joins() const {
  // @@protoc_insertion_point(field_list:server.TTopicsJoin.joins)
  return joins_;
}

// -------------------------------------------------------------------

// TTopics_Topic

// .server.TopicId topic = 1;
inline bool TTopics_Topic::_internal_has_topic() const {
  return this != internal_default_instance() && topic_ != nullptr;
}
inline bool TTopics_Topic::has_topic() const {
  return _internal_has_topic();
}
inline void TTopics_Topic::clear_topic() {
  if (GetArena() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
inline const ::server::TopicId& TTopics_Topic::_internal_topic() const {
  const ::server::TopicId* p = topic_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::TopicId&>(
      ::server::_TopicId_default_instance_);
}
inline const ::server::TopicId& TTopics_Topic::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.topic)
  return _internal_topic();
}
inline void TTopics_Topic::unsafe_arena_set_allocated_topic(
    ::server::TopicId* topic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_);
  }
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TTopics.Topic.topic)
}
inline ::server::TopicId* TTopics_Topic::release_topic() {
  
  ::server::TopicId* temp = topic_;
  topic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::TopicId* TTopics_Topic::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopics.Topic.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = nullptr;
  return temp;
}
inline ::server::TopicId* TTopics_Topic::_internal_mutable_topic() {
  
  if (topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::TopicId>(GetArena());
    topic_ = p;
  }
  return topic_;
}
inline ::server::TopicId* TTopics_Topic::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.topic)
  return _internal_mutable_topic();
}
inline void TTopics_Topic::set_allocated_topic(::server::TopicId* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topic_;
  }
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic);
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:server.TTopics.Topic.topic)
}

// repeated .server.UserPresence presences = 2;
inline int TTopics_Topic::_internal_presences_size() const {
  return presences_.size();
}
inline int TTopics_Topic::presences_size() const {
  return _internal_presences_size();
}
inline void TTopics_Topic::clear_presences() {
  presences_.Clear();
}
inline ::server::UserPresence* TTopics_Topic::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.presences)
  return presences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
TTopics_Topic::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopics.Topic.presences)
  return &presences_;
}
inline const ::server::UserPresence& TTopics_Topic::_internal_presences(int index) const {
  return presences_.Get(index);
}
inline const ::server::UserPresence& TTopics_Topic::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.presences)
  return _internal_presences(index);
}
inline ::server::UserPresence* TTopics_Topic::_internal_add_presences() {
  return presences_.Add();
}
inline ::server::UserPresence* TTopics_Topic::add_presences() {
  // @@protoc_insertion_point(field_add:server.TTopics.Topic.presences)
  return _internal_add_presences();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
TTopics_Topic::presences() const {
  // @@protoc_insertion_point(field_list:server.TTopics.Topic.presences)
  return presences_;
}

// .server.UserPresence self = 3;
inline bool TTopics_Topic::_internal_has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline bool TTopics_Topic::has_self() const {
  return _internal_has_self();
}
inline void TTopics_Topic::clear_self() {
  if (GetArena() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
inline const ::server::UserPresence& TTopics_Topic::_internal_self() const {
  const ::server::UserPresence* p = self_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::UserPresence&>(
      ::server::_UserPresence_default_instance_);
}
inline const ::server::UserPresence& TTopics_Topic::self() const {
  // @@protoc_insertion_point(field_get:server.TTopics.Topic.self)
  return _internal_self();
}
inline void TTopics_Topic::unsafe_arena_set_allocated_self(
    ::server::UserPresence* self) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TTopics.Topic.self)
}
inline ::server::UserPresence* TTopics_Topic::release_self() {
  
  ::server::UserPresence* temp = self_;
  self_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::UserPresence* TTopics_Topic::unsafe_arena_release_self() {
  // @@protoc_insertion_point(field_release:server.TTopics.Topic.self)
  
  ::server::UserPresence* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::server::UserPresence* TTopics_Topic::_internal_mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::UserPresence>(GetArena());
    self_ = p;
  }
  return self_;
}
inline ::server::UserPresence* TTopics_Topic::mutable_self() {
  // @@protoc_insertion_point(field_mutable:server.TTopics.Topic.self)
  return _internal_mutable_self();
}
inline void TTopics_Topic::set_allocated_self(::server::UserPresence* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete self_;
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self);
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:server.TTopics.Topic.self)
}

// -------------------------------------------------------------------

// TTopics

// repeated .server.TTopics.Topic topics = 1;
inline int TTopics::_internal_topics_size() const {
  return topics_.size();
}
inline int TTopics::topics_size() const {
  return _internal_topics_size();
}
inline void TTopics::clear_topics() {
  topics_.Clear();
}
inline ::server::TTopics_Topic* TTopics::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopics.topics)
  return topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopics_Topic >*
TTopics::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopics.topics)
  return &topics_;
}
inline const ::server::TTopics_Topic& TTopics::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const ::server::TTopics_Topic& TTopics::topics(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopics.topics)
  return _internal_topics(index);
}
inline ::server::TTopics_Topic* TTopics::_internal_add_topics() {
  return topics_.Add();
}
inline ::server::TTopics_Topic* TTopics::add_topics() {
  // @@protoc_insertion_point(field_add:server.TTopics.topics)
  return _internal_add_topics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TTopics_Topic >&
TTopics::topics() const {
  // @@protoc_insertion_point(field_list:server.TTopics.topics)
  return topics_;
}

// -------------------------------------------------------------------

// TTopicsLeave

// repeated .server.TopicId topics = 1;
inline int TTopicsLeave::_internal_topics_size() const {
  return topics_.size();
}
inline int TTopicsLeave::topics_size() const {
  return _internal_topics_size();
}
inline void TTopicsLeave::clear_topics() {
  topics_.Clear();
}
inline ::server::TopicId* TTopicsLeave::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicsLeave.topics)
  return topics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicId >*
TTopicsLeave::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicsLeave.topics)
  return &topics_;
}
inline const ::server::TopicId& TTopicsLeave::_internal_topics(int index) const {
  return topics_.Get(index);
}
inline const ::server::TopicId& TTopicsLeave::topics(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicsLeave.topics)
  return _internal_topics(index);
}
inline ::server::TopicId* TTopicsLeave::_internal_add_topics() {
  return topics_.Add();
}
inline ::server::TopicId* TTopicsLeave::add_topics() {
  // @@protoc_insertion_point(field_add:server.TTopicsLeave.topics)
  return _internal_add_topics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicId >&
TTopicsLeave::topics() const {
  // @@protoc_insertion_point(field_list:server.TTopicsLeave.topics)
  return topics_;
}

// -------------------------------------------------------------------

// TTopicMessageSend

// .server.TopicId topic = 1;
inline bool TTopicMessageSend::_internal_has_topic() const {
  return this != internal_default_instance() && topic_ != nullptr;
}
inline bool TTopicMessageSend::has_topic() const {
  return _internal_has_topic();
}
inline void TTopicMessageSend::clear_topic() {
  if (GetArena() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
inline const ::server::TopicId& TTopicMessageSend::_internal_topic() const {
  const ::server::TopicId* p = topic_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::TopicId&>(
      ::server::_TopicId_default_instance_);
}
inline const ::server::TopicId& TTopicMessageSend::topic() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageSend.topic)
  return _internal_topic();
}
inline void TTopicMessageSend::unsafe_arena_set_allocated_topic(
    ::server::TopicId* topic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_);
  }
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TTopicMessageSend.topic)
}
inline ::server::TopicId* TTopicMessageSend::release_topic() {
  
  ::server::TopicId* temp = topic_;
  topic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::TopicId* TTopicMessageSend::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageSend.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = nullptr;
  return temp;
}
inline ::server::TopicId* TTopicMessageSend::_internal_mutable_topic() {
  
  if (topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::TopicId>(GetArena());
    topic_ = p;
  }
  return topic_;
}
inline ::server::TopicId* TTopicMessageSend::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageSend.topic)
  return _internal_mutable_topic();
}
inline void TTopicMessageSend::set_allocated_topic(::server::TopicId* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topic_;
  }
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic);
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageSend.topic)
}

// string data = 2;
inline void TTopicMessageSend::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TTopicMessageSend::data() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageSend.data)
  return _internal_data();
}
inline void TTopicMessageSend::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageSend.data)
}
inline std::string* TTopicMessageSend::mutable_data() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageSend.data)
  return _internal_mutable_data();
}
inline const std::string& TTopicMessageSend::_internal_data() const {
  return data_.Get();
}
inline void TTopicMessageSend::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicMessageSend::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicMessageSend.data)
}
inline void TTopicMessageSend::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageSend.data)
}
inline void TTopicMessageSend::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageSend.data)
}
inline std::string* TTopicMessageSend::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicMessageSend::release_data() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageSend.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TTopicMessageSend::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageSend.data)
}

// -------------------------------------------------------------------

// TTopicMessageAck

// string message_id = 1;
inline void TTopicMessageAck::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TTopicMessageAck::message_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.message_id)
  return _internal_message_id();
}
inline void TTopicMessageAck::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.message_id)
}
inline std::string* TTopicMessageAck::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageAck.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& TTopicMessageAck::_internal_message_id() const {
  return message_id_.Get();
}
inline void TTopicMessageAck::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicMessageAck::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicMessageAck.message_id)
}
inline void TTopicMessageAck::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageAck.message_id)
}
inline void TTopicMessageAck::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageAck.message_id)
}
inline std::string* TTopicMessageAck::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicMessageAck::release_message_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageAck.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TTopicMessageAck::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageAck.message_id)
}

// int64 created_at = 2;
inline void TTopicMessageAck::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TTopicMessageAck::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TTopicMessageAck::created_at() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.created_at)
  return _internal_created_at();
}
inline void TTopicMessageAck::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void TTopicMessageAck::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.created_at)
}

// int64 expires_at = 3;
inline void TTopicMessageAck::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TTopicMessageAck::_internal_expires_at() const {
  return expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TTopicMessageAck::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.expires_at)
  return _internal_expires_at();
}
inline void TTopicMessageAck::_internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expires_at_ = value;
}
inline void TTopicMessageAck::set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expires_at(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.expires_at)
}

// string handle = 4;
inline void TTopicMessageAck::clear_handle() {
  handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TTopicMessageAck::handle() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessageAck.handle)
  return _internal_handle();
}
inline void TTopicMessageAck::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessageAck.handle)
}
inline std::string* TTopicMessageAck::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessageAck.handle)
  return _internal_mutable_handle();
}
inline const std::string& TTopicMessageAck::_internal_handle() const {
  return handle_.Get();
}
inline void TTopicMessageAck::_internal_set_handle(const std::string& value) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicMessageAck::set_handle(std::string&& value) {
  
  handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicMessageAck.handle)
}
inline void TTopicMessageAck::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicMessageAck.handle)
}
inline void TTopicMessageAck::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessageAck.handle)
}
inline std::string* TTopicMessageAck::_internal_mutable_handle() {
  
  return handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicMessageAck::release_handle() {
  // @@protoc_insertion_point(field_release:server.TTopicMessageAck.handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TTopicMessageAck::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessageAck.handle)
}

// -------------------------------------------------------------------

// TopicMessage

// .server.TopicId topic = 1;
inline bool TopicMessage::_internal_has_topic() const {
  return this != internal_default_instance() && topic_ != nullptr;
}
inline bool TopicMessage::has_topic() const {
  return _internal_has_topic();
}
inline void TopicMessage::clear_topic() {
  if (GetArena() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
inline const ::server::TopicId& TopicMessage::_internal_topic() const {
  const ::server::TopicId* p = topic_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::TopicId&>(
      ::server::_TopicId_default_instance_);
}
inline const ::server::TopicId& TopicMessage::topic() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.topic)
  return _internal_topic();
}
inline void TopicMessage::unsafe_arena_set_allocated_topic(
    ::server::TopicId* topic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_);
  }
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TopicMessage.topic)
}
inline ::server::TopicId* TopicMessage::release_topic() {
  
  ::server::TopicId* temp = topic_;
  topic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::TopicId* TopicMessage::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = nullptr;
  return temp;
}
inline ::server::TopicId* TopicMessage::_internal_mutable_topic() {
  
  if (topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::TopicId>(GetArena());
    topic_ = p;
  }
  return topic_;
}
inline ::server::TopicId* TopicMessage::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.topic)
  return _internal_mutable_topic();
}
inline void TopicMessage::set_allocated_topic(::server::TopicId* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topic_;
  }
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic);
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.topic)
}

// string user_id = 2;
inline void TopicMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopicMessage::user_id() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.user_id)
  return _internal_user_id();
}
inline void TopicMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.user_id)
}
inline std::string* TopicMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TopicMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void TopicMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopicMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TopicMessage.user_id)
}
inline void TopicMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.user_id)
}
inline void TopicMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.user_id)
}
inline std::string* TopicMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopicMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopicMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.user_id)
}

// string message_id = 3;
inline void TopicMessage::clear_message_id() {
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopicMessage::message_id() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.message_id)
  return _internal_message_id();
}
inline void TopicMessage::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.message_id)
}
inline std::string* TopicMessage::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& TopicMessage::_internal_message_id() const {
  return message_id_.Get();
}
inline void TopicMessage::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopicMessage::set_message_id(std::string&& value) {
  
  message_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TopicMessage.message_id)
}
inline void TopicMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.message_id)
}
inline void TopicMessage::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.message_id)
}
inline std::string* TopicMessage::_internal_mutable_message_id() {
  
  return message_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopicMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopicMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.message_id)
}

// int64 created_at = 4;
inline void TopicMessage::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopicMessage::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopicMessage::created_at() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.created_at)
  return _internal_created_at();
}
inline void TopicMessage::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void TopicMessage::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.created_at)
}

// int64 expires_at = 5;
inline void TopicMessage::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopicMessage::_internal_expires_at() const {
  return expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopicMessage::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.expires_at)
  return _internal_expires_at();
}
inline void TopicMessage::_internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expires_at_ = value;
}
inline void TopicMessage::set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expires_at(value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.expires_at)
}

// string handle = 6;
inline void TopicMessage::clear_handle() {
  handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopicMessage::handle() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.handle)
  return _internal_handle();
}
inline void TopicMessage::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.handle)
}
inline std::string* TopicMessage::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.handle)
  return _internal_mutable_handle();
}
inline const std::string& TopicMessage::_internal_handle() const {
  return handle_.Get();
}
inline void TopicMessage::_internal_set_handle(const std::string& value) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopicMessage::set_handle(std::string&& value) {
  
  handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TopicMessage.handle)
}
inline void TopicMessage::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.handle)
}
inline void TopicMessage::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.handle)
}
inline std::string* TopicMessage::_internal_mutable_handle() {
  
  return handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopicMessage::release_handle() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopicMessage::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.handle)
}

// int64 type = 7;
inline void TopicMessage::clear_type() {
  type_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopicMessage::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TopicMessage::type() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.type)
  return _internal_type();
}
inline void TopicMessage::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  type_ = value;
}
inline void TopicMessage::set_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.type)
}

// string data = 8;
inline void TopicMessage::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TopicMessage::data() const {
  // @@protoc_insertion_point(field_get:server.TopicMessage.data)
  return _internal_data();
}
inline void TopicMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:server.TopicMessage.data)
}
inline std::string* TopicMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:server.TopicMessage.data)
  return _internal_mutable_data();
}
inline const std::string& TopicMessage::_internal_data() const {
  return data_.Get();
}
inline void TopicMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TopicMessage::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TopicMessage.data)
}
inline void TopicMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TopicMessage.data)
}
inline void TopicMessage::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TopicMessage.data)
}
inline std::string* TopicMessage::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TopicMessage::release_data() {
  // @@protoc_insertion_point(field_release:server.TopicMessage.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TopicMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TopicMessage.data)
}

// -------------------------------------------------------------------

// TTopicMessagesList

// string user_id = 1;
inline bool TTopicMessagesList::_internal_has_user_id() const {
  return id_case() == kUserId;
}
inline void TTopicMessagesList::set_has_user_id() {
  _oneof_case_[0] = kUserId;
}
inline void TTopicMessagesList::clear_user_id() {
  if (_internal_has_user_id()) {
    id_.user_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TTopicMessagesList::user_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.user_id)
  return _internal_user_id();
}
inline void TTopicMessagesList::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.user_id)
}
inline std::string* TTopicMessagesList::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TTopicMessagesList::_internal_user_id() const {
  if (_internal_has_user_id()) {
    return id_.user_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicMessagesList::_internal_set_user_id(const std::string& value) {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicMessagesList::set_user_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.user_id)
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicMessagesList.user_id)
}
inline void TTopicMessagesList::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.user_id)
}
inline void TTopicMessagesList::set_user_id(const char* value,
                             size_t size) {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.user_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.user_id)
}
inline std::string* TTopicMessagesList::_internal_mutable_user_id() {
  if (!_internal_has_user_id()) {
    clear_id();
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicMessagesList::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.user_id)
  if (_internal_has_user_id()) {
    clear_has_id();
    return id_.user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TTopicMessagesList::set_allocated_user_id(std::string* user_id) {
  if (has_id()) {
    clear_id();
  }
  if (user_id != nullptr) {
    set_has_user_id();
    id_.user_id_.UnsafeSetDefault(user_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(user_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.user_id)
}

// string room = 2;
inline bool TTopicMessagesList::_internal_has_room() const {
  return id_case() == kRoom;
}
inline void TTopicMessagesList::set_has_room() {
  _oneof_case_[0] = kRoom;
}
inline void TTopicMessagesList::clear_room() {
  if (_internal_has_room()) {
    id_.room_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TTopicMessagesList::room() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.room)
  return _internal_room();
}
inline void TTopicMessagesList::set_room(const std::string& value) {
  _internal_set_room(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.room)
}
inline std::string* TTopicMessagesList::mutable_room() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.room)
  return _internal_mutable_room();
}
inline const std::string& TTopicMessagesList::_internal_room() const {
  if (_internal_has_room()) {
    return id_.room_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicMessagesList::_internal_set_room(const std::string& value) {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicMessagesList::set_room(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.room)
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicMessagesList.room)
}
inline void TTopicMessagesList::set_room(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.room)
}
inline void TTopicMessagesList::set_room(const char* value,
                             size_t size) {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.room_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.room)
}
inline std::string* TTopicMessagesList::_internal_mutable_room() {
  if (!_internal_has_room()) {
    clear_id();
    set_has_room();
    id_.room_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.room_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicMessagesList::release_room() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.room)
  if (_internal_has_room()) {
    clear_has_id();
    return id_.room_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TTopicMessagesList::set_allocated_room(std::string* room) {
  if (has_id()) {
    clear_id();
  }
  if (room != nullptr) {
    set_has_room();
    id_.room_.UnsafeSetDefault(room);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(room);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.room)
}

// string group_id = 3;
inline bool TTopicMessagesList::_internal_has_group_id() const {
  return id_case() == kGroupId;
}
inline void TTopicMessagesList::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void TTopicMessagesList::clear_group_id() {
  if (_internal_has_group_id()) {
    id_.group_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TTopicMessagesList::group_id() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.group_id)
  return _internal_group_id();
}
inline void TTopicMessagesList::set_group_id(const std::string& value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.group_id)
}
inline std::string* TTopicMessagesList::mutable_group_id() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.group_id)
  return _internal_mutable_group_id();
}
inline const std::string& TTopicMessagesList::_internal_group_id() const {
  if (_internal_has_group_id()) {
    return id_.group_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TTopicMessagesList::_internal_set_group_id(const std::string& value) {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicMessagesList::set_group_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.group_id)
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicMessagesList.group_id)
}
inline void TTopicMessagesList::set_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.group_id)
}
inline void TTopicMessagesList::set_group_id(const char* value,
                             size_t size) {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.group_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.group_id)
}
inline std::string* TTopicMessagesList::_internal_mutable_group_id() {
  if (!_internal_has_group_id()) {
    clear_id();
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.group_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicMessagesList::release_group_id() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.group_id)
  if (_internal_has_group_id()) {
    clear_has_id();
    return id_.group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TTopicMessagesList::set_allocated_group_id(std::string* group_id) {
  if (has_id()) {
    clear_id();
  }
  if (group_id != nullptr) {
    set_has_group_id();
    id_.group_id_.UnsafeSetDefault(group_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(group_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.group_id)
}

// string cursor = 4;
inline void TTopicMessagesList::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TTopicMessagesList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.cursor)
  return _internal_cursor();
}
inline void TTopicMessagesList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.cursor)
}
inline std::string* TTopicMessagesList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessagesList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TTopicMessagesList::_internal_cursor() const {
  return cursor_.Get();
}
inline void TTopicMessagesList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicMessagesList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicMessagesList.cursor)
}
inline void TTopicMessagesList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicMessagesList.cursor)
}
inline void TTopicMessagesList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessagesList.cursor)
}
inline std::string* TTopicMessagesList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicMessagesList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TTopicMessagesList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TTopicMessagesList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessagesList.cursor)
}

// bool forward = 5;
inline void TTopicMessagesList::clear_forward() {
  forward_ = false;
}
inline bool TTopicMessagesList::_internal_forward() const {
  return forward_;
}
inline bool TTopicMessagesList::forward() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.forward)
  return _internal_forward();
}
inline void TTopicMessagesList::_internal_set_forward(bool value) {
  
  forward_ = value;
}
inline void TTopicMessagesList::set_forward(bool value) {
  _internal_set_forward(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.forward)
}

// int64 limit = 6;
inline void TTopicMessagesList::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TTopicMessagesList::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TTopicMessagesList::limit() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessagesList.limit)
  return _internal_limit();
}
inline void TTopicMessagesList::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void TTopicMessagesList::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessagesList.limit)
}

inline bool TTopicMessagesList::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TTopicMessagesList::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TTopicMessagesList::IdCase TTopicMessagesList::id_case() const {
  return TTopicMessagesList::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TTopicMessages

// repeated .server.TopicMessage messages = 1;
inline int TTopicMessages::_internal_messages_size() const {
  return messages_.size();
}
inline int TTopicMessages::messages_size() const {
  return _internal_messages_size();
}
inline void TTopicMessages::clear_messages() {
  messages_.Clear();
}
inline ::server::TopicMessage* TTopicMessages::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessages.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicMessage >*
TTopicMessages::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:server.TTopicMessages.messages)
  return &messages_;
}
inline const ::server::TopicMessage& TTopicMessages::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::server::TopicMessage& TTopicMessages::messages(int index) const {
  // @@protoc_insertion_point(field_get:server.TTopicMessages.messages)
  return _internal_messages(index);
}
inline ::server::TopicMessage* TTopicMessages::_internal_add_messages() {
  return messages_.Add();
}
inline ::server::TopicMessage* TTopicMessages::add_messages() {
  // @@protoc_insertion_point(field_add:server.TTopicMessages.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TopicMessage >&
TTopicMessages::messages() const {
  // @@protoc_insertion_point(field_list:server.TTopicMessages.messages)
  return messages_;
}

// string cursor = 2;
inline void TTopicMessages::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TTopicMessages::cursor() const {
  // @@protoc_insertion_point(field_get:server.TTopicMessages.cursor)
  return _internal_cursor();
}
inline void TTopicMessages::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TTopicMessages.cursor)
}
inline std::string* TTopicMessages::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TTopicMessages.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TTopicMessages::_internal_cursor() const {
  return cursor_.Get();
}
inline void TTopicMessages::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TTopicMessages::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TTopicMessages.cursor)
}
inline void TTopicMessages::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TTopicMessages.cursor)
}
inline void TTopicMessages::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TTopicMessages.cursor)
}
inline std::string* TTopicMessages::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TTopicMessages::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TTopicMessages.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TTopicMessages::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TTopicMessages.cursor)
}

// -------------------------------------------------------------------

// TopicPresence

// .server.TopicId topic = 1;
inline bool TopicPresence::_internal_has_topic() const {
  return this != internal_default_instance() && topic_ != nullptr;
}
inline bool TopicPresence::has_topic() const {
  return _internal_has_topic();
}
inline void TopicPresence::clear_topic() {
  if (GetArena() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
}
inline const ::server::TopicId& TopicPresence::_internal_topic() const {
  const ::server::TopicId* p = topic_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::TopicId&>(
      ::server::_TopicId_default_instance_);
}
inline const ::server::TopicId& TopicPresence::topic() const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.topic)
  return _internal_topic();
}
inline void TopicPresence::unsafe_arena_set_allocated_topic(
    ::server::TopicId* topic) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic_);
  }
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TopicPresence.topic)
}
inline ::server::TopicId* TopicPresence::release_topic() {
  
  ::server::TopicId* temp = topic_;
  topic_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::TopicId* TopicPresence::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_release:server.TopicPresence.topic)
  
  ::server::TopicId* temp = topic_;
  topic_ = nullptr;
  return temp;
}
inline ::server::TopicId* TopicPresence::_internal_mutable_topic() {
  
  if (topic_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::TopicId>(GetArena());
    topic_ = p;
  }
  return topic_;
}
inline ::server::TopicId* TopicPresence::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.topic)
  return _internal_mutable_topic();
}
inline void TopicPresence::set_allocated_topic(::server::TopicId* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete topic_;
  }
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic);
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:server.TopicPresence.topic)
}

// repeated .server.UserPresence joins = 2;
inline int TopicPresence::_internal_joins_size() const {
  return joins_.size();
}
inline int TopicPresence::joins_size() const {
  return _internal_joins_size();
}
inline void TopicPresence::clear_joins() {
  joins_.Clear();
}
inline ::server::UserPresence* TopicPresence::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.joins)
  return joins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
TopicPresence::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.TopicPresence.joins)
  return &joins_;
}
inline const ::server::UserPresence& TopicPresence::_internal_joins(int index) const {
  return joins_.Get(index);
}
inline const ::server::UserPresence& TopicPresence::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.joins)
  return _internal_joins(index);
}
inline ::server::UserPresence* TopicPresence::_internal_add_joins() {
  return joins_.Add();
}
inline ::server::UserPresence* TopicPresence::add_joins() {
  // @@protoc_insertion_point(field_add:server.TopicPresence.joins)
  return _internal_add_joins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
TopicPresence::joins() const {
  // @@protoc_insertion_point(field_list:server.TopicPresence.joins)
  return joins_;
}

// repeated .server.UserPresence leaves = 3;
inline int TopicPresence::_internal_leaves_size() const {
  return leaves_.size();
}
inline int TopicPresence::leaves_size() const {
  return _internal_leaves_size();
}
inline void TopicPresence::clear_leaves() {
  leaves_.Clear();
}
inline ::server::UserPresence* TopicPresence::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:server.TopicPresence.leaves)
  return leaves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
TopicPresence::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:server.TopicPresence.leaves)
  return &leaves_;
}
inline const ::server::UserPresence& TopicPresence::_internal_leaves(int index) const {
  return leaves_.Get(index);
}
inline const ::server::UserPresence& TopicPresence::leaves(int index) const {
  // @@protoc_insertion_point(field_get:server.TopicPresence.leaves)
  return _internal_leaves(index);
}
inline ::server::UserPresence* TopicPresence::_internal_add_leaves() {
  return leaves_.Add();
}
inline ::server::UserPresence* TopicPresence::add_leaves() {
  // @@protoc_insertion_point(field_add:server.TopicPresence.leaves)
  return _internal_add_leaves();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
TopicPresence::leaves() const {
  // @@protoc_insertion_point(field_list:server.TopicPresence.leaves)
  return leaves_;
}

// -------------------------------------------------------------------

// PropertyPair_StringSet

// repeated string values = 1;
inline int PropertyPair_StringSet::_internal_values_size() const {
  return values_.size();
}
inline int PropertyPair_StringSet::values_size() const {
  return _internal_values_size();
}
inline void PropertyPair_StringSet::clear_values() {
  values_.Clear();
}
inline std::string* PropertyPair_StringSet::add_values() {
  // @@protoc_insertion_point(field_add_mutable:server.PropertyPair.StringSet.values)
  return _internal_add_values();
}
inline const std::string& PropertyPair_StringSet::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& PropertyPair_StringSet::values(int index) const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.StringSet.values)
  return _internal_values(index);
}
inline std::string* PropertyPair_StringSet::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.StringSet.values)
  return values_.Mutable(index);
}
inline void PropertyPair_StringSet::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.PropertyPair.StringSet.values)
  values_.Mutable(index)->assign(value);
}
inline void PropertyPair_StringSet::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.PropertyPair.StringSet.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void PropertyPair_StringSet::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.PropertyPair.StringSet.values)
}
inline void PropertyPair_StringSet::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.PropertyPair.StringSet.values)
}
inline std::string* PropertyPair_StringSet::_internal_add_values() {
  return values_.Add();
}
inline void PropertyPair_StringSet::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.PropertyPair.StringSet.values)
}
inline void PropertyPair_StringSet::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.PropertyPair.StringSet.values)
}
inline void PropertyPair_StringSet::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.PropertyPair.StringSet.values)
}
inline void PropertyPair_StringSet::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.PropertyPair.StringSet.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PropertyPair_StringSet::values() const {
  // @@protoc_insertion_point(field_list:server.PropertyPair.StringSet.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PropertyPair_StringSet::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:server.PropertyPair.StringSet.values)
  return &values_;
}

// -------------------------------------------------------------------

// PropertyPair

// string key = 1;
inline void PropertyPair::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PropertyPair::key() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.key)
  return _internal_key();
}
inline void PropertyPair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:server.PropertyPair.key)
}
inline std::string* PropertyPair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.key)
  return _internal_mutable_key();
}
inline const std::string& PropertyPair::_internal_key() const {
  return key_.Get();
}
inline void PropertyPair::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PropertyPair::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.PropertyPair.key)
}
inline void PropertyPair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.PropertyPair.key)
}
inline void PropertyPair::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.PropertyPair.key)
}
inline std::string* PropertyPair::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PropertyPair::release_key() {
  // @@protoc_insertion_point(field_release:server.PropertyPair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PropertyPair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.PropertyPair.key)
}

// .server.PropertyPair.StringSet stringSet = 2;
inline bool PropertyPair::_internal_has_stringset() const {
  return value_case() == kStringSet;
}
inline bool PropertyPair::has_stringset() const {
  return _internal_has_stringset();
}
inline void PropertyPair::set_has_stringset() {
  _oneof_case_[0] = kStringSet;
}
inline void PropertyPair::clear_stringset() {
  if (_internal_has_stringset()) {
    if (GetArena() == nullptr) {
      delete value_.stringset_;
    }
    clear_has_value();
  }
}
inline ::server::PropertyPair_StringSet* PropertyPair::release_stringset() {
  // @@protoc_insertion_point(field_release:server.PropertyPair.stringSet)
  if (_internal_has_stringset()) {
    clear_has_value();
      ::server::PropertyPair_StringSet* temp = value_.stringset_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.stringset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::PropertyPair_StringSet& PropertyPair::_internal_stringset() const {
  return _internal_has_stringset()
      ? *value_.stringset_
      : reinterpret_cast< ::server::PropertyPair_StringSet&>(::server::_PropertyPair_StringSet_default_instance_);
}
inline const ::server::PropertyPair_StringSet& PropertyPair::stringset() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.stringSet)
  return _internal_stringset();
}
inline ::server::PropertyPair_StringSet* PropertyPair::unsafe_arena_release_stringset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.PropertyPair.stringSet)
  if (_internal_has_stringset()) {
    clear_has_value();
    ::server::PropertyPair_StringSet* temp = value_.stringset_;
    value_.stringset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyPair::unsafe_arena_set_allocated_stringset(::server::PropertyPair_StringSet* stringset) {
  clear_value();
  if (stringset) {
    set_has_stringset();
    value_.stringset_ = stringset;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.PropertyPair.stringSet)
}
inline ::server::PropertyPair_StringSet* PropertyPair::_internal_mutable_stringset() {
  if (!_internal_has_stringset()) {
    clear_value();
    set_has_stringset();
    value_.stringset_ = CreateMaybeMessage< ::server::PropertyPair_StringSet >(GetArena());
  }
  return value_.stringset_;
}
inline ::server::PropertyPair_StringSet* PropertyPair::mutable_stringset() {
  // @@protoc_insertion_point(field_mutable:server.PropertyPair.stringSet)
  return _internal_mutable_stringset();
}

// bool boolValue = 3;
inline bool PropertyPair::_internal_has_boolvalue() const {
  return value_case() == kBoolValue;
}
inline void PropertyPair::set_has_boolvalue() {
  _oneof_case_[0] = kBoolValue;
}
inline void PropertyPair::clear_boolvalue() {
  if (_internal_has_boolvalue()) {
    value_.boolvalue_ = false;
    clear_has_value();
  }
}
inline bool PropertyPair::_internal_boolvalue() const {
  if (_internal_has_boolvalue()) {
    return value_.boolvalue_;
  }
  return false;
}
inline void PropertyPair::_internal_set_boolvalue(bool value) {
  if (!_internal_has_boolvalue()) {
    clear_value();
    set_has_boolvalue();
  }
  value_.boolvalue_ = value;
}
inline bool PropertyPair::boolvalue() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.boolValue)
  return _internal_boolvalue();
}
inline void PropertyPair::set_boolvalue(bool value) {
  _internal_set_boolvalue(value);
  // @@protoc_insertion_point(field_set:server.PropertyPair.boolValue)
}

// int64 intValue = 4;
inline bool PropertyPair::_internal_has_intvalue() const {
  return value_case() == kIntValue;
}
inline void PropertyPair::set_has_intvalue() {
  _oneof_case_[0] = kIntValue;
}
inline void PropertyPair::clear_intvalue() {
  if (_internal_has_intvalue()) {
    value_.intvalue_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PropertyPair::_internal_intvalue() const {
  if (_internal_has_intvalue()) {
    return value_.intvalue_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void PropertyPair::_internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_intvalue()) {
    clear_value();
    set_has_intvalue();
  }
  value_.intvalue_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PropertyPair::intvalue() const {
  // @@protoc_insertion_point(field_get:server.PropertyPair.intValue)
  return _internal_intvalue();
}
inline void PropertyPair::set_intvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_intvalue(value);
  // @@protoc_insertion_point(field_set:server.PropertyPair.intValue)
}

inline bool PropertyPair::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void PropertyPair::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline PropertyPair::ValueCase PropertyPair::value_case() const {
  return PropertyPair::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MatchmakeFilter_TermFilter

// repeated string terms = 1;
inline int MatchmakeFilter_TermFilter::_internal_terms_size() const {
  return terms_.size();
}
inline int MatchmakeFilter_TermFilter::terms_size() const {
  return _internal_terms_size();
}
inline void MatchmakeFilter_TermFilter::clear_terms() {
  terms_.Clear();
}
inline std::string* MatchmakeFilter_TermFilter::add_terms() {
  // @@protoc_insertion_point(field_add_mutable:server.MatchmakeFilter.TermFilter.terms)
  return _internal_add_terms();
}
inline const std::string& MatchmakeFilter_TermFilter::_internal_terms(int index) const {
  return terms_.Get(index);
}
inline const std::string& MatchmakeFilter_TermFilter::terms(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.TermFilter.terms)
  return _internal_terms(index);
}
inline std::string* MatchmakeFilter_TermFilter::mutable_terms(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.TermFilter.terms)
  return terms_.Mutable(index);
}
inline void MatchmakeFilter_TermFilter::set_terms(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.TermFilter.terms)
  terms_.Mutable(index)->assign(value);
}
inline void MatchmakeFilter_TermFilter::set_terms(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.TermFilter.terms)
  terms_.Mutable(index)->assign(std::move(value));
}
inline void MatchmakeFilter_TermFilter::set_terms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.MatchmakeFilter.TermFilter.terms)
}
inline void MatchmakeFilter_TermFilter::set_terms(int index, const char* value, size_t size) {
  terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeFilter.TermFilter.terms)
}
inline std::string* MatchmakeFilter_TermFilter::_internal_add_terms() {
  return terms_.Add();
}
inline void MatchmakeFilter_TermFilter::add_terms(const std::string& value) {
  terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.MatchmakeFilter.TermFilter.terms)
}
inline void MatchmakeFilter_TermFilter::add_terms(std::string&& value) {
  terms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.MatchmakeFilter.TermFilter.terms)
}
inline void MatchmakeFilter_TermFilter::add_terms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.MatchmakeFilter.TermFilter.terms)
}
inline void MatchmakeFilter_TermFilter::add_terms(const char* value, size_t size) {
  terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.MatchmakeFilter.TermFilter.terms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MatchmakeFilter_TermFilter::terms() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeFilter.TermFilter.terms)
  return terms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MatchmakeFilter_TermFilter::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeFilter.TermFilter.terms)
  return &terms_;
}

// bool matchAllTerms = 2;
inline void MatchmakeFilter_TermFilter::clear_matchallterms() {
  matchallterms_ = false;
}
inline bool MatchmakeFilter_TermFilter::_internal_matchallterms() const {
  return matchallterms_;
}
inline bool MatchmakeFilter_TermFilter::matchallterms() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.TermFilter.matchAllTerms)
  return _internal_matchallterms();
}
inline void MatchmakeFilter_TermFilter::_internal_set_matchallterms(bool value) {
  
  matchallterms_ = value;
}
inline void MatchmakeFilter_TermFilter::set_matchallterms(bool value) {
  _internal_set_matchallterms(value);
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.TermFilter.matchAllTerms)
}

// -------------------------------------------------------------------

// MatchmakeFilter_RangeFilter

// int64 lower_bound = 1;
inline void MatchmakeFilter_RangeFilter::clear_lower_bound() {
  lower_bound_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchmakeFilter_RangeFilter::_internal_lower_bound() const {
  return lower_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchmakeFilter_RangeFilter::lower_bound() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.RangeFilter.lower_bound)
  return _internal_lower_bound();
}
inline void MatchmakeFilter_RangeFilter::_internal_set_lower_bound(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lower_bound_ = value;
}
inline void MatchmakeFilter_RangeFilter::set_lower_bound(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.RangeFilter.lower_bound)
}

// int64 upper_bound = 2;
inline void MatchmakeFilter_RangeFilter::clear_upper_bound() {
  upper_bound_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchmakeFilter_RangeFilter::_internal_upper_bound() const {
  return upper_bound_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchmakeFilter_RangeFilter::upper_bound() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.RangeFilter.upper_bound)
  return _internal_upper_bound();
}
inline void MatchmakeFilter_RangeFilter::_internal_set_upper_bound(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  upper_bound_ = value;
}
inline void MatchmakeFilter_RangeFilter::set_upper_bound(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.RangeFilter.upper_bound)
}

// -------------------------------------------------------------------

// MatchmakeFilter

// string name = 1;
inline void MatchmakeFilter::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchmakeFilter::name() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.name)
  return _internal_name();
}
inline void MatchmakeFilter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.name)
}
inline std::string* MatchmakeFilter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.name)
  return _internal_mutable_name();
}
inline const std::string& MatchmakeFilter::_internal_name() const {
  return name_.Get();
}
inline void MatchmakeFilter::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchmakeFilter::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchmakeFilter.name)
}
inline void MatchmakeFilter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchmakeFilter.name)
}
inline void MatchmakeFilter::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeFilter.name)
}
inline std::string* MatchmakeFilter::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchmakeFilter::release_name() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchmakeFilter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.name)
}

// .server.MatchmakeFilter.TermFilter term = 2;
inline bool MatchmakeFilter::_internal_has_term() const {
  return value_case() == kTerm;
}
inline bool MatchmakeFilter::has_term() const {
  return _internal_has_term();
}
inline void MatchmakeFilter::set_has_term() {
  _oneof_case_[0] = kTerm;
}
inline void MatchmakeFilter::clear_term() {
  if (_internal_has_term()) {
    if (GetArena() == nullptr) {
      delete value_.term_;
    }
    clear_has_value();
  }
}
inline ::server::MatchmakeFilter_TermFilter* MatchmakeFilter::release_term() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.term)
  if (_internal_has_term()) {
    clear_has_value();
      ::server::MatchmakeFilter_TermFilter* temp = value_.term_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.term_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::MatchmakeFilter_TermFilter& MatchmakeFilter::_internal_term() const {
  return _internal_has_term()
      ? *value_.term_
      : reinterpret_cast< ::server::MatchmakeFilter_TermFilter&>(::server::_MatchmakeFilter_TermFilter_default_instance_);
}
inline const ::server::MatchmakeFilter_TermFilter& MatchmakeFilter::term() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.term)
  return _internal_term();
}
inline ::server::MatchmakeFilter_TermFilter* MatchmakeFilter::unsafe_arena_release_term() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.MatchmakeFilter.term)
  if (_internal_has_term()) {
    clear_has_value();
    ::server::MatchmakeFilter_TermFilter* temp = value_.term_;
    value_.term_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchmakeFilter::unsafe_arena_set_allocated_term(::server::MatchmakeFilter_TermFilter* term) {
  clear_value();
  if (term) {
    set_has_term();
    value_.term_ = term;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.MatchmakeFilter.term)
}
inline ::server::MatchmakeFilter_TermFilter* MatchmakeFilter::_internal_mutable_term() {
  if (!_internal_has_term()) {
    clear_value();
    set_has_term();
    value_.term_ = CreateMaybeMessage< ::server::MatchmakeFilter_TermFilter >(GetArena());
  }
  return value_.term_;
}
inline ::server::MatchmakeFilter_TermFilter* MatchmakeFilter::mutable_term() {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.term)
  return _internal_mutable_term();
}

// .server.MatchmakeFilter.RangeFilter range = 3;
inline bool MatchmakeFilter::_internal_has_range() const {
  return value_case() == kRange;
}
inline bool MatchmakeFilter::has_range() const {
  return _internal_has_range();
}
inline void MatchmakeFilter::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void MatchmakeFilter::clear_range() {
  if (_internal_has_range()) {
    if (GetArena() == nullptr) {
      delete value_.range_;
    }
    clear_has_value();
  }
}
inline ::server::MatchmakeFilter_RangeFilter* MatchmakeFilter::release_range() {
  // @@protoc_insertion_point(field_release:server.MatchmakeFilter.range)
  if (_internal_has_range()) {
    clear_has_value();
      ::server::MatchmakeFilter_RangeFilter* temp = value_.range_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::MatchmakeFilter_RangeFilter& MatchmakeFilter::_internal_range() const {
  return _internal_has_range()
      ? *value_.range_
      : reinterpret_cast< ::server::MatchmakeFilter_RangeFilter&>(::server::_MatchmakeFilter_RangeFilter_default_instance_);
}
inline const ::server::MatchmakeFilter_RangeFilter& MatchmakeFilter::range() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.range)
  return _internal_range();
}
inline ::server::MatchmakeFilter_RangeFilter* MatchmakeFilter::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.MatchmakeFilter.range)
  if (_internal_has_range()) {
    clear_has_value();
    ::server::MatchmakeFilter_RangeFilter* temp = value_.range_;
    value_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MatchmakeFilter::unsafe_arena_set_allocated_range(::server::MatchmakeFilter_RangeFilter* range) {
  clear_value();
  if (range) {
    set_has_range();
    value_.range_ = range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.MatchmakeFilter.range)
}
inline ::server::MatchmakeFilter_RangeFilter* MatchmakeFilter::_internal_mutable_range() {
  if (!_internal_has_range()) {
    clear_value();
    set_has_range();
    value_.range_ = CreateMaybeMessage< ::server::MatchmakeFilter_RangeFilter >(GetArena());
  }
  return value_.range_;
}
inline ::server::MatchmakeFilter_RangeFilter* MatchmakeFilter::mutable_range() {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeFilter.range)
  return _internal_mutable_range();
}

// bool check = 4;
inline bool MatchmakeFilter::_internal_has_check() const {
  return value_case() == kCheck;
}
inline void MatchmakeFilter::set_has_check() {
  _oneof_case_[0] = kCheck;
}
inline void MatchmakeFilter::clear_check() {
  if (_internal_has_check()) {
    value_.check_ = false;
    clear_has_value();
  }
}
inline bool MatchmakeFilter::_internal_check() const {
  if (_internal_has_check()) {
    return value_.check_;
  }
  return false;
}
inline void MatchmakeFilter::_internal_set_check(bool value) {
  if (!_internal_has_check()) {
    clear_value();
    set_has_check();
  }
  value_.check_ = value;
}
inline bool MatchmakeFilter::check() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeFilter.check)
  return _internal_check();
}
inline void MatchmakeFilter::set_check(bool value) {
  _internal_set_check(value);
  // @@protoc_insertion_point(field_set:server.MatchmakeFilter.check)
}

inline bool MatchmakeFilter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void MatchmakeFilter::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MatchmakeFilter::ValueCase MatchmakeFilter::value_case() const {
  return MatchmakeFilter::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TMatchmakeAdd

// int64 required_count = 1;
inline void TMatchmakeAdd::clear_required_count() {
  required_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TMatchmakeAdd::_internal_required_count() const {
  return required_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TMatchmakeAdd::required_count() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.required_count)
  return _internal_required_count();
}
inline void TMatchmakeAdd::_internal_set_required_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  required_count_ = value;
}
inline void TMatchmakeAdd::set_required_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_required_count(value);
  // @@protoc_insertion_point(field_set:server.TMatchmakeAdd.required_count)
}

// repeated .server.MatchmakeFilter filters = 2;
inline int TMatchmakeAdd::_internal_filters_size() const {
  return filters_.size();
}
inline int TMatchmakeAdd::filters_size() const {
  return _internal_filters_size();
}
inline void TMatchmakeAdd::clear_filters() {
  filters_.Clear();
}
inline ::server::MatchmakeFilter* TMatchmakeAdd::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeAdd.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter >*
TMatchmakeAdd::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchmakeAdd.filters)
  return &filters_;
}
inline const ::server::MatchmakeFilter& TMatchmakeAdd::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::server::MatchmakeFilter& TMatchmakeAdd::filters(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.filters)
  return _internal_filters(index);
}
inline ::server::MatchmakeFilter* TMatchmakeAdd::_internal_add_filters() {
  return filters_.Add();
}
inline ::server::MatchmakeFilter* TMatchmakeAdd::add_filters() {
  // @@protoc_insertion_point(field_add:server.TMatchmakeAdd.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter >&
TMatchmakeAdd::filters() const {
  // @@protoc_insertion_point(field_list:server.TMatchmakeAdd.filters)
  return filters_;
}

// repeated .server.PropertyPair properties = 3;
inline int TMatchmakeAdd::_internal_properties_size() const {
  return properties_.size();
}
inline int TMatchmakeAdd::properties_size() const {
  return _internal_properties_size();
}
inline void TMatchmakeAdd::clear_properties() {
  properties_.Clear();
}
inline ::server::PropertyPair* TMatchmakeAdd::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeAdd.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair >*
TMatchmakeAdd::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchmakeAdd.properties)
  return &properties_;
}
inline const ::server::PropertyPair& TMatchmakeAdd::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::server::PropertyPair& TMatchmakeAdd::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeAdd.properties)
  return _internal_properties(index);
}
inline ::server::PropertyPair* TMatchmakeAdd::_internal_add_properties() {
  return properties_.Add();
}
inline ::server::PropertyPair* TMatchmakeAdd::add_properties() {
  // @@protoc_insertion_point(field_add:server.TMatchmakeAdd.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair >&
TMatchmakeAdd::properties() const {
  // @@protoc_insertion_point(field_list:server.TMatchmakeAdd.properties)
  return properties_;
}

// -------------------------------------------------------------------

// TMatchmakeTicket

// string ticket = 1;
inline void TMatchmakeTicket::clear_ticket() {
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TMatchmakeTicket::ticket() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeTicket.ticket)
  return _internal_ticket();
}
inline void TMatchmakeTicket::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:server.TMatchmakeTicket.ticket)
}
inline std::string* TMatchmakeTicket::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeTicket.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& TMatchmakeTicket::_internal_ticket() const {
  return ticket_.Get();
}
inline void TMatchmakeTicket::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TMatchmakeTicket::set_ticket(std::string&& value) {
  
  ticket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TMatchmakeTicket.ticket)
}
inline void TMatchmakeTicket::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TMatchmakeTicket.ticket)
}
inline void TMatchmakeTicket::set_ticket(const char* value,
    size_t size) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TMatchmakeTicket.ticket)
}
inline std::string* TMatchmakeTicket::_internal_mutable_ticket() {
  
  return ticket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TMatchmakeTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:server.TMatchmakeTicket.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TMatchmakeTicket::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TMatchmakeTicket.ticket)
}

// -------------------------------------------------------------------

// TMatchmakeRemove

// string ticket = 1;
inline void TMatchmakeRemove::clear_ticket() {
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TMatchmakeRemove::ticket() const {
  // @@protoc_insertion_point(field_get:server.TMatchmakeRemove.ticket)
  return _internal_ticket();
}
inline void TMatchmakeRemove::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:server.TMatchmakeRemove.ticket)
}
inline std::string* TMatchmakeRemove::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:server.TMatchmakeRemove.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& TMatchmakeRemove::_internal_ticket() const {
  return ticket_.Get();
}
inline void TMatchmakeRemove::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TMatchmakeRemove::set_ticket(std::string&& value) {
  
  ticket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TMatchmakeRemove.ticket)
}
inline void TMatchmakeRemove::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TMatchmakeRemove.ticket)
}
inline void TMatchmakeRemove::set_ticket(const char* value,
    size_t size) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TMatchmakeRemove.ticket)
}
inline std::string* TMatchmakeRemove::_internal_mutable_ticket() {
  
  return ticket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TMatchmakeRemove::release_ticket() {
  // @@protoc_insertion_point(field_release:server.TMatchmakeRemove.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TMatchmakeRemove::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TMatchmakeRemove.ticket)
}

// -------------------------------------------------------------------

// MatchmakeMatched_UserProperty

// string user_id = 1;
inline void MatchmakeMatched_UserProperty::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchmakeMatched_UserProperty::user_id() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.user_id)
  return _internal_user_id();
}
inline void MatchmakeMatched_UserProperty::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.UserProperty.user_id)
}
inline std::string* MatchmakeMatched_UserProperty::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& MatchmakeMatched_UserProperty::_internal_user_id() const {
  return user_id_.Get();
}
inline void MatchmakeMatched_UserProperty::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchmakeMatched_UserProperty::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchmakeMatched.UserProperty.user_id)
}
inline void MatchmakeMatched_UserProperty::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.UserProperty.user_id)
}
inline void MatchmakeMatched_UserProperty::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.UserProperty.user_id)
}
inline std::string* MatchmakeMatched_UserProperty::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchmakeMatched_UserProperty::release_user_id() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.UserProperty.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchmakeMatched_UserProperty::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.UserProperty.user_id)
}

// repeated .server.PropertyPair properties = 2;
inline int MatchmakeMatched_UserProperty::_internal_properties_size() const {
  return properties_.size();
}
inline int MatchmakeMatched_UserProperty::properties_size() const {
  return _internal_properties_size();
}
inline void MatchmakeMatched_UserProperty::clear_properties() {
  properties_.Clear();
}
inline ::server::PropertyPair* MatchmakeMatched_UserProperty::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair >*
MatchmakeMatched_UserProperty::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.UserProperty.properties)
  return &properties_;
}
inline const ::server::PropertyPair& MatchmakeMatched_UserProperty::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::server::PropertyPair& MatchmakeMatched_UserProperty::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.properties)
  return _internal_properties(index);
}
inline ::server::PropertyPair* MatchmakeMatched_UserProperty::_internal_add_properties() {
  return properties_.Add();
}
inline ::server::PropertyPair* MatchmakeMatched_UserProperty::add_properties() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.UserProperty.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::PropertyPair >&
MatchmakeMatched_UserProperty::properties() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.UserProperty.properties)
  return properties_;
}

// repeated .server.MatchmakeFilter filters = 3;
inline int MatchmakeMatched_UserProperty::_internal_filters_size() const {
  return filters_.size();
}
inline int MatchmakeMatched_UserProperty::filters_size() const {
  return _internal_filters_size();
}
inline void MatchmakeMatched_UserProperty::clear_filters() {
  filters_.Clear();
}
inline ::server::MatchmakeFilter* MatchmakeMatched_UserProperty::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.UserProperty.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter >*
MatchmakeMatched_UserProperty::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.UserProperty.filters)
  return &filters_;
}
inline const ::server::MatchmakeFilter& MatchmakeMatched_UserProperty::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::server::MatchmakeFilter& MatchmakeMatched_UserProperty::filters(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.UserProperty.filters)
  return _internal_filters(index);
}
inline ::server::MatchmakeFilter* MatchmakeMatched_UserProperty::_internal_add_filters() {
  return filters_.Add();
}
inline ::server::MatchmakeFilter* MatchmakeMatched_UserProperty::add_filters() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.UserProperty.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeFilter >&
MatchmakeMatched_UserProperty::filters() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.UserProperty.filters)
  return filters_;
}

// -------------------------------------------------------------------

// MatchmakeMatched

// string ticket = 1;
inline void MatchmakeMatched::clear_ticket() {
  ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchmakeMatched::ticket() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.ticket)
  return _internal_ticket();
}
inline void MatchmakeMatched::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.ticket)
}
inline std::string* MatchmakeMatched::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& MatchmakeMatched::_internal_ticket() const {
  return ticket_.Get();
}
inline void MatchmakeMatched::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchmakeMatched::set_ticket(std::string&& value) {
  
  ticket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchmakeMatched.ticket)
}
inline void MatchmakeMatched::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.ticket)
}
inline void MatchmakeMatched::set_ticket(const char* value,
    size_t size) {
  
  ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.ticket)
}
inline std::string* MatchmakeMatched::_internal_mutable_ticket() {
  
  return ticket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchmakeMatched::release_ticket() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchmakeMatched::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.ticket)
}

// string token = 2;
inline void MatchmakeMatched::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchmakeMatched::token() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.token)
  return _internal_token();
}
inline void MatchmakeMatched::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:server.MatchmakeMatched.token)
}
inline std::string* MatchmakeMatched::mutable_token() {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.token)
  return _internal_mutable_token();
}
inline const std::string& MatchmakeMatched::_internal_token() const {
  return token_.Get();
}
inline void MatchmakeMatched::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchmakeMatched::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchmakeMatched.token)
}
inline void MatchmakeMatched::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchmakeMatched.token)
}
inline void MatchmakeMatched::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchmakeMatched.token)
}
inline std::string* MatchmakeMatched::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchmakeMatched::release_token() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchmakeMatched::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.token)
}

// repeated .server.UserPresence presences = 3;
inline int MatchmakeMatched::_internal_presences_size() const {
  return presences_.size();
}
inline int MatchmakeMatched::presences_size() const {
  return _internal_presences_size();
}
inline void MatchmakeMatched::clear_presences() {
  presences_.Clear();
}
inline ::server::UserPresence* MatchmakeMatched::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.presences)
  return presences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
MatchmakeMatched::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.presences)
  return &presences_;
}
inline const ::server::UserPresence& MatchmakeMatched::_internal_presences(int index) const {
  return presences_.Get(index);
}
inline const ::server::UserPresence& MatchmakeMatched::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.presences)
  return _internal_presences(index);
}
inline ::server::UserPresence* MatchmakeMatched::_internal_add_presences() {
  return presences_.Add();
}
inline ::server::UserPresence* MatchmakeMatched::add_presences() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.presences)
  return _internal_add_presences();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
MatchmakeMatched::presences() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.presences)
  return presences_;
}

// .server.UserPresence self = 4;
inline bool MatchmakeMatched::_internal_has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline bool MatchmakeMatched::has_self() const {
  return _internal_has_self();
}
inline void MatchmakeMatched::clear_self() {
  if (GetArena() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
inline const ::server::UserPresence& MatchmakeMatched::_internal_self() const {
  const ::server::UserPresence* p = self_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::UserPresence&>(
      ::server::_UserPresence_default_instance_);
}
inline const ::server::UserPresence& MatchmakeMatched::self() const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.self)
  return _internal_self();
}
inline void MatchmakeMatched::unsafe_arena_set_allocated_self(
    ::server::UserPresence* self) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.MatchmakeMatched.self)
}
inline ::server::UserPresence* MatchmakeMatched::release_self() {
  
  ::server::UserPresence* temp = self_;
  self_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::UserPresence* MatchmakeMatched::unsafe_arena_release_self() {
  // @@protoc_insertion_point(field_release:server.MatchmakeMatched.self)
  
  ::server::UserPresence* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::server::UserPresence* MatchmakeMatched::_internal_mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::UserPresence>(GetArena());
    self_ = p;
  }
  return self_;
}
inline ::server::UserPresence* MatchmakeMatched::mutable_self() {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.self)
  return _internal_mutable_self();
}
inline void MatchmakeMatched::set_allocated_self(::server::UserPresence* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete self_;
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self);
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:server.MatchmakeMatched.self)
}

// repeated .server.MatchmakeMatched.UserProperty properties = 5;
inline int MatchmakeMatched::_internal_properties_size() const {
  return properties_.size();
}
inline int MatchmakeMatched::properties_size() const {
  return _internal_properties_size();
}
inline void MatchmakeMatched::clear_properties() {
  properties_.Clear();
}
inline ::server::MatchmakeMatched_UserProperty* MatchmakeMatched::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchmakeMatched.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >*
MatchmakeMatched::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchmakeMatched.properties)
  return &properties_;
}
inline const ::server::MatchmakeMatched_UserProperty& MatchmakeMatched::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::server::MatchmakeMatched_UserProperty& MatchmakeMatched::properties(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchmakeMatched.properties)
  return _internal_properties(index);
}
inline ::server::MatchmakeMatched_UserProperty* MatchmakeMatched::_internal_add_properties() {
  return properties_.Add();
}
inline ::server::MatchmakeMatched_UserProperty* MatchmakeMatched::add_properties() {
  // @@protoc_insertion_point(field_add:server.MatchmakeMatched.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::MatchmakeMatched_UserProperty >&
MatchmakeMatched::properties() const {
  // @@protoc_insertion_point(field_list:server.MatchmakeMatched.properties)
  return properties_;
}

// -------------------------------------------------------------------

// Match

// string match_id = 1;
inline void Match::clear_match_id() {
  match_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Match::match_id() const {
  // @@protoc_insertion_point(field_get:server.Match.match_id)
  return _internal_match_id();
}
inline void Match::set_match_id(const std::string& value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:server.Match.match_id)
}
inline std::string* Match::mutable_match_id() {
  // @@protoc_insertion_point(field_mutable:server.Match.match_id)
  return _internal_mutable_match_id();
}
inline const std::string& Match::_internal_match_id() const {
  return match_id_.Get();
}
inline void Match::_internal_set_match_id(const std::string& value) {
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Match::set_match_id(std::string&& value) {
  
  match_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Match.match_id)
}
inline void Match::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Match.match_id)
}
inline void Match::set_match_id(const char* value,
    size_t size) {
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Match.match_id)
}
inline std::string* Match::_internal_mutable_match_id() {
  
  return match_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Match::release_match_id() {
  // @@protoc_insertion_point(field_release:server.Match.match_id)
  return match_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Match::set_allocated_match_id(std::string* match_id) {
  if (match_id != nullptr) {
    
  } else {
    
  }
  match_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Match.match_id)
}

// repeated .server.UserPresence presences = 2;
inline int Match::_internal_presences_size() const {
  return presences_.size();
}
inline int Match::presences_size() const {
  return _internal_presences_size();
}
inline void Match::clear_presences() {
  presences_.Clear();
}
inline ::server::UserPresence* Match::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.Match.presences)
  return presences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
Match::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.Match.presences)
  return &presences_;
}
inline const ::server::UserPresence& Match::_internal_presences(int index) const {
  return presences_.Get(index);
}
inline const ::server::UserPresence& Match::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.Match.presences)
  return _internal_presences(index);
}
inline ::server::UserPresence* Match::_internal_add_presences() {
  return presences_.Add();
}
inline ::server::UserPresence* Match::add_presences() {
  // @@protoc_insertion_point(field_add:server.Match.presences)
  return _internal_add_presences();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
Match::presences() const {
  // @@protoc_insertion_point(field_list:server.Match.presences)
  return presences_;
}

// .server.UserPresence self = 3;
inline bool Match::_internal_has_self() const {
  return this != internal_default_instance() && self_ != nullptr;
}
inline bool Match::has_self() const {
  return _internal_has_self();
}
inline void Match::clear_self() {
  if (GetArena() == nullptr && self_ != nullptr) {
    delete self_;
  }
  self_ = nullptr;
}
inline const ::server::UserPresence& Match::_internal_self() const {
  const ::server::UserPresence* p = self_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::UserPresence&>(
      ::server::_UserPresence_default_instance_);
}
inline const ::server::UserPresence& Match::self() const {
  // @@protoc_insertion_point(field_get:server.Match.self)
  return _internal_self();
}
inline void Match::unsafe_arena_set_allocated_self(
    ::server::UserPresence* self) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(self_);
  }
  self_ = self;
  if (self) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.Match.self)
}
inline ::server::UserPresence* Match::release_self() {
  
  ::server::UserPresence* temp = self_;
  self_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::UserPresence* Match::unsafe_arena_release_self() {
  // @@protoc_insertion_point(field_release:server.Match.self)
  
  ::server::UserPresence* temp = self_;
  self_ = nullptr;
  return temp;
}
inline ::server::UserPresence* Match::_internal_mutable_self() {
  
  if (self_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::UserPresence>(GetArena());
    self_ = p;
  }
  return self_;
}
inline ::server::UserPresence* Match::mutable_self() {
  // @@protoc_insertion_point(field_mutable:server.Match.self)
  return _internal_mutable_self();
}
inline void Match::set_allocated_self(::server::UserPresence* self) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete self_;
  }
  if (self) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self);
    if (message_arena != submessage_arena) {
      self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, self, submessage_arena);
    }
    
  } else {
    
  }
  self_ = self;
  // @@protoc_insertion_point(field_set_allocated:server.Match.self)
}

// -------------------------------------------------------------------

// MatchPresence

// string match_id = 1;
inline void MatchPresence::clear_match_id() {
  match_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchPresence::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.match_id)
  return _internal_match_id();
}
inline void MatchPresence::set_match_id(const std::string& value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:server.MatchPresence.match_id)
}
inline std::string* MatchPresence::mutable_match_id() {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.match_id)
  return _internal_mutable_match_id();
}
inline const std::string& MatchPresence::_internal_match_id() const {
  return match_id_.Get();
}
inline void MatchPresence::_internal_set_match_id(const std::string& value) {
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchPresence::set_match_id(std::string&& value) {
  
  match_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchPresence.match_id)
}
inline void MatchPresence::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchPresence.match_id)
}
inline void MatchPresence::set_match_id(const char* value,
    size_t size) {
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchPresence.match_id)
}
inline std::string* MatchPresence::_internal_mutable_match_id() {
  
  return match_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchPresence::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchPresence.match_id)
  return match_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchPresence::set_allocated_match_id(std::string* match_id) {
  if (match_id != nullptr) {
    
  } else {
    
  }
  match_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchPresence.match_id)
}

// repeated .server.UserPresence joins = 2;
inline int MatchPresence::_internal_joins_size() const {
  return joins_.size();
}
inline int MatchPresence::joins_size() const {
  return _internal_joins_size();
}
inline void MatchPresence::clear_joins() {
  joins_.Clear();
}
inline ::server::UserPresence* MatchPresence::mutable_joins(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.joins)
  return joins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
MatchPresence::mutable_joins() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchPresence.joins)
  return &joins_;
}
inline const ::server::UserPresence& MatchPresence::_internal_joins(int index) const {
  return joins_.Get(index);
}
inline const ::server::UserPresence& MatchPresence::joins(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.joins)
  return _internal_joins(index);
}
inline ::server::UserPresence* MatchPresence::_internal_add_joins() {
  return joins_.Add();
}
inline ::server::UserPresence* MatchPresence::add_joins() {
  // @@protoc_insertion_point(field_add:server.MatchPresence.joins)
  return _internal_add_joins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
MatchPresence::joins() const {
  // @@protoc_insertion_point(field_list:server.MatchPresence.joins)
  return joins_;
}

// repeated .server.UserPresence leaves = 3;
inline int MatchPresence::_internal_leaves_size() const {
  return leaves_.size();
}
inline int MatchPresence::leaves_size() const {
  return _internal_leaves_size();
}
inline void MatchPresence::clear_leaves() {
  leaves_.Clear();
}
inline ::server::UserPresence* MatchPresence::mutable_leaves(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchPresence.leaves)
  return leaves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
MatchPresence::mutable_leaves() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchPresence.leaves)
  return &leaves_;
}
inline const ::server::UserPresence& MatchPresence::_internal_leaves(int index) const {
  return leaves_.Get(index);
}
inline const ::server::UserPresence& MatchPresence::leaves(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchPresence.leaves)
  return _internal_leaves(index);
}
inline ::server::UserPresence* MatchPresence::_internal_add_leaves() {
  return leaves_.Add();
}
inline ::server::UserPresence* MatchPresence::add_leaves() {
  // @@protoc_insertion_point(field_add:server.MatchPresence.leaves)
  return _internal_add_leaves();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
MatchPresence::leaves() const {
  // @@protoc_insertion_point(field_list:server.MatchPresence.leaves)
  return leaves_;
}

// -------------------------------------------------------------------

// TMatchCreate

// -------------------------------------------------------------------

// TMatch

// .server.Match match = 1;
inline bool TMatch::_internal_has_match() const {
  return this != internal_default_instance() && match_ != nullptr;
}
inline bool TMatch::has_match() const {
  return _internal_has_match();
}
inline void TMatch::clear_match() {
  if (GetArena() == nullptr && match_ != nullptr) {
    delete match_;
  }
  match_ = nullptr;
}
inline const ::server::Match& TMatch::_internal_match() const {
  const ::server::Match* p = match_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::Match&>(
      ::server::_Match_default_instance_);
}
inline const ::server::Match& TMatch::match() const {
  // @@protoc_insertion_point(field_get:server.TMatch.match)
  return _internal_match();
}
inline void TMatch::unsafe_arena_set_allocated_match(
    ::server::Match* match) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_);
  }
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TMatch.match)
}
inline ::server::Match* TMatch::release_match() {
  
  ::server::Match* temp = match_;
  match_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::Match* TMatch::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:server.TMatch.match)
  
  ::server::Match* temp = match_;
  match_ = nullptr;
  return temp;
}
inline ::server::Match* TMatch::_internal_mutable_match() {
  
  if (match_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::Match>(GetArena());
    match_ = p;
  }
  return match_;
}
inline ::server::Match* TMatch::mutable_match() {
  // @@protoc_insertion_point(field_mutable:server.TMatch.match)
  return _internal_mutable_match();
}
inline void TMatch::set_allocated_match(::server::Match* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete match_;
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match);
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    
  } else {
    
  }
  match_ = match;
  // @@protoc_insertion_point(field_set_allocated:server.TMatch.match)
}

// -------------------------------------------------------------------

// TMatchesJoin_MatchJoin

// string match_id = 1;
inline bool TMatchesJoin_MatchJoin::_internal_has_match_id() const {
  return id_case() == kMatchId;
}
inline void TMatchesJoin_MatchJoin::set_has_match_id() {
  _oneof_case_[0] = kMatchId;
}
inline void TMatchesJoin_MatchJoin::clear_match_id() {
  if (_internal_has_match_id()) {
    id_.match_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TMatchesJoin_MatchJoin::match_id() const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.MatchJoin.match_id)
  return _internal_match_id();
}
inline void TMatchesJoin_MatchJoin::set_match_id(const std::string& value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.match_id)
}
inline std::string* TMatchesJoin_MatchJoin::mutable_match_id() {
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.MatchJoin.match_id)
  return _internal_mutable_match_id();
}
inline const std::string& TMatchesJoin_MatchJoin::_internal_match_id() const {
  if (_internal_has_match_id()) {
    return id_.match_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TMatchesJoin_MatchJoin::_internal_set_match_id(const std::string& value) {
  if (!_internal_has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TMatchesJoin_MatchJoin::set_match_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.match_id)
  if (!_internal_has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TMatchesJoin.MatchJoin.match_id)
}
inline void TMatchesJoin_MatchJoin::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TMatchesJoin.MatchJoin.match_id)
}
inline void TMatchesJoin_MatchJoin::set_match_id(const char* value,
                             size_t size) {
  if (!_internal_has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.match_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesJoin.MatchJoin.match_id)
}
inline std::string* TMatchesJoin_MatchJoin::_internal_mutable_match_id() {
  if (!_internal_has_match_id()) {
    clear_id();
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.match_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TMatchesJoin_MatchJoin::release_match_id() {
  // @@protoc_insertion_point(field_release:server.TMatchesJoin.MatchJoin.match_id)
  if (_internal_has_match_id()) {
    clear_has_id();
    return id_.match_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TMatchesJoin_MatchJoin::set_allocated_match_id(std::string* match_id) {
  if (has_id()) {
    clear_id();
  }
  if (match_id != nullptr) {
    set_has_match_id();
    id_.match_id_.UnsafeSetDefault(match_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(match_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatchesJoin.MatchJoin.match_id)
}

// string token = 2;
inline bool TMatchesJoin_MatchJoin::_internal_has_token() const {
  return id_case() == kToken;
}
inline void TMatchesJoin_MatchJoin::set_has_token() {
  _oneof_case_[0] = kToken;
}
inline void TMatchesJoin_MatchJoin::clear_token() {
  if (_internal_has_token()) {
    id_.token_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_id();
  }
}
inline const std::string& TMatchesJoin_MatchJoin::token() const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.MatchJoin.token)
  return _internal_token();
}
inline void TMatchesJoin_MatchJoin::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.token)
}
inline std::string* TMatchesJoin_MatchJoin::mutable_token() {
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.MatchJoin.token)
  return _internal_mutable_token();
}
inline const std::string& TMatchesJoin_MatchJoin::_internal_token() const {
  if (_internal_has_token()) {
    return id_.token_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TMatchesJoin_MatchJoin::_internal_set_token(const std::string& value) {
  if (!_internal_has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TMatchesJoin_MatchJoin::set_token(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesJoin.MatchJoin.token)
  if (!_internal_has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TMatchesJoin.MatchJoin.token)
}
inline void TMatchesJoin_MatchJoin::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TMatchesJoin.MatchJoin.token)
}
inline void TMatchesJoin_MatchJoin::set_token(const char* value,
                             size_t size) {
  if (!_internal_has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.token_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesJoin.MatchJoin.token)
}
inline std::string* TMatchesJoin_MatchJoin::_internal_mutable_token() {
  if (!_internal_has_token()) {
    clear_id();
    set_has_token();
    id_.token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TMatchesJoin_MatchJoin::release_token() {
  // @@protoc_insertion_point(field_release:server.TMatchesJoin.MatchJoin.token)
  if (_internal_has_token()) {
    clear_has_id();
    return id_.token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TMatchesJoin_MatchJoin::set_allocated_token(std::string* token) {
  if (has_id()) {
    clear_id();
  }
  if (token != nullptr) {
    set_has_token();
    id_.token_.UnsafeSetDefault(token);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(token);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TMatchesJoin.MatchJoin.token)
}

inline bool TMatchesJoin_MatchJoin::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TMatchesJoin_MatchJoin::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TMatchesJoin_MatchJoin::IdCase TMatchesJoin_MatchJoin::id_case() const {
  return TMatchesJoin_MatchJoin::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TMatchesJoin

// repeated .server.TMatchesJoin.MatchJoin matches = 1;
inline int TMatchesJoin::_internal_matches_size() const {
  return matches_.size();
}
inline int TMatchesJoin::matches_size() const {
  return _internal_matches_size();
}
inline void TMatchesJoin::clear_matches() {
  matches_.Clear();
}
inline ::server::TMatchesJoin_MatchJoin* TMatchesJoin::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchesJoin.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >*
TMatchesJoin::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchesJoin.matches)
  return &matches_;
}
inline const ::server::TMatchesJoin_MatchJoin& TMatchesJoin::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::server::TMatchesJoin_MatchJoin& TMatchesJoin::matches(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchesJoin.matches)
  return _internal_matches(index);
}
inline ::server::TMatchesJoin_MatchJoin* TMatchesJoin::_internal_add_matches() {
  return matches_.Add();
}
inline ::server::TMatchesJoin_MatchJoin* TMatchesJoin::add_matches() {
  // @@protoc_insertion_point(field_add:server.TMatchesJoin.matches)
  return _internal_add_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TMatchesJoin_MatchJoin >&
TMatchesJoin::matches() const {
  // @@protoc_insertion_point(field_list:server.TMatchesJoin.matches)
  return matches_;
}

// -------------------------------------------------------------------

// TMatches

// repeated .server.Match matches = 1;
inline int TMatches::_internal_matches_size() const {
  return matches_.size();
}
inline int TMatches::matches_size() const {
  return _internal_matches_size();
}
inline void TMatches::clear_matches() {
  matches_.Clear();
}
inline ::server::Match* TMatches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatches.matches)
  return matches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Match >*
TMatches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatches.matches)
  return &matches_;
}
inline const ::server::Match& TMatches::_internal_matches(int index) const {
  return matches_.Get(index);
}
inline const ::server::Match& TMatches::matches(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatches.matches)
  return _internal_matches(index);
}
inline ::server::Match* TMatches::_internal_add_matches() {
  return matches_.Add();
}
inline ::server::Match* TMatches::add_matches() {
  // @@protoc_insertion_point(field_add:server.TMatches.matches)
  return _internal_add_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Match >&
TMatches::matches() const {
  // @@protoc_insertion_point(field_list:server.TMatches.matches)
  return matches_;
}

// -------------------------------------------------------------------

// MatchDataSend

// string match_id = 1;
inline void MatchDataSend::clear_match_id() {
  match_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchDataSend::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.match_id)
  return _internal_match_id();
}
inline void MatchDataSend::set_match_id(const std::string& value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:server.MatchDataSend.match_id)
}
inline std::string* MatchDataSend::mutable_match_id() {
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.match_id)
  return _internal_mutable_match_id();
}
inline const std::string& MatchDataSend::_internal_match_id() const {
  return match_id_.Get();
}
inline void MatchDataSend::_internal_set_match_id(const std::string& value) {
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchDataSend::set_match_id(std::string&& value) {
  
  match_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchDataSend.match_id)
}
inline void MatchDataSend::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchDataSend.match_id)
}
inline void MatchDataSend::set_match_id(const char* value,
    size_t size) {
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchDataSend.match_id)
}
inline std::string* MatchDataSend::_internal_mutable_match_id() {
  
  return match_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchDataSend::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchDataSend.match_id)
  return match_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchDataSend::set_allocated_match_id(std::string* match_id) {
  if (match_id != nullptr) {
    
  } else {
    
  }
  match_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchDataSend.match_id)
}

// int64 op_code = 2;
inline void MatchDataSend::clear_op_code() {
  op_code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchDataSend::_internal_op_code() const {
  return op_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchDataSend::op_code() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.op_code)
  return _internal_op_code();
}
inline void MatchDataSend::_internal_set_op_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  op_code_ = value;
}
inline void MatchDataSend::set_op_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_op_code(value);
  // @@protoc_insertion_point(field_set:server.MatchDataSend.op_code)
}

// bytes data = 3;
inline void MatchDataSend::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchDataSend::data() const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.data)
  return _internal_data();
}
inline void MatchDataSend::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:server.MatchDataSend.data)
}
inline std::string* MatchDataSend::mutable_data() {
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.data)
  return _internal_mutable_data();
}
inline const std::string& MatchDataSend::_internal_data() const {
  return data_.Get();
}
inline void MatchDataSend::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchDataSend::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchDataSend.data)
}
inline void MatchDataSend::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchDataSend.data)
}
inline void MatchDataSend::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchDataSend.data)
}
inline std::string* MatchDataSend::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchDataSend::release_data() {
  // @@protoc_insertion_point(field_release:server.MatchDataSend.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchDataSend::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchDataSend.data)
}

// repeated .server.UserPresence presences = 4;
inline int MatchDataSend::_internal_presences_size() const {
  return presences_.size();
}
inline int MatchDataSend::presences_size() const {
  return _internal_presences_size();
}
inline void MatchDataSend::clear_presences() {
  presences_.Clear();
}
inline ::server::UserPresence* MatchDataSend::mutable_presences(int index) {
  // @@protoc_insertion_point(field_mutable:server.MatchDataSend.presences)
  return presences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >*
MatchDataSend::mutable_presences() {
  // @@protoc_insertion_point(field_mutable_list:server.MatchDataSend.presences)
  return &presences_;
}
inline const ::server::UserPresence& MatchDataSend::_internal_presences(int index) const {
  return presences_.Get(index);
}
inline const ::server::UserPresence& MatchDataSend::presences(int index) const {
  // @@protoc_insertion_point(field_get:server.MatchDataSend.presences)
  return _internal_presences(index);
}
inline ::server::UserPresence* MatchDataSend::_internal_add_presences() {
  return presences_.Add();
}
inline ::server::UserPresence* MatchDataSend::add_presences() {
  // @@protoc_insertion_point(field_add:server.MatchDataSend.presences)
  return _internal_add_presences();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::UserPresence >&
MatchDataSend::presences() const {
  // @@protoc_insertion_point(field_list:server.MatchDataSend.presences)
  return presences_;
}

// -------------------------------------------------------------------

// MatchData

// string match_id = 1;
inline void MatchData::clear_match_id() {
  match_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchData::match_id() const {
  // @@protoc_insertion_point(field_get:server.MatchData.match_id)
  return _internal_match_id();
}
inline void MatchData::set_match_id(const std::string& value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:server.MatchData.match_id)
}
inline std::string* MatchData::mutable_match_id() {
  // @@protoc_insertion_point(field_mutable:server.MatchData.match_id)
  return _internal_mutable_match_id();
}
inline const std::string& MatchData::_internal_match_id() const {
  return match_id_.Get();
}
inline void MatchData::_internal_set_match_id(const std::string& value) {
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchData::set_match_id(std::string&& value) {
  
  match_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchData.match_id)
}
inline void MatchData::set_match_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchData.match_id)
}
inline void MatchData::set_match_id(const char* value,
    size_t size) {
  
  match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchData.match_id)
}
inline std::string* MatchData::_internal_mutable_match_id() {
  
  return match_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchData::release_match_id() {
  // @@protoc_insertion_point(field_release:server.MatchData.match_id)
  return match_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchData::set_allocated_match_id(std::string* match_id) {
  if (match_id != nullptr) {
    
  } else {
    
  }
  match_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), match_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.match_id)
}

// .server.UserPresence presence = 2;
inline bool MatchData::_internal_has_presence() const {
  return this != internal_default_instance() && presence_ != nullptr;
}
inline bool MatchData::has_presence() const {
  return _internal_has_presence();
}
inline void MatchData::clear_presence() {
  if (GetArena() == nullptr && presence_ != nullptr) {
    delete presence_;
  }
  presence_ = nullptr;
}
inline const ::server::UserPresence& MatchData::_internal_presence() const {
  const ::server::UserPresence* p = presence_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::UserPresence&>(
      ::server::_UserPresence_default_instance_);
}
inline const ::server::UserPresence& MatchData::presence() const {
  // @@protoc_insertion_point(field_get:server.MatchData.presence)
  return _internal_presence();
}
inline void MatchData::unsafe_arena_set_allocated_presence(
    ::server::UserPresence* presence) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(presence_);
  }
  presence_ = presence;
  if (presence) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.MatchData.presence)
}
inline ::server::UserPresence* MatchData::release_presence() {
  
  ::server::UserPresence* temp = presence_;
  presence_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::UserPresence* MatchData::unsafe_arena_release_presence() {
  // @@protoc_insertion_point(field_release:server.MatchData.presence)
  
  ::server::UserPresence* temp = presence_;
  presence_ = nullptr;
  return temp;
}
inline ::server::UserPresence* MatchData::_internal_mutable_presence() {
  
  if (presence_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::UserPresence>(GetArena());
    presence_ = p;
  }
  return presence_;
}
inline ::server::UserPresence* MatchData::mutable_presence() {
  // @@protoc_insertion_point(field_mutable:server.MatchData.presence)
  return _internal_mutable_presence();
}
inline void MatchData::set_allocated_presence(::server::UserPresence* presence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete presence_;
  }
  if (presence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(presence);
    if (message_arena != submessage_arena) {
      presence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, presence, submessage_arena);
    }
    
  } else {
    
  }
  presence_ = presence;
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.presence)
}

// int64 op_code = 3;
inline void MatchData::clear_op_code() {
  op_code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchData::_internal_op_code() const {
  return op_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MatchData::op_code() const {
  // @@protoc_insertion_point(field_get:server.MatchData.op_code)
  return _internal_op_code();
}
inline void MatchData::_internal_set_op_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  op_code_ = value;
}
inline void MatchData::set_op_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_op_code(value);
  // @@protoc_insertion_point(field_set:server.MatchData.op_code)
}

// bytes data = 4;
inline void MatchData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MatchData::data() const {
  // @@protoc_insertion_point(field_get:server.MatchData.data)
  return _internal_data();
}
inline void MatchData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:server.MatchData.data)
}
inline std::string* MatchData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:server.MatchData.data)
  return _internal_mutable_data();
}
inline const std::string& MatchData::_internal_data() const {
  return data_.Get();
}
inline void MatchData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MatchData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.MatchData.data)
}
inline void MatchData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.MatchData.data)
}
inline void MatchData::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.MatchData.data)
}
inline std::string* MatchData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MatchData::release_data() {
  // @@protoc_insertion_point(field_release:server.MatchData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MatchData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.MatchData.data)
}

// -------------------------------------------------------------------

// TMatchesLeave

// repeated string match_ids = 1;
inline int TMatchesLeave::_internal_match_ids_size() const {
  return match_ids_.size();
}
inline int TMatchesLeave::match_ids_size() const {
  return _internal_match_ids_size();
}
inline void TMatchesLeave::clear_match_ids() {
  match_ids_.Clear();
}
inline std::string* TMatchesLeave::add_match_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TMatchesLeave.match_ids)
  return _internal_add_match_ids();
}
inline const std::string& TMatchesLeave::_internal_match_ids(int index) const {
  return match_ids_.Get(index);
}
inline const std::string& TMatchesLeave::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TMatchesLeave.match_ids)
  return _internal_match_ids(index);
}
inline std::string* TMatchesLeave::mutable_match_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TMatchesLeave.match_ids)
  return match_ids_.Mutable(index);
}
inline void TMatchesLeave::set_match_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesLeave.match_ids)
  match_ids_.Mutable(index)->assign(value);
}
inline void TMatchesLeave::set_match_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TMatchesLeave.match_ids)
  match_ids_.Mutable(index)->assign(std::move(value));
}
inline void TMatchesLeave::set_match_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  match_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TMatchesLeave.match_ids)
}
inline void TMatchesLeave::set_match_ids(int index, const char* value, size_t size) {
  match_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TMatchesLeave.match_ids)
}
inline std::string* TMatchesLeave::_internal_add_match_ids() {
  return match_ids_.Add();
}
inline void TMatchesLeave::add_match_ids(const std::string& value) {
  match_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TMatchesLeave.match_ids)
}
inline void TMatchesLeave::add_match_ids(std::string&& value) {
  match_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TMatchesLeave.match_ids)
}
inline void TMatchesLeave::add_match_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  match_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TMatchesLeave.match_ids)
}
inline void TMatchesLeave::add_match_ids(const char* value, size_t size) {
  match_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TMatchesLeave.match_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TMatchesLeave::match_ids() const {
  // @@protoc_insertion_point(field_list:server.TMatchesLeave.match_ids)
  return match_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TMatchesLeave::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TMatchesLeave.match_ids)
  return &match_ids_;
}

// -------------------------------------------------------------------

// TStorageList

// string user_id = 1;
inline void TStorageList::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageList::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.user_id)
  return _internal_user_id();
}
inline void TStorageList::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TStorageList.user_id)
}
inline std::string* TStorageList::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TStorageList.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TStorageList::_internal_user_id() const {
  return user_id_.Get();
}
inline void TStorageList::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageList::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageList.user_id)
}
inline void TStorageList::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageList.user_id)
}
inline void TStorageList::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.user_id)
}
inline std::string* TStorageList::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageList::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageList.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageList::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.user_id)
}

// string bucket = 2;
inline void TStorageList::clear_bucket() {
  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageList::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.bucket)
  return _internal_bucket();
}
inline void TStorageList::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:server.TStorageList.bucket)
}
inline std::string* TStorageList::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:server.TStorageList.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& TStorageList::_internal_bucket() const {
  return bucket_.Get();
}
inline void TStorageList::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageList::set_bucket(std::string&& value) {
  
  bucket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageList.bucket)
}
inline void TStorageList::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageList.bucket)
}
inline void TStorageList::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.bucket)
}
inline std::string* TStorageList::_internal_mutable_bucket() {
  
  return bucket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageList::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageList.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageList::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.bucket)
}

// string collection = 3;
inline void TStorageList::clear_collection() {
  collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageList::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.collection)
  return _internal_collection();
}
inline void TStorageList::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:server.TStorageList.collection)
}
inline std::string* TStorageList::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:server.TStorageList.collection)
  return _internal_mutable_collection();
}
inline const std::string& TStorageList::_internal_collection() const {
  return collection_.Get();
}
inline void TStorageList::_internal_set_collection(const std::string& value) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageList::set_collection(std::string&& value) {
  
  collection_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageList.collection)
}
inline void TStorageList::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageList.collection)
}
inline void TStorageList::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.collection)
}
inline std::string* TStorageList::_internal_mutable_collection() {
  
  return collection_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageList::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageList.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageList::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.collection)
}

// int64 limit = 4;
inline void TStorageList::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageList::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageList::limit() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.limit)
  return _internal_limit();
}
inline void TStorageList::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void TStorageList::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:server.TStorageList.limit)
}

// string cursor = 5;
inline void TStorageList::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TStorageList.cursor)
  return _internal_cursor();
}
inline void TStorageList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TStorageList.cursor)
}
inline std::string* TStorageList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TStorageList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TStorageList::_internal_cursor() const {
  return cursor_.Get();
}
inline void TStorageList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageList.cursor)
}
inline void TStorageList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageList.cursor)
}
inline void TStorageList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageList.cursor)
}
inline std::string* TStorageList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TStorageList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageList.cursor)
}

// -------------------------------------------------------------------

// TStorageFetch_StorageKey

// string bucket = 1;
inline void TStorageFetch_StorageKey::clear_bucket() {
  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageFetch_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.bucket)
  return _internal_bucket();
}
inline void TStorageFetch_StorageKey::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.bucket)
}
inline std::string* TStorageFetch_StorageKey::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& TStorageFetch_StorageKey::_internal_bucket() const {
  return bucket_.Get();
}
inline void TStorageFetch_StorageKey::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageFetch_StorageKey::set_bucket(std::string&& value) {
  
  bucket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageFetch.StorageKey.bucket)
}
inline void TStorageFetch_StorageKey::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.bucket)
}
inline void TStorageFetch_StorageKey::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.bucket)
}
inline std::string* TStorageFetch_StorageKey::_internal_mutable_bucket() {
  
  return bucket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageFetch_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageFetch_StorageKey::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.bucket)
}

// string collection = 2;
inline void TStorageFetch_StorageKey::clear_collection() {
  collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageFetch_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.collection)
  return _internal_collection();
}
inline void TStorageFetch_StorageKey::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.collection)
}
inline std::string* TStorageFetch_StorageKey::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.collection)
  return _internal_mutable_collection();
}
inline const std::string& TStorageFetch_StorageKey::_internal_collection() const {
  return collection_.Get();
}
inline void TStorageFetch_StorageKey::_internal_set_collection(const std::string& value) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageFetch_StorageKey::set_collection(std::string&& value) {
  
  collection_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageFetch.StorageKey.collection)
}
inline void TStorageFetch_StorageKey::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.collection)
}
inline void TStorageFetch_StorageKey::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.collection)
}
inline std::string* TStorageFetch_StorageKey::_internal_mutable_collection() {
  
  return collection_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageFetch_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageFetch_StorageKey::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.collection)
}

// string record = 3;
inline void TStorageFetch_StorageKey::clear_record() {
  record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageFetch_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.record)
  return _internal_record();
}
inline void TStorageFetch_StorageKey::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.record)
}
inline std::string* TStorageFetch_StorageKey::mutable_record() {
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.record)
  return _internal_mutable_record();
}
inline const std::string& TStorageFetch_StorageKey::_internal_record() const {
  return record_.Get();
}
inline void TStorageFetch_StorageKey::_internal_set_record(const std::string& value) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageFetch_StorageKey::set_record(std::string&& value) {
  
  record_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageFetch.StorageKey.record)
}
inline void TStorageFetch_StorageKey::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.record)
}
inline void TStorageFetch_StorageKey::set_record(const char* value,
    size_t size) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.record)
}
inline std::string* TStorageFetch_StorageKey::_internal_mutable_record() {
  
  return record_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageFetch_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.record)
  return record_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageFetch_StorageKey::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.record)
}

// string user_id = 4;
inline void TStorageFetch_StorageKey::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageFetch_StorageKey::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.StorageKey.user_id)
  return _internal_user_id();
}
inline void TStorageFetch_StorageKey::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TStorageFetch.StorageKey.user_id)
}
inline std::string* TStorageFetch_StorageKey::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.StorageKey.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TStorageFetch_StorageKey::_internal_user_id() const {
  return user_id_.Get();
}
inline void TStorageFetch_StorageKey::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageFetch_StorageKey::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageFetch.StorageKey.user_id)
}
inline void TStorageFetch_StorageKey::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageFetch.StorageKey.user_id)
}
inline void TStorageFetch_StorageKey::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageFetch.StorageKey.user_id)
}
inline std::string* TStorageFetch_StorageKey::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageFetch_StorageKey::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageFetch.StorageKey.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageFetch_StorageKey::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageFetch.StorageKey.user_id)
}

// -------------------------------------------------------------------

// TStorageFetch

// repeated .server.TStorageFetch.StorageKey keys = 1;
inline int TStorageFetch::_internal_keys_size() const {
  return keys_.size();
}
inline int TStorageFetch::keys_size() const {
  return _internal_keys_size();
}
inline void TStorageFetch::clear_keys() {
  keys_.Clear();
}
inline ::server::TStorageFetch_StorageKey* TStorageFetch::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageFetch.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageFetch_StorageKey >*
TStorageFetch::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageFetch.keys)
  return &keys_;
}
inline const ::server::TStorageFetch_StorageKey& TStorageFetch::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::server::TStorageFetch_StorageKey& TStorageFetch::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageFetch.keys)
  return _internal_keys(index);
}
inline ::server::TStorageFetch_StorageKey* TStorageFetch::_internal_add_keys() {
  return keys_.Add();
}
inline ::server::TStorageFetch_StorageKey* TStorageFetch::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageFetch.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageFetch_StorageKey >&
TStorageFetch::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageFetch.keys)
  return keys_;
}

// -------------------------------------------------------------------

// TStorageData_StorageData

// string bucket = 1;
inline void TStorageData_StorageData::clear_bucket() {
  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageData_StorageData::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.bucket)
  return _internal_bucket();
}
inline void TStorageData_StorageData::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.bucket)
}
inline std::string* TStorageData_StorageData::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& TStorageData_StorageData::_internal_bucket() const {
  return bucket_.Get();
}
inline void TStorageData_StorageData::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageData_StorageData::set_bucket(std::string&& value) {
  
  bucket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageData.StorageData.bucket)
}
inline void TStorageData_StorageData::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.bucket)
}
inline void TStorageData_StorageData::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.bucket)
}
inline std::string* TStorageData_StorageData::_internal_mutable_bucket() {
  
  return bucket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageData_StorageData::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageData_StorageData::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.bucket)
}

// string collection = 2;
inline void TStorageData_StorageData::clear_collection() {
  collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageData_StorageData::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.collection)
  return _internal_collection();
}
inline void TStorageData_StorageData::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.collection)
}
inline std::string* TStorageData_StorageData::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.collection)
  return _internal_mutable_collection();
}
inline const std::string& TStorageData_StorageData::_internal_collection() const {
  return collection_.Get();
}
inline void TStorageData_StorageData::_internal_set_collection(const std::string& value) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageData_StorageData::set_collection(std::string&& value) {
  
  collection_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageData.StorageData.collection)
}
inline void TStorageData_StorageData::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.collection)
}
inline void TStorageData_StorageData::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.collection)
}
inline std::string* TStorageData_StorageData::_internal_mutable_collection() {
  
  return collection_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageData_StorageData::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageData_StorageData::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.collection)
}

// string record = 3;
inline void TStorageData_StorageData::clear_record() {
  record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageData_StorageData::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.record)
  return _internal_record();
}
inline void TStorageData_StorageData::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.record)
}
inline std::string* TStorageData_StorageData::mutable_record() {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.record)
  return _internal_mutable_record();
}
inline const std::string& TStorageData_StorageData::_internal_record() const {
  return record_.Get();
}
inline void TStorageData_StorageData::_internal_set_record(const std::string& value) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageData_StorageData::set_record(std::string&& value) {
  
  record_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageData.StorageData.record)
}
inline void TStorageData_StorageData::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.record)
}
inline void TStorageData_StorageData::set_record(const char* value,
    size_t size) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.record)
}
inline std::string* TStorageData_StorageData::_internal_mutable_record() {
  
  return record_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageData_StorageData::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.record)
  return record_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageData_StorageData::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.record)
}

// string user_id = 4;
inline void TStorageData_StorageData::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageData_StorageData::user_id() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.user_id)
  return _internal_user_id();
}
inline void TStorageData_StorageData::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.user_id)
}
inline std::string* TStorageData_StorageData::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& TStorageData_StorageData::_internal_user_id() const {
  return user_id_.Get();
}
inline void TStorageData_StorageData::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageData_StorageData::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageData.StorageData.user_id)
}
inline void TStorageData_StorageData::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.user_id)
}
inline void TStorageData_StorageData::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.user_id)
}
inline std::string* TStorageData_StorageData::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageData_StorageData::release_user_id() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageData_StorageData::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.user_id)
}

// string value = 5;
inline void TStorageData_StorageData::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageData_StorageData::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.value)
  return _internal_value();
}
inline void TStorageData_StorageData::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.value)
}
inline std::string* TStorageData_StorageData::mutable_value() {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.value)
  return _internal_mutable_value();
}
inline const std::string& TStorageData_StorageData::_internal_value() const {
  return value_.Get();
}
inline void TStorageData_StorageData::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageData_StorageData::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageData.StorageData.value)
}
inline void TStorageData_StorageData::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.value)
}
inline void TStorageData_StorageData::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.value)
}
inline std::string* TStorageData_StorageData::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageData_StorageData::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageData_StorageData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.value)
}

// string version = 6;
inline void TStorageData_StorageData::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageData_StorageData::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.version)
  return _internal_version();
}
inline void TStorageData_StorageData::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.version)
}
inline std::string* TStorageData_StorageData::mutable_version() {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.StorageData.version)
  return _internal_mutable_version();
}
inline const std::string& TStorageData_StorageData::_internal_version() const {
  return version_.Get();
}
inline void TStorageData_StorageData::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageData_StorageData::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageData.StorageData.version)
}
inline void TStorageData_StorageData::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageData.StorageData.version)
}
inline void TStorageData_StorageData::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.StorageData.version)
}
inline std::string* TStorageData_StorageData::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageData_StorageData::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageData.StorageData.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageData_StorageData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.StorageData.version)
}

// int32 permission_read = 7;
inline void TStorageData_StorageData::clear_permission_read() {
  permission_read_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageData_StorageData::_internal_permission_read() const {
  return permission_read_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageData_StorageData::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.permission_read)
  return _internal_permission_read();
}
inline void TStorageData_StorageData::_internal_set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_read_ = value;
}
inline void TStorageData_StorageData::set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission_read(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.permission_read)
}

// int32 permission_write = 8;
inline void TStorageData_StorageData::clear_permission_write() {
  permission_write_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageData_StorageData::_internal_permission_write() const {
  return permission_write_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageData_StorageData::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.permission_write)
  return _internal_permission_write();
}
inline void TStorageData_StorageData::_internal_set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_write_ = value;
}
inline void TStorageData_StorageData::set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission_write(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.permission_write)
}

// int64 created_at = 9;
inline void TStorageData_StorageData::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageData_StorageData::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageData_StorageData::created_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.created_at)
  return _internal_created_at();
}
inline void TStorageData_StorageData::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void TStorageData_StorageData::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.created_at)
}

// int64 updated_at = 10;
inline void TStorageData_StorageData::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageData_StorageData::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageData_StorageData::updated_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.updated_at)
  return _internal_updated_at();
}
inline void TStorageData_StorageData::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updated_at_ = value;
}
inline void TStorageData_StorageData::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.updated_at)
}

// int64 expires_at = 11;
inline void TStorageData_StorageData::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageData_StorageData::_internal_expires_at() const {
  return expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageData_StorageData::expires_at() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.StorageData.expires_at)
  return _internal_expires_at();
}
inline void TStorageData_StorageData::_internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expires_at_ = value;
}
inline void TStorageData_StorageData::set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expires_at(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.StorageData.expires_at)
}

// -------------------------------------------------------------------

// TStorageData

// repeated .server.TStorageData.StorageData data = 1;
inline int TStorageData::_internal_data_size() const {
  return data_.size();
}
inline int TStorageData::data_size() const {
  return _internal_data_size();
}
inline void TStorageData::clear_data() {
  data_.Clear();
}
inline ::server::TStorageData_StorageData* TStorageData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageData_StorageData >*
TStorageData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageData.data)
  return &data_;
}
inline const ::server::TStorageData_StorageData& TStorageData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::server::TStorageData_StorageData& TStorageData::data(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageData.data)
  return _internal_data(index);
}
inline ::server::TStorageData_StorageData* TStorageData::_internal_add_data() {
  return data_.Add();
}
inline ::server::TStorageData_StorageData* TStorageData::add_data() {
  // @@protoc_insertion_point(field_add:server.TStorageData.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageData_StorageData >&
TStorageData::data() const {
  // @@protoc_insertion_point(field_list:server.TStorageData.data)
  return data_;
}

// string cursor = 2;
inline void TStorageData::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageData::cursor() const {
  // @@protoc_insertion_point(field_get:server.TStorageData.cursor)
  return _internal_cursor();
}
inline void TStorageData::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TStorageData.cursor)
}
inline std::string* TStorageData::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TStorageData.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TStorageData::_internal_cursor() const {
  return cursor_.Get();
}
inline void TStorageData::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageData::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageData.cursor)
}
inline void TStorageData::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageData.cursor)
}
inline void TStorageData::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageData.cursor)
}
inline std::string* TStorageData::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageData::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TStorageData.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageData::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageData.cursor)
}

// -------------------------------------------------------------------

// TStorageWrite_StorageData

// string bucket = 1;
inline void TStorageWrite_StorageData::clear_bucket() {
  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageWrite_StorageData::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.bucket)
  return _internal_bucket();
}
inline void TStorageWrite_StorageData::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.bucket)
}
inline std::string* TStorageWrite_StorageData::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& TStorageWrite_StorageData::_internal_bucket() const {
  return bucket_.Get();
}
inline void TStorageWrite_StorageData::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageWrite_StorageData::set_bucket(std::string&& value) {
  
  bucket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageWrite.StorageData.bucket)
}
inline void TStorageWrite_StorageData::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.bucket)
}
inline void TStorageWrite_StorageData::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.bucket)
}
inline std::string* TStorageWrite_StorageData::_internal_mutable_bucket() {
  
  return bucket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageWrite_StorageData::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageWrite_StorageData::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.bucket)
}

// string collection = 2;
inline void TStorageWrite_StorageData::clear_collection() {
  collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageWrite_StorageData::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.collection)
  return _internal_collection();
}
inline void TStorageWrite_StorageData::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.collection)
}
inline std::string* TStorageWrite_StorageData::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.collection)
  return _internal_mutable_collection();
}
inline const std::string& TStorageWrite_StorageData::_internal_collection() const {
  return collection_.Get();
}
inline void TStorageWrite_StorageData::_internal_set_collection(const std::string& value) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageWrite_StorageData::set_collection(std::string&& value) {
  
  collection_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageWrite.StorageData.collection)
}
inline void TStorageWrite_StorageData::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.collection)
}
inline void TStorageWrite_StorageData::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.collection)
}
inline std::string* TStorageWrite_StorageData::_internal_mutable_collection() {
  
  return collection_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageWrite_StorageData::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageWrite_StorageData::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.collection)
}

// string record = 3;
inline void TStorageWrite_StorageData::clear_record() {
  record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageWrite_StorageData::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.record)
  return _internal_record();
}
inline void TStorageWrite_StorageData::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.record)
}
inline std::string* TStorageWrite_StorageData::mutable_record() {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.record)
  return _internal_mutable_record();
}
inline const std::string& TStorageWrite_StorageData::_internal_record() const {
  return record_.Get();
}
inline void TStorageWrite_StorageData::_internal_set_record(const std::string& value) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageWrite_StorageData::set_record(std::string&& value) {
  
  record_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageWrite.StorageData.record)
}
inline void TStorageWrite_StorageData::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.record)
}
inline void TStorageWrite_StorageData::set_record(const char* value,
    size_t size) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.record)
}
inline std::string* TStorageWrite_StorageData::_internal_mutable_record() {
  
  return record_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageWrite_StorageData::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.record)
  return record_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageWrite_StorageData::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.record)
}

// string value = 4;
inline void TStorageWrite_StorageData::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageWrite_StorageData::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.value)
  return _internal_value();
}
inline void TStorageWrite_StorageData::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.value)
}
inline std::string* TStorageWrite_StorageData::mutable_value() {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.value)
  return _internal_mutable_value();
}
inline const std::string& TStorageWrite_StorageData::_internal_value() const {
  return value_.Get();
}
inline void TStorageWrite_StorageData::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageWrite_StorageData::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageWrite.StorageData.value)
}
inline void TStorageWrite_StorageData::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.value)
}
inline void TStorageWrite_StorageData::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.value)
}
inline std::string* TStorageWrite_StorageData::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageWrite_StorageData::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageWrite_StorageData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.value)
}

// string version = 5;
inline void TStorageWrite_StorageData::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageWrite_StorageData::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.version)
  return _internal_version();
}
inline void TStorageWrite_StorageData::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.version)
}
inline std::string* TStorageWrite_StorageData::mutable_version() {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.StorageData.version)
  return _internal_mutable_version();
}
inline const std::string& TStorageWrite_StorageData::_internal_version() const {
  return version_.Get();
}
inline void TStorageWrite_StorageData::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageWrite_StorageData::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageWrite.StorageData.version)
}
inline void TStorageWrite_StorageData::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageWrite.StorageData.version)
}
inline void TStorageWrite_StorageData::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageWrite.StorageData.version)
}
inline std::string* TStorageWrite_StorageData::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageWrite_StorageData::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageWrite.StorageData.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageWrite_StorageData::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageWrite.StorageData.version)
}

// int32 permission_read = 6;
inline void TStorageWrite_StorageData::clear_permission_read() {
  permission_read_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageWrite_StorageData::_internal_permission_read() const {
  return permission_read_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageWrite_StorageData::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.permission_read)
  return _internal_permission_read();
}
inline void TStorageWrite_StorageData::_internal_set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_read_ = value;
}
inline void TStorageWrite_StorageData::set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission_read(value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.permission_read)
}

// int32 permission_write = 7;
inline void TStorageWrite_StorageData::clear_permission_write() {
  permission_write_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageWrite_StorageData::_internal_permission_write() const {
  return permission_write_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageWrite_StorageData::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.StorageData.permission_write)
  return _internal_permission_write();
}
inline void TStorageWrite_StorageData::_internal_set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_write_ = value;
}
inline void TStorageWrite_StorageData::set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission_write(value);
  // @@protoc_insertion_point(field_set:server.TStorageWrite.StorageData.permission_write)
}

// -------------------------------------------------------------------

// TStorageWrite

// repeated .server.TStorageWrite.StorageData data = 3;
inline int TStorageWrite::_internal_data_size() const {
  return data_.size();
}
inline int TStorageWrite::data_size() const {
  return _internal_data_size();
}
inline void TStorageWrite::clear_data() {
  data_.Clear();
}
inline ::server::TStorageWrite_StorageData* TStorageWrite::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageWrite.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageWrite_StorageData >*
TStorageWrite::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageWrite.data)
  return &data_;
}
inline const ::server::TStorageWrite_StorageData& TStorageWrite::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::server::TStorageWrite_StorageData& TStorageWrite::data(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageWrite.data)
  return _internal_data(index);
}
inline ::server::TStorageWrite_StorageData* TStorageWrite::_internal_add_data() {
  return data_.Add();
}
inline ::server::TStorageWrite_StorageData* TStorageWrite::add_data() {
  // @@protoc_insertion_point(field_add:server.TStorageWrite.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageWrite_StorageData >&
TStorageWrite::data() const {
  // @@protoc_insertion_point(field_list:server.TStorageWrite.data)
  return data_;
}

// -------------------------------------------------------------------

// TStorageUpdate_StorageUpdate_UpdateOp

// int32 op = 1;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_op() {
  op_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageUpdate_StorageUpdate_UpdateOp::_internal_op() const {
  return op_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageUpdate_StorageUpdate_UpdateOp::op() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.op)
  return _internal_op();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::_internal_set_op(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  op_ = value;
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_op(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.op)
}

// string path = 2;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageUpdate_StorageUpdate_UpdateOp::path() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  return _internal_path();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_path() {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  return _internal_mutable_path();
}
inline const std::string& TStorageUpdate_StorageUpdate_UpdateOp::_internal_path() const {
  return path_.Get();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::_internal_set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::_internal_mutable_path() {
  
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_path() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.path)
}

// string value = 3;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageUpdate_StorageUpdate_UpdateOp::value() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  return _internal_value();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_value() {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  return _internal_mutable_value();
}
inline const std::string& TStorageUpdate_StorageUpdate_UpdateOp::_internal_value() const {
  return value_.Get();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_value() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.value)
}

// string from = 4;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_from() {
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageUpdate_StorageUpdate_UpdateOp::from() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  return _internal_from();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::mutable_from() {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  return _internal_mutable_from();
}
inline const std::string& TStorageUpdate_StorageUpdate_UpdateOp::_internal_from() const {
  return from_.Get();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::_internal_set_from(const std::string& value) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_from(std::string&& value) {
  
  from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_from(const char* value,
    size_t size) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::_internal_mutable_from() {
  
  return from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageUpdate_StorageUpdate_UpdateOp::release_from() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.UpdateOp.from)
}

// bool conditional = 5;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_conditional() {
  conditional_ = false;
}
inline bool TStorageUpdate_StorageUpdate_UpdateOp::_internal_conditional() const {
  return conditional_;
}
inline bool TStorageUpdate_StorageUpdate_UpdateOp::conditional() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.conditional)
  return _internal_conditional();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::_internal_set_conditional(bool value) {
  
  conditional_ = value;
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_conditional(bool value) {
  _internal_set_conditional(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.conditional)
}

// int64 assert = 6;
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_assert() {
  assert_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageUpdate_StorageUpdate_UpdateOp::_internal_assert() const {
  return assert_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TStorageUpdate_StorageUpdate_UpdateOp::assert() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.assert)
  return _internal_assert();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::_internal_set_assert(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  assert_ = value;
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::set_assert(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_assert(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.UpdateOp.assert)
}

// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
inline int TStorageUpdate_StorageUpdate_UpdateOp::_internal_ops_size() const {
  return ops_.size();
}
inline int TStorageUpdate_StorageUpdate_UpdateOp::ops_size() const {
  return _internal_ops_size();
}
inline void TStorageUpdate_StorageUpdate_UpdateOp::clear_ops() {
  ops_.Clear();
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
TStorageUpdate_StorageUpdate_UpdateOp::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return &ops_;
}
inline const ::server::TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate_UpdateOp::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::server::TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate_UpdateOp::ops(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return _internal_ops(index);
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::_internal_add_ops() {
  return ops_.Add();
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate_UpdateOp::add_ops() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
TStorageUpdate_StorageUpdate_UpdateOp::ops() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.StorageUpdate.UpdateOp.ops)
  return ops_;
}

// -------------------------------------------------------------------

// TStorageUpdate_StorageUpdate_StorageKey

// string bucket = 1;
inline void TStorageUpdate_StorageUpdate_StorageKey::clear_bucket() {
  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageUpdate_StorageUpdate_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  return _internal_bucket();
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& TStorageUpdate_StorageUpdate_StorageKey::_internal_bucket() const {
  return bucket_.Get();
}
inline void TStorageUpdate_StorageUpdate_StorageKey::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(std::string&& value) {
  
  bucket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::_internal_mutable_bucket() {
  
  return bucket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.bucket)
}

// string collection = 2;
inline void TStorageUpdate_StorageUpdate_StorageKey::clear_collection() {
  collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageUpdate_StorageUpdate_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  return _internal_collection();
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  return _internal_mutable_collection();
}
inline const std::string& TStorageUpdate_StorageUpdate_StorageKey::_internal_collection() const {
  return collection_.Get();
}
inline void TStorageUpdate_StorageUpdate_StorageKey::_internal_set_collection(const std::string& value) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_collection(std::string&& value) {
  
  collection_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::_internal_mutable_collection() {
  
  return collection_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.collection)
}

// string record = 3;
inline void TStorageUpdate_StorageUpdate_StorageKey::clear_record() {
  record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageUpdate_StorageUpdate_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  return _internal_record();
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_record() {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  return _internal_mutable_record();
}
inline const std::string& TStorageUpdate_StorageUpdate_StorageKey::_internal_record() const {
  return record_.Get();
}
inline void TStorageUpdate_StorageUpdate_StorageKey::_internal_set_record(const std::string& value) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_record(std::string&& value) {
  
  record_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_record(const char* value,
    size_t size) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::_internal_mutable_record() {
  
  return record_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.record)
  return record_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.record)
}

// string version = 4;
inline void TStorageUpdate_StorageUpdate_StorageKey::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageUpdate_StorageUpdate_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  return _internal_version();
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::mutable_version() {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  return _internal_mutable_version();
}
inline const std::string& TStorageUpdate_StorageUpdate_StorageKey::_internal_version() const {
  return version_.Get();
}
inline void TStorageUpdate_StorageUpdate_StorageKey::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageUpdate_StorageUpdate_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.StorageKey.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageUpdate_StorageUpdate_StorageKey::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.StorageKey.version)
}

// -------------------------------------------------------------------

// TStorageUpdate_StorageUpdate

// .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
inline bool TStorageUpdate_StorageUpdate::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool TStorageUpdate_StorageUpdate::has_key() const {
  return _internal_has_key();
}
inline void TStorageUpdate_StorageUpdate::clear_key() {
  if (GetArena() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::server::TStorageUpdate_StorageUpdate_StorageKey& TStorageUpdate_StorageUpdate::_internal_key() const {
  const ::server::TStorageUpdate_StorageUpdate_StorageKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::server::TStorageUpdate_StorageUpdate_StorageKey&>(
      ::server::_TStorageUpdate_StorageUpdate_StorageKey_default_instance_);
}
inline const ::server::TStorageUpdate_StorageUpdate_StorageKey& TStorageUpdate_StorageUpdate::key() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.key)
  return _internal_key();
}
inline void TStorageUpdate_StorageUpdate::unsafe_arena_set_allocated_key(
    ::server::TStorageUpdate_StorageUpdate_StorageKey* key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TStorageUpdate.StorageUpdate.key)
}
inline ::server::TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate::release_key() {
  
  ::server::TStorageUpdate_StorageUpdate_StorageKey* temp = key_;
  key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::server::TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:server.TStorageUpdate.StorageUpdate.key)
  
  ::server::TStorageUpdate_StorageUpdate_StorageKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::server::TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::server::TStorageUpdate_StorageUpdate_StorageKey>(GetArena());
    key_ = p;
  }
  return key_;
}
inline ::server::TStorageUpdate_StorageUpdate_StorageKey* TStorageUpdate_StorageUpdate::mutable_key() {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.key)
  return _internal_mutable_key();
}
inline void TStorageUpdate_StorageUpdate::set_allocated_key(::server::TStorageUpdate_StorageUpdate_StorageKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:server.TStorageUpdate.StorageUpdate.key)
}

// int32 permission_read = 2;
inline void TStorageUpdate_StorageUpdate::clear_permission_read() {
  permission_read_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageUpdate_StorageUpdate::_internal_permission_read() const {
  return permission_read_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageUpdate_StorageUpdate::permission_read() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.permission_read)
  return _internal_permission_read();
}
inline void TStorageUpdate_StorageUpdate::_internal_set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_read_ = value;
}
inline void TStorageUpdate_StorageUpdate::set_permission_read(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission_read(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.permission_read)
}

// int32 permission_write = 3;
inline void TStorageUpdate_StorageUpdate::clear_permission_write() {
  permission_write_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageUpdate_StorageUpdate::_internal_permission_write() const {
  return permission_write_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TStorageUpdate_StorageUpdate::permission_write() const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.permission_write)
  return _internal_permission_write();
}
inline void TStorageUpdate_StorageUpdate::_internal_set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_write_ = value;
}
inline void TStorageUpdate_StorageUpdate::set_permission_write(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_permission_write(value);
  // @@protoc_insertion_point(field_set:server.TStorageUpdate.StorageUpdate.permission_write)
}

// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
inline int TStorageUpdate_StorageUpdate::_internal_ops_size() const {
  return ops_.size();
}
inline int TStorageUpdate_StorageUpdate::ops_size() const {
  return _internal_ops_size();
}
inline void TStorageUpdate_StorageUpdate::clear_ops() {
  ops_.Clear();
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.StorageUpdate.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >*
TStorageUpdate_StorageUpdate::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.StorageUpdate.ops)
  return &ops_;
}
inline const ::server::TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::server::TStorageUpdate_StorageUpdate_UpdateOp& TStorageUpdate_StorageUpdate::ops(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.StorageUpdate.ops)
  return _internal_ops(index);
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate::_internal_add_ops() {
  return ops_.Add();
}
inline ::server::TStorageUpdate_StorageUpdate_UpdateOp* TStorageUpdate_StorageUpdate::add_ops() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.StorageUpdate.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate_UpdateOp >&
TStorageUpdate_StorageUpdate::ops() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.StorageUpdate.ops)
  return ops_;
}

// -------------------------------------------------------------------

// TStorageUpdate

// repeated .server.TStorageUpdate.StorageUpdate updates = 1;
inline int TStorageUpdate::_internal_updates_size() const {
  return updates_.size();
}
inline int TStorageUpdate::updates_size() const {
  return _internal_updates_size();
}
inline void TStorageUpdate::clear_updates() {
  updates_.Clear();
}
inline ::server::TStorageUpdate_StorageUpdate* TStorageUpdate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageUpdate.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >*
TStorageUpdate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageUpdate.updates)
  return &updates_;
}
inline const ::server::TStorageUpdate_StorageUpdate& TStorageUpdate::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::server::TStorageUpdate_StorageUpdate& TStorageUpdate::updates(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageUpdate.updates)
  return _internal_updates(index);
}
inline ::server::TStorageUpdate_StorageUpdate* TStorageUpdate::_internal_add_updates() {
  return updates_.Add();
}
inline ::server::TStorageUpdate_StorageUpdate* TStorageUpdate::add_updates() {
  // @@protoc_insertion_point(field_add:server.TStorageUpdate.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageUpdate_StorageUpdate >&
TStorageUpdate::updates() const {
  // @@protoc_insertion_point(field_list:server.TStorageUpdate.updates)
  return updates_;
}

// -------------------------------------------------------------------

// TStorageKeys_StorageKey

// string bucket = 1;
inline void TStorageKeys_StorageKey::clear_bucket() {
  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageKeys_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.bucket)
  return _internal_bucket();
}
inline void TStorageKeys_StorageKey::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.bucket)
}
inline std::string* TStorageKeys_StorageKey::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& TStorageKeys_StorageKey::_internal_bucket() const {
  return bucket_.Get();
}
inline void TStorageKeys_StorageKey::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageKeys_StorageKey::set_bucket(std::string&& value) {
  
  bucket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageKeys.StorageKey.bucket)
}
inline void TStorageKeys_StorageKey::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.bucket)
}
inline void TStorageKeys_StorageKey::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.bucket)
}
inline std::string* TStorageKeys_StorageKey::_internal_mutable_bucket() {
  
  return bucket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageKeys_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageKeys_StorageKey::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.bucket)
}

// string collection = 2;
inline void TStorageKeys_StorageKey::clear_collection() {
  collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageKeys_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.collection)
  return _internal_collection();
}
inline void TStorageKeys_StorageKey::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.collection)
}
inline std::string* TStorageKeys_StorageKey::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.collection)
  return _internal_mutable_collection();
}
inline const std::string& TStorageKeys_StorageKey::_internal_collection() const {
  return collection_.Get();
}
inline void TStorageKeys_StorageKey::_internal_set_collection(const std::string& value) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageKeys_StorageKey::set_collection(std::string&& value) {
  
  collection_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageKeys.StorageKey.collection)
}
inline void TStorageKeys_StorageKey::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.collection)
}
inline void TStorageKeys_StorageKey::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.collection)
}
inline std::string* TStorageKeys_StorageKey::_internal_mutable_collection() {
  
  return collection_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageKeys_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageKeys_StorageKey::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.collection)
}

// string record = 3;
inline void TStorageKeys_StorageKey::clear_record() {
  record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageKeys_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.record)
  return _internal_record();
}
inline void TStorageKeys_StorageKey::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.record)
}
inline std::string* TStorageKeys_StorageKey::mutable_record() {
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.record)
  return _internal_mutable_record();
}
inline const std::string& TStorageKeys_StorageKey::_internal_record() const {
  return record_.Get();
}
inline void TStorageKeys_StorageKey::_internal_set_record(const std::string& value) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageKeys_StorageKey::set_record(std::string&& value) {
  
  record_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageKeys.StorageKey.record)
}
inline void TStorageKeys_StorageKey::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.record)
}
inline void TStorageKeys_StorageKey::set_record(const char* value,
    size_t size) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.record)
}
inline std::string* TStorageKeys_StorageKey::_internal_mutable_record() {
  
  return record_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageKeys_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.record)
  return record_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageKeys_StorageKey::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.record)
}

// string version = 4;
inline void TStorageKeys_StorageKey::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageKeys_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.StorageKey.version)
  return _internal_version();
}
inline void TStorageKeys_StorageKey::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:server.TStorageKeys.StorageKey.version)
}
inline std::string* TStorageKeys_StorageKey::mutable_version() {
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.StorageKey.version)
  return _internal_mutable_version();
}
inline const std::string& TStorageKeys_StorageKey::_internal_version() const {
  return version_.Get();
}
inline void TStorageKeys_StorageKey::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageKeys_StorageKey::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageKeys.StorageKey.version)
}
inline void TStorageKeys_StorageKey::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageKeys.StorageKey.version)
}
inline void TStorageKeys_StorageKey::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageKeys.StorageKey.version)
}
inline std::string* TStorageKeys_StorageKey::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageKeys_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageKeys.StorageKey.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageKeys_StorageKey::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageKeys.StorageKey.version)
}

// -------------------------------------------------------------------

// TStorageKeys

// repeated .server.TStorageKeys.StorageKey keys = 1;
inline int TStorageKeys::_internal_keys_size() const {
  return keys_.size();
}
inline int TStorageKeys::keys_size() const {
  return _internal_keys_size();
}
inline void TStorageKeys::clear_keys() {
  keys_.Clear();
}
inline ::server::TStorageKeys_StorageKey* TStorageKeys::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageKeys.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageKeys_StorageKey >*
TStorageKeys::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageKeys.keys)
  return &keys_;
}
inline const ::server::TStorageKeys_StorageKey& TStorageKeys::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::server::TStorageKeys_StorageKey& TStorageKeys::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageKeys.keys)
  return _internal_keys(index);
}
inline ::server::TStorageKeys_StorageKey* TStorageKeys::_internal_add_keys() {
  return keys_.Add();
}
inline ::server::TStorageKeys_StorageKey* TStorageKeys::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageKeys.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageKeys_StorageKey >&
TStorageKeys::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageKeys.keys)
  return keys_;
}

// -------------------------------------------------------------------

// TStorageRemove_StorageKey

// string bucket = 1;
inline void TStorageRemove_StorageKey::clear_bucket() {
  bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageRemove_StorageKey::bucket() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.bucket)
  return _internal_bucket();
}
inline void TStorageRemove_StorageKey::set_bucket(const std::string& value) {
  _internal_set_bucket(value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.bucket)
}
inline std::string* TStorageRemove_StorageKey::mutable_bucket() {
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.bucket)
  return _internal_mutable_bucket();
}
inline const std::string& TStorageRemove_StorageKey::_internal_bucket() const {
  return bucket_.Get();
}
inline void TStorageRemove_StorageKey::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageRemove_StorageKey::set_bucket(std::string&& value) {
  
  bucket_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageRemove.StorageKey.bucket)
}
inline void TStorageRemove_StorageKey::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.bucket)
}
inline void TStorageRemove_StorageKey::set_bucket(const char* value,
    size_t size) {
  
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.bucket)
}
inline std::string* TStorageRemove_StorageKey::_internal_mutable_bucket() {
  
  return bucket_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageRemove_StorageKey::release_bucket() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageRemove_StorageKey::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.bucket)
}

// string collection = 2;
inline void TStorageRemove_StorageKey::clear_collection() {
  collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageRemove_StorageKey::collection() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.collection)
  return _internal_collection();
}
inline void TStorageRemove_StorageKey::set_collection(const std::string& value) {
  _internal_set_collection(value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.collection)
}
inline std::string* TStorageRemove_StorageKey::mutable_collection() {
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.collection)
  return _internal_mutable_collection();
}
inline const std::string& TStorageRemove_StorageKey::_internal_collection() const {
  return collection_.Get();
}
inline void TStorageRemove_StorageKey::_internal_set_collection(const std::string& value) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageRemove_StorageKey::set_collection(std::string&& value) {
  
  collection_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageRemove.StorageKey.collection)
}
inline void TStorageRemove_StorageKey::set_collection(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.collection)
}
inline void TStorageRemove_StorageKey::set_collection(const char* value,
    size_t size) {
  
  collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.collection)
}
inline std::string* TStorageRemove_StorageKey::_internal_mutable_collection() {
  
  return collection_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageRemove_StorageKey::release_collection() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.collection)
  return collection_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageRemove_StorageKey::set_allocated_collection(std::string* collection) {
  if (collection != nullptr) {
    
  } else {
    
  }
  collection_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collection,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.collection)
}

// string record = 3;
inline void TStorageRemove_StorageKey::clear_record() {
  record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageRemove_StorageKey::record() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.record)
  return _internal_record();
}
inline void TStorageRemove_StorageKey::set_record(const std::string& value) {
  _internal_set_record(value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.record)
}
inline std::string* TStorageRemove_StorageKey::mutable_record() {
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.record)
  return _internal_mutable_record();
}
inline const std::string& TStorageRemove_StorageKey::_internal_record() const {
  return record_.Get();
}
inline void TStorageRemove_StorageKey::_internal_set_record(const std::string& value) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageRemove_StorageKey::set_record(std::string&& value) {
  
  record_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageRemove.StorageKey.record)
}
inline void TStorageRemove_StorageKey::set_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.record)
}
inline void TStorageRemove_StorageKey::set_record(const char* value,
    size_t size) {
  
  record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.record)
}
inline std::string* TStorageRemove_StorageKey::_internal_mutable_record() {
  
  return record_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageRemove_StorageKey::release_record() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.record)
  return record_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageRemove_StorageKey::set_allocated_record(std::string* record) {
  if (record != nullptr) {
    
  } else {
    
  }
  record_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.record)
}

// string version = 4;
inline void TStorageRemove_StorageKey::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TStorageRemove_StorageKey::version() const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.StorageKey.version)
  return _internal_version();
}
inline void TStorageRemove_StorageKey::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:server.TStorageRemove.StorageKey.version)
}
inline std::string* TStorageRemove_StorageKey::mutable_version() {
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.StorageKey.version)
  return _internal_mutable_version();
}
inline const std::string& TStorageRemove_StorageKey::_internal_version() const {
  return version_.Get();
}
inline void TStorageRemove_StorageKey::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TStorageRemove_StorageKey::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TStorageRemove.StorageKey.version)
}
inline void TStorageRemove_StorageKey::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TStorageRemove.StorageKey.version)
}
inline void TStorageRemove_StorageKey::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TStorageRemove.StorageKey.version)
}
inline std::string* TStorageRemove_StorageKey::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TStorageRemove_StorageKey::release_version() {
  // @@protoc_insertion_point(field_release:server.TStorageRemove.StorageKey.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TStorageRemove_StorageKey::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TStorageRemove.StorageKey.version)
}

// -------------------------------------------------------------------

// TStorageRemove

// repeated .server.TStorageRemove.StorageKey keys = 1;
inline int TStorageRemove::_internal_keys_size() const {
  return keys_.size();
}
inline int TStorageRemove::keys_size() const {
  return _internal_keys_size();
}
inline void TStorageRemove::clear_keys() {
  keys_.Clear();
}
inline ::server::TStorageRemove_StorageKey* TStorageRemove::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:server.TStorageRemove.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageRemove_StorageKey >*
TStorageRemove::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:server.TStorageRemove.keys)
  return &keys_;
}
inline const ::server::TStorageRemove_StorageKey& TStorageRemove::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::server::TStorageRemove_StorageKey& TStorageRemove::keys(int index) const {
  // @@protoc_insertion_point(field_get:server.TStorageRemove.keys)
  return _internal_keys(index);
}
inline ::server::TStorageRemove_StorageKey* TStorageRemove::_internal_add_keys() {
  return keys_.Add();
}
inline ::server::TStorageRemove_StorageKey* TStorageRemove::add_keys() {
  // @@protoc_insertion_point(field_add:server.TStorageRemove.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TStorageRemove_StorageKey >&
TStorageRemove::keys() const {
  // @@protoc_insertion_point(field_list:server.TStorageRemove.keys)
  return keys_;
}

// -------------------------------------------------------------------

// Leaderboard

// string id = 1;
inline void Leaderboard::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Leaderboard::id() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.id)
  return _internal_id();
}
inline void Leaderboard::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.id)
}
inline std::string* Leaderboard::mutable_id() {
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.id)
  return _internal_mutable_id();
}
inline const std::string& Leaderboard::_internal_id() const {
  return id_.Get();
}
inline void Leaderboard::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Leaderboard::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Leaderboard.id)
}
inline void Leaderboard::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.id)
}
inline void Leaderboard::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.id)
}
inline std::string* Leaderboard::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Leaderboard::release_id() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Leaderboard::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.id)
}

// bool authoritative = 2;
inline void Leaderboard::clear_authoritative() {
  authoritative_ = false;
}
inline bool Leaderboard::_internal_authoritative() const {
  return authoritative_;
}
inline bool Leaderboard::authoritative() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.authoritative)
  return _internal_authoritative();
}
inline void Leaderboard::_internal_set_authoritative(bool value) {
  
  authoritative_ = value;
}
inline void Leaderboard::set_authoritative(bool value) {
  _internal_set_authoritative(value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.authoritative)
}

// int64 sort = 3;
inline void Leaderboard::clear_sort() {
  sort_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Leaderboard::_internal_sort() const {
  return sort_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Leaderboard::sort() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.sort)
  return _internal_sort();
}
inline void Leaderboard::_internal_set_sort(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sort_ = value;
}
inline void Leaderboard::set_sort(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sort(value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.sort)
}

// int64 count = 4;
inline void Leaderboard::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Leaderboard::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Leaderboard::count() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.count)
  return _internal_count();
}
inline void Leaderboard::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void Leaderboard::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.count)
}

// string reset_schedule = 5;
inline void Leaderboard::clear_reset_schedule() {
  reset_schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Leaderboard::reset_schedule() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.reset_schedule)
  return _internal_reset_schedule();
}
inline void Leaderboard::set_reset_schedule(const std::string& value) {
  _internal_set_reset_schedule(value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.reset_schedule)
}
inline std::string* Leaderboard::mutable_reset_schedule() {
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.reset_schedule)
  return _internal_mutable_reset_schedule();
}
inline const std::string& Leaderboard::_internal_reset_schedule() const {
  return reset_schedule_.Get();
}
inline void Leaderboard::_internal_set_reset_schedule(const std::string& value) {
  
  reset_schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Leaderboard::set_reset_schedule(std::string&& value) {
  
  reset_schedule_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Leaderboard.reset_schedule)
}
inline void Leaderboard::set_reset_schedule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reset_schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.reset_schedule)
}
inline void Leaderboard::set_reset_schedule(const char* value,
    size_t size) {
  
  reset_schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.reset_schedule)
}
inline std::string* Leaderboard::_internal_mutable_reset_schedule() {
  
  return reset_schedule_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Leaderboard::release_reset_schedule() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.reset_schedule)
  return reset_schedule_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Leaderboard::set_allocated_reset_schedule(std::string* reset_schedule) {
  if (reset_schedule != nullptr) {
    
  } else {
    
  }
  reset_schedule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reset_schedule,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.reset_schedule)
}

// string metadata = 6;
inline void Leaderboard::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Leaderboard::metadata() const {
  // @@protoc_insertion_point(field_get:server.Leaderboard.metadata)
  return _internal_metadata();
}
inline void Leaderboard::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:server.Leaderboard.metadata)
}
inline std::string* Leaderboard::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:server.Leaderboard.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& Leaderboard::_internal_metadata() const {
  return metadata_.Get();
}
inline void Leaderboard::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Leaderboard::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Leaderboard.metadata)
}
inline void Leaderboard::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Leaderboard.metadata)
}
inline void Leaderboard::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Leaderboard.metadata)
}
inline std::string* Leaderboard::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Leaderboard::release_metadata() {
  // @@protoc_insertion_point(field_release:server.Leaderboard.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Leaderboard::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Leaderboard.metadata)
}

// -------------------------------------------------------------------

// LeaderboardRecord

// string leaderboard_id = 1;
inline void LeaderboardRecord::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LeaderboardRecord::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void LeaderboardRecord::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.leaderboard_id)
}
inline std::string* LeaderboardRecord::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& LeaderboardRecord::_internal_leaderboard_id() const {
  return leaderboard_id_.Get();
}
inline void LeaderboardRecord::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderboardRecord::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.LeaderboardRecord.leaderboard_id)
}
inline void LeaderboardRecord::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.leaderboard_id)
}
inline void LeaderboardRecord::set_leaderboard_id(const char* value,
    size_t size) {
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.leaderboard_id)
}
inline std::string* LeaderboardRecord::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderboardRecord::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.leaderboard_id)
  return leaderboard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.leaderboard_id)
}

// string owner_id = 2;
inline void LeaderboardRecord::clear_owner_id() {
  owner_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LeaderboardRecord::owner_id() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.owner_id)
  return _internal_owner_id();
}
inline void LeaderboardRecord::set_owner_id(const std::string& value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.owner_id)
}
inline std::string* LeaderboardRecord::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.owner_id)
  return _internal_mutable_owner_id();
}
inline const std::string& LeaderboardRecord::_internal_owner_id() const {
  return owner_id_.Get();
}
inline void LeaderboardRecord::_internal_set_owner_id(const std::string& value) {
  
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderboardRecord::set_owner_id(std::string&& value) {
  
  owner_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.LeaderboardRecord.owner_id)
}
inline void LeaderboardRecord::set_owner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.owner_id)
}
inline void LeaderboardRecord::set_owner_id(const char* value,
    size_t size) {
  
  owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.owner_id)
}
inline std::string* LeaderboardRecord::_internal_mutable_owner_id() {
  
  return owner_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderboardRecord::release_owner_id() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.owner_id)
  return owner_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_owner_id(std::string* owner_id) {
  if (owner_id != nullptr) {
    
  } else {
    
  }
  owner_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.owner_id)
}

// string handle = 3;
inline void LeaderboardRecord::clear_handle() {
  handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LeaderboardRecord::handle() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.handle)
  return _internal_handle();
}
inline void LeaderboardRecord::set_handle(const std::string& value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.handle)
}
inline std::string* LeaderboardRecord::mutable_handle() {
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.handle)
  return _internal_mutable_handle();
}
inline const std::string& LeaderboardRecord::_internal_handle() const {
  return handle_.Get();
}
inline void LeaderboardRecord::_internal_set_handle(const std::string& value) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderboardRecord::set_handle(std::string&& value) {
  
  handle_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.LeaderboardRecord.handle)
}
inline void LeaderboardRecord::set_handle(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.handle)
}
inline void LeaderboardRecord::set_handle(const char* value,
    size_t size) {
  
  handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.handle)
}
inline std::string* LeaderboardRecord::_internal_mutable_handle() {
  
  return handle_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderboardRecord::release_handle() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.handle)
  return handle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_handle(std::string* handle) {
  if (handle != nullptr) {
    
  } else {
    
  }
  handle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), handle,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.handle)
}

// string lang = 4;
inline void LeaderboardRecord::clear_lang() {
  lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LeaderboardRecord::lang() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.lang)
  return _internal_lang();
}
inline void LeaderboardRecord::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.lang)
}
inline std::string* LeaderboardRecord::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.lang)
  return _internal_mutable_lang();
}
inline const std::string& LeaderboardRecord::_internal_lang() const {
  return lang_.Get();
}
inline void LeaderboardRecord::_internal_set_lang(const std::string& value) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderboardRecord::set_lang(std::string&& value) {
  
  lang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.LeaderboardRecord.lang)
}
inline void LeaderboardRecord::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.lang)
}
inline void LeaderboardRecord::set_lang(const char* value,
    size_t size) {
  
  lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.lang)
}
inline std::string* LeaderboardRecord::_internal_mutable_lang() {
  
  return lang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderboardRecord::release_lang() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.lang)
  return lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_lang(std::string* lang) {
  if (lang != nullptr) {
    
  } else {
    
  }
  lang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lang,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.lang)
}

// string location = 5;
inline void LeaderboardRecord::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LeaderboardRecord::location() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.location)
  return _internal_location();
}
inline void LeaderboardRecord::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.location)
}
inline std::string* LeaderboardRecord::mutable_location() {
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.location)
  return _internal_mutable_location();
}
inline const std::string& LeaderboardRecord::_internal_location() const {
  return location_.Get();
}
inline void LeaderboardRecord::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderboardRecord::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.LeaderboardRecord.location)
}
inline void LeaderboardRecord::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.location)
}
inline void LeaderboardRecord::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.location)
}
inline std::string* LeaderboardRecord::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderboardRecord::release_location() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.location)
}

// string timezone = 6;
inline void LeaderboardRecord::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LeaderboardRecord::timezone() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.timezone)
  return _internal_timezone();
}
inline void LeaderboardRecord::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.timezone)
}
inline std::string* LeaderboardRecord::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& LeaderboardRecord::_internal_timezone() const {
  return timezone_.Get();
}
inline void LeaderboardRecord::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderboardRecord::set_timezone(std::string&& value) {
  
  timezone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.LeaderboardRecord.timezone)
}
inline void LeaderboardRecord::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.timezone)
}
inline void LeaderboardRecord::set_timezone(const char* value,
    size_t size) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.timezone)
}
inline std::string* LeaderboardRecord::_internal_mutable_timezone() {
  
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderboardRecord::release_timezone() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.timezone)
}

// int64 rank = 7;
inline void LeaderboardRecord::clear_rank() {
  rank_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::rank() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.rank)
  return _internal_rank();
}
inline void LeaderboardRecord::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rank_ = value;
}
inline void LeaderboardRecord::set_rank(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.rank)
}

// int64 score = 8;
inline void LeaderboardRecord::clear_score() {
  score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::score() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.score)
  return _internal_score();
}
inline void LeaderboardRecord::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void LeaderboardRecord::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.score)
}

// int64 num_score = 9;
inline void LeaderboardRecord::clear_num_score() {
  num_score_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_num_score() const {
  return num_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::num_score() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.num_score)
  return _internal_num_score();
}
inline void LeaderboardRecord::_internal_set_num_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_score_ = value;
}
inline void LeaderboardRecord::set_num_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_score(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.num_score)
}

// string metadata = 10;
inline void LeaderboardRecord::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LeaderboardRecord::metadata() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.metadata)
  return _internal_metadata();
}
inline void LeaderboardRecord::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.metadata)
}
inline std::string* LeaderboardRecord::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:server.LeaderboardRecord.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& LeaderboardRecord::_internal_metadata() const {
  return metadata_.Get();
}
inline void LeaderboardRecord::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaderboardRecord::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.LeaderboardRecord.metadata)
}
inline void LeaderboardRecord::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.LeaderboardRecord.metadata)
}
inline void LeaderboardRecord::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.LeaderboardRecord.metadata)
}
inline std::string* LeaderboardRecord::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaderboardRecord::release_metadata() {
  // @@protoc_insertion_point(field_release:server.LeaderboardRecord.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaderboardRecord::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.LeaderboardRecord.metadata)
}

// int64 ranked_at = 11;
inline void LeaderboardRecord::clear_ranked_at() {
  ranked_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_ranked_at() const {
  return ranked_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::ranked_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.ranked_at)
  return _internal_ranked_at();
}
inline void LeaderboardRecord::_internal_set_ranked_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ranked_at_ = value;
}
inline void LeaderboardRecord::set_ranked_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ranked_at(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.ranked_at)
}

// int64 updated_at = 12;
inline void LeaderboardRecord::clear_updated_at() {
  updated_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_updated_at() const {
  return updated_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::updated_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.updated_at)
  return _internal_updated_at();
}
inline void LeaderboardRecord::_internal_set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  updated_at_ = value;
}
inline void LeaderboardRecord::set_updated_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.updated_at)
}

// int64 expires_at = 13;
inline void LeaderboardRecord::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::_internal_expires_at() const {
  return expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LeaderboardRecord::expires_at() const {
  // @@protoc_insertion_point(field_get:server.LeaderboardRecord.expires_at)
  return _internal_expires_at();
}
inline void LeaderboardRecord::_internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expires_at_ = value;
}
inline void LeaderboardRecord::set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expires_at(value);
  // @@protoc_insertion_point(field_set:server.LeaderboardRecord.expires_at)
}

// -------------------------------------------------------------------

// TLeaderboardsList

// int64 limit = 1;
inline void TLeaderboardsList::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardsList::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.limit)
  return _internal_limit();
}
inline void TLeaderboardsList::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void TLeaderboardsList::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.limit)
}

// string cursor = 2;
inline void TLeaderboardsList::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.cursor)
  return _internal_cursor();
}
inline void TLeaderboardsList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.cursor)
}
inline std::string* TLeaderboardsList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardsList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TLeaderboardsList::_internal_cursor() const {
  return cursor_.Get();
}
inline void TLeaderboardsList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardsList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardsList.cursor)
}
inline void TLeaderboardsList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardsList.cursor)
}
inline void TLeaderboardsList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardsList.cursor)
}
inline std::string* TLeaderboardsList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardsList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardsList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardsList.cursor)
}

// repeated string filter_leaderboard_id = 3;
inline int TLeaderboardsList::_internal_filter_leaderboard_id_size() const {
  return filter_leaderboard_id_.size();
}
inline int TLeaderboardsList::filter_leaderboard_id_size() const {
  return _internal_filter_leaderboard_id_size();
}
inline void TLeaderboardsList::clear_filter_leaderboard_id() {
  filter_leaderboard_id_.Clear();
}
inline std::string* TLeaderboardsList::add_filter_leaderboard_id() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardsList.filter_leaderboard_id)
  return _internal_add_filter_leaderboard_id();
}
inline const std::string& TLeaderboardsList::_internal_filter_leaderboard_id(int index) const {
  return filter_leaderboard_id_.Get(index);
}
inline const std::string& TLeaderboardsList::filter_leaderboard_id(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardsList.filter_leaderboard_id)
  return _internal_filter_leaderboard_id(index);
}
inline std::string* TLeaderboardsList::mutable_filter_leaderboard_id(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_.Mutable(index);
}
inline void TLeaderboardsList::set_filter_leaderboard_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.filter_leaderboard_id)
  filter_leaderboard_id_.Mutable(index)->assign(value);
}
inline void TLeaderboardsList::set_filter_leaderboard_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardsList.filter_leaderboard_id)
  filter_leaderboard_id_.Mutable(index)->assign(std::move(value));
}
inline void TLeaderboardsList::set_filter_leaderboard_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filter_leaderboard_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardsList.filter_leaderboard_id)
}
inline void TLeaderboardsList::set_filter_leaderboard_id(int index, const char* value, size_t size) {
  filter_leaderboard_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardsList.filter_leaderboard_id)
}
inline std::string* TLeaderboardsList::_internal_add_filter_leaderboard_id() {
  return filter_leaderboard_id_.Add();
}
inline void TLeaderboardsList::add_filter_leaderboard_id(const std::string& value) {
  filter_leaderboard_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardsList.filter_leaderboard_id)
}
inline void TLeaderboardsList::add_filter_leaderboard_id(std::string&& value) {
  filter_leaderboard_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TLeaderboardsList.filter_leaderboard_id)
}
inline void TLeaderboardsList::add_filter_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filter_leaderboard_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardsList.filter_leaderboard_id)
}
inline void TLeaderboardsList::add_filter_leaderboard_id(const char* value, size_t size) {
  filter_leaderboard_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardsList.filter_leaderboard_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TLeaderboardsList::filter_leaderboard_id() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardsList.filter_leaderboard_id)
  return filter_leaderboard_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TLeaderboardsList::mutable_filter_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardsList.filter_leaderboard_id)
  return &filter_leaderboard_id_;
}

// -------------------------------------------------------------------

// TLeaderboards

// repeated .server.Leaderboard leaderboards = 1;
inline int TLeaderboards::_internal_leaderboards_size() const {
  return leaderboards_.size();
}
inline int TLeaderboards::leaderboards_size() const {
  return _internal_leaderboards_size();
}
inline void TLeaderboards::clear_leaderboards() {
  leaderboards_.Clear();
}
inline ::server::Leaderboard* TLeaderboards::mutable_leaderboards(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboards.leaderboards)
  return leaderboards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Leaderboard >*
TLeaderboards::mutable_leaderboards() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboards.leaderboards)
  return &leaderboards_;
}
inline const ::server::Leaderboard& TLeaderboards::_internal_leaderboards(int index) const {
  return leaderboards_.Get(index);
}
inline const ::server::Leaderboard& TLeaderboards::leaderboards(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboards.leaderboards)
  return _internal_leaderboards(index);
}
inline ::server::Leaderboard* TLeaderboards::_internal_add_leaderboards() {
  return leaderboards_.Add();
}
inline ::server::Leaderboard* TLeaderboards::add_leaderboards() {
  // @@protoc_insertion_point(field_add:server.TLeaderboards.leaderboards)
  return _internal_add_leaderboards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Leaderboard >&
TLeaderboards::leaderboards() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboards.leaderboards)
  return leaderboards_;
}

// string cursor = 2;
inline void TLeaderboards::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboards::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboards.cursor)
  return _internal_cursor();
}
inline void TLeaderboards::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboards.cursor)
}
inline std::string* TLeaderboards::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboards.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TLeaderboards::_internal_cursor() const {
  return cursor_.Get();
}
inline void TLeaderboards::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboards::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboards.cursor)
}
inline void TLeaderboards::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboards.cursor)
}
inline void TLeaderboards::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboards.cursor)
}
inline std::string* TLeaderboards::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboards::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboards.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboards::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboards.cursor)
}

// -------------------------------------------------------------------

// TLeaderboardRecordsWrite_LeaderboardRecordWrite

// string leaderboard_id = 1;
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_leaderboard_id() const {
  return leaderboard_id_.Get();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_leaderboard_id(const char* value,
    size_t size) {
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
  return leaderboard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id)
}

// int64 incr = 2;
inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_has_incr() const {
  return op_case() == kIncr;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_incr() {
  _oneof_case_[0] = kIncr;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_incr() {
  if (_internal_has_incr()) {
    op_.incr_ = PROTOBUF_LONGLONG(0);
    clear_has_op();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_incr() const {
  if (_internal_has_incr()) {
    return op_.incr_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set_incr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_incr()) {
    clear_op();
    set_has_incr();
  }
  op_.incr_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::incr() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.incr)
  return _internal_incr();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_incr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_incr(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.incr)
}

// int64 decr = 3;
inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_has_decr() const {
  return op_case() == kDecr;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_decr() {
  _oneof_case_[0] = kDecr;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_decr() {
  if (_internal_has_decr()) {
    op_.decr_ = PROTOBUF_LONGLONG(0);
    clear_has_op();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_decr() const {
  if (_internal_has_decr()) {
    return op_.decr_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set_decr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_decr()) {
    clear_op();
    set_has_decr();
  }
  op_.decr_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::decr() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.decr)
  return _internal_decr();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_decr(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_decr(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.decr)
}

// int64 set = 4;
inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_has_set() const {
  return op_case() == kSet;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_set() {
  _oneof_case_[0] = kSet;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_set() {
  if (_internal_has_set()) {
    op_.set_ = PROTOBUF_LONGLONG(0);
    clear_has_op();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set() const {
  if (_internal_has_set()) {
    return op_.set_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set_set(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_set()) {
    clear_op();
    set_has_set();
  }
  op_.set_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::set() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.set)
  return _internal_set();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_set(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_set(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.set)
}

// int64 best = 5;
inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_has_best() const {
  return op_case() == kBest;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_has_best() {
  _oneof_case_[0] = kBest;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_best() {
  if (_internal_has_best()) {
    op_.best_ = PROTOBUF_LONGLONG(0);
    clear_has_op();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_best() const {
  if (_internal_has_best()) {
    return op_.best_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set_best(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_best()) {
    clear_op();
    set_has_best();
  }
  op_.best_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsWrite_LeaderboardRecordWrite::best() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.best)
  return _internal_best();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_best(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_best(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.best)
}

// string location = 6;
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::location() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  return _internal_location();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_location() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  return _internal_mutable_location();
}
inline const std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_location() const {
  return location_.Get();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_mutable_location() {
  
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_location() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location)
}

// string timezone = 7;
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_timezone() {
  timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::timezone() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  return _internal_timezone();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_timezone() const {
  return timezone_.Get();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set_timezone(const std::string& value) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(std::string&& value) {
  
  timezone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_timezone(const char* value,
    size_t size) {
  
  timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_mutable_timezone() {
  
  return timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
  return timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_timezone(std::string* timezone) {
  if (timezone != nullptr) {
    
  } else {
    
  }
  timezone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timezone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone)
}

// string metadata = 8;
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_metadata() {
  metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::metadata() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  return _internal_metadata();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_metadata() const {
  return metadata_.Get();
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(std::string&& value) {
  
  metadata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_metadata(const char* value,
    size_t size) {
  
  metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::_internal_mutable_metadata() {
  
  return metadata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsWrite_LeaderboardRecordWrite::release_metadata() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata)
}

inline bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline TLeaderboardRecordsWrite_LeaderboardRecordWrite::OpCase TLeaderboardRecordsWrite_LeaderboardRecordWrite::op_case() const {
  return TLeaderboardRecordsWrite_LeaderboardRecordWrite::OpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TLeaderboardRecordsWrite

// repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
inline int TLeaderboardRecordsWrite::_internal_records_size() const {
  return records_.size();
}
inline int TLeaderboardRecordsWrite::records_size() const {
  return _internal_records_size();
}
inline void TLeaderboardRecordsWrite::clear_records() {
  records_.Clear();
}
inline ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsWrite.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >*
TLeaderboardRecordsWrite::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsWrite.records)
  return &records_;
}
inline const ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite& TLeaderboardRecordsWrite::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite& TLeaderboardRecordsWrite::records(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsWrite.records)
  return _internal_records(index);
}
inline ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite::_internal_add_records() {
  return records_.Add();
}
inline ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite* TLeaderboardRecordsWrite::add_records() {
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsWrite.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite >&
TLeaderboardRecordsWrite::records() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsWrite.records)
  return records_;
}

// -------------------------------------------------------------------

// TLeaderboardRecordsFetch

// repeated string leaderboard_ids = 1;
inline int TLeaderboardRecordsFetch::_internal_leaderboard_ids_size() const {
  return leaderboard_ids_.size();
}
inline int TLeaderboardRecordsFetch::leaderboard_ids_size() const {
  return _internal_leaderboard_ids_size();
}
inline void TLeaderboardRecordsFetch::clear_leaderboard_ids() {
  leaderboard_ids_.Clear();
}
inline std::string* TLeaderboardRecordsFetch::add_leaderboard_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return _internal_add_leaderboard_ids();
}
inline const std::string& TLeaderboardRecordsFetch::_internal_leaderboard_ids(int index) const {
  return leaderboard_ids_.Get(index);
}
inline const std::string& TLeaderboardRecordsFetch::leaderboard_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return _internal_leaderboard_ids(index);
}
inline std::string* TLeaderboardRecordsFetch::mutable_leaderboard_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_.Mutable(index);
}
inline void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.leaderboard_ids)
  leaderboard_ids_.Mutable(index)->assign(value);
}
inline void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.leaderboard_ids)
  leaderboard_ids_.Mutable(index)->assign(std::move(value));
}
inline void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  leaderboard_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline void TLeaderboardRecordsFetch::set_leaderboard_ids(int index, const char* value, size_t size) {
  leaderboard_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline std::string* TLeaderboardRecordsFetch::_internal_add_leaderboard_ids() {
  return leaderboard_ids_.Add();
}
inline void TLeaderboardRecordsFetch::add_leaderboard_ids(const std::string& value) {
  leaderboard_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline void TLeaderboardRecordsFetch::add_leaderboard_ids(std::string&& value) {
  leaderboard_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline void TLeaderboardRecordsFetch::add_leaderboard_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  leaderboard_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline void TLeaderboardRecordsFetch::add_leaderboard_ids(const char* value, size_t size) {
  leaderboard_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardRecordsFetch.leaderboard_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TLeaderboardRecordsFetch::leaderboard_ids() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return leaderboard_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TLeaderboardRecordsFetch::mutable_leaderboard_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsFetch.leaderboard_ids)
  return &leaderboard_ids_;
}

// int64 limit = 2;
inline void TLeaderboardRecordsFetch::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsFetch::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsFetch::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.limit)
  return _internal_limit();
}
inline void TLeaderboardRecordsFetch::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void TLeaderboardRecordsFetch::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.limit)
}

// string cursor = 3;
inline void TLeaderboardRecordsFetch::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardRecordsFetch::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsFetch.cursor)
  return _internal_cursor();
}
inline void TLeaderboardRecordsFetch::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsFetch.cursor)
}
inline std::string* TLeaderboardRecordsFetch::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsFetch.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TLeaderboardRecordsFetch::_internal_cursor() const {
  return cursor_.Get();
}
inline void TLeaderboardRecordsFetch::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsFetch::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsFetch.cursor)
}
inline void TLeaderboardRecordsFetch::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsFetch.cursor)
}
inline void TLeaderboardRecordsFetch::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsFetch.cursor)
}
inline std::string* TLeaderboardRecordsFetch::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsFetch::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsFetch.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardRecordsFetch::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsFetch.cursor)
}

// -------------------------------------------------------------------

// TLeaderboardRecordsList_Owners

// repeated string owner_ids = 1;
inline int TLeaderboardRecordsList_Owners::_internal_owner_ids_size() const {
  return owner_ids_.size();
}
inline int TLeaderboardRecordsList_Owners::owner_ids_size() const {
  return _internal_owner_ids_size();
}
inline void TLeaderboardRecordsList_Owners::clear_owner_ids() {
  owner_ids_.Clear();
}
inline std::string* TLeaderboardRecordsList_Owners::add_owner_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TLeaderboardRecordsList.Owners.owner_ids)
  return _internal_add_owner_ids();
}
inline const std::string& TLeaderboardRecordsList_Owners::_internal_owner_ids(int index) const {
  return owner_ids_.Get(index);
}
inline const std::string& TLeaderboardRecordsList_Owners::owner_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.Owners.owner_ids)
  return _internal_owner_ids(index);
}
inline std::string* TLeaderboardRecordsList_Owners::mutable_owner_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_.Mutable(index);
}
inline void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.Owners.owner_ids)
  owner_ids_.Mutable(index)->assign(value);
}
inline void TLeaderboardRecordsList_Owners::set_owner_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.Owners.owner_ids)
  owner_ids_.Mutable(index)->assign(std::move(value));
}
inline void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owner_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline void TLeaderboardRecordsList_Owners::set_owner_ids(int index, const char* value, size_t size) {
  owner_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline std::string* TLeaderboardRecordsList_Owners::_internal_add_owner_ids() {
  return owner_ids_.Add();
}
inline void TLeaderboardRecordsList_Owners::add_owner_ids(const std::string& value) {
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline void TLeaderboardRecordsList_Owners::add_owner_ids(std::string&& value) {
  owner_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline void TLeaderboardRecordsList_Owners::add_owner_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  owner_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline void TLeaderboardRecordsList_Owners::add_owner_ids(const char* value, size_t size) {
  owner_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TLeaderboardRecordsList.Owners.owner_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TLeaderboardRecordsList_Owners::owner_ids() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecordsList.Owners.owner_ids)
  return owner_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TLeaderboardRecordsList_Owners::mutable_owner_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecordsList.Owners.owner_ids)
  return &owner_ids_;
}

// -------------------------------------------------------------------

// TLeaderboardRecordsList

// string leaderboard_id = 1;
inline void TLeaderboardRecordsList::clear_leaderboard_id() {
  leaderboard_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardRecordsList::leaderboard_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.leaderboard_id)
  return _internal_leaderboard_id();
}
inline void TLeaderboardRecordsList::set_leaderboard_id(const std::string& value) {
  _internal_set_leaderboard_id(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.leaderboard_id)
}
inline std::string* TLeaderboardRecordsList::mutable_leaderboard_id() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.leaderboard_id)
  return _internal_mutable_leaderboard_id();
}
inline const std::string& TLeaderboardRecordsList::_internal_leaderboard_id() const {
  return leaderboard_id_.Get();
}
inline void TLeaderboardRecordsList::_internal_set_leaderboard_id(const std::string& value) {
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsList::set_leaderboard_id(std::string&& value) {
  
  leaderboard_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsList.leaderboard_id)
}
inline void TLeaderboardRecordsList::set_leaderboard_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.leaderboard_id)
}
inline void TLeaderboardRecordsList::set_leaderboard_id(const char* value,
    size_t size) {
  
  leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.leaderboard_id)
}
inline std::string* TLeaderboardRecordsList::_internal_mutable_leaderboard_id() {
  
  return leaderboard_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsList::release_leaderboard_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.leaderboard_id)
  return leaderboard_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardRecordsList::set_allocated_leaderboard_id(std::string* leaderboard_id) {
  if (leaderboard_id != nullptr) {
    
  } else {
    
  }
  leaderboard_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leaderboard_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.leaderboard_id)
}

// string owner_id = 2;
inline bool TLeaderboardRecordsList::_internal_has_owner_id() const {
  return filter_case() == kOwnerId;
}
inline void TLeaderboardRecordsList::set_has_owner_id() {
  _oneof_case_[0] = kOwnerId;
}
inline void TLeaderboardRecordsList::clear_owner_id() {
  if (_internal_has_owner_id()) {
    filter_.owner_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_filter();
  }
}
inline const std::string& TLeaderboardRecordsList::owner_id() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.owner_id)
  return _internal_owner_id();
}
inline void TLeaderboardRecordsList::set_owner_id(const std::string& value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.owner_id)
}
inline std::string* TLeaderboardRecordsList::mutable_owner_id() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.owner_id)
  return _internal_mutable_owner_id();
}
inline const std::string& TLeaderboardRecordsList::_internal_owner_id() const {
  if (_internal_has_owner_id()) {
    return filter_.owner_id_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLeaderboardRecordsList::_internal_set_owner_id(const std::string& value) {
  if (!_internal_has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsList::set_owner_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.owner_id)
  if (!_internal_has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsList.owner_id)
}
inline void TLeaderboardRecordsList::set_owner_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.owner_id)
}
inline void TLeaderboardRecordsList::set_owner_id(const char* value,
                             size_t size) {
  if (!_internal_has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.owner_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.owner_id)
}
inline std::string* TLeaderboardRecordsList::_internal_mutable_owner_id() {
  if (!_internal_has_owner_id()) {
    clear_filter();
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.owner_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsList::release_owner_id() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.owner_id)
  if (_internal_has_owner_id()) {
    clear_has_filter();
    return filter_.owner_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLeaderboardRecordsList::set_allocated_owner_id(std::string* owner_id) {
  if (has_filter()) {
    clear_filter();
  }
  if (owner_id != nullptr) {
    set_has_owner_id();
    filter_.owner_id_.UnsafeSetDefault(owner_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(owner_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.owner_id)
}

// .server.TLeaderboardRecordsList.Owners owner_ids = 3;
inline bool TLeaderboardRecordsList::_internal_has_owner_ids() const {
  return filter_case() == kOwnerIds;
}
inline bool TLeaderboardRecordsList::has_owner_ids() const {
  return _internal_has_owner_ids();
}
inline void TLeaderboardRecordsList::set_has_owner_ids() {
  _oneof_case_[0] = kOwnerIds;
}
inline void TLeaderboardRecordsList::clear_owner_ids() {
  if (_internal_has_owner_ids()) {
    if (GetArena() == nullptr) {
      delete filter_.owner_ids_;
    }
    clear_has_filter();
  }
}
inline ::server::TLeaderboardRecordsList_Owners* TLeaderboardRecordsList::release_owner_ids() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.owner_ids)
  if (_internal_has_owner_ids()) {
    clear_has_filter();
      ::server::TLeaderboardRecordsList_Owners* temp = filter_.owner_ids_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    filter_.owner_ids_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TLeaderboardRecordsList_Owners& TLeaderboardRecordsList::_internal_owner_ids() const {
  return _internal_has_owner_ids()
      ? *filter_.owner_ids_
      : reinterpret_cast< ::server::TLeaderboardRecordsList_Owners&>(::server::_TLeaderboardRecordsList_Owners_default_instance_);
}
inline const ::server::TLeaderboardRecordsList_Owners& TLeaderboardRecordsList::owner_ids() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.owner_ids)
  return _internal_owner_ids();
}
inline ::server::TLeaderboardRecordsList_Owners* TLeaderboardRecordsList::unsafe_arena_release_owner_ids() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.TLeaderboardRecordsList.owner_ids)
  if (_internal_has_owner_ids()) {
    clear_has_filter();
    ::server::TLeaderboardRecordsList_Owners* temp = filter_.owner_ids_;
    filter_.owner_ids_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TLeaderboardRecordsList::unsafe_arena_set_allocated_owner_ids(::server::TLeaderboardRecordsList_Owners* owner_ids) {
  clear_filter();
  if (owner_ids) {
    set_has_owner_ids();
    filter_.owner_ids_ = owner_ids;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TLeaderboardRecordsList.owner_ids)
}
inline ::server::TLeaderboardRecordsList_Owners* TLeaderboardRecordsList::_internal_mutable_owner_ids() {
  if (!_internal_has_owner_ids()) {
    clear_filter();
    set_has_owner_ids();
    filter_.owner_ids_ = CreateMaybeMessage< ::server::TLeaderboardRecordsList_Owners >(GetArena());
  }
  return filter_.owner_ids_;
}
inline ::server::TLeaderboardRecordsList_Owners* TLeaderboardRecordsList::mutable_owner_ids() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.owner_ids)
  return _internal_mutable_owner_ids();
}

// string lang = 4;
inline bool TLeaderboardRecordsList::_internal_has_lang() const {
  return filter_case() == kLang;
}
inline void TLeaderboardRecordsList::set_has_lang() {
  _oneof_case_[0] = kLang;
}
inline void TLeaderboardRecordsList::clear_lang() {
  if (_internal_has_lang()) {
    filter_.lang_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_filter();
  }
}
inline const std::string& TLeaderboardRecordsList::lang() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.lang)
  return _internal_lang();
}
inline void TLeaderboardRecordsList::set_lang(const std::string& value) {
  _internal_set_lang(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.lang)
}
inline std::string* TLeaderboardRecordsList::mutable_lang() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.lang)
  return _internal_mutable_lang();
}
inline const std::string& TLeaderboardRecordsList::_internal_lang() const {
  if (_internal_has_lang()) {
    return filter_.lang_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLeaderboardRecordsList::_internal_set_lang(const std::string& value) {
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsList::set_lang(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.lang)
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsList.lang)
}
inline void TLeaderboardRecordsList::set_lang(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.lang)
}
inline void TLeaderboardRecordsList::set_lang(const char* value,
                             size_t size) {
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.lang_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.lang)
}
inline std::string* TLeaderboardRecordsList::_internal_mutable_lang() {
  if (!_internal_has_lang()) {
    clear_filter();
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.lang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsList::release_lang() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.lang)
  if (_internal_has_lang()) {
    clear_has_filter();
    return filter_.lang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLeaderboardRecordsList::set_allocated_lang(std::string* lang) {
  if (has_filter()) {
    clear_filter();
  }
  if (lang != nullptr) {
    set_has_lang();
    filter_.lang_.UnsafeSetDefault(lang);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(lang);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.lang)
}

// string location = 5;
inline bool TLeaderboardRecordsList::_internal_has_location() const {
  return filter_case() == kLocation;
}
inline void TLeaderboardRecordsList::set_has_location() {
  _oneof_case_[0] = kLocation;
}
inline void TLeaderboardRecordsList::clear_location() {
  if (_internal_has_location()) {
    filter_.location_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_filter();
  }
}
inline const std::string& TLeaderboardRecordsList::location() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.location)
  return _internal_location();
}
inline void TLeaderboardRecordsList::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.location)
}
inline std::string* TLeaderboardRecordsList::mutable_location() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.location)
  return _internal_mutable_location();
}
inline const std::string& TLeaderboardRecordsList::_internal_location() const {
  if (_internal_has_location()) {
    return filter_.location_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLeaderboardRecordsList::_internal_set_location(const std::string& value) {
  if (!_internal_has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsList::set_location(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.location)
  if (!_internal_has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsList.location)
}
inline void TLeaderboardRecordsList::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.location)
}
inline void TLeaderboardRecordsList::set_location(const char* value,
                             size_t size) {
  if (!_internal_has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.location_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.location)
}
inline std::string* TLeaderboardRecordsList::_internal_mutable_location() {
  if (!_internal_has_location()) {
    clear_filter();
    set_has_location();
    filter_.location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsList::release_location() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.location)
  if (_internal_has_location()) {
    clear_has_filter();
    return filter_.location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLeaderboardRecordsList::set_allocated_location(std::string* location) {
  if (has_filter()) {
    clear_filter();
  }
  if (location != nullptr) {
    set_has_location();
    filter_.location_.UnsafeSetDefault(location);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(location);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.location)
}

// string timezone = 6;
inline bool TLeaderboardRecordsList::_internal_has_timezone() const {
  return filter_case() == kTimezone;
}
inline void TLeaderboardRecordsList::set_has_timezone() {
  _oneof_case_[0] = kTimezone;
}
inline void TLeaderboardRecordsList::clear_timezone() {
  if (_internal_has_timezone()) {
    filter_.timezone_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_filter();
  }
}
inline const std::string& TLeaderboardRecordsList::timezone() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.timezone)
  return _internal_timezone();
}
inline void TLeaderboardRecordsList::set_timezone(const std::string& value) {
  _internal_set_timezone(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.timezone)
}
inline std::string* TLeaderboardRecordsList::mutable_timezone() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.timezone)
  return _internal_mutable_timezone();
}
inline const std::string& TLeaderboardRecordsList::_internal_timezone() const {
  if (_internal_has_timezone()) {
    return filter_.timezone_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TLeaderboardRecordsList::_internal_set_timezone(const std::string& value) {
  if (!_internal_has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsList::set_timezone(std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.timezone)
  if (!_internal_has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsList.timezone)
}
inline void TLeaderboardRecordsList::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.timezone)
}
inline void TLeaderboardRecordsList::set_timezone(const char* value,
                             size_t size) {
  if (!_internal_has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  filter_.timezone_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.timezone)
}
inline std::string* TLeaderboardRecordsList::_internal_mutable_timezone() {
  if (!_internal_has_timezone()) {
    clear_filter();
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return filter_.timezone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsList::release_timezone() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.timezone)
  if (_internal_has_timezone()) {
    clear_has_filter();
    return filter_.timezone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void TLeaderboardRecordsList::set_allocated_timezone(std::string* timezone) {
  if (has_filter()) {
    clear_filter();
  }
  if (timezone != nullptr) {
    set_has_timezone();
    filter_.timezone_.UnsafeSetDefault(timezone);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(timezone);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.timezone)
}

// int64 limit = 7;
inline void TLeaderboardRecordsList::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsList::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TLeaderboardRecordsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.limit)
  return _internal_limit();
}
inline void TLeaderboardRecordsList::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void TLeaderboardRecordsList::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.limit)
}

// string cursor = 8;
inline void TLeaderboardRecordsList::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardRecordsList::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecordsList.cursor)
  return _internal_cursor();
}
inline void TLeaderboardRecordsList::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecordsList.cursor)
}
inline std::string* TLeaderboardRecordsList::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecordsList.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TLeaderboardRecordsList::_internal_cursor() const {
  return cursor_.Get();
}
inline void TLeaderboardRecordsList::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecordsList::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecordsList.cursor)
}
inline void TLeaderboardRecordsList::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecordsList.cursor)
}
inline void TLeaderboardRecordsList::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecordsList.cursor)
}
inline std::string* TLeaderboardRecordsList::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecordsList::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecordsList.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardRecordsList::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.cursor)
}

inline bool TLeaderboardRecordsList::has_filter() const {
  return filter_case() != FILTER_NOT_SET;
}
inline void TLeaderboardRecordsList::clear_has_filter() {
  _oneof_case_[0] = FILTER_NOT_SET;
}
inline TLeaderboardRecordsList::FilterCase TLeaderboardRecordsList::filter_case() const {
  return TLeaderboardRecordsList::FilterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TLeaderboardRecords

// repeated .server.LeaderboardRecord records = 1;
inline int TLeaderboardRecords::_internal_records_size() const {
  return records_.size();
}
inline int TLeaderboardRecords::records_size() const {
  return _internal_records_size();
}
inline void TLeaderboardRecords::clear_records() {
  records_.Clear();
}
inline ::server::LeaderboardRecord* TLeaderboardRecords::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecords.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::LeaderboardRecord >*
TLeaderboardRecords::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:server.TLeaderboardRecords.records)
  return &records_;
}
inline const ::server::LeaderboardRecord& TLeaderboardRecords::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::server::LeaderboardRecord& TLeaderboardRecords::records(int index) const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecords.records)
  return _internal_records(index);
}
inline ::server::LeaderboardRecord* TLeaderboardRecords::_internal_add_records() {
  return records_.Add();
}
inline ::server::LeaderboardRecord* TLeaderboardRecords::add_records() {
  // @@protoc_insertion_point(field_add:server.TLeaderboardRecords.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::LeaderboardRecord >&
TLeaderboardRecords::records() const {
  // @@protoc_insertion_point(field_list:server.TLeaderboardRecords.records)
  return records_;
}

// string cursor = 2;
inline void TLeaderboardRecords::clear_cursor() {
  cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TLeaderboardRecords::cursor() const {
  // @@protoc_insertion_point(field_get:server.TLeaderboardRecords.cursor)
  return _internal_cursor();
}
inline void TLeaderboardRecords::set_cursor(const std::string& value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:server.TLeaderboardRecords.cursor)
}
inline std::string* TLeaderboardRecords::mutable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TLeaderboardRecords.cursor)
  return _internal_mutable_cursor();
}
inline const std::string& TLeaderboardRecords::_internal_cursor() const {
  return cursor_.Get();
}
inline void TLeaderboardRecords::_internal_set_cursor(const std::string& value) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TLeaderboardRecords::set_cursor(std::string&& value) {
  
  cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TLeaderboardRecords.cursor)
}
inline void TLeaderboardRecords::set_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TLeaderboardRecords.cursor)
}
inline void TLeaderboardRecords::set_cursor(const char* value,
    size_t size) {
  
  cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TLeaderboardRecords.cursor)
}
inline std::string* TLeaderboardRecords::_internal_mutable_cursor() {
  
  return cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TLeaderboardRecords::release_cursor() {
  // @@protoc_insertion_point(field_release:server.TLeaderboardRecords.cursor)
  return cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TLeaderboardRecords::set_allocated_cursor(std::string* cursor) {
  if (cursor != nullptr) {
    
  } else {
    
  }
  cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecords.cursor)
}

// -------------------------------------------------------------------

// TRpc

// string id = 1;
inline void TRpc::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TRpc::id() const {
  // @@protoc_insertion_point(field_get:server.TRpc.id)
  return _internal_id();
}
inline void TRpc::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:server.TRpc.id)
}
inline std::string* TRpc::mutable_id() {
  // @@protoc_insertion_point(field_mutable:server.TRpc.id)
  return _internal_mutable_id();
}
inline const std::string& TRpc::_internal_id() const {
  return id_.Get();
}
inline void TRpc::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TRpc::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TRpc.id)
}
inline void TRpc::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TRpc.id)
}
inline void TRpc::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TRpc.id)
}
inline std::string* TRpc::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TRpc::release_id() {
  // @@protoc_insertion_point(field_release:server.TRpc.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TRpc::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TRpc.id)
}

// string payload = 2;
inline void TRpc::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TRpc::payload() const {
  // @@protoc_insertion_point(field_get:server.TRpc.payload)
  return _internal_payload();
}
inline void TRpc::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:server.TRpc.payload)
}
inline std::string* TRpc::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:server.TRpc.payload)
  return _internal_mutable_payload();
}
inline const std::string& TRpc::_internal_payload() const {
  return payload_.Get();
}
inline void TRpc::_internal_set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TRpc::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TRpc.payload)
}
inline void TRpc::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TRpc.payload)
}
inline void TRpc::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TRpc.payload)
}
inline std::string* TRpc::_internal_mutable_payload() {
  
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TRpc::release_payload() {
  // @@protoc_insertion_point(field_release:server.TRpc.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TRpc::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TRpc.payload)
}

// -------------------------------------------------------------------

// TPurchaseValidation_ApplePurchase

// string product_id = 1;
inline void TPurchaseValidation_ApplePurchase::clear_product_id() {
  product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TPurchaseValidation_ApplePurchase::product_id() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.ApplePurchase.product_id)
  return _internal_product_id();
}
inline void TPurchaseValidation_ApplePurchase::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.ApplePurchase.product_id)
}
inline std::string* TPurchaseValidation_ApplePurchase::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.ApplePurchase.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& TPurchaseValidation_ApplePurchase::_internal_product_id() const {
  return product_id_.Get();
}
inline void TPurchaseValidation_ApplePurchase::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TPurchaseValidation_ApplePurchase::set_product_id(std::string&& value) {
  
  product_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TPurchaseValidation.ApplePurchase.product_id)
}
inline void TPurchaseValidation_ApplePurchase::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.ApplePurchase.product_id)
}
inline void TPurchaseValidation_ApplePurchase::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.ApplePurchase.product_id)
}
inline std::string* TPurchaseValidation_ApplePurchase::_internal_mutable_product_id() {
  
  return product_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TPurchaseValidation_ApplePurchase::release_product_id() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.ApplePurchase.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TPurchaseValidation_ApplePurchase::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.ApplePurchase.product_id)
}

// string receipt_data = 2;
inline void TPurchaseValidation_ApplePurchase::clear_receipt_data() {
  receipt_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TPurchaseValidation_ApplePurchase::receipt_data() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.ApplePurchase.receipt_data)
  return _internal_receipt_data();
}
inline void TPurchaseValidation_ApplePurchase::set_receipt_data(const std::string& value) {
  _internal_set_receipt_data(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
inline std::string* TPurchaseValidation_ApplePurchase::mutable_receipt_data() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.ApplePurchase.receipt_data)
  return _internal_mutable_receipt_data();
}
inline const std::string& TPurchaseValidation_ApplePurchase::_internal_receipt_data() const {
  return receipt_data_.Get();
}
inline void TPurchaseValidation_ApplePurchase::_internal_set_receipt_data(const std::string& value) {
  
  receipt_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TPurchaseValidation_ApplePurchase::set_receipt_data(std::string&& value) {
  
  receipt_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
inline void TPurchaseValidation_ApplePurchase::set_receipt_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receipt_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
inline void TPurchaseValidation_ApplePurchase::set_receipt_data(const char* value,
    size_t size) {
  
  receipt_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.ApplePurchase.receipt_data)
}
inline std::string* TPurchaseValidation_ApplePurchase::_internal_mutable_receipt_data() {
  
  return receipt_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TPurchaseValidation_ApplePurchase::release_receipt_data() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.ApplePurchase.receipt_data)
  return receipt_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TPurchaseValidation_ApplePurchase::set_allocated_receipt_data(std::string* receipt_data) {
  if (receipt_data != nullptr) {
    
  } else {
    
  }
  receipt_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receipt_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.ApplePurchase.receipt_data)
}

// -------------------------------------------------------------------

// TPurchaseValidation_GooglePurchase

// string product_id = 1;
inline void TPurchaseValidation_GooglePurchase::clear_product_id() {
  product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TPurchaseValidation_GooglePurchase::product_id() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.product_id)
  return _internal_product_id();
}
inline void TPurchaseValidation_GooglePurchase::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.product_id)
}
inline std::string* TPurchaseValidation_GooglePurchase::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& TPurchaseValidation_GooglePurchase::_internal_product_id() const {
  return product_id_.Get();
}
inline void TPurchaseValidation_GooglePurchase::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TPurchaseValidation_GooglePurchase::set_product_id(std::string&& value) {
  
  product_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TPurchaseValidation.GooglePurchase.product_id)
}
inline void TPurchaseValidation_GooglePurchase::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.product_id)
}
inline void TPurchaseValidation_GooglePurchase::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.product_id)
}
inline std::string* TPurchaseValidation_GooglePurchase::_internal_mutable_product_id() {
  
  return product_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TPurchaseValidation_GooglePurchase::release_product_id() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TPurchaseValidation_GooglePurchase::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.product_id)
}

// string product_type = 2;
inline void TPurchaseValidation_GooglePurchase::clear_product_type() {
  product_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TPurchaseValidation_GooglePurchase::product_type() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.product_type)
  return _internal_product_type();
}
inline void TPurchaseValidation_GooglePurchase::set_product_type(const std::string& value) {
  _internal_set_product_type(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.product_type)
}
inline std::string* TPurchaseValidation_GooglePurchase::mutable_product_type() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.product_type)
  return _internal_mutable_product_type();
}
inline const std::string& TPurchaseValidation_GooglePurchase::_internal_product_type() const {
  return product_type_.Get();
}
inline void TPurchaseValidation_GooglePurchase::_internal_set_product_type(const std::string& value) {
  
  product_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TPurchaseValidation_GooglePurchase::set_product_type(std::string&& value) {
  
  product_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TPurchaseValidation.GooglePurchase.product_type)
}
inline void TPurchaseValidation_GooglePurchase::set_product_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.product_type)
}
inline void TPurchaseValidation_GooglePurchase::set_product_type(const char* value,
    size_t size) {
  
  product_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.product_type)
}
inline std::string* TPurchaseValidation_GooglePurchase::_internal_mutable_product_type() {
  
  return product_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TPurchaseValidation_GooglePurchase::release_product_type() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.product_type)
  return product_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TPurchaseValidation_GooglePurchase::set_allocated_product_type(std::string* product_type) {
  if (product_type != nullptr) {
    
  } else {
    
  }
  product_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.product_type)
}

// string purchase_token = 3;
inline void TPurchaseValidation_GooglePurchase::clear_purchase_token() {
  purchase_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TPurchaseValidation_GooglePurchase::purchase_token() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.GooglePurchase.purchase_token)
  return _internal_purchase_token();
}
inline void TPurchaseValidation_GooglePurchase::set_purchase_token(const std::string& value) {
  _internal_set_purchase_token(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
inline std::string* TPurchaseValidation_GooglePurchase::mutable_purchase_token() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.GooglePurchase.purchase_token)
  return _internal_mutable_purchase_token();
}
inline const std::string& TPurchaseValidation_GooglePurchase::_internal_purchase_token() const {
  return purchase_token_.Get();
}
inline void TPurchaseValidation_GooglePurchase::_internal_set_purchase_token(const std::string& value) {
  
  purchase_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TPurchaseValidation_GooglePurchase::set_purchase_token(std::string&& value) {
  
  purchase_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
inline void TPurchaseValidation_GooglePurchase::set_purchase_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  purchase_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
inline void TPurchaseValidation_GooglePurchase::set_purchase_token(const char* value,
    size_t size) {
  
  purchase_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseValidation.GooglePurchase.purchase_token)
}
inline std::string* TPurchaseValidation_GooglePurchase::_internal_mutable_purchase_token() {
  
  return purchase_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TPurchaseValidation_GooglePurchase::release_purchase_token() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.GooglePurchase.purchase_token)
  return purchase_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TPurchaseValidation_GooglePurchase::set_allocated_purchase_token(std::string* purchase_token) {
  if (purchase_token != nullptr) {
    
  } else {
    
  }
  purchase_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purchase_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.GooglePurchase.purchase_token)
}

// -------------------------------------------------------------------

// TPurchaseValidation

// .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
inline bool TPurchaseValidation::_internal_has_apple_purchase() const {
  return id_case() == kApplePurchase;
}
inline bool TPurchaseValidation::has_apple_purchase() const {
  return _internal_has_apple_purchase();
}
inline void TPurchaseValidation::set_has_apple_purchase() {
  _oneof_case_[0] = kApplePurchase;
}
inline void TPurchaseValidation::clear_apple_purchase() {
  if (_internal_has_apple_purchase()) {
    if (GetArena() == nullptr) {
      delete id_.apple_purchase_;
    }
    clear_has_id();
  }
}
inline ::server::TPurchaseValidation_ApplePurchase* TPurchaseValidation::release_apple_purchase() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.apple_purchase)
  if (_internal_has_apple_purchase()) {
    clear_has_id();
      ::server::TPurchaseValidation_ApplePurchase* temp = id_.apple_purchase_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_.apple_purchase_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TPurchaseValidation_ApplePurchase& TPurchaseValidation::_internal_apple_purchase() const {
  return _internal_has_apple_purchase()
      ? *id_.apple_purchase_
      : reinterpret_cast< ::server::TPurchaseValidation_ApplePurchase&>(::server::_TPurchaseValidation_ApplePurchase_default_instance_);
}
inline const ::server::TPurchaseValidation_ApplePurchase& TPurchaseValidation::apple_purchase() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.apple_purchase)
  return _internal_apple_purchase();
}
inline ::server::TPurchaseValidation_ApplePurchase* TPurchaseValidation::unsafe_arena_release_apple_purchase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.TPurchaseValidation.apple_purchase)
  if (_internal_has_apple_purchase()) {
    clear_has_id();
    ::server::TPurchaseValidation_ApplePurchase* temp = id_.apple_purchase_;
    id_.apple_purchase_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TPurchaseValidation::unsafe_arena_set_allocated_apple_purchase(::server::TPurchaseValidation_ApplePurchase* apple_purchase) {
  clear_id();
  if (apple_purchase) {
    set_has_apple_purchase();
    id_.apple_purchase_ = apple_purchase;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TPurchaseValidation.apple_purchase)
}
inline ::server::TPurchaseValidation_ApplePurchase* TPurchaseValidation::_internal_mutable_apple_purchase() {
  if (!_internal_has_apple_purchase()) {
    clear_id();
    set_has_apple_purchase();
    id_.apple_purchase_ = CreateMaybeMessage< ::server::TPurchaseValidation_ApplePurchase >(GetArena());
  }
  return id_.apple_purchase_;
}
inline ::server::TPurchaseValidation_ApplePurchase* TPurchaseValidation::mutable_apple_purchase() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.apple_purchase)
  return _internal_mutable_apple_purchase();
}

// .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
inline bool TPurchaseValidation::_internal_has_google_purchase() const {
  return id_case() == kGooglePurchase;
}
inline bool TPurchaseValidation::has_google_purchase() const {
  return _internal_has_google_purchase();
}
inline void TPurchaseValidation::set_has_google_purchase() {
  _oneof_case_[0] = kGooglePurchase;
}
inline void TPurchaseValidation::clear_google_purchase() {
  if (_internal_has_google_purchase()) {
    if (GetArena() == nullptr) {
      delete id_.google_purchase_;
    }
    clear_has_id();
  }
}
inline ::server::TPurchaseValidation_GooglePurchase* TPurchaseValidation::release_google_purchase() {
  // @@protoc_insertion_point(field_release:server.TPurchaseValidation.google_purchase)
  if (_internal_has_google_purchase()) {
    clear_has_id();
      ::server::TPurchaseValidation_GooglePurchase* temp = id_.google_purchase_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    id_.google_purchase_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::server::TPurchaseValidation_GooglePurchase& TPurchaseValidation::_internal_google_purchase() const {
  return _internal_has_google_purchase()
      ? *id_.google_purchase_
      : reinterpret_cast< ::server::TPurchaseValidation_GooglePurchase&>(::server::_TPurchaseValidation_GooglePurchase_default_instance_);
}
inline const ::server::TPurchaseValidation_GooglePurchase& TPurchaseValidation::google_purchase() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseValidation.google_purchase)
  return _internal_google_purchase();
}
inline ::server::TPurchaseValidation_GooglePurchase* TPurchaseValidation::unsafe_arena_release_google_purchase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:server.TPurchaseValidation.google_purchase)
  if (_internal_has_google_purchase()) {
    clear_has_id();
    ::server::TPurchaseValidation_GooglePurchase* temp = id_.google_purchase_;
    id_.google_purchase_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TPurchaseValidation::unsafe_arena_set_allocated_google_purchase(::server::TPurchaseValidation_GooglePurchase* google_purchase) {
  clear_id();
  if (google_purchase) {
    set_has_google_purchase();
    id_.google_purchase_ = google_purchase;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server.TPurchaseValidation.google_purchase)
}
inline ::server::TPurchaseValidation_GooglePurchase* TPurchaseValidation::_internal_mutable_google_purchase() {
  if (!_internal_has_google_purchase()) {
    clear_id();
    set_has_google_purchase();
    id_.google_purchase_ = CreateMaybeMessage< ::server::TPurchaseValidation_GooglePurchase >(GetArena());
  }
  return id_.google_purchase_;
}
inline ::server::TPurchaseValidation_GooglePurchase* TPurchaseValidation::mutable_google_purchase() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseValidation.google_purchase)
  return _internal_mutable_google_purchase();
}

inline bool TPurchaseValidation::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void TPurchaseValidation::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline TPurchaseValidation::IdCase TPurchaseValidation::id_case() const {
  return TPurchaseValidation::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TPurchaseRecord

// bool success = 1;
inline void TPurchaseRecord::clear_success() {
  success_ = false;
}
inline bool TPurchaseRecord::_internal_success() const {
  return success_;
}
inline bool TPurchaseRecord::success() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.success)
  return _internal_success();
}
inline void TPurchaseRecord::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void TPurchaseRecord::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.success)
}

// bool seen_before = 2;
inline void TPurchaseRecord::clear_seen_before() {
  seen_before_ = false;
}
inline bool TPurchaseRecord::_internal_seen_before() const {
  return seen_before_;
}
inline bool TPurchaseRecord::seen_before() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.seen_before)
  return _internal_seen_before();
}
inline void TPurchaseRecord::_internal_set_seen_before(bool value) {
  
  seen_before_ = value;
}
inline void TPurchaseRecord::set_seen_before(bool value) {
  _internal_set_seen_before(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.seen_before)
}

// bool purchase_provider_reachable = 3;
inline void TPurchaseRecord::clear_purchase_provider_reachable() {
  purchase_provider_reachable_ = false;
}
inline bool TPurchaseRecord::_internal_purchase_provider_reachable() const {
  return purchase_provider_reachable_;
}
inline bool TPurchaseRecord::purchase_provider_reachable() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.purchase_provider_reachable)
  return _internal_purchase_provider_reachable();
}
inline void TPurchaseRecord::_internal_set_purchase_provider_reachable(bool value) {
  
  purchase_provider_reachable_ = value;
}
inline void TPurchaseRecord::set_purchase_provider_reachable(bool value) {
  _internal_set_purchase_provider_reachable(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.purchase_provider_reachable)
}

// string message = 6;
inline void TPurchaseRecord::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TPurchaseRecord::message() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.message)
  return _internal_message();
}
inline void TPurchaseRecord::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.message)
}
inline std::string* TPurchaseRecord::mutable_message() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseRecord.message)
  return _internal_mutable_message();
}
inline const std::string& TPurchaseRecord::_internal_message() const {
  return message_.Get();
}
inline void TPurchaseRecord::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TPurchaseRecord::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TPurchaseRecord.message)
}
inline void TPurchaseRecord::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TPurchaseRecord.message)
}
inline void TPurchaseRecord::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseRecord.message)
}
inline std::string* TPurchaseRecord::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TPurchaseRecord::release_message() {
  // @@protoc_insertion_point(field_release:server.TPurchaseRecord.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TPurchaseRecord::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseRecord.message)
}

// string data = 5;
inline void TPurchaseRecord::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TPurchaseRecord::data() const {
  // @@protoc_insertion_point(field_get:server.TPurchaseRecord.data)
  return _internal_data();
}
inline void TPurchaseRecord::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:server.TPurchaseRecord.data)
}
inline std::string* TPurchaseRecord::mutable_data() {
  // @@protoc_insertion_point(field_mutable:server.TPurchaseRecord.data)
  return _internal_mutable_data();
}
inline const std::string& TPurchaseRecord::_internal_data() const {
  return data_.Get();
}
inline void TPurchaseRecord::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TPurchaseRecord::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TPurchaseRecord.data)
}
inline void TPurchaseRecord::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TPurchaseRecord.data)
}
inline void TPurchaseRecord::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TPurchaseRecord.data)
}
inline std::string* TPurchaseRecord::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TPurchaseRecord::release_data() {
  // @@protoc_insertion_point(field_release:server.TPurchaseRecord.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TPurchaseRecord::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TPurchaseRecord.data)
}

// -------------------------------------------------------------------

// Notification

// string id = 1;
inline void Notification::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notification::id() const {
  // @@protoc_insertion_point(field_get:server.Notification.id)
  return _internal_id();
}
inline void Notification::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:server.Notification.id)
}
inline std::string* Notification::mutable_id() {
  // @@protoc_insertion_point(field_mutable:server.Notification.id)
  return _internal_mutable_id();
}
inline const std::string& Notification::_internal_id() const {
  return id_.Get();
}
inline void Notification::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notification::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Notification.id)
}
inline void Notification::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Notification.id)
}
inline void Notification::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Notification.id)
}
inline std::string* Notification::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notification::release_id() {
  // @@protoc_insertion_point(field_release:server.Notification.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notification::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Notification.id)
}

// string subject = 2;
inline void Notification::clear_subject() {
  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notification::subject() const {
  // @@protoc_insertion_point(field_get:server.Notification.subject)
  return _internal_subject();
}
inline void Notification::set_subject(const std::string& value) {
  _internal_set_subject(value);
  // @@protoc_insertion_point(field_set:server.Notification.subject)
}
inline std::string* Notification::mutable_subject() {
  // @@protoc_insertion_point(field_mutable:server.Notification.subject)
  return _internal_mutable_subject();
}
inline const std::string& Notification::_internal_subject() const {
  return subject_.Get();
}
inline void Notification::_internal_set_subject(const std::string& value) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notification::set_subject(std::string&& value) {
  
  subject_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Notification.subject)
}
inline void Notification::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Notification.subject)
}
inline void Notification::set_subject(const char* value,
    size_t size) {
  
  subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Notification.subject)
}
inline std::string* Notification::_internal_mutable_subject() {
  
  return subject_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notification::release_subject() {
  // @@protoc_insertion_point(field_release:server.Notification.subject)
  return subject_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notification::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    
  } else {
    
  }
  subject_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Notification.subject)
}

// string content = 3;
inline void Notification::clear_content() {
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notification::content() const {
  // @@protoc_insertion_point(field_get:server.Notification.content)
  return _internal_content();
}
inline void Notification::set_content(const std::string& value) {
  _internal_set_content(value);
  // @@protoc_insertion_point(field_set:server.Notification.content)
}
inline std::string* Notification::mutable_content() {
  // @@protoc_insertion_point(field_mutable:server.Notification.content)
  return _internal_mutable_content();
}
inline const std::string& Notification::_internal_content() const {
  return content_.Get();
}
inline void Notification::_internal_set_content(const std::string& value) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notification::set_content(std::string&& value) {
  
  content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Notification.content)
}
inline void Notification::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Notification.content)
}
inline void Notification::set_content(const char* value,
    size_t size) {
  
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Notification.content)
}
inline std::string* Notification::_internal_mutable_content() {
  
  return content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notification::release_content() {
  // @@protoc_insertion_point(field_release:server.Notification.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notification::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Notification.content)
}

// int64 code = 4;
inline void Notification::clear_code() {
  code_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Notification::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Notification::code() const {
  // @@protoc_insertion_point(field_get:server.Notification.code)
  return _internal_code();
}
inline void Notification::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  code_ = value;
}
inline void Notification::set_code(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:server.Notification.code)
}

// string sender_id = 5;
inline void Notification::clear_sender_id() {
  sender_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Notification::sender_id() const {
  // @@protoc_insertion_point(field_get:server.Notification.sender_id)
  return _internal_sender_id();
}
inline void Notification::set_sender_id(const std::string& value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:server.Notification.sender_id)
}
inline std::string* Notification::mutable_sender_id() {
  // @@protoc_insertion_point(field_mutable:server.Notification.sender_id)
  return _internal_mutable_sender_id();
}
inline const std::string& Notification::_internal_sender_id() const {
  return sender_id_.Get();
}
inline void Notification::_internal_set_sender_id(const std::string& value) {
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Notification::set_sender_id(std::string&& value) {
  
  sender_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.Notification.sender_id)
}
inline void Notification::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.Notification.sender_id)
}
inline void Notification::set_sender_id(const char* value,
    size_t size) {
  
  sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.Notification.sender_id)
}
inline std::string* Notification::_internal_mutable_sender_id() {
  
  return sender_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Notification::release_sender_id() {
  // @@protoc_insertion_point(field_release:server.Notification.sender_id)
  return sender_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Notification::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    
  } else {
    
  }
  sender_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.Notification.sender_id)
}

// int64 created_at = 6;
inline void Notification::clear_created_at() {
  created_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Notification::_internal_created_at() const {
  return created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Notification::created_at() const {
  // @@protoc_insertion_point(field_get:server.Notification.created_at)
  return _internal_created_at();
}
inline void Notification::_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_at_ = value;
}
inline void Notification::set_created_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:server.Notification.created_at)
}

// int64 expires_at = 7;
inline void Notification::clear_expires_at() {
  expires_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Notification::_internal_expires_at() const {
  return expires_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Notification::expires_at() const {
  // @@protoc_insertion_point(field_get:server.Notification.expires_at)
  return _internal_expires_at();
}
inline void Notification::_internal_set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expires_at_ = value;
}
inline void Notification::set_expires_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expires_at(value);
  // @@protoc_insertion_point(field_set:server.Notification.expires_at)
}

// bool persistent = 8;
inline void Notification::clear_persistent() {
  persistent_ = false;
}
inline bool Notification::_internal_persistent() const {
  return persistent_;
}
inline bool Notification::persistent() const {
  // @@protoc_insertion_point(field_get:server.Notification.persistent)
  return _internal_persistent();
}
inline void Notification::_internal_set_persistent(bool value) {
  
  persistent_ = value;
}
inline void Notification::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:server.Notification.persistent)
}

// -------------------------------------------------------------------

// Notifications

// repeated .server.Notification notifications = 1;
inline int Notifications::_internal_notifications_size() const {
  return notifications_.size();
}
inline int Notifications::notifications_size() const {
  return _internal_notifications_size();
}
inline void Notifications::clear_notifications() {
  notifications_.Clear();
}
inline ::server::Notification* Notifications::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:server.Notifications.notifications)
  return notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification >*
Notifications::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:server.Notifications.notifications)
  return &notifications_;
}
inline const ::server::Notification& Notifications::_internal_notifications(int index) const {
  return notifications_.Get(index);
}
inline const ::server::Notification& Notifications::notifications(int index) const {
  // @@protoc_insertion_point(field_get:server.Notifications.notifications)
  return _internal_notifications(index);
}
inline ::server::Notification* Notifications::_internal_add_notifications() {
  return notifications_.Add();
}
inline ::server::Notification* Notifications::add_notifications() {
  // @@protoc_insertion_point(field_add:server.Notifications.notifications)
  return _internal_add_notifications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification >&
Notifications::notifications() const {
  // @@protoc_insertion_point(field_list:server.Notifications.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// TNotificationsList

// int64 limit = 1;
inline void TNotificationsList::clear_limit() {
  limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TNotificationsList::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TNotificationsList::limit() const {
  // @@protoc_insertion_point(field_get:server.TNotificationsList.limit)
  return _internal_limit();
}
inline void TNotificationsList::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limit_ = value;
}
inline void TNotificationsList::set_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:server.TNotificationsList.limit)
}

// string resumable_cursor = 2;
inline void TNotificationsList::clear_resumable_cursor() {
  resumable_cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TNotificationsList::resumable_cursor() const {
  // @@protoc_insertion_point(field_get:server.TNotificationsList.resumable_cursor)
  return _internal_resumable_cursor();
}
inline void TNotificationsList::set_resumable_cursor(const std::string& value) {
  _internal_set_resumable_cursor(value);
  // @@protoc_insertion_point(field_set:server.TNotificationsList.resumable_cursor)
}
inline std::string* TNotificationsList::mutable_resumable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TNotificationsList.resumable_cursor)
  return _internal_mutable_resumable_cursor();
}
inline const std::string& TNotificationsList::_internal_resumable_cursor() const {
  return resumable_cursor_.Get();
}
inline void TNotificationsList::_internal_set_resumable_cursor(const std::string& value) {
  
  resumable_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TNotificationsList::set_resumable_cursor(std::string&& value) {
  
  resumable_cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TNotificationsList.resumable_cursor)
}
inline void TNotificationsList::set_resumable_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resumable_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TNotificationsList.resumable_cursor)
}
inline void TNotificationsList::set_resumable_cursor(const char* value,
    size_t size) {
  
  resumable_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TNotificationsList.resumable_cursor)
}
inline std::string* TNotificationsList::_internal_mutable_resumable_cursor() {
  
  return resumable_cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TNotificationsList::release_resumable_cursor() {
  // @@protoc_insertion_point(field_release:server.TNotificationsList.resumable_cursor)
  return resumable_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TNotificationsList::set_allocated_resumable_cursor(std::string* resumable_cursor) {
  if (resumable_cursor != nullptr) {
    
  } else {
    
  }
  resumable_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resumable_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TNotificationsList.resumable_cursor)
}

// -------------------------------------------------------------------

// TNotifications

// repeated .server.Notification notifications = 1;
inline int TNotifications::_internal_notifications_size() const {
  return notifications_.size();
}
inline int TNotifications::notifications_size() const {
  return _internal_notifications_size();
}
inline void TNotifications::clear_notifications() {
  notifications_.Clear();
}
inline ::server::Notification* TNotifications::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:server.TNotifications.notifications)
  return notifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification >*
TNotifications::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:server.TNotifications.notifications)
  return &notifications_;
}
inline const ::server::Notification& TNotifications::_internal_notifications(int index) const {
  return notifications_.Get(index);
}
inline const ::server::Notification& TNotifications::notifications(int index) const {
  // @@protoc_insertion_point(field_get:server.TNotifications.notifications)
  return _internal_notifications(index);
}
inline ::server::Notification* TNotifications::_internal_add_notifications() {
  return notifications_.Add();
}
inline ::server::Notification* TNotifications::add_notifications() {
  // @@protoc_insertion_point(field_add:server.TNotifications.notifications)
  return _internal_add_notifications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server::Notification >&
TNotifications::notifications() const {
  // @@protoc_insertion_point(field_list:server.TNotifications.notifications)
  return notifications_;
}

// string resumable_cursor = 2;
inline void TNotifications::clear_resumable_cursor() {
  resumable_cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TNotifications::resumable_cursor() const {
  // @@protoc_insertion_point(field_get:server.TNotifications.resumable_cursor)
  return _internal_resumable_cursor();
}
inline void TNotifications::set_resumable_cursor(const std::string& value) {
  _internal_set_resumable_cursor(value);
  // @@protoc_insertion_point(field_set:server.TNotifications.resumable_cursor)
}
inline std::string* TNotifications::mutable_resumable_cursor() {
  // @@protoc_insertion_point(field_mutable:server.TNotifications.resumable_cursor)
  return _internal_mutable_resumable_cursor();
}
inline const std::string& TNotifications::_internal_resumable_cursor() const {
  return resumable_cursor_.Get();
}
inline void TNotifications::_internal_set_resumable_cursor(const std::string& value) {
  
  resumable_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TNotifications::set_resumable_cursor(std::string&& value) {
  
  resumable_cursor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:server.TNotifications.resumable_cursor)
}
inline void TNotifications::set_resumable_cursor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resumable_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:server.TNotifications.resumable_cursor)
}
inline void TNotifications::set_resumable_cursor(const char* value,
    size_t size) {
  
  resumable_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:server.TNotifications.resumable_cursor)
}
inline std::string* TNotifications::_internal_mutable_resumable_cursor() {
  
  return resumable_cursor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TNotifications::release_resumable_cursor() {
  // @@protoc_insertion_point(field_release:server.TNotifications.resumable_cursor)
  return resumable_cursor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TNotifications::set_allocated_resumable_cursor(std::string* resumable_cursor) {
  if (resumable_cursor != nullptr) {
    
  } else {
    
  }
  resumable_cursor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resumable_cursor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:server.TNotifications.resumable_cursor)
}

// -------------------------------------------------------------------

// TNotificationsRemove

// repeated string notification_ids = 1;
inline int TNotificationsRemove::_internal_notification_ids_size() const {
  return notification_ids_.size();
}
inline int TNotificationsRemove::notification_ids_size() const {
  return _internal_notification_ids_size();
}
inline void TNotificationsRemove::clear_notification_ids() {
  notification_ids_.Clear();
}
inline std::string* TNotificationsRemove::add_notification_ids() {
  // @@protoc_insertion_point(field_add_mutable:server.TNotificationsRemove.notification_ids)
  return _internal_add_notification_ids();
}
inline const std::string& TNotificationsRemove::_internal_notification_ids(int index) const {
  return notification_ids_.Get(index);
}
inline const std::string& TNotificationsRemove::notification_ids(int index) const {
  // @@protoc_insertion_point(field_get:server.TNotificationsRemove.notification_ids)
  return _internal_notification_ids(index);
}
inline std::string* TNotificationsRemove::mutable_notification_ids(int index) {
  // @@protoc_insertion_point(field_mutable:server.TNotificationsRemove.notification_ids)
  return notification_ids_.Mutable(index);
}
inline void TNotificationsRemove::set_notification_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:server.TNotificationsRemove.notification_ids)
  notification_ids_.Mutable(index)->assign(value);
}
inline void TNotificationsRemove::set_notification_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:server.TNotificationsRemove.notification_ids)
  notification_ids_.Mutable(index)->assign(std::move(value));
}
inline void TNotificationsRemove::set_notification_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:server.TNotificationsRemove.notification_ids)
}
inline void TNotificationsRemove::set_notification_ids(int index, const char* value, size_t size) {
  notification_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:server.TNotificationsRemove.notification_ids)
}
inline std::string* TNotificationsRemove::_internal_add_notification_ids() {
  return notification_ids_.Add();
}
inline void TNotificationsRemove::add_notification_ids(const std::string& value) {
  notification_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:server.TNotificationsRemove.notification_ids)
}
inline void TNotificationsRemove::add_notification_ids(std::string&& value) {
  notification_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:server.TNotificationsRemove.notification_ids)
}
inline void TNotificationsRemove::add_notification_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:server.TNotificationsRemove.notification_ids)
}
inline void TNotificationsRemove::add_notification_ids(const char* value, size_t size) {
  notification_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:server.TNotificationsRemove.notification_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TNotificationsRemove::notification_ids() const {
  // @@protoc_insertion_point(field_list:server.TNotificationsRemove.notification_ids)
  return notification_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TNotificationsRemove::mutable_notification_ids() {
  // @@protoc_insertion_point(field_mutable_list:server.TNotificationsRemove.notification_ids)
  return &notification_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::server::Error_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::Error_Code>() {
  return ::server::Error_Code_descriptor();
}
template <> struct is_proto_enum< ::server::TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode>() {
  return ::server::TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor();
}
template <> struct is_proto_enum< ::server::StoragePermissionRead> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::StoragePermissionRead>() {
  return ::server::StoragePermissionRead_descriptor();
}
template <> struct is_proto_enum< ::server::StoragePermissionWrite> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server::StoragePermissionWrite>() {
  return ::server::StoragePermissionWrite_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
