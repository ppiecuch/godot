diff --git a/core/math/random_number_generator.cpp b/core/math/random_number_generator.cpp
index a124f630306..660380e1db9 100644
--- a/core/math/random_number_generator.cpp
+++ b/core/math/random_number_generator.cpp
@@ -39,6 +39,7 @@ void RandomNumberGenerator::_bind_methods() {
 	ClassDB::bind_method(D_METHOD("randfn", "mean", "deviation"), &RandomNumberGenerator::randfn, DEFVAL(0.0), DEFVAL(1.0));
 	ClassDB::bind_method(D_METHOD("randf_range", "from", "to"), &RandomNumberGenerator::randf_range);
 	ClassDB::bind_method(D_METHOD("randi_range", "from", "to"), &RandomNumberGenerator::randi_range);
+	ClassDB::bind_method(D_METHOD("randv_circle"), &RandomNumberGenerator::randv_circle);
 	ClassDB::bind_method(D_METHOD("randomize"), &RandomNumberGenerator::randomize);
 
 	ADD_PROPERTY(PropertyInfo(Variant::INT, "seed"), "set_seed", "get_seed");
diff --git a/core/math/random_number_generator.h b/core/math/random_number_generator.h
index 2e7941b345b..7907b23bac2 100644
--- a/core/math/random_number_generator.h
+++ b/core/math/random_number_generator.h
@@ -72,6 +72,11 @@ class RandomNumberGenerator : public Reference {
 		return randbase.rand(range) + min;
 	}
 
+	_FORCE_INLINE_ Vector2 randv_circle() {
+		real_t t = randbase.randf() * Math_TAU;
+		return Vector2(Math::cos(t), Math::sin(t));
+	}
+
 	RandomNumberGenerator() {}
 };
 
diff --git a/doc/classes/RandomNumberGenerator.xml b/doc/classes/RandomNumberGenerator.xml
index dcb75dc2756..75112fddd95 100644
--- a/doc/classes/RandomNumberGenerator.xml
+++ b/doc/classes/RandomNumberGenerator.xml
@@ -72,6 +72,19 @@
 				Setups a time-based seed to generator.
 			</description>
 		</method>
+		<method name="randv_circle">
+			<return type="Vector2">
+			</return>
+			<description>
+				Generates a normalized vector, also known as point on a unit circle. The unit vector can be multiplied by a scalar value to produce points on a circle with an arbitrary radius:
+				[codeblock]
+				var rng = RandomNumberGenerator.new()
+				var direction = rng.randv_circle()
+				var radius = 64
+				var impulse = direction * radius
+				[/codeblock]
+			</description>
+		</method>
 	</methods>
 	<members>
 		<member name="seed" type="int" setter="set_seed" getter="get_seed" default="0">
diff --git a/tests/test_main.cpp b/tests/test_main.cpp
index 871c7965138..ada5c4d4605 100644
--- a/tests/test_main.cpp
+++ b/tests/test_main.cpp
@@ -47,6 +47,7 @@
 #include "test_ordered_hash_map.h"
 #include "test_physics_2d.h"
 #include "test_physics_3d.h"
+#include "test_random_number_generator.h"
 #include "test_render.h"
 #include "test_shader_lang.h"
 #include "test_string.h"
diff --git a/tests/test_random_number_generator.h b/tests/test_random_number_generator.h
new file mode 100644
index 00000000000..c6fcad2e4b1
--- /dev/null
+++ b/tests/test_random_number_generator.h
@@ -0,0 +1,61 @@
+/*************************************************************************/
+/*  test_random_number_generator.h                                       */
+/*************************************************************************/
+/*                       This file is part of:                           */
+/*                           GODOT ENGINE                                */
+/*                      https://godotengine.org                          */
+/*************************************************************************/
+/* Copyright (c) 2007-2020 Juan Linietsky, Ariel Manzur.                 */
+/* Copyright (c) 2014-2020 Godot Engine contributors (cf. AUTHORS.md).   */
+/*                                                                       */
+/* Permission is hereby granted, free of charge, to any person obtaining */
+/* a copy of this software and associated documentation files (the       */
+/* "Software"), to deal in the Software without restriction, including   */
+/* without limitation the rights to use, copy, modify, merge, publish,   */
+/* distribute, sublicense, and/or sell copies of the Software, and to    */
+/* permit persons to whom the Software is furnished to do so, subject to */
+/* the following conditions:                                             */
+/*                                                                       */
+/* The above copyright notice and this permission notice shall be        */
+/* included in all copies or substantial portions of the Software.       */
+/*                                                                       */
+/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
+/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
+/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
+/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
+/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
+/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
+/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
+/*************************************************************************/
+
+#ifndef TEST_RANDOM_NUMBER_GENERATOR_H
+#define TEST_RANDOM_NUMBER_GENERATOR_H
+
+#include "core/math/random_number_generator.h"
+#include "tests/test_macros.h"
+
+namespace TestRandomNumberGenerator {
+
+TEST_CASE("[RandomNumberGenerator] On unit circle") {
+	Ref<RandomNumberGenerator> rng = memnew(RandomNumberGenerator);
+	rng->set_seed(0);
+	for (int i = 0; i < 100; ++i) {
+		const Vector2 &point = rng->randv_circle();
+		INFO(point.length());
+		CHECK(Math::is_equal_approx(point.length(), 1.0));
+		CHECK(point.is_normalized());
+	}
+}
+
+TEST_CASE("[Stress][RandomNumberGenerator] On unit circle") {
+	Ref<RandomNumberGenerator> rng = memnew(RandomNumberGenerator);
+	rng->set_seed(0);
+	for (int i = 0; i < 100000; ++i) {
+		const Vector2 &point = rng->randv_circle();
+		INFO(point);
+	}
+}
+
+} // namespace TestRandomNumberGenerator
+
+#endif // TEST_RANDOM_NUMBER_GENERATOR_H
