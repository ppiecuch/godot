// kate: replace-tabs on; tab-indents on; tab-width 2; indent-width 2; indent-mode cstyle;

// Copyright Leon Freist
// Author Leon Freist <freist@informatik.uni-freiburg.de>

#include "apple_utils.h"

#include <TargetConditionals.h>
#import <Foundation/Foundation.h>
#import <Metal/Metal.h>

#include <mach/mach.h>
#include <mach/mach_vm.h>
#include <mach/mach_time.h>
#include <sys/proc_info.h>
#include <sys/sysctl.h>
#include <libproc.h>
#include <stdlib.h>

// defined as external "C":
extern void hwinfo_error(const char *p_format, ...);
typedef struct procid_t {
  uint64_t pid, ppid;
} procid_t;
typedef struct treeinfo_t {
  int index;
  char label[32];
} treeinfo_t;
extern bool get_tree_descr_from_data(const procid_t *data, treeinfo_t *treeinfo, size_t data_num);

char *_get_sysctl_prop(const char *key) {
  size_t size = 512;
  static char prop[512+1] = { 0 };
  if (sysctlbyname(key, prop, &size, NULL, 0) == 0) {
    prop[MIN(size, 512)] = 0;
    return prop;
  }
  return NULL;
}

const char *get_os_name(int major, int minor) {
  if (major == 14)
    return "Sonoma";
  if (major == 13)
    return "Ventura";
  if (major == 12)
    return "Monterey";
  if (major == 11)
    return "Big Sur";
  if (major == 10) {
    switch (minor) {
      case 4:
        return "Tiger";
      case 5:
        return "Leopard";
      case 6:
        return "Snow Leopard";
      case 7:
        return "Lion";
      case 8:
        return "Mountain Lion";
      case 9:
        return "Mavericks";
      case 10:
        return "Yosemite";
      case 11:
        return "El Capitan";
      case 12:
        return "Sierra";
      case 13:
        return "High Sierra";
      case 14:
        return "Mojave";
      case 15:
        return "Catalina";
      case 16:
        return "Big Sur";
    }
  }
  return NULL;
}

unsigned get_min_required_os_version() {
#if defined(__WATCH_OS_VERSION_MIN_REQUIRED)
  return __WATCH_OS_VERSION_MIN_REQUIRED;
#elif defined(__TV_OS_VERSION_MIN_REQUIRED)
  return __TV_OS_VERSION_MIN_REQUIRED;
#elif defined(__IPHONE_OS_VERSION_MIN_REQUIRED)
  return __IPHONE_OS_VERSION_MIN_REQUIRED;
#elif defined(__MAC_OS_X_VERSION_MIN_REQUIRED)
  return __MAC_OS_X_VERSION_MIN_REQUIRED;
#endif
  return 0;
}

unsigned get_max_allowed_os_version() {
#if defined(__WATCH_OS_VERSION_MAX_ALLOWED)
  return __WATCH_OS_VERSION_MAX_ALLOWED;
#elif defined(__TV_OS_VERSION_MAX_ALLOWED)
  return __TV_OS_VERSION_MAX_ALLOWED;
#elif defined(__IPHONE_OS_VERSION_MAX_ALLOWED)
  return __IPHONE_OS_VERSION_MAX_ALLOWED;
#elif defined(__MAC_OS_X_VERSION_MAX_ALLOWED)
  return __MAC_OS_X_VERSION_MAX_ALLOWED;
#endif
  return 0;
}

const char *get_os_target() {
#if TARGET_OS_WATCH
  return "watchOS";
#elif TARGET_OS_TV
  return "tvOS";
#elif TARGET_OS_IPHONE
  return "iOS";
#elif TARGET_IPHONE_SIMULATOR
  return "iOS (Simulator)";
#elif TARGET_OS_OSX
  return "macOS";
#elif TARGET_OS_MACCATALYST
  return "macOS (Catalyst)";
#endif
  return NULL;
}

const char* get_computer_name() {
#if TARGET_OS_OSX
  return [[[NSHost currentHost] localizedName] UTF8String];
#else
  return [[[UIDevice currentDevice] name] UTF8String];
#endif
}


/// Metal information

static unsigned char empty_mtllib[];
static unsigned int empty_mtllib_size;

static const NSString* _get_gpu_from_family(unsigned family) {
  switch (family) {
    case MTLGPUFamilyApple8:
      return @"apple8(a15/m2)";
    case MTLGPUFamilyApple7:
      return @"apple7(a14/m1)";
    case MTLGPUFamilyApple6:
      return @"apple6(a13)";
    case MTLGPUFamilyApple5:
      return @"apple5(a12)";
    case MTLGPUFamilyApple4:
      return @"apple4(a11)";
    case MTLGPUFamilyApple3:
      return @"apple3(a9/a10)";
    case MTLGPUFamilyApple2:
      return @"apple2(a8)";
    case MTLGPUFamilyApple1:
      return @"apple1(a7)";

    case MTLGPUFamilyMetal3:
      return @"metal3";
    case MTLGPUFamilyMacCatalyst1:
    case MTLGPUFamilyMacCatalyst2:
    case MTLGPUFamilyMac1:
    case MTLGPUFamilyMac2:
      return @"mac2";

    case MTLGPUFamilyCommon3:
      return @"common3";
    case MTLGPUFamilyCommon2:
      return @"common2";
    case MTLGPUFamilyCommon1:
      return @"common1";

    default:
      return NULL;
  }
}

NSArray *get_all_metal_info() {
#if TARGET_OS_OSX
  NSArray *metal_devices = MTLCopyAllDevices();
#else
  NSArray *metal_devices = [NSArray arrayWithObjects:MTLCreateSystemDefaultDevice(), nil];
#endif

  NSMutableArray *all_info = [NSMutableArray arrayWithCapacity:metal_devices.count + 1];

  NSString *features_report =
    @"GPU features matrix:\n"
    @"--------------------\n"
    @"   |                                | L R H U | C            C |\n"
    @"   |                                | o e e n | o    A       aM|\n"
    @"   |                                | w m a i | m    p       te|\n"
    @"Nr | Name                           |   o d   | m    p     M at|\n"
    @"   |                                | p v l m | o    l     a la|\n"
    @"   |                                | w a e e | n    e     c sl|\n"
    @"   |                                | r b s m |1231234567812123|\n"
    @"---+--------------------------------+---------+----------------+\n";

  // gather capabilities
  for (id<MTLDevice> device in metal_devices) {
    BOOL _device_unified_memory = NO;
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_15
    if (@available(macOS 10.15, ios 11, *)) {
      _device_unified_memory = [device hasUnifiedMemory];
    } else {
      _device_unified_memory = NO;
    }
#endif
    MTLSize _max_threads_per_threadgroup_info = [device maxThreadsPerThreadgroup];
    NSDictionary *_max_threads_per_threadgroup = @{
      @"width": @(_max_threads_per_threadgroup_info.width),
      @"height": @(_max_threads_per_threadgroup_info.height),
      @"depth": @(_max_threads_per_threadgroup_info.depth),
    };
    NSUInteger _sparse_tile_size_in_bytes = 0;
    if (@available(macOS 11.0, *))
      _sparse_tile_size_in_bytes = [device sparseTileSizeInBytes];
    BOOL _supports_32bit_msaa = NO;
    BOOL _supports_32bit_float_filtering = NO;
    BOOL _supports_bc_texture_compression = NO;
    BOOL _supports_function_pointers = NO;
    BOOL _supports_function_pointers_from_render = NO;
    BOOL _supports_primitive_motion_blur = NO;
    BOOL _supports_raytracing = NO;
    BOOL _supports_raytracing_from_render = NO;
    BOOL _supports_query_texture_lod = NO;
    BOOL _supports_pull_model_interpolation = NO;
    if (@available(macOS 11.0, *)) {
      _supports_32bit_msaa = [device supports32BitMSAA];
      _supports_32bit_float_filtering = [device supports32BitFloatFiltering];
      _supports_bc_texture_compression = [device supportsBCTextureCompression];
      _supports_function_pointers = [device supportsFunctionPointers];
      _supports_primitive_motion_blur = [device supportsPrimitiveMotionBlur];
      _supports_raytracing = [device supportsRaytracing];
      _supports_query_texture_lod = [device supportsQueryTextureLOD];
      _supports_pull_model_interpolation = [device supportsPullModelInterpolation];
    }
    if (@available(macOS 12.0, *)) {
      _supports_function_pointers_from_render = [device supportsFunctionPointersFromRender];
      _supports_raytracing_from_render = [device supportsRaytracingFromRender];
    }

    NSMutableArray *family = [NSMutableArray arrayWithCapacity:8];
#define _check_family(F) { if ([device supportsFamily: F]) [family addObject:_get_gpu_from_family(F)]; }
    _check_family(MTLGPUFamilyApple8);
    _check_family(MTLGPUFamilyApple7);
    _check_family(MTLGPUFamilyApple6);
    _check_family(MTLGPUFamilyApple5);
    _check_family(MTLGPUFamilyApple4);
    _check_family(MTLGPUFamilyApple3);
    _check_family(MTLGPUFamilyApple2);
    _check_family(MTLGPUFamilyApple1);
    _check_family(MTLGPUFamilyCommon1);
    _check_family(MTLGPUFamilyCommon2);
    _check_family(MTLGPUFamilyCommon3);
    if (@available(macOS 13.0, *))
      _check_family(MTLGPUFamilyMetal3);

    if ([device supportsFamily: MTLGPUFamilyMacCatalyst1] || [device supportsFamily: MTLGPUFamilyMacCatalyst2] || [device supportsFamily: MTLGPUFamilyMac2] || [device supportsFamily: MTLGPUFamilyMac1])
      [family addObject:@"mac2"];

    NSMutableArray *features = [NSMutableArray arrayWithCapacity:8];
#if TARGET_OS_IOS
    if (@available(iOS 12.0, *)) {
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily5_v1])
        [features addObject:"a12(ios 12)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily4_v2])
        [features addObject:"a11(ios 12)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily3_v4])
        [features addObject:"a9(ios 12)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily2_v5])
        [features addObject:"a8(ios 12)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily1_v5])
        [features addObject:"a7(ios 12)"];
    }
    if (@available(iOS 11.0, *)) {
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily4_v1])
        [features addObject:"a11(ios 11)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily3_v3])
        [features addObject:"a9(iso 11)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily2_v4])
        [features addObject:"a8(ios 11)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily1_v4])
        [features addObject:"a7(ios 11)"];
    }
    if (@available(iOS 10.0, *)) {
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily3_v2])
        [features addObject:"a9(iso 10)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily2_v3])
        [features addObject:"a8(ios 10)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily1_v3])
        [features addObject:"a7(ios 10)"];
    }
    if (@available(iOS 9.0, *)) {
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily3_v1])
        [features addObject:"a9(iso 9)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily2_v2])
        [features addObject:"a8(ios 9)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily1_v2])
        [features addObject:"a7(ios 9)"];
    }
    if (@available(iOS 8.0, *)) {
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily1_v1])
        [features addObject:"a7(ios 8)"];
      if ([device supportsFeatureSet: MTLFeatureSet_iOS_GPUFamily2_v1])
        [features addObject:"a8(ios 8)"];
    }
#elif TARGET_OS_TV
    if (@available(iOS 12.0, *)) {
      if ([device supportsFeatureSet: MTLFeatureSet_tvOS_GPUFamily2_v2])
        [features addObject:"a10(ios 12)"];
      if ([device supportsFeatureSet: MTLFeatureSet_tvOS_GPUFamily1_v4])
        [features addObject:"a8(ios 12)"];
    }
    if (@available(iOS 11.0, *)) {
      if ([device supportsFeatureSet: MTLFeatureSet_tvOS_GPUFamily2_v1])
        [features addObject:"a10(ios 11)"];
      if ([device supportsFeatureSet: MTLFeatureSet_tvOS_GPUFamily1_v3])
        [features addObject:"a8(ios 11)"];
    }
    if (@available(iOS 10.0, *))
      if ([device supportsFeatureSet: MTLFeatureSet_tvOS_GPUFamily1_v2])
        [features addObject:"a8(ios 10)"];
    if (@available(iOS 9.0, *))
      if ([device supportsFeatureSet: MTLFeatureSet_tvOS_GPUFamily1_v1])
        [features addObject:"a8(ios 9)"];
#elif TARGET_OS_OSX
    if ([device supportsFeatureSet: MTLFeatureSet_macOS_ReadWriteTextureTier2])
      [features addObject:@"rw-texture"];
    if ([device supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily1_v1])
      [features addObject:@"metal-family1(macos10.11)"];
    if (@available(macOS 10.12, *))
      if ([device supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily1_v2])
        [features addObject:@"metal-family1(macos10.12)"];
    if (@available(macOS 10.13, *))
      if ([device supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily1_v3])
        [features addObject:@"metal-family1(macos10.13)"];
    if (@available(macOS 10.14, *)) {
      if ([device supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily1_v4])
        [features addObject:@"metal-family1(macos10.14)"];
      if ([device supportsFeatureSet: MTLFeatureSet_macOS_GPUFamily2_v1])
        [features addObject:@"metal-family2(macos10.14)"];
    }
#endif

    NSUInteger _thread_execution_width = 0;
    NSUInteger _max_total_threads_per_threadgroup = 0;

    NSError *error;

    dispatch_data_t data = dispatch_data_create(empty_mtllib, empty_mtllib_size, NULL, DISPATCH_DATA_DESTRUCTOR_DEFAULT);
    id<MTLLibrary> library = [device newLibraryWithData:data error:&error];

    if (error) {
      hwinfo_error("(HWInfo) Error occurs: %s", [[error localizedDescription] UTF8String]);
    } else {
      if (library) {
        id<MTLFunction> function = [library newFunctionWithName:@"empty"];
        id<MTLComputePipelineState> pipeline = [device newComputePipelineStateWithFunction:function error:&error];
        if (error) {
          hwinfo_error("(HWInfo) Error occurs: %s", [[error localizedDescription] UTF8String]);
        } else {
          _thread_execution_width = [pipeline threadExecutionWidth];
          _max_total_threads_per_threadgroup = [pipeline maxTotalThreadsPerThreadgroup];
        }
      } else {
        hwinfo_error("(HWInfo) Error loading shader library from data");
      }
    }

    const int FamilyCapsEnums = 16;
    char family_str[FamilyCapsEnums + 1] = "________________";
    if (@available(macOS 10.15, *)) {
      static MTLGPUFamily family[FamilyCapsEnums] = { MTLGPUFamilyCommon1, MTLGPUFamilyCommon2, MTLGPUFamilyCommon3, MTLGPUFamilyApple1, MTLGPUFamilyApple2, MTLGPUFamilyApple3, MTLGPUFamilyApple4, MTLGPUFamilyApple5, MTLGPUFamilyApple6, MTLGPUFamilyApple7, MTLGPUFamilyApple8, MTLGPUFamilyMac1, MTLGPUFamilyMac2, MTLGPUFamilyMacCatalyst1, MTLGPUFamilyMacCatalyst2, 0 };
      if (@available(macOS 13.0, *)) {
        family[FamilyCapsEnums - 1] = MTLGPUFamilyMetal3;
      }
      for (int f = 0; f < FamilyCapsEnums; ++f) {
        if (family[f] == 0) {
          family_str[f] = '?';
        } else if ([device supportsFamily:family[f]]) {
          family_str[f] = '+';
        } else {
          family_str[f] = ' ';
        }
      }
    }

    char _device_unified_memory_mark[2] = "?";
#if __MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_15
      if (@available(macOS 10.15, ios 11, *)) {
        *_device_unified_memory_mark = [device hasUnifiedMemory] ? '+' : '-';
      }
#endif
      char _device_is_removable[2] = "?";
      if (@available(macOS 10.13, *)) {
        *_device_is_removable = [device isRemovable] ? '+' : '-';
      }
    features_report = [features_report stringByAppendingString: [NSString stringWithFormat:
      @"%2u | %30s | %s %s %s %s |%16s|\n",
      (unsigned)[device locationNumber],
      [[device name] UTF8String],
      [device isLowPower] ? "+" : "-",
      _device_is_removable,
      [device isHeadless] ? "+" : "-",
      _device_unified_memory_mark,
      family_str]];

    [all_info addObject: @{
      @"name": [device name],
      @"location": @([device location]),
      @"peerGroupID": @([device peerGroupID]),
      @"peerCount": @([device peerCount]),
      @"peerIndex": @([device peerIndex]),
      @"registryID": @([device registryID]),
      @"isLowPower": @([device isLowPower]),
      @"isHeadless": @([device isHeadless]),
      @"isRemovable": @([device isRemovable]),
      @"isDeviceUnifiedMemory": @(_device_unified_memory),
      @"currentAllocatedMemorySize": @([device currentAllocatedSize]),
      @"maxTransferRate": @([device maxTransferRate]),
      @"maxThreadgroupMemoryLength": @([device maxThreadgroupMemoryLength]),
      @"maxThreadsPerThreadgroup": _max_threads_per_threadgroup,
      @"maxTotalThreadsPerThreadgroup": @(_max_total_threads_per_threadgroup),
      @"recommendedMaxWorkingSetSize": @([device recommendedMaxWorkingSetSize]),
      @"sparseTileSizeInBytes": @(_sparse_tile_size_in_bytes),
      @"threadExecutionWidth": @(_thread_execution_width),
      @"areProgrammableSamplePositionsSupported": @([device areProgrammableSamplePositionsSupported]),
      @"areRasterOrderGroupsSupported": @([device areRasterOrderGroupsSupported]),
      @"depth24Stencil8PixelFormatSupported": @([device isDepth24Stencil8PixelFormatSupported]),
      @"supports32BitMSAA": @(_supports_32bit_msaa),
      @"supports32BitFloatFiltering": @(_supports_32bit_float_filtering),
      @"supportsShaderBarycentricCoordinates": @([device supportsShaderBarycentricCoordinates]),
      @"supportsBCTextureCompression": @(_supports_bc_texture_compression),
      @"supportsFunctionPointers": @(_supports_function_pointers),
      @"supportsFunctionPointersFromRender": @(_supports_function_pointers_from_render),
      @"supportsPrimitiveMotionBlur": @(_supports_primitive_motion_blur),
      @"supportsRaytracing": @(_supports_raytracing),
      @"supportsRaytracingFromRender": @(_supports_raytracing_from_render),
      @"supportsQueryTextureLOD": @(_supports_query_texture_lod),
      @"supportsPullModelInterpolation": @(_supports_pull_model_interpolation),
      @"supportsFamily": family,
      @"supportsFeatureSet": features,
    }];
  }

  [all_info addObject: features_report];

  return [all_info copy];
}

static NSString* _get_storage_size_string(double value) {
  const NSArray *TokenArray = @[@"bytes", @"KB", @"MB", @"GB", @"TB", @"PB", @"EB", @"ZB", @"YB"];
  int multiply_factor = 0;
  while (value > 1024) {
    value /= 1024;
    multiply_factor++;
  }
  return [[NSString stringWithFormat:@"%4.1f %@", value, TokenArray[multiply_factor]] stringByReplacingOccurrencesOfString:@".0" withString:@""];
}

static NSString* _get_size_string(double value) {
  const NSArray *TokenArray = @[@"", @"k", @"m", @"g", @"t", @"p", @"e", @"z", @"y"];
  int multiply_factor = 0;
  while (value > 1000) {
    value /= 1000;
    multiply_factor++;
  }
  return [[NSString stringWithFormat:@"%4.1f%@", value, TokenArray[multiply_factor]] stringByReplacingOccurrencesOfString:@".0" withString:@""];
}

static NSString* _get_time_duration_string(double value) {
  static const struct typelen_t {
    const char *type;
    uint64_t length;
  } TokenArray[] = {
    { "ags", 1000*365*24*60*60L },
    { "cen", 100*365*24*60*60L },
    { "yrs", 365*24*60*60L },
    { "wks", 7*24*60*60L },
    { "dys", 24*60*60L },
    { "hor", 60*60L },
    { "min", 60L },
    { "sec", 1L },
  };
  if (value < 1) {
    return [[NSString stringWithFormat:@"%3.1f sec", value] stringByReplacingOccurrencesOfString:@".0" withString:@""];
  } else {
    int factor = 0;
    while (value < TokenArray[factor].length) {
      factor++;
    }
    return [[NSString stringWithFormat:@"%3.1f %s", value / TokenArray[factor].length, TokenArray[factor].type] stringByReplacingOccurrencesOfString:@".0" withString:@""];
  }
}

NSString *get_all_metal_report() {
      const NSArray *PropsList = @[@"name", @"location", @"peerGroupID", @"peerCount", @"peerIndex", @"registryID", @"isLowPower", @"isHeadless", @"isRemovable", @"isDeviceUnifiedMemory", @"currentAllocatedMemorySize", @"maxTransferRate", @"maxThreadgroupMemoryLength", @"maxThreadsPerThreadgroup", @"maxTotalThreadsPerThreadgroup", @"recommendedMaxWorkingSetSize", @"sparseTileSizeInBytes", @"threadExecutionWidth",  @"areProgrammableSamplePositionsSupported", @"areRasterOrderGroupsSupported", @"depth24Stencil8PixelFormatSupported", @"supports32BitMSAA", @"supports32BitFloatFiltering", @"supportsShaderBarycentricCoordinates", @"supportsBCTextureCompression", @"supportsFunctionPointers", @"supportsFunctionPointersFromRender", @"supportsPrimitiveMotionBlur", @"supportsRaytracing", @"supportsRaytracingFromRender", @"supportsQueryTextureLOD", @"supportsPullModelInterpolation", @"supportsFamily", @"supportsFeatureSet"];

      NSArray *metal_info = get_all_metal_info();
      NSString *out =
        @"Extended GPU device details report:\n"
        @"===================================\n";
      for (id e in metal_info) {
        if ([e isKindOfClass:[NSDictionary class]]) {
          NSDictionary *gpu = e;
          for (NSString *p in PropsList) {
            if ([p isEqualToString:@"currentAllocatedMemorySize"]) {
              out = [out stringByAppendingFormat:@"%@: %@ (%@)\n", p, _get_storage_size_string([gpu[p] doubleValue]), gpu[p]];
            } else if ([p isEqualToString:@"areProgrammableSamplePositionsSupported"] || [p isEqualToString:@"areRasterOrderGroupsSupported"]) {
              out = [out stringByAppendingFormat:@"%@: %@\n", p, [gpu[p] boolValue] ? @"yes" : @"no"];
            } else if ([p isEqualToString:@"supportsFamily"] || [p isEqualToString:@"supportsFeatureSet"]) {
              out = [out stringByAppendingFormat:@"%@: %@\n", [p substringFromIndex:[@"supports" length]], [gpu[p] componentsJoinedByString:@","]];
            } else if ([p hasPrefix:@"supports"]) {
              out = [out stringByAppendingFormat:@"%@ %@\n", [gpu[p] boolValue] ? @"[x]" : @"[-]", [p substringFromIndex:[@"supports" length]]];
            } else if ([p hasPrefix:@"is"]) {
              out = [out stringByAppendingFormat:@"%@ %@\n", [gpu[p] boolValue] ? @"[x]" : @"[-]", [p substringFromIndex:[@"is" length]]];
            } else {
              out = [out stringByAppendingFormat:@"%@: %@\n", p, gpu[p]];
            }
          }
        } else if ([e isKindOfClass:[NSString class]]) {
          out = [out stringByAppendingString: e];
        }
      }
      return out;
}

/// Processes summary

// Returns a list of all BSD processes on the system.  This routine
// allocates the list and puts it in *proc_list and a count of the
// number of entries in *proc_count.  You are responsible for freeing
// this list (use "free" from System framework).
// On success, the function returns 0.
// On error, the function returns a BSD errno value.

typedef struct kinfo_proc kinfo_proc;

static int _get_bsd_process_list(kinfo_proc **proc_list, size_t *proc_count) {
  if (proc_list == NULL || *proc_list != NULL || proc_count == NULL) {
    return EINVAL;
  }

  int err;
  kinfo_proc *result;
  BOOL done;
  static int mib[] = { CTL_KERN, KERN_PROC, KERN_PROC_ALL };
  size_t length;

  *proc_count = 0;

  // We start by calling sysctl with result == NULL and length == 0.
  // That will succeed, and set length to the appropriate length.
  // We then allocate a buffer of that size and call sysctl again
  // with that buffer.  If that succeeds, we're done.  If that fails
  // with ENOMEM, we have to throw away our buffer and loop.  Note
  // that the loop causes use to call sysctl with NULL again; this
  // is necessary because the ENOMEM failure case sets length to
  // the amount of data returned, not the amount of data that
  // could have been returned.

  result = NULL;
  done = false;

  int lim = 8;  // some limit
  do {
    if (result != NULL) {
      break; // err
    }
    length = 0;
    err = sysctl(mib, 3, NULL, &length, NULL, 0); // call sysctl with a NULL buffer.
    if (err == -1) {
      err = errno;
    }
    if (err == 0) { // allocate an appropriately sized buffer based on the results from the previous call.
      result = malloc(length);
      if (result == NULL) {
        err = ENOMEM;
      }
    }
    // call sysctl again with the new buffer.  If we get an ENOMEM
    // error, toss away our buffer and start again.
    if (err == 0) {
      err = sysctl(mib, 3, result, &length, NULL, 0);

      if (err == -1) {
        err = errno;
      }
      if (err == 0) {
        done = true;
      } else if (err == ENOMEM) { // again
        free(result);
        result = NULL;
        err = 0;
      }
    }
  } while (err == 0 && !done);

  if (lim-- > 0 && err != 0 && result != NULL) { // clean up and establish post conditions.
    free(result);
    result = NULL;
  }

  *proc_list = result;

  if (err == 0) {
    *proc_count = length / sizeof(kinfo_proc);
  }

  return err;
}

struct mach_timebase_info MACH_TIMEBASE_INFO;

NSString* get_processes_report(int *error) {
  mach_timebase_info(&MACH_TIMEBASE_INFO);

  kinfo_proc *prc_list = NULL;
  size_t prc_count = 0;
  int err = _get_bsd_process_list(&prc_list, &prc_count);
  if (error) {
    *error = err;
  }

  NSString *report_fmt =
    @"| %5u | %s%s | %8s | %8s | %8s | %8s | %6s | %7u | %5u | %7s |\n";
  NSString *report_fmt_basic =
    @"| %5u | %s%s |          |          |          |          |        |         |       |         |\n";
  NSString *report =
    @"Extended process details report:\n"
    @"================================\n"
    @"| Pid   | Name                     | CPU usr  | CPU sys  | RSS      | VMS      | Faults | Pageins | Thrds | Ctx swi |\n"
    @"+-------+--------------------------+----------+----------+----------+----------+--------+---------+-------+---------+\n";

  if (prc_count) {
    procid_t *proc_data = (procid_t*)malloc(sizeof(procid_t) * prc_count);
    treeinfo_t *tree_info = (treeinfo_t*)malloc(sizeof(treeinfo_t) * prc_count);

    for(int k = 0; k < prc_count; k++) {
      const kinfo_proc *proc = &prc_list[k];
      proc_data[k] = (procid_t){ proc->kp_proc.p_pid, proc->kp_eproc.e_ppid };
    }
    const bool with_tree = get_tree_descr_from_data(proc_data, tree_info, prc_count);

    const int NAME_COL_SIZE = 24;

    for(int k = 0; k < prc_count; k++) {
      const kinfo_proc *proc = &prc_list[tree_info[k].index];

      const char *label = tree_info[k].label;
      NSString *proc_comm = [[NSString stringWithCString: proc->kp_proc.p_comm encoding: NSUTF8StringEncoding] stringByPaddingToLength:(NAME_COL_SIZE - strlen(label)) withString:@" " startingAtIndex:0];

      struct proc_taskinfo pti;
      int ret = proc_pidinfo(proc->kp_proc.p_pid, PROC_PIDTASKINFO, 0, &pti, sizeof(pti));
      if (ret <= 0 || (size_t)ret < sizeof(pti)) {
        if (with_tree) {
          report = [report stringByAppendingString: [NSString stringWithFormat:
            report_fmt_basic,
            proc->kp_proc.p_pid,
            label,
            [proc_comm UTF8String]
          ]]; // limited report
        }
        continue;
      }

      const uint64_t total_user = (pti.pti_total_user * MACH_TIMEBASE_INFO.numer) / MACH_TIMEBASE_INFO.denom;
      const uint64_t total_system = (pti.pti_total_system * MACH_TIMEBASE_INFO.numer) / MACH_TIMEBASE_INFO.denom;

      report = [report stringByAppendingString: [NSString stringWithFormat:
        report_fmt,
        proc->kp_proc.p_pid,
        label,
        [proc_comm UTF8String],
        [_get_time_duration_string(total_user / 1000000000.0) UTF8String], // (float) cpu user time
        [_get_time_duration_string(total_system / 1000000000.0) UTF8String], // (float) cpu sys time
        // Note about memory: determining other mem stats on macOS is a mess:
        // http://www.opensource.apple.com/source/top/top-67/libtop.c?txt
        // I just give up.
        // struct proc_regioninfo pri;
        // psutil_proc_pidinfo(pid, PROC_PIDREGIONINFO, 0, &pri, sizeof(pri))
        [_get_storage_size_string(pti.pti_resident_size) UTF8String], // (uns long long) rss
        [_get_storage_size_string(pti.pti_virtual_size) UTF8String], // (uns long long) vms
        [_get_size_string(pti.pti_faults) UTF8String], // (uns long) number of page faults (pages)
        pti.pti_pageins, // (uns long) number of actual pageins (pages)
        pti.pti_threadnum, // (uns long) num threads
        // Unvoluntary value seems not to be available;
        // pti.pti_csw probably refers to the sum of the two;
        // getrusage() numbers seems to confirm this theory.
        [_get_size_string(pti.pti_csw) UTF8String] // (uns long) voluntary ctx switches
      ]];
    }

    free(proc_data);
    free(tree_info);
  }

  free(prc_list);
  return report;
}

// Embedded data

#if TARGET_OS_OSX
static unsigned char empty_mtllib[] = {
    0x4d,0x54,0x4c,0x42,0x01,0x80,0x02,0x00,0x07,0x00,0x00,0x81,0x0d,0x00,
    0x00,0x00,0x1b,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xdb,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0xe3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0xeb,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0a,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0x4e,0x41,
    0x4d,0x45,0x06,0x00,0x65,0x6d,0x70,0x74,0x79,0x00,0x54,0x59,0x50,0x45,
    0x01,0x00,0x02,0x48,0x41,0x53,0x48,0x20,0x00,0x0e,0x54,0xec,0x6f,0x99,
    0xc9,0xe6,0x05,0xbf,0x42,0x58,0xa9,0x96,0x0d,0x27,0x07,0x39,0x32,0xaf,
    0x7b,0x8e,0x9e,0xbc,0xac,0xbb,0x54,0x40,0x42,0x98,0x55,0x8f,0xcf,0x4d,
    0x44,0x53,0x5a,0x08,0x00,0x30,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x4f,
    0x46,0x46,0x54,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x56,0x45,0x52,0x53,0x08,0x00,0x02,0x00,0x05,0x00,0x03,0x00,0x00,
    0x00,0x45,0x4e,0x44,0x54,0x45,0x4e,0x44,0x54,0x04,0x00,0x00,0x00,0x45,
    0x4e,0x44,0x54,0x04,0x00,0x00,0x00,0x45,0x4e,0x44,0x54,0xde,0xc0,0x17,
    0x0b,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x18,0x0a,0x00,0x00,0xff,
    0xff,0xff,0xff,0x42,0x43,0xc0,0xde,0x35,0x14,0x00,0x00,0x03,0x00,0x00,
    0x00,0x62,0x0c,0x30,0x24,0x80,0x10,0x05,0xc8,0x14,0x00,0x00,0x00,0x21,
    0x0c,0x00,0x00,0x50,0x02,0x00,0x00,0x0b,0x02,0x21,0x00,0x02,0x00,0x00,
    0x00,0x13,0x00,0x00,0x00,0x07,0x81,0x23,0x91,0x41,0xc8,0x04,0x49,0x06,
    0x10,0x32,0x39,0x92,0x01,0x84,0x0c,0x25,0x05,0x08,0x19,0x1e,0x04,0x8b,
    0x62,0x80,0x0c,0x45,0x02,0x42,0x92,0x0b,0x42,0x64,0x10,0x32,0x14,0x38,
    0x08,0x18,0x4b,0x0a,0x32,0x32,0x88,0x48,0x90,0x14,0x20,0x43,0x46,0x88,
    0xa5,0x00,0x19,0x32,0x42,0x04,0x49,0x0e,0x90,0x91,0x21,0xc4,0x50,0x41,
    0x51,0x81,0x8c,0xe1,0x83,0xe5,0x8a,0x04,0x19,0x46,0x06,0x89,0x20,0x00,
    0x00,0x0b,0x00,0x00,0x00,0x32,0x22,0xc8,0x08,0x20,0x64,0x85,0x04,0x93,
    0x21,0xa4,0x84,0x04,0x93,0x21,0xe3,0x84,0xa1,0x90,0x14,0x12,0x4c,0x86,
    0x8c,0x0b,0x84,0x64,0x4c,0x10,0x18,0x23,0x00,0x25,0x00,0x65,0x20,0x60,
    0x8e,0x00,0x0c,0x52,0x80,0x00,0x00,0x51,0x18,0x00,0x00,0x80,0x00,0x00,
    0x00,0x1b,0xcc,0x25,0xf8,0xff,0xff,0xff,0xff,0x01,0x80,0x03,0x40,0x02,
    0x28,0x62,0x1c,0xde,0x41,0x1e,0xe4,0xa1,0x1c,0xc6,0x81,0x1e,0xd8,0x21,
    0x1f,0xda,0x40,0x1e,0xde,0xa1,0x1e,0xdc,0x81,0x1c,0xca,0x81,0x1c,0xda,
    0x80,0x1c,0xd2,0xc1,0x1e,0xd2,0x81,0x1c,0xca,0xa1,0x0d,0xe6,0x21,0x1e,
    0xe4,0x81,0x1e,0xda,0xc0,0x1c,0xe0,0xa1,0x0d,0xda,0x21,0x1c,0xe8,0x01,
    0x1d,0x00,0x73,0x08,0x07,0x76,0x98,0x87,0x72,0x00,0x08,0x72,0x48,0x87,
    0x79,0x08,0x07,0x71,0x60,0x87,0x72,0x68,0x03,0x7a,0x08,0x87,0x74,0x60,
    0x87,0x36,0x18,0x87,0x70,0x60,0x07,0x76,0x98,0x07,0xc0,0x1c,0xc2,0x81,
    0x1d,0xe6,0xa1,0x1c,0x00,0x82,0x1d,0xca,0x61,0x1e,0xe6,0xa1,0x0d,0xe0,
    0x41,0x1e,0xca,0x61,0x1c,0xd2,0x61,0x1e,0xca,0xa1,0x0d,0xcc,0x01,0x1e,
    0xda,0x21,0x1c,0xc8,0x01,0x30,0x87,0x70,0x60,0x87,0x79,0x28,0x07,0x80,
    0x70,0x87,0x77,0x68,0x03,0x73,0x90,0x87,0x70,0x68,0x87,0x72,0x68,0x03,
    0x78,0x78,0x87,0x74,0x70,0x07,0x7a,0x28,0x07,0x79,0x68,0x83,0x72,0x60,
    0x87,0x74,0x68,0x07,0x80,0x1e,0xe4,0xa1,0x1e,0xca,0x01,0x18,0xdc,0xe1,
    0x1d,0xda,0xc0,0x1c,0xe4,0x21,0x1c,0xda,0xa1,0x1c,0xda,0x00,0x1e,0xde,
    0x21,0x1d,0xdc,0x81,0x1e,0xca,0x41,0x1e,0xda,0xa0,0x1c,0xd8,0x21,0x1d,
    0xda,0xa1,0x0d,0xdc,0xe1,0x1d,0xdc,0xa1,0x0d,0xd8,0xa1,0x1c,0xc2,0xc1,
    0x1c,0x00,0xc2,0x1d,0xde,0xa1,0x0d,0xd2,0xc1,0x1d,0xcc,0x61,0x1e,0xda,
    0xc0,0x1c,0xe0,0xa1,0x0d,0xda,0x21,0x1c,0xe8,0x01,0x1d,0x00,0x7a,0x90,
    0x87,0x7a,0x28,0x07,0x80,0x70,0x87,0x77,0x68,0x03,0x75,0xa8,0x87,0x76,
    0x80,0x87,0x36,0xa0,0x87,0x70,0x10,0x07,0x76,0x28,0x87,0x79,0x00,0xcc,
    0x21,0x1c,0xd8,0x61,0x1e,0xca,0x01,0x20,0xdc,0xe1,0x1d,0xda,0xc0,0x1d,
    0xc2,0xc1,0x1d,0xe6,0xa1,0x0d,0xcc,0x01,0x1e,0xda,0xa0,0x1d,0xc2,0x81,
    0x1e,0xd0,0x01,0xa0,0x07,0x79,0xa8,0x87,0x72,0x00,0x08,0x77,0x78,0x87,
    0x36,0x98,0x87,0x74,0x38,0x07,0x77,0x28,0x07,0x72,0x68,0x03,0x7d,0x28,
    0x07,0x79,0x78,0x87,0x79,0x68,0x03,0x73,0x80,0x87,0x36,0x68,0x87,0x70,
    0xa0,0x07,0x74,0x00,0xe8,0x41,0x1e,0xea,0xa1,0x1c,0x00,0xc2,0x1d,0xde,
    0xa1,0x0d,0xe8,0x41,0x1e,0xc2,0x01,0x1e,0xe0,0x21,0x1d,0xdc,0xe1,0x1c,
    0xda,0xa0,0x1d,0xc2,0x81,0x1e,0xd0,0x01,0xa0,0x07,0x79,0xa8,0x87,0x72,
    0x00,0x88,0x79,0xa0,0x87,0x70,0x18,0x87,0x75,0x68,0x03,0x78,0x90,0x87,
    0x77,0xa0,0x87,0x72,0x18,0x07,0x7a,0x78,0x07,0x79,0x68,0x03,0x71,0xa8,
    0x07,0x73,0x30,0x87,0x72,0x90,0x87,0x36,0x98,0x87,0x74,0xd0,0x87,0x72,
    0x00,0xf0,0x00,0x20,0xea,0xc1,0x1d,0xe6,0x21,0x1c,0xcc,0xa1,0x1c,0xda,
    0xc0,0x1c,0xe0,0xa1,0x0d,0xda,0x21,0x1c,0xe8,0x01,0x1d,0x00,0x7a,0x90,
    0x87,0x7a,0x28,0x07,0x80,0xa8,0x87,0x79,0x28,0x87,0x36,0x98,0x87,0x77,
    0x30,0x07,0x7a,0x68,0x03,0x73,0x60,0x87,0x77,0x08,0x07,0x7a,0x00,0xcc,
    0x21,0x1c,0xd8,0x61,0x1e,0xca,0x01,0x00,0x00,0x49,0x18,0x00,0x00,0x01,
    0x00,0x00,0x00,0x13,0x82,0x00,0x00,0x13,0xb0,0x70,0x48,0x07,0x79,0xb0,
    0x03,0x3a,0x68,0x83,0x70,0x80,0x07,0x78,0x60,0x87,0x72,0x68,0x83,0x76,
    0x08,0x87,0x71,0x78,0x87,0x79,0xc0,0x87,0x38,0x98,0x03,0x37,0x80,0x03,
    0x37,0x80,0x83,0x0d,0xb7,0x51,0x0e,0x6d,0x00,0x0f,0x7a,0x60,0x07,0x74,
    0xa0,0x07,0x76,0x40,0x07,0x7a,0x60,0x07,0x74,0xd0,0x06,0xe9,0x10,0x07,
    0x7a,0x80,0x07,0x7a,0x80,0x07,0x6d,0x90,0x0e,0x78,0xa0,0x07,0x78,0xa0,
    0x07,0x78,0xd0,0x06,0xe9,0x10,0x07,0x76,0xa0,0x07,0x71,0x60,0x07,0x7a,
    0x10,0x07,0x76,0xd0,0x06,0xe9,0x30,0x07,0x72,0xa0,0x07,0x73,0x20,0x07,
    0x7a,0x30,0x07,0x72,0xd0,0x06,0xe9,0x60,0x07,0x74,0xa0,0x07,0x76,0x40,
    0x07,0x7a,0x60,0x07,0x74,0xd0,0x06,0xe6,0x30,0x07,0x72,0xa0,0x07,0x73,
    0x20,0x07,0x7a,0x30,0x07,0x72,0xd0,0x06,0xe6,0x60,0x07,0x74,0xa0,0x07,
    0x76,0x40,0x07,0x7a,0x60,0x07,0x74,0xd0,0x06,0xf6,0x10,0x07,0x76,0xa0,
    0x07,0x71,0x60,0x07,0x7a,0x10,0x07,0x76,0xd0,0x06,0xf6,0x20,0x07,0x74,
    0xa0,0x07,0x73,0x20,0x07,0x7a,0x30,0x07,0x72,0xd0,0x06,0xf6,0x30,0x07,
    0x72,0xa0,0x07,0x73,0x20,0x07,0x7a,0x30,0x07,0x72,0xd0,0x06,0xf6,0x40,
    0x07,0x78,0xa0,0x07,0x76,0x40,0x07,0x7a,0x60,0x07,0x74,0xd0,0x06,0xf6,
    0x60,0x07,0x74,0xa0,0x07,0x76,0x40,0x07,0x7a,0x60,0x07,0x74,0xd0,0x06,
    0xf6,0x90,0x07,0x76,0xa0,0x07,0x71,0x20,0x07,0x78,0xa0,0x07,0x71,0x20,
    0x07,0x78,0xd0,0x06,0xf6,0x10,0x07,0x72,0x80,0x07,0x7a,0x10,0x07,0x72,
    0x80,0x07,0x7a,0x10,0x07,0x72,0x80,0x07,0x6d,0x60,0x0f,0x71,0x90,0x07,
    0x72,0xa0,0x07,0x72,0x50,0x07,0x76,0xa0,0x07,0x72,0x50,0x07,0x76,0xd0,
    0x06,0xf6,0x20,0x07,0x75,0x60,0x07,0x7a,0x20,0x07,0x75,0x60,0x07,0x7a,
    0x20,0x07,0x75,0x60,0x07,0x6d,0x60,0x0f,0x75,0x10,0x07,0x72,0xa0,0x07,
    0x75,0x10,0x07,0x72,0xa0,0x07,0x75,0x10,0x07,0x72,0xd0,0x06,0xf6,0x10,
    0x07,0x70,0x20,0x07,0x74,0xa0,0x07,0x71,0x00,0x07,0x72,0x40,0x07,0x7a,
    0x10,0x07,0x70,0x20,0x07,0x74,0xd0,0x06,0xee,0x80,0x07,0x7a,0x10,0x07,
    0x76,0xa0,0x07,0x73,0x20,0x07,0x1a,0x21,0x0c,0x59,0x10,0xcc,0x33,0x61,
    0x43,0x24,0xa0,0x08,0x00,0x00,0x08,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x00,0x90,0xd8,0x20,0x50,0x54,0x4a,0x00,0x00,0x20,0x0b,0x04,0x00,0x00,
    0x00,0x0a,0x00,0x00,0x00,0x32,0x1e,0x98,0x10,0x19,0x11,0x4c,0x90,0x8c,
    0x09,0x26,0x47,0xc6,0x04,0x43,0x62,0x11,0x94,0x40,0x21,0x94,0x43,0xf9,
    0x14,0xa0,0x40,0x41,0x14,0x48,0x29,0x8c,0x00,0x94,0x01,0x75,0x2c,0xa1,
    0x19,0x00,0x00,0xb1,0x18,0x00,0x00,0x7b,0x00,0x00,0x00,0x33,0x08,0x80,
    0x1c,0xc4,0xe1,0x1c,0x66,0x14,0x01,0x3d,0x88,0x43,0x38,0x84,0xc3,0x8c,
    0x42,0x80,0x07,0x79,0x78,0x07,0x73,0x98,0x71,0x0c,0xe6,0x00,0x0f,0xed,
    0x10,0x0e,0xf4,0x80,0x0e,0x33,0x0c,0x42,0x1e,0xc2,0xc1,0x1d,0xce,0xa1,
    0x1c,0x66,0x30,0x05,0x3d,0x88,0x43,0x38,0x84,0x83,0x1b,0xcc,0x03,0x3d,
    0xc8,0x43,0x3d,0x8c,0x03,0x3d,0xcc,0x78,0x8c,0x74,0x70,0x07,0x7b,0x08,
    0x07,0x79,0x48,0x87,0x70,0x70,0x07,0x7a,0x70,0x03,0x76,0x78,0x87,0x70,
    0x20,0x87,0x19,0xcc,0x11,0x0e,0xec,0x90,0x0e,0xe1,0x30,0x0f,0x6e,0x30,
    0x0f,0xe3,0xf0,0x0e,0xf0,0x50,0x0e,0x33,0x10,0xc4,0x1d,0xde,0x21,0x1c,
    0xd8,0x21,0x1d,0xc2,0x61,0x1e,0x66,0x30,0x89,0x3b,0xbc,0x83,0x3b,0xd0,
    0x43,0x39,0xb4,0x03,0x3c,0xbc,0x83,0x3c,0x84,0x03,0x3b,0xcc,0xf0,0x14,
    0x76,0x60,0x07,0x7b,0x68,0x07,0x37,0x68,0x87,0x72,0x68,0x07,0x37,0x80,
    0x87,0x70,0x90,0x87,0x70,0x60,0x07,0x76,0x28,0x07,0x76,0xf8,0x05,0x76,
    0x78,0x87,0x77,0x80,0x87,0x5f,0x08,0x87,0x71,0x18,0x87,0x72,0x98,0x87,
    0x79,0x98,0x81,0x2c,0xee,0xf0,0x0e,0xee,0xe0,0x0e,0xf5,0xc0,0x0e,0xec,
    0x30,0x03,0x62,0xc8,0xa1,0x1c,0xe4,0xa1,0x1c,0xcc,0xa1,0x1c,0xe4,0xa1,
    0x1c,0xdc,0x61,0x1c,0xca,0x21,0x1c,0xc4,0x81,0x1d,0xca,0x61,0x06,0xd6,
    0x90,0x43,0x39,0xc8,0x43,0x39,0x98,0x43,0x39,0xc8,0x43,0x39,0xb8,0xc3,
    0x38,0x94,0x43,0x38,0x88,0x03,0x3b,0x94,0xc3,0x2f,0xbc,0x83,0x3c,0xfc,
    0x82,0x3b,0xd4,0x03,0x3b,0xb0,0xc3,0x0c,0xc7,0x69,0x87,0x70,0x58,0x87,
    0x72,0x70,0x83,0x74,0x68,0x07,0x78,0x60,0x87,0x74,0x18,0x87,0x74,0xa0,
    0x87,0x19,0xce,0x53,0x0f,0xee,0x00,0x0f,0xf2,0x50,0x0e,0xe4,0x90,0x0e,
    0xe3,0x40,0x0f,0xe1,0x20,0x0e,0xec,0x50,0x0e,0x33,0x20,0x28,0x1d,0xdc,
    0xc1,0x1e,0xc2,0x41,0x1e,0xd2,0x21,0x1c,0xdc,0x81,0x1e,0xdc,0xe0,0x1c,
    0xe4,0xe1,0x1d,0xea,0x01,0x1e,0x66,0x18,0x51,0x38,0xb0,0x43,0x3a,0x9c,
    0x83,0x3b,0xcc,0x50,0x24,0x76,0x60,0x07,0x7b,0x68,0x07,0x37,0x60,0x87,
    0x77,0x78,0x07,0x78,0x98,0x51,0x4c,0xf4,0x90,0x0f,0xf0,0x50,0x0e,0x33,
    0x1e,0x6a,0x1e,0xca,0x61,0x1c,0xe8,0x21,0x1d,0xde,0xc1,0x1d,0x7e,0x01,
    0x1e,0xe4,0xa1,0x1c,0xcc,0x21,0x1d,0xf0,0x61,0x06,0x54,0x85,0x83,0x38,
    0xcc,0xc3,0x3b,0xb0,0x43,0x3d,0xd0,0x43,0x39,0xfc,0xc2,0x3c,0xe4,0x43,
    0x3b,0x88,0xc3,0x3b,0xb0,0xc3,0x8c,0xc5,0x0a,0x87,0x79,0x98,0x87,0x77,
    0x18,0x87,0x74,0x08,0x07,0x7a,0x28,0x07,0x72,0x98,0x81,0x5c,0xe3,0x10,
    0x0e,0xec,0xc0,0x0e,0xe5,0x50,0x0e,0xf3,0x30,0x23,0xc1,0xd2,0x41,0x1e,
    0xe4,0xe1,0x17,0xd8,0xe1,0x1d,0xde,0x01,0x1e,0x66,0x50,0x59,0x38,0xa4,
    0x83,0x3c,0xb8,0x81,0x39,0xd4,0x83,0x3b,0x8c,0x03,0x3d,0xa4,0xc3,0x3b,
    0xb8,0xc3,0x2f,0x9c,0x83,0x3c,0xbc,0x43,0x3d,0xc0,0xc3,0x3c,0x00,0x79,
    0x20,0x00,0x00,0x9c,0x00,0x00,0x00,0x62,0x1e,0x48,0x20,0x43,0x88,0x0c,
    0x19,0x39,0x19,0x24,0x90,0x91,0x40,0xc6,0xc8,0xc8,0x68,0x22,0x50,0x08,
    0x14,0x32,0x9e,0x18,0x19,0x21,0x47,0xc8,0x90,0x51,0x6c,0x18,0x3c,0x01,
    0x00,0x8b,0x62,0x61,0x1b,0xb4,0x41,0x73,0x50,0x6c,0x1c,0x19,0x00,0x53,
    0x44,0x4b,0x20,0x56,0x65,0x72,0x73,0x69,0x6f,0x6e,0x77,0x63,0x68,0x61,
    0x72,0x5f,0x73,0x69,0x7a,0x65,0x61,0x69,0x72,0x2e,0x6d,0x61,0x78,0x5f,
    0x64,0x65,0x76,0x69,0x63,0x65,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x73,
    0x61,0x69,0x72,0x2e,0x6d,0x61,0x78,0x5f,0x63,0x6f,0x6e,0x73,0x74,0x61,
    0x6e,0x74,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x73,0x61,0x69,0x72,0x2e,
    0x6d,0x61,0x78,0x5f,0x74,0x68,0x72,0x65,0x61,0x64,0x67,0x72,0x6f,0x75,
    0x70,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x73,0x61,0x69,0x72,0x2e,0x6d,
    0x61,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x73,0x61,0x69,0x72,
    0x2e,0x6d,0x61,0x78,0x5f,0x72,0x65,0x61,0x64,0x5f,0x77,0x72,0x69,0x74,
    0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x73,0x61,0x69,0x72,0x2e,
    0x6d,0x61,0x78,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x73,0x41,0x70,
    0x70,0x6c,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x20,0x76,0x65,0x72,0x73,
    0x69,0x6f,0x6e,0x20,0x33,0x31,0x30,0x30,0x31,0x2e,0x37,0x32,0x30,0x20,
    0x28,0x6d,0x65,0x74,0x61,0x6c,0x66,0x65,0x2d,0x33,0x31,0x30,0x30,0x31,
    0x2e,0x37,0x32,0x30,0x2e,0x33,0x29,0x4d,0x65,0x74,0x61,0x6c,0x61,0x69,
    0x72,0x2e,0x63,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x2e,0x64,0x65,0x6e,0x6f,
    0x72,0x6d,0x73,0x5f,0x64,0x69,0x73,0x61,0x62,0x6c,0x65,0x61,0x69,0x72,
    0x2e,0x63,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x2e,0x66,0x61,0x73,0x74,0x5f,
    0x6d,0x61,0x74,0x68,0x5f,0x65,0x6e,0x61,0x62,0x6c,0x65,0x61,0x69,0x72,
    0x2e,0x63,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x2e,0x66,0x72,0x61,0x6d,0x65,
    0x62,0x75,0x66,0x66,0x65,0x72,0x5f,0x66,0x65,0x74,0x63,0x68,0x5f,0x65,
    0x6e,0x61,0x62,0x6c,0x65,0xc6,0x35,0x00,0x00,0x00,0x00,0x00,0x00,0x30,
    0x82,0x40,0x04,0x23,0x08,0x05,0x33,0x82,0x40,0x08,0x23,0x08,0xc4,0x30,
    0x82,0x40,0x10,0x23,0x08,0x44,0x31,0x82,0x40,0x18,0x23,0x08,0xc4,0x31,
    0x82,0x40,0x20,0x23,0x08,0x44,0x32,0x82,0x40,0x28,0x23,0x08,0xc4,0x32,
    0x82,0x20,0x00,0x33,0x0c,0x4e,0xf0,0xcc,0x30,0x40,0x42,0x34,0xc3,0x20,
    0x0d,0xd3,0x0c,0x83,0x44,0x4c,0x33,0x0c,0x52,0x31,0xcd,0x30,0x48,0x06,
    0x35,0xc3,0x20,0x1d,0xd5,0x0c,0x83,0x84,0x58,0x33,0x04,0xc9,0x0c,0x83,
    0x73,0x61,0x33,0x10,0x4a,0x86,0x61,0x33,0x04,0xcb,0x0c,0x01,0x33,0x43,
    0xd0,0xcc,0x00,0xcc,0x30,0x68,0x69,0x90,0x06,0xd7,0x01,0x1c,0xc7,0x71,
    0x1c,0xc7,0x71,0x1c,0xc7,0x71,0x9c,0x18,0x88,0x81,0x18,0x88,0x81,0x18,
    0x88,0x81,0x18,0x88,0x81,0x25,0x06,0x68,0x60,0x59,0x16,0x24,0x23,0x81,
    0x09,0xca,0x88,0x8d,0xcd,0xae,0xcd,0xa5,0xed,0x8d,0xac,0x8e,0xad,0xcc,
    0xc5,0x8c,0x2d,0xec,0x6c,0x6e,0x14,0x44,0xdb,0xb8,0xce,0xfb,0xc0,0x20,
    0x0c,0x52,0x61,0x63,0xb3,0x6b,0x73,0x49,0x23,0x2b,0x73,0xa3,0x1b,0x25,
    0x10,0x83,0x5c,0xc2,0xd2,0xe4,0x5c,0xec,0xca,0xe4,0xe6,0xd2,0xde,0xdc,
    0x46,0x09,0xc6,0x20,0xa9,0xb0,0x34,0x39,0x17,0xb6,0x30,0xb7,0xb3,0xba,
    0xb0,0xb3,0xb2,0x2f,0xbb,0x32,0xb9,0xb9,0xb4,0x37,0xb7,0x51,0x02,0x32,
    0xc8,0x29,0x2c,0x4d,0xce,0x65,0xec,0xad,0x0d,0x2e,0x8d,0xad,0xec,0xeb,
    0x0d,0x8e,0x2e,0xed,0xcd,0x6d,0x6e,0x94,0xa1,0x0c,0xcc,0xe0,0x0c,0x52,
    0x09,0x4b,0x93,0x73,0x59,0x2b,0x93,0x73,0x2b,0x63,0x1b,0x25,0x48,0x03,
    0x00,0xa9,0x18,0x00,0x00,0x0b,0x00,0x00,0x00,0x0b,0x0a,0x72,0x28,0x87,
    0x77,0x80,0x07,0x7a,0x58,0x70,0x98,0x43,0x3d,0xb8,0xc3,0x38,0xb0,0x43,
    0x39,0xd0,0xc3,0x82,0xe6,0x1c,0xc6,0xa1,0x0d,0xe8,0x41,0x1e,0xc2,0xc1,
    0x1d,0xe6,0x21,0x1d,0xe8,0x21,0x1d,0xde,0xc1,0x1d,0x00,0xd1,0x10,0x00,
    0x00,0x06,0x00,0x00,0x00,0x07,0xcc,0x3c,0xa4,0x83,0x3b,0x9c,0x03,0x3b,
    0x94,0x03,0x3d,0xa0,0x83,0x3c,0x94,0x43,0x38,0x90,0xc3,0x01,0x00,0x00,
    0x00,0x61,0x20,0x00,0x00,0x01,0x00,0x00,0x00,0x13,0x04,0x01,0x02,0x71,
    0x20,0x00,0x00,0x03,0x00,0x00,0x00,0x32,0x0e,0x10,0x22,0x84,0x00,0xcf,
    0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x65,0x0c,0x00,0x00,0x1d,
    0x00,0x00,0x00,0x12,0x03,0x94,0xe8,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
    0x00,0x05,0x00,0x00,0x00,0x0b,0x00,0x00,0x00,0x44,0x00,0x00,0x00,0x01,
    0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x50,0x00,0x00,
    0x00,0x01,0x00,0x00,0x00,0x68,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,
    0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,
    0x00,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,
    0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x5d,0x0c,0x00,0x00,0x0d,0x00,0x00,
    0x00,0x12,0x03,0x94,0x68,0x00,0x00,0x00,0x00,0x65,0x6d,0x70,0x74,0x79,
    0x33,0x31,0x30,0x30,0x31,0x2e,0x37,0x32,0x30,0x2e,0x33,0x61,0x69,0x72,
    0x36,0x34,0x2d,0x61,0x70,0x70,0x6c,0x65,0x2d,0x6d,0x61,0x63,0x6f,0x73,
    0x78,0x31,0x33,0x2e,0x30,0x2e,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00
};
static unsigned int empty_mtllib_size = 2843;
#elif TARGET_IOS
static unsigned char empty_mtllib[] = {
    0x4d,0x54,0x4c,0x42,0x01,0x00,0x02,0x00,0x07,0x00,0x00,0x82,0x10,0x00,
    0x04,0x00,0x1b,0x0b,0x00,0x00,0x00,0x00,0x00,0x00,0x58,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xdb,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0xe3,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0xeb,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x0a,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x7b,0x00,0x00,0x00,0x4e,0x41,
    0x4d,0x45,0x06,0x00,0x65,0x6d,0x70,0x74,0x79,0x00,0x54,0x59,0x50,0x45,
    0x01,0x00,0x02,0x48,0x41,0x53,0x48,0x20,0x00,0x12,0x51,0x59,0xcc,0x21,
    0xb5,0xb2,0x4f,0x5f,0xca,0xc3,0x74,0x3b,0xe6,0x3a,0x34,0xb4,0x10,0x4d,
    0x09,0xf5,0x72,0x4a,0x48,0xf9,0x33,0x4e,0x9b,0x5e,0x83,0xc6,0x21,0x4d,
    0x44,0x53,0x5a,0x08,0x00,0x30,0x0a,0x00,0x00,0x00,0x00,0x00,0x00,0x4f,
    0x46,0x46,0x54,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x56,0x45,0x52,0x53,0x08,0x00,0x02,0x00,0x05,0x00,0x03,0x00,0x00,
    0x00,0x45,0x4e,0x44,0x54,0x45,0x4e,0x44,0x54,0x04,0x00,0x00,0x00,0x45,
    0x4e,0x44,0x54,0x04,0x00,0x00,0x00,0x45,0x4e,0x44,0x54,0xde,0xc0,0x17,
    0x0b,0x00,0x00,0x00,0x00,0x14,0x00,0x00,0x00,0x10,0x0a,0x00,0x00,0xff,
    0xff,0xff,0xff,0x42,0x43,0xc0,0xde,0x35,0x14,0x00,0x00,0x03,0x00,0x00,
    0x00,0x62,0x0c,0x30,0x24,0x80,0x10,0x05,0xc8,0x14,0x00,0x00,0x00,0x21,
    0x0c,0x00,0x00,0x4e,0x02,0x00,0x00,0x0b,0x02,0x21,0x00,0x02,0x00,0x00,
    0x00,0x13,0x00,0x00,0x00,0x07,0x81,0x23,0x91,0x41,0xc8,0x04,0x49,0x06,
    0x10,0x32,0x39,0x92,0x01,0x84,0x0c,0x25,0x05,0x08,0x19,0x1e,0x04,0x8b,
    0x62,0x80,0x0c,0x45,0x02,0x42,0x92,0x0b,0x42,0x64,0x10,0x32,0x14,0x38,
    0x08,0x18,0x4b,0x0a,0x32,0x32,0x88,0x48,0x90,0x14,0x20,0x43,0x46,0x88,
    0xa5,0x00,0x19,0x32,0x42,0x04,0x49,0x0e,0x90,0x91,0x21,0xc4,0x50,0x41,
    0x51,0x81,0x8c,0xe1,0x83,0xe5,0x8a,0x04,0x19,0x46,0x06,0x89,0x20,0x00,
    0x00,0x0b,0x00,0x00,0x00,0x32,0x22,0xc8,0x08,0x20,0x64,0x85,0x04,0x93,
    0x21,0xa4,0x84,0x04,0x93,0x21,0xe3,0x84,0xa1,0x90,0x14,0x12,0x4c,0x86,
    0x8c,0x0b,0x84,0x64,0x4c,0x10,0x18,0x23,0x00,0x25,0x00,0x65,0x20,0x60,
    0x8e,0x00,0x0c,0x52,0x80,0x00,0x00,0x51,0x18,0x00,0x00,0x80,0x00,0x00,
    0x00,0x1b,0xcc,0x25,0xf8,0xff,0xff,0xff,0xff,0x01,0x80,0x03,0x40,0x02,
    0x28,0x62,0x1c,0xde,0x41,0x1e,0xe4,0xa1,0x1c,0xc6,0x81,0x1e,0xd8,0x21,
    0x1f,0xda,0x40,0x1e,0xde,0xa1,0x1e,0xdc,0x81,0x1c,0xca,0x81,0x1c,0xda,
    0x80,0x1c,0xd2,0xc1,0x1e,0xd2,0x81,0x1c,0xca,0xa1,0x0d,0xe6,0x21,0x1e,
    0xe4,0x81,0x1e,0xda,0xc0,0x1c,0xe0,0xa1,0x0d,0xda,0x21,0x1c,0xe8,0x01,
    0x1d,0x00,0x73,0x08,0x07,0x76,0x98,0x87,0x72,0x00,0x08,0x72,0x48,0x87,
    0x79,0x08,0x07,0x71,0x60,0x87,0x72,0x68,0x03,0x7a,0x08,0x87,0x74,0x60,
    0x87,0x36,0x18,0x87,0x70,0x60,0x07,0x76,0x98,0x07,0xc0,0x1c,0xc2,0x81,
    0x1d,0xe6,0xa1,0x1c,0x00,0x82,0x1d,0xca,0x61,0x1e,0xe6,0xa1,0x0d,0xe0,
    0x41,0x1e,0xca,0x61,0x1c,0xd2,0x61,0x1e,0xca,0xa1,0x0d,0xcc,0x01,0x1e,
    0xda,0x21,0x1c,0xc8,0x01,0x30,0x87,0x70,0x60,0x87,0x79,0x28,0x07,0x80,
    0x70,0x87,0x77,0x68,0x03,0x73,0x90,0x87,0x70,0x68,0x87,0x72,0x68,0x03,
    0x78,0x78,0x87,0x74,0x70,0x07,0x7a,0x28,0x07,0x79,0x68,0x83,0x72,0x60,
    0x87,0x74,0x68,0x07,0x80,0x1e,0xe4,0xa1,0x1e,0xca,0x01,0x18,0xdc,0xe1,
    0x1d,0xda,0xc0,0x1c,0xe4,0x21,0x1c,0xda,0xa1,0x1c,0xda,0x00,0x1e,0xde,
    0x21,0x1d,0xdc,0x81,0x1e,0xca,0x41,0x1e,0xda,0xa0,0x1c,0xd8,0x21,0x1d,
    0xda,0xa1,0x0d,0xdc,0xe1,0x1d,0xdc,0xa1,0x0d,0xd8,0xa1,0x1c,0xc2,0xc1,
    0x1c,0x00,0xc2,0x1d,0xde,0xa1,0x0d,0xd2,0xc1,0x1d,0xcc,0x61,0x1e,0xda,
    0xc0,0x1c,0xe0,0xa1,0x0d,0xda,0x21,0x1c,0xe8,0x01,0x1d,0x00,0x7a,0x90,
    0x87,0x7a,0x28,0x07,0x80,0x70,0x87,0x77,0x68,0x03,0x75,0xa8,0x87,0x76,
    0x80,0x87,0x36,0xa0,0x87,0x70,0x10,0x07,0x76,0x28,0x87,0x79,0x00,0xcc,
    0x21,0x1c,0xd8,0x61,0x1e,0xca,0x01,0x20,0xdc,0xe1,0x1d,0xda,0xc0,0x1d,
    0xc2,0xc1,0x1d,0xe6,0xa1,0x0d,0xcc,0x01,0x1e,0xda,0xa0,0x1d,0xc2,0x81,
    0x1e,0xd0,0x01,0xa0,0x07,0x79,0xa8,0x87,0x72,0x00,0x08,0x77,0x78,0x87,
    0x36,0x98,0x87,0x74,0x38,0x07,0x77,0x28,0x07,0x72,0x68,0x03,0x7d,0x28,
    0x07,0x79,0x78,0x87,0x79,0x68,0x03,0x73,0x80,0x87,0x36,0x68,0x87,0x70,
    0xa0,0x07,0x74,0x00,0xe8,0x41,0x1e,0xea,0xa1,0x1c,0x00,0xc2,0x1d,0xde,
    0xa1,0x0d,0xe8,0x41,0x1e,0xc2,0x01,0x1e,0xe0,0x21,0x1d,0xdc,0xe1,0x1c,
    0xda,0xa0,0x1d,0xc2,0x81,0x1e,0xd0,0x01,0xa0,0x07,0x79,0xa8,0x87,0x72,
    0x00,0x88,0x79,0xa0,0x87,0x70,0x18,0x87,0x75,0x68,0x03,0x78,0x90,0x87,
    0x77,0xa0,0x87,0x72,0x18,0x07,0x7a,0x78,0x07,0x79,0x68,0x03,0x71,0xa8,
    0x07,0x73,0x30,0x87,0x72,0x90,0x87,0x36,0x98,0x87,0x74,0xd0,0x87,0x72,
    0x00,0xf0,0x00,0x20,0xea,0xc1,0x1d,0xe6,0x21,0x1c,0xcc,0xa1,0x1c,0xda,
    0xc0,0x1c,0xe0,0xa1,0x0d,0xda,0x21,0x1c,0xe8,0x01,0x1d,0x00,0x7a,0x90,
    0x87,0x7a,0x28,0x07,0x80,0xa8,0x87,0x79,0x28,0x87,0x36,0x98,0x87,0x77,
    0x30,0x07,0x7a,0x68,0x03,0x73,0x60,0x87,0x77,0x08,0x07,0x7a,0x00,0xcc,
    0x21,0x1c,0xd8,0x61,0x1e,0xca,0x01,0x00,0x00,0x49,0x18,0x00,0x00,0x01,
    0x00,0x00,0x00,0x13,0x82,0x00,0x00,0x13,0xaa,0x70,0x48,0x07,0x79,0xb0,
    0x03,0x3a,0x68,0x83,0x70,0x80,0x07,0x78,0x60,0x87,0x72,0x68,0x83,0x74,
    0x78,0x87,0x79,0x88,0x03,0x3b,0x70,0x03,0x3a,0x70,0x03,0x38,0xd8,0x70,
    0x1b,0xe5,0xd0,0x06,0xf0,0xa0,0x07,0x76,0x40,0x07,0x7a,0x60,0x07,0x74,
    0xa0,0x07,0x76,0x40,0x07,0x6d,0x90,0x0e,0x71,0xa0,0x07,0x78,0xa0,0x07,
    0x78,0xd0,0x06,0xe9,0x80,0x07,0x7a,0x80,0x07,0x7a,0x80,0x07,0x6d,0x90,
    0x0e,0x71,0x60,0x07,0x7a,0x10,0x07,0x76,0xa0,0x07,0x71,0x60,0x07,0x6d,
    0x90,0x0e,0x73,0x20,0x07,0x7a,0x30,0x07,0x72,0xa0,0x07,0x73,0x20,0x07,
    0x6d,0x90,0x0e,0x76,0x40,0x07,0x7a,0x60,0x07,0x74,0xa0,0x07,0x76,0x40,
    0x07,0x6d,0x60,0x0e,0x73,0x20,0x07,0x7a,0x30,0x07,0x72,0xa0,0x07,0x73,
    0x20,0x07,0x6d,0x60,0x0e,0x76,0x40,0x07,0x7a,0x60,0x07,0x74,0xa0,0x07,
    0x76,0x40,0x07,0x6d,0x60,0x0f,0x71,0x60,0x07,0x7a,0x10,0x07,0x76,0xa0,
    0x07,0x71,0x60,0x07,0x6d,0x60,0x0f,0x72,0x40,0x07,0x7a,0x30,0x07,0x72,
    0xa0,0x07,0x73,0x20,0x07,0x6d,0x60,0x0f,0x73,0x20,0x07,0x7a,0x30,0x07,
    0x72,0xa0,0x07,0x73,0x20,0x07,0x6d,0x60,0x0f,0x74,0x80,0x07,0x7a,0x60,
    0x07,0x74,0xa0,0x07,0x76,0x40,0x07,0x6d,0x60,0x0f,0x76,0x40,0x07,0x7a,
    0x60,0x07,0x74,0xa0,0x07,0x76,0x40,0x07,0x6d,0x60,0x0f,0x79,0x60,0x07,
    0x7a,0x10,0x07,0x72,0x80,0x07,0x7a,0x10,0x07,0x72,0x80,0x07,0x6d,0x60,
    0x0f,0x71,0x20,0x07,0x78,0xa0,0x07,0x71,0x20,0x07,0x78,0xa0,0x07,0x71,
    0x20,0x07,0x78,0xd0,0x06,0xf6,0x10,0x07,0x79,0x20,0x07,0x7a,0x20,0x07,
    0x75,0x60,0x07,0x7a,0x20,0x07,0x75,0x60,0x07,0x6d,0x60,0x0f,0x72,0x50,
    0x07,0x76,0xa0,0x07,0x72,0x50,0x07,0x76,0xa0,0x07,0x72,0x50,0x07,0x76,
    0xd0,0x06,0xf6,0x50,0x07,0x71,0x20,0x07,0x7a,0x50,0x07,0x71,0x20,0x07,
    0x7a,0x50,0x07,0x71,0x20,0x07,0x6d,0x60,0x0f,0x71,0x00,0x07,0x72,0x40,
    0x07,0x7a,0x10,0x07,0x70,0x20,0x07,0x74,0xa0,0x07,0x71,0x00,0x07,0x72,
    0x40,0x07,0x6d,0xe0,0x0e,0x78,0xa0,0x07,0x71,0x60,0x07,0x7a,0x30,0x07,
    0x72,0xa0,0x11,0xc2,0x90,0x05,0xc1,0x3c,0x13,0x36,0x44,0x02,0x8a,0x00,
    0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x89,0x0d,0x02,
    0x45,0xa1,0x04,0x00,0x00,0xb2,0x40,0x0a,0x00,0x00,0x00,0x32,0x1e,0x98,
    0x10,0x19,0x11,0x4c,0x90,0x8c,0x09,0x26,0x47,0xc6,0x04,0x43,0x62,0x11,
    0x94,0x40,0x21,0x94,0x43,0xf9,0x14,0xa0,0x40,0x41,0x14,0x48,0x29,0x8c,
    0x00,0x94,0x01,0x75,0x2c,0x01,0x22,0x00,0x00,0xb1,0x18,0x00,0x00,0x7b,
    0x00,0x00,0x00,0x33,0x08,0x80,0x1c,0xc4,0xe1,0x1c,0x66,0x14,0x01,0x3d,
    0x88,0x43,0x38,0x84,0xc3,0x8c,0x42,0x80,0x07,0x79,0x78,0x07,0x73,0x98,
    0x71,0x0c,0xe6,0x00,0x0f,0xed,0x10,0x0e,0xf4,0x80,0x0e,0x33,0x0c,0x42,
    0x1e,0xc2,0xc1,0x1d,0xce,0xa1,0x1c,0x66,0x30,0x05,0x3d,0x88,0x43,0x38,
    0x84,0x83,0x1b,0xcc,0x03,0x3d,0xc8,0x43,0x3d,0x8c,0x03,0x3d,0xcc,0x78,
    0x8c,0x74,0x70,0x07,0x7b,0x08,0x07,0x79,0x48,0x87,0x70,0x70,0x07,0x7a,
    0x70,0x03,0x76,0x78,0x87,0x70,0x20,0x87,0x19,0xcc,0x11,0x0e,0xec,0x90,
    0x0e,0xe1,0x30,0x0f,0x6e,0x30,0x0f,0xe3,0xf0,0x0e,0xf0,0x50,0x0e,0x33,
    0x10,0xc4,0x1d,0xde,0x21,0x1c,0xd8,0x21,0x1d,0xc2,0x61,0x1e,0x66,0x30,
    0x89,0x3b,0xbc,0x83,0x3b,0xd0,0x43,0x39,0xb4,0x03,0x3c,0xbc,0x83,0x3c,
    0x84,0x03,0x3b,0xcc,0xf0,0x14,0x76,0x60,0x07,0x7b,0x68,0x07,0x37,0x68,
    0x87,0x72,0x68,0x07,0x37,0x80,0x87,0x70,0x90,0x87,0x70,0x60,0x07,0x76,
    0x28,0x07,0x76,0xf8,0x05,0x76,0x78,0x87,0x77,0x80,0x87,0x5f,0x08,0x87,
    0x71,0x18,0x87,0x72,0x98,0x87,0x79,0x98,0x81,0x2c,0xee,0xf0,0x0e,0xee,
    0xe0,0x0e,0xf5,0xc0,0x0e,0xec,0x30,0x03,0x62,0xc8,0xa1,0x1c,0xe4,0xa1,
    0x1c,0xcc,0xa1,0x1c,0xe4,0xa1,0x1c,0xdc,0x61,0x1c,0xca,0x21,0x1c,0xc4,
    0x81,0x1d,0xca,0x61,0x06,0xd6,0x90,0x43,0x39,0xc8,0x43,0x39,0x98,0x43,
    0x39,0xc8,0x43,0x39,0xb8,0xc3,0x38,0x94,0x43,0x38,0x88,0x03,0x3b,0x94,
    0xc3,0x2f,0xbc,0x83,0x3c,0xfc,0x82,0x3b,0xd4,0x03,0x3b,0xb0,0xc3,0x0c,
    0xc7,0x69,0x87,0x70,0x58,0x87,0x72,0x70,0x83,0x74,0x68,0x07,0x78,0x60,
    0x87,0x74,0x18,0x87,0x74,0xa0,0x87,0x19,0xce,0x53,0x0f,0xee,0x00,0x0f,
    0xf2,0x50,0x0e,0xe4,0x90,0x0e,0xe3,0x40,0x0f,0xe1,0x20,0x0e,0xec,0x50,
    0x0e,0x33,0x20,0x28,0x1d,0xdc,0xc1,0x1e,0xc2,0x41,0x1e,0xd2,0x21,0x1c,
    0xdc,0x81,0x1e,0xdc,0xe0,0x1c,0xe4,0xe1,0x1d,0xea,0x01,0x1e,0x66,0x18,
    0x51,0x38,0xb0,0x43,0x3a,0x9c,0x83,0x3b,0xcc,0x50,0x24,0x76,0x60,0x07,
    0x7b,0x68,0x07,0x37,0x60,0x87,0x77,0x78,0x07,0x78,0x98,0x51,0x4c,0xf4,
    0x90,0x0f,0xf0,0x50,0x0e,0x33,0x1e,0x6a,0x1e,0xca,0x61,0x1c,0xe8,0x21,
    0x1d,0xde,0xc1,0x1d,0x7e,0x01,0x1e,0xe4,0xa1,0x1c,0xcc,0x21,0x1d,0xf0,
    0x61,0x06,0x54,0x85,0x83,0x38,0xcc,0xc3,0x3b,0xb0,0x43,0x3d,0xd0,0x43,
    0x39,0xfc,0xc2,0x3c,0xe4,0x43,0x3b,0x88,0xc3,0x3b,0xb0,0xc3,0x8c,0xc5,
    0x0a,0x87,0x79,0x98,0x87,0x77,0x18,0x87,0x74,0x08,0x07,0x7a,0x28,0x07,
    0x72,0x98,0x81,0x5c,0xe3,0x10,0x0e,0xec,0xc0,0x0e,0xe5,0x50,0x0e,0xf3,
    0x30,0x23,0xc1,0xd2,0x41,0x1e,0xe4,0xe1,0x17,0xd8,0xe1,0x1d,0xde,0x01,
    0x1e,0x66,0x50,0x59,0x38,0xa4,0x83,0x3c,0xb8,0x81,0x39,0xd4,0x83,0x3b,
    0x8c,0x03,0x3d,0xa4,0xc3,0x3b,0xb8,0xc3,0x2f,0x9c,0x83,0x3c,0xbc,0x43,
    0x3d,0xc0,0xc3,0x3c,0x00,0x79,0x20,0x00,0x00,0x9c,0x00,0x00,0x00,0x62,
    0x1e,0x48,0x20,0x43,0x88,0x0c,0x19,0x39,0x19,0x24,0x90,0x91,0x40,0xc6,
    0xc8,0xc8,0x68,0x22,0x50,0x08,0x14,0x32,0x9e,0x18,0x19,0x21,0x47,0xc8,
    0x90,0x51,0x6c,0x18,0x3c,0x01,0x00,0x8b,0x62,0x61,0x1b,0xb4,0x41,0x73,
    0x50,0x6c,0x1c,0x19,0x00,0x53,0x44,0x4b,0x20,0x56,0x65,0x72,0x73,0x69,
    0x6f,0x6e,0x77,0x63,0x68,0x61,0x72,0x5f,0x73,0x69,0x7a,0x65,0x61,0x69,
    0x72,0x2e,0x6d,0x61,0x78,0x5f,0x64,0x65,0x76,0x69,0x63,0x65,0x5f,0x62,
    0x75,0x66,0x66,0x65,0x72,0x73,0x61,0x69,0x72,0x2e,0x6d,0x61,0x78,0x5f,
    0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x5f,0x62,0x75,0x66,0x66,0x65,
    0x72,0x73,0x61,0x69,0x72,0x2e,0x6d,0x61,0x78,0x5f,0x74,0x68,0x72,0x65,
    0x61,0x64,0x67,0x72,0x6f,0x75,0x70,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,
    0x73,0x61,0x69,0x72,0x2e,0x6d,0x61,0x78,0x5f,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x73,0x61,0x69,0x72,0x2e,0x6d,0x61,0x78,0x5f,0x72,0x65,0x61,
    0x64,0x5f,0x77,0x72,0x69,0x74,0x65,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x73,0x61,0x69,0x72,0x2e,0x6d,0x61,0x78,0x5f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x73,0x41,0x70,0x70,0x6c,0x65,0x20,0x6d,0x65,0x74,0x61,
    0x6c,0x20,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x31,0x30,0x30,
    0x31,0x2e,0x37,0x32,0x30,0x20,0x28,0x6d,0x65,0x74,0x61,0x6c,0x66,0x65,
    0x2d,0x33,0x31,0x30,0x30,0x31,0x2e,0x37,0x32,0x30,0x2e,0x33,0x29,0x4d,
    0x65,0x74,0x61,0x6c,0x61,0x69,0x72,0x2e,0x63,0x6f,0x6d,0x70,0x69,0x6c,
    0x65,0x2e,0x64,0x65,0x6e,0x6f,0x72,0x6d,0x73,0x5f,0x64,0x69,0x73,0x61,
    0x62,0x6c,0x65,0x61,0x69,0x72,0x2e,0x63,0x6f,0x6d,0x70,0x69,0x6c,0x65,
    0x2e,0x66,0x61,0x73,0x74,0x5f,0x6d,0x61,0x74,0x68,0x5f,0x65,0x6e,0x61,
    0x62,0x6c,0x65,0x61,0x69,0x72,0x2e,0x63,0x6f,0x6d,0x70,0x69,0x6c,0x65,
    0x2e,0x66,0x72,0x61,0x6d,0x65,0x62,0x75,0x66,0x66,0x65,0x72,0x5f,0x66,
    0x65,0x74,0x63,0x68,0x5f,0x65,0x6e,0x61,0x62,0x6c,0x65,0xc6,0x35,0x00,
    0x00,0x00,0x00,0x00,0x00,0x30,0x82,0x40,0x04,0x23,0x08,0x05,0x33,0x82,
    0x40,0x08,0x23,0x08,0xc4,0x30,0x82,0x40,0x10,0x23,0x08,0x44,0x31,0x82,
    0x40,0x18,0x23,0x08,0xc4,0x31,0x82,0x40,0x20,0x23,0x08,0x44,0x32,0x82,
    0x40,0x28,0x23,0x08,0xc4,0x32,0x82,0x20,0x00,0x33,0x0c,0x4e,0xf0,0xcc,
    0x30,0x40,0x42,0x34,0xc3,0x20,0x0d,0xd3,0x0c,0x83,0x44,0x4c,0x33,0x0c,
    0x52,0x31,0xcd,0x30,0x48,0x06,0x35,0xc3,0x20,0x1d,0xd5,0x0c,0x83,0x84,
    0x58,0x33,0x04,0xc9,0x0c,0x83,0x73,0x61,0x33,0x10,0x4a,0x86,0x61,0x33,
    0x04,0xcb,0x0c,0x01,0x33,0x43,0xd0,0xcc,0x00,0xcc,0x30,0x68,0x69,0x90,
    0x06,0xd7,0x01,0x1c,0xc7,0x71,0x1c,0xc7,0x71,0x1c,0xc7,0x71,0x9c,0x18,
    0x88,0x81,0x18,0x88,0x81,0x18,0x88,0x81,0x18,0x88,0x81,0x25,0x06,0x68,
    0x60,0x59,0x16,0x24,0x23,0x81,0x09,0xca,0x88,0x8d,0xcd,0xae,0xcd,0xa5,
    0xed,0x8d,0xac,0x8e,0xad,0xcc,0xc5,0x8c,0x2d,0xec,0x6c,0x6e,0x14,0x44,
    0xdb,0xb8,0xce,0xfb,0xc0,0x20,0x0c,0x52,0x61,0x63,0xb3,0x6b,0x73,0x49,
    0x23,0x2b,0x73,0xa3,0x1b,0x25,0x10,0x83,0x5c,0xc2,0xd2,0xe4,0x5c,0xec,
    0xca,0xe4,0xe6,0xd2,0xde,0xdc,0x46,0x09,0xc6,0x20,0xa9,0xb0,0x34,0x39,
    0x17,0xb6,0x30,0xb7,0xb3,0xba,0xb0,0xb3,0xb2,0x2f,0xbb,0x32,0xb9,0xb9,
    0xb4,0x37,0xb7,0x51,0x02,0x32,0xc8,0x29,0x2c,0x4d,0xce,0x65,0xec,0xad,
    0x0d,0x2e,0x8d,0xad,0xec,0xeb,0x0d,0x8e,0x2e,0xed,0xcd,0x6d,0x6e,0x94,
    0xa1,0x0c,0xcc,0xe0,0x0c,0x52,0x09,0x4b,0x93,0x73,0x59,0x2b,0x93,0x73,
    0x2b,0x63,0x1b,0x25,0x48,0x03,0x00,0xa9,0x18,0x00,0x00,0x0b,0x00,0x00,
    0x00,0x0b,0x0a,0x72,0x28,0x87,0x77,0x80,0x07,0x7a,0x58,0x70,0x98,0x43,
    0x3d,0xb8,0xc3,0x38,0xb0,0x43,0x39,0xd0,0xc3,0x82,0xe6,0x1c,0xc6,0xa1,
    0x0d,0xe8,0x41,0x1e,0xc2,0xc1,0x1d,0xe6,0x21,0x1d,0xe8,0x21,0x1d,0xde,
    0xc1,0x1d,0x00,0xd1,0x10,0x00,0x00,0x06,0x00,0x00,0x00,0x07,0xcc,0x3c,
    0xa4,0x83,0x3b,0x9c,0x03,0x3b,0x94,0x03,0x3d,0xa0,0x83,0x3c,0x94,0x43,
    0x38,0x90,0xc3,0x01,0x00,0x00,0x00,0x61,0x20,0x00,0x00,0x01,0x00,0x00,
    0x00,0x13,0x04,0x01,0x02,0x71,0x20,0x00,0x00,0x03,0x00,0x00,0x00,0x32,
    0x0e,0x10,0x22,0x84,0x00,0xcd,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x65,0x0c,0x00,0x00,0x1d,0x00,0x00,0x00,0x12,0x03,0x94,0xe8,0x00,
    0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x0b,0x00,0x00,
    0x00,0x44,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x50,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x68,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x15,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x25,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x05,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x00,0x00,
    0x00,0xff,0xff,0xff,0xff,0x00,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x5d,
    0x0c,0x00,0x00,0x0d,0x00,0x00,0x00,0x12,0x03,0x94,0x65,0x00,0x00,0x00,
    0x00,0x65,0x6d,0x70,0x74,0x79,0x33,0x31,0x30,0x30,0x31,0x2e,0x37,0x32,
    0x30,0x2e,0x33,0x61,0x69,0x72,0x36,0x34,0x2d,0x61,0x70,0x70,0x6c,0x65,
    0x2d,0x69,0x6f,0x73,0x31,0x36,0x2e,0x34,0x2e,0x30,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00
};
static unsigned int empty_mtllib_size = 2843;
#endif // TARGET_IOS
