#!/usr/bin/env python
import os
import version

Import("env")
Import("env_modules")

is_gcc = "gcc" in os.path.basename(env["CC"])
is_clang_or_gcc = (
    ("gcc" in os.path.basename(env["CC"])) or ("clang" in os.path.basename(env["CC"])) or ("osxcross" in env)
)


def is_enabled(m):
    mod = os.path.dirname(m) if os.path.dirname(m) else m
    if "enable_gdextensions_submodules" in env:
        if "none" in env["enable_gdextensions_submodules"]:
            return False
        if not mod in env["enable_gdextensions_submodules"]:
            return False
    return True


env_module = env_modules.Clone()

sources = Glob("*.cpp") + Glob("common/*.cpp")

modules = [
    "core",
    "visual",
    "threadpool",
    "bulletkit",
    "blitter",
    "benchmark",
    "environment/tree_2d",
    "environment/spherical_waves",
    "environment/water_splash",
    "environment/starfield",
    "environment/spider_anim",
    "fastnoise",
    "smooth",
    "debugdraw",
    "geomfonts",
    "statemachine",
    "benet",
    "behaviornode",
    "behaviortree",
    "simpleai",
    "flexbuffers",
    "nakama1",
    "parseplatform",
    "discord",
    "settings",
    "sfxr",
    "flashdb",
    "sqlite",
    "vgamepad",
    "landiscovery",
    "polyvector",
    "vaserenderer",
    "timelinefx",
    "tileengine",
]

thirdparty_sources = [
    "#thirdparty/misc/cqueue.cpp",
]

if env["tools"] and is_enabled("qrcodetexture"):
    modules += ["qrcodetexture"]

if env["platform"] == "iphone" or env["platform"] == "osx":
    modules += ["multipeer"]
    thirdparty_sources += Glob("thirdparty/MultiPeerKit/Sources/Common/*.m")
    env_module.Append(
        CCFLAGS=[
            "-fobjc-arc",
            "-fmessage-length=0",
            "-fno-strict-aliasing",
            "-fdiagnostics-print-source-range-info",
            "-fdiagnostics-show-category=id",
            "-fdiagnostics-parseable-fixits",
            "-fpascal-strings",
            "-fblocks",
            "-MMD",
            "-MT",
            "dependencies",
            "-Wno-ambiguous-macro",
            "-Werror=return-type",
            "-Wall",
        ]
    )

if not env["disable_3d"]:
    modules += ["environment/vegetation_instance", "ccd"]
    if is_enabled("ccd"):
        thirdparty_sources += Glob("thirdparty/libccd/src/*.c") + Glob("thirdparty/libccd/src/testsuites/*.c")
    if env["tools"]:
        if is_enabled("generator"):
            modules += ["generator"]
            env_module.Append(CPPPATH=["thirdparty/libgenerator/inc"])
            if is_gcc:
                env_module.Append(CPPFLAGS=["-Wno-nonnull", "-Wno-array-bounds"])  # silent false warnings
            thirdparty_sources += Glob("thirdparty/libgenerator/src/*.cpp")
        if is_enabled("meshlod"):
            modules += ["meshlod"]
            thirdparty_sources += Glob("thirdparty/meshoptimizer/src/*.cpp")
        if is_enabled("meshslicer"):
            modules += ["meshslicer"]
            sources += Glob("submodules/meshslicer/utils/*.cpp")

    modules += ["threadpool"]

if env["os_family"] in ["os_windows", "os_unix"]:
    modules += ["unqlite"]
    thirdparty_sources += Glob("thirdparty/unqlite/*.c")

if is_enabled("sqlite"):
    thirdparty_sources += Glob("thirdparty/sqlite/*.c")

if os.path.isdir("iap") and is_enabled("iap"):
    env_module.Prepend(CPPPATH=["submodules/iap"])
    sources += Glob("submodules/iap/*.cpp")
    if env["platform"] == "osx" or env["platform"] == "iphone":
        sources += Glob("submodules/iap/mac/*.mm")
        env.Append(LINKFLAGS=["-framework", "StoreKit"])
    elif env["platform"] == "android":
        sources += Glob("iap/android/*.cpp")

if env["platform"] == "psvita" and is_enabled("blitter"):
    sources += Glob("submodules/blitter/arm/*.S")

if is_enabled("behaviortree"):
    env_module.Append(CPPDEFINES=["BEHAVIOR_TREE_AS_GODOT_MODULE"])

ignore = []
if env["platform"] == "3ds" or env["platform"] == "psp":
    ignore += ["submodules/visual/heatmap.cpp"]
if env["disable_advanced_gui"]:
    ignore += ["submodules/core/input_map_editor.cpp"]
if not env["module_mbedtls_enabled"]:
    ignore += ["submodules/core/cripter.cpp"]

if is_enabled("flexbuffers") or is_enabled("nakama1"):
    env_module.Prepend(CPPPATH="thirdparty/flatbuffers/include")
    if is_enabled("flexbuffers"):
        if env["platform"] == "frt" and env["frt_arch"] == "gcw0":
            env_module.Append(CPPDEFINES=["FLATBUFFERS_LOCALE_INDEPENDENT=0"])
        thirdparty_sources += ["thirdparty/flatbuffers/src/util.cpp"]
    if is_enabled("nakama1"):
        sources += Glob("submodules/nakama1/client/*.cpp")

if is_enabled("geomfonts"):
    env_module.Prepend(CPPPATH="submodules/geomfonts/polyfonts")
    sources += Glob("submodules/geomfonts/polyfonts/fonts/*.c")

if is_enabled("polyvector"):
    env_module.Append(CPPPATH=["thirdparty/libshockwave/lzma"])
    env_module.Append(CPPDEFINES=["_7ZIP_ST"])
    thirdparty_sources += Glob("thirdparty/libshockwave/*.cpp") + Glob("thirdparty/libshockwave/lzma/*.c")

if is_enabled("tileengine"):
    env_module.Append(CPPDEFINES=["TLN_EXCLUDE_WINDOW"])
    env_module.Append(CPPPATH=["thirdparty/Tilengine/include"])
    thirdparty_sources += Glob("thirdparty/Tilengine/src/*.c")

if is_enabled("flashdb"):
    thirdparty_sources += Glob("thirdparty/flashdb/src/*.c")

sub_building = []
for m in modules:
    if is_enabled(m):
        files = Glob("submodules/%s/*.cpp" % m) + Glob("submodules/%s/*.c" % m)
        sources += [f for f in files if str(f) not in ignore]
        sub_building.append(m)

env_module.Append(
    CPPPATH=[
        "#thirdparty/enet",
        "#thirdparty/mbedtls/include",
        "#thirdparty",
        "thirdparty/flashdb/inc",
        "thirdparty/libccd/src",
        "thirdparty",
        "submodules",
        ".",
    ]
)

if env["builtin_freetype"]:
    env_module.Prepend(CPPPATH=["#thirdparty/freetype/include"])
env_module.Append(CPPDEFINES=["GD_CQUEUE", "GD_GODOT_ENET", "GD_NO_UNUSED_FUNCTIONS"])

# Compile as a static library
lib = env_module.Library("gdextensions", thirdparty_sources + sources)
# Add the library as a dependency of the final executable
env.Prepend(LIBS=[lib])

if modules:
    sub_enabled = []
    for m in sorted(sub_building):
        mod = os.path.dirname(m) if os.path.dirname(m) else m
        if mod not in sub_enabled:
            if sub_enabled and sub_enabled[-1].startswith(mod):
                sub_enabled[-1] = sub_enabled[-1] + " " + os.path.basename(m)
            elif mod != m:
                sub_enabled.append(mod + ": " + os.path.basename(m))
            else:
                sub_enabled.append(m)
            env_module.Append(CPPDEFINES=["GDEXT_%s_ENABLED" % mod.upper()])
    print("(GDextensions) Building submodules: %s" % sorted(sub_enabled))
