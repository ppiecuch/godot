#!/usr/bin/env python
import os
import version
import platform

Import("env")
Import("env_modules")

is_gcc = "gcc" in os.path.basename(env["CC"])
is_clang_or_gcc = (
    ("gcc" in os.path.basename(env["CC"])) or ("clang" in os.path.basename(env["CC"])) or ("osxcross" in env)
)


def is_enabled(m):
    mod = os.path.dirname(m) if os.path.dirname(m) else m
    if "enable_gdextensions_submodules" in env:
        if "none" in env["enable_gdextensions_submodules"]:
            return False
        if mod in env["enable_gdextensions_submodules"]:
            return True
        # check for group name only
        el = [x for x in env["enable_gdextensions_submodules"] if x.startswith(m)]
        return len(el) > 0
    return True

env_module = env_modules.Clone()

sources = Glob("*.cpp") + Glob("common/*.cpp")

modules = [
    "core",
    "visual",
    "threadpool",
    "bulletkit",
    "blitter",
    "benchmark",
    "environment/tree_2d",
    "environment/spherical_waves",
    "environment/water_splash",
    "environment/starfield",
    "environment/spider_anim",
    "environment/waterfall",
    "fastnoise",
    "smooth",
    "debugdraw",
    "geomfonts",
    "statemachine",
    "benet",
    "behaviornode",
    "behaviortree",
    "simpleai",
    "flexbuffers",
    "nakama1",
    "parseplatform",
    "discord",
    "settings",
    "sfxr",
    "flashdb",
    "sqlite",
    "vgamepad",
    "landiscovery",
    "polyvector",
    "vaserenderer",
    "timelinefx",
    "opensteer",
    "tileengine",
    "sparkparticles",
    "turbobadger",
    "media/ffmpeg",
    "media/flac",
    "media/gifexporter",
    "media/smackvideo",
    "runtimeprofiler",
]

thirdparty_sources = [
    "thirdparty/misc/cqueue.cpp",
    "thirdparty/misc/pugixml.cpp",
    "thirdparty/misc/miniz_gzip.c",
    "thirdparty/misc/miniz_zip.c",
]

if env["tools"] and is_enabled("qrcodetexture"):
    modules += ["qrcodetexture"]

if is_enabled("breakpad"):
    arch = env["arch"] if "arch" in env and env["arch"] else platform.machine()
    if arch == "x64":
        arch = "x86_64"
    elif arch == "mips":
        arch = "mips32"
    if env["platform"] == "x11" and arch in ["aarch64", "x86_64"]:
        env_module.Append(CPPPATH=["thirdparty/breakpad_client/linux/include"])
        env.Append(LIBPATH=[os.path.realpath(os.curdir) + "/thirdparty/breakpad_client/linux/%s" % arch])
    else:
        print("(GDextensions) Breakpad crash reporter is not supported on platform '%s/%s'." % (env["platform"], arch))
        env["enable_gdextensions_submodules"].remove("breakpad")

if env["platform"] == "iphone" or env["platform"] == "osx":
    modules += ["multipeer"]
    thirdparty_sources += Glob("thirdparty/MultiPeerKit/Sources/Common/*.m")
    env_module.Append(
        CCFLAGS=[
            "-fobjc-arc",
            "-fmessage-length=0",
            "-fno-strict-aliasing",
            "-fdiagnostics-print-source-range-info",
            "-fdiagnostics-show-category=id",
            "-fdiagnostics-parseable-fixits",
            "-fpascal-strings",
            "-fblocks",
            "-MMD",
            "-MT",
            "dependencies",
            "-Wno-ambiguous-macro",
            "-Werror=return-type",
            "-Wall",
        ]
    )

if not env["disable_3d"]:
    modules += ["environment/vegetation_instance", "ccd", "detournav"]
    if is_enabled("ccd"):
        thirdparty_sources += Glob("thirdparty/libccd/src/*.c") + Glob("thirdparty/libccd/src/testsuites/*.c")
    if is_enabled("detournav"):
        env_module.Append(CPPPATH=[
            "#thirdparty/recastnavigation/DebugUtils/Include",
            "#thirdparty/recastnavigation/Detour/Include",
            "#thirdparty/recastnavigation/DetourCrowd/Include",
            "#thirdparty/recastnavigation/DetourTileCache/Include",
            "#thirdparty/recastnavigation/Recast/Include"
        ])
        sources += Glob('submodules/detournav/src/util/*.cpp') + Glob('submodules/detournav/src/util/*.c')
        thirdparty_sources += Glob('thirparty/recastnavigation/DebugUtils/Source/*.cpp') \
            + Glob('thirdparty/recastnavigation/Detour/Source/*.cpp') \
            + Glob('thirdparty/recastnavigation/DetourCrowd/Source/*.cpp') \
            + Glob('thirdparty/recastnavigation/DetourTileCache/Source/*.cpp') \
            + Glob('thirdparty/recastnavigation/Recast/Source/*.cpp')
    if env["tools"]:
        if is_enabled("generator"):
            modules += ["generator"]
            env_module.Append(CPPPATH=["thirdparty/libgenerator/inc"])
            if is_gcc:
                env_module.Append(CPPFLAGS=["-Wno-nonnull", "-Wno-array-bounds"])  # silent false warnings
            thirdparty_sources += Glob("thirdparty/libgenerator/src/*.cpp")
        if is_enabled("meshlod"):
            modules += ["meshlod"]
            thirdparty_sources += Glob("thirdparty/meshoptimizer/src/*.cpp")
        if is_enabled("meshslicer"):
            modules += ["meshslicer"]
            sources += Glob("submodules/meshslicer/utils/*.cpp")

if is_enabled("ldrloader"):
    sources += \
        Glob("submodules/ldrloader/ldrawlib/*.c") + \
        Glob("submodules/ldrloader/libldr/*.cpp") + \
        Glob("submodules/ldrloader/libldr/*.c")

if env["os_family"] in ["os_windows", "os_unix"]:
    modules += ["unqlite"]
    thirdparty_sources += Glob("thirdparty/unqlite/*.c")

if is_enabled("sqlite"):
    thirdparty_sources += Glob("thirdparty/sqlite/*.c")

if os.path.isdir("iap") and is_enabled("iap"):
    env_module.Prepend(CPPPATH=["submodules/iap"])
    sources += Glob("submodules/iap/*.cpp")
    if env["platform"] == "osx" or env["platform"] == "iphone":
        sources += Glob("submodules/iap/mac/*.mm")
        env.Append(LINKFLAGS=["-framework", "StoreKit"])
    elif env["platform"] == "android":
        sources += Glob("iap/android/*.cpp")

if is_enabled("playfab"):
    modules += ["playfab"]
    env_module.Prepend(CPPPATH=["thirdparty/xplatcppsdk/code/include", "thirdparty/xplatcppsdk/code", "thirdparty/xplatcppsdk/external/jsoncpp/include"])
    env_module.Append(CPPDEFINES=["PLAYFAB_PLATFORM_GODOT"])
    sources += Glob("submodules/playfab/PlayFabSDK/*.cpp")
    thirdparty_sources += Glob("thirdparty/xplatcppsdk/code/source/playfab/*.cpp")

if env["platform"] == "psvita" and is_enabled("blitter"):
    sources += Glob("submodules/blitter/arm/*.S")

if is_enabled("behaviortree"):
    env_module.Append(CPPDEFINES=["BEHAVIOR_TREE_AS_GODOT_MODULE"])

if is_enabled("environment/waterfall"):
    if env["tools"]:
        env_module.Append(CPPDEFINES=["HAVE_PARTICLES_SIZE_S", "HAVE_PARTICLES_SIZE_M", "HAVE_PARTICLES_SIZE_L"])

ignore = []
if env["platform"] == "3ds" or env["platform"] == "psp":
    ignore += ["submodules/visual/heatmap.cpp"]
if env["disable_advanced_gui"]:
    ignore += ["submodules/core/input_map_editor.cpp"]
if not env["module_mbedtls_enabled"]:
    ignore += ["submodules/core/cripter.cpp"]

if is_enabled("flexbuffers") or is_enabled("nakama1"):
    env_module.Prepend(CPPPATH="thirdparty/flatbuffers/include")
    if is_enabled("flexbuffers"):
        if env["platform"] == "frt" and env["frt_arch"] == "gcw0":
            env_module.Append(CPPDEFINES=["FLATBUFFERS_LOCALE_INDEPENDENT=0"])
        thirdparty_sources += ["thirdparty/flatbuffers/src/util.cpp"]
    if is_enabled("nakama1"):
        sources += Glob("submodules/nakama1/client/*.cpp")

if is_enabled("geomfonts"):
    env_module.Prepend(CPPPATH="submodules/geomfonts/polyfonts")
    sources += Glob("submodules/geomfonts/polyfonts/fonts/*.c")

if is_enabled("polyvector"):
    env_module.Append(CPPPATH=["thirdparty/libshockwave/lzma"])
    env_module.Append(CPPDEFINES=["_7ZIP_ST"])
    thirdparty_sources += Glob("thirdparty/libshockwave/*.cpp") + Glob("thirdparty/libshockwave/lzma/*.c")

if is_enabled("timelinefx"):
    sources += Glob("submodules/timelinefx/runtime/*.cpp")

if is_enabled("tileengine"):
    env_module.Append(CPPDEFINES=["TLN_EXCLUDE_WINDOW"])
    env_module.Append(CPPPATH=["thirdparty/Tilengine/include"])
    thirdparty_sources += Glob("thirdparty/Tilengine/src/*.c")

if is_enabled("opensteer"):
    thirdparty_sources += Glob("thirdparty/opensteer/src/*.c") + Glob("thirdparty/opensteer/src/*.cpp") + Glob("thirdparty/opensteer/plugins/*.cpp")
    env_module.Append(CPPPATH=["thirdparty/opensteer/include"])

if is_enabled("sparkparticles"):
    thirdparty_sources += Glob("thirdparty/spark/src/**/*.cpp")
    if env["tools"]:
        thirdparty_sources += Glob("thirdparty/spark/demo/*.c")
    env_module.Append(CPPPATH=["thirdparty/spark/include", "thirdparty/spark/include/SPK", "thirdparty/spark/src"])

if is_enabled("flashdb"):
    thirdparty_sources += Glob("thirdparty/flashdb/src/*.c")

if is_enabled("turbobadger"):
    env_module.Append(CPPPATH=["thirdparty/turbobadger/src"])
    if env["module_freetype_enabled"]:
        env_module.Append(CPPDEFINES=["TB_FONT_RENDERER_FREETYPE"])
    else:
        env_module.Append(CPPDEFINES=["TB_FONT_RENDERER_STB"])
    thirdparty_sources += Glob("thirdparty/turbobadger/src/**/*.cpp") + Glob("thirdparty/turbobadger/resources/*.c")

if is_enabled("spacemouse"):
    if env["tools"]:
        if env["platform"] == "windows":
            thirdparty_sources += Glob("thirdparty/hidapi/windows/*.c")
        elif env["platform"] == "x11":
            thirdparty_sources += Glob("thirdparty/hidapi/linux/*.c")
        elif env["platform"] == "osx":
            thirdparty_sources += Glob("thirdparty/hidapi/mac/*.c")
        else:
            print("(GDextensions) Spacemouse is not supported on platform '%s'." % env["platform"])
            env["enable_gdextensions_submodules"].remove("spacemouse")
        if is_enabled("spacemouse"):
            env_module.Append(CPPPATH=["thirdparty/hidapi", "thirdparty/hidapi/hidapi"])
            modules += ["spacemouse"]

if is_enabled("media/"):
    env_module.Append(CPPPATH=["thirdparty/media"])
    if is_enabled("media/gifexporter"):
        thirdparty_sources += Glob("thirdparty/media/gifanimcplusplus/*.cpp")
    if is_enabled("media/smackvideo"):
        env_module.Append(CPPPATH=[os.path.dirname(os.path.realpath(os.curdir)) + "/gdnative/include"])
        thirdparty_sources += Glob("thirdparty/media/libsmacker/*.c")
    if is_enabled("media/ffmpeg"):
        arch = env["arch"] if "arch" in env and env["arch"] else platform.machine()
        if arch == "x64":
            arch = "x86_64"
        elif arch == "mips":
            arch = "mips32"
        if env["platform"] == "windows":
            env_module.Append(CPPPATH=["thirdparty/media/ffmpeg/windows/%s/include" % arch])
            env.Append(LIBPATH=[os.path.realpath(os.curdir) + "/thirdparty/media/ffmpeg/windows/%s/lib" % arch])
        elif env["platform"] == "x11" or env["platform"] == "frt":
            env_module.Append(CPPPATH=["thirdparty/media/ffmpeg/linux/%s/include" % arch])
            env.Append(LIBPATH=[os.path.realpath(os.curdir) + "/thirdparty/media/ffmpeg/linux/%s/lib" % arch])
            env.Append(LIBS=["iconv"])
        elif env["platform"] == "android":
            env_module.Append(CPPPATH=["thirdparty/media/ffmpeg/android/%s/include" % arch])
            env.Append(LIBPATH=[os.path.realpath(os.curdir) + "/thirdparty/media/ffmpeg/android/%s/lib" % arch])
        elif env["platform"] == "iphone":
            env_module.Append(CPPPATH=["thirdparty/media/ffmpeg/ios/universal/include" % arch])
            env.Append(LIBPATH=[os.path.realpath(os.curdir) + "thirdparty/media/ffmpeg/ios/universal/lib" % arch])
        elif env["platform"] == "osx":
            env_module.Append(CPPPATH=["thirdparty/media/ffmpeg/macosx/universal/include"])
            env.Append(LIBPATH=[os.path.realpath(os.curdir) + "/thirdparty/media/ffmpeg/macosx/universal/lib"])
        elif env["platform"] == "psvita":
            env_module.Append(CPPPATH=["thirdparty/media/ffmpeg/vita/%s/include" % arch])
            env.Append(LIBPATH=[os.path.realpath(os.curdir) + "/thirdparty/media/ffmpeg/vita/%s/lib" % arch])
        else:
            print("(GDextensions) FFmpeg is not supported on platform '%s'." % env["platform"])
            env["enable_gdextensions_submodules"].remove("media/ffmpeg")
        if is_enabled("media/ffmpeg"):
            env_module.Append(CPPPATH=[os.path.dirname(os.path.realpath(os.curdir)) + "/gdnative/include"])

if is_enabled("tileengine"):
    if env["builtin_libpng"]:
        env_module.Append(CPPPATH=["#thirdparty/libpng/"])

active_modules = []
for m in modules:
    if is_enabled(m):
        files = Glob("submodules/%s/*.cpp" % m) + Glob("submodules/%s/*.c" % m)
        sources += [f for f in files if str(f) not in ignore]
        active_modules.append(m)

env_module.Append(
    CPPPATH=[
        "#thirdparty/enet",
        "#thirdparty/mbedtls/include",
        "#thirdparty",
        "thirdparty/flashdb/inc",
        "thirdparty/libccd/src",
        "thirdparty",
        "submodules",
        ".",
    ]
)

if env["builtin_freetype"]:
    env_module.Prepend(CPPPATH=["#thirdparty/freetype/include"])
env_module.Append(CPPDEFINES=["GD_CQUEUE", "GD_GODOT_ENET"])

lib = env_module.Library("gdextensions", thirdparty_sources + sources) # Compile as a static library
env.Prepend(LIBS=[lib]) # Add the library as a dependency of the final executable
if is_enabled("media/ffmpeg"):
    env.Prepend(LIBS=["avformat", "avcodec", "avutil", "swresample", "swscale"])
if is_enabled("breakpad"):
    env.Prepend(LIBS=["breakpad_client"])

if modules:
    sub_enabled = []
    for m in sorted(active_modules):
        mod = os.path.dirname(m) if os.path.dirname(m) else m
        if mod not in sub_enabled:
            if sub_enabled and sub_enabled[-1].startswith(mod):
                sub_enabled[-1] = sub_enabled[-1] + " " + os.path.basename(m)
            elif mod != m:
                sub_enabled.append(mod + ": " + os.path.basename(m))
            else:
                sub_enabled.append(m)
            if m == mod:
                env_module.Append(CPPDEFINES=["GDEXT_%s_ENABLED" % mod.upper()])
            else:
                env_module.Append(CPPDEFINES=["GDEXT_%s_ENABLED" % (m.replace('/', '_').upper())])
    print("(GDextensions) Building submodules: %s" % sorted(sub_enabled))
