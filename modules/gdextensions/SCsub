#!/usr/bin/env python
import os
import version

Import("env")
Import("env_modules")

is_gcc = "gcc" in os.path.basename(env["CC"])
is_clang_or_gcc = (
    ("gcc" in os.path.basename(env["CC"])) or ("clang" in os.path.basename(env["CC"])) or ("osxcross" in env)
)


sub_enabled = []


def is_enabled(m):
    mod = os.path.dirname(m) if os.path.dirname(m) else m
    if "enable_gdextensions_submodules" in env:
        if "none" in env["enable_gdextensions_submodules"]:
            return False
        if not mod in env["enable_gdextensions_submodules"]:
            return False
    env_module.Append(CPPDEFINES=["GDEXT_%s_ENABLED" % mod.upper()])
    if mod not in sub_enabled:
        sub_enabled.append(m)
    return True


env_module = env_modules.Clone()

sources = Glob("*.cpp") + Glob("common/*.cpp")

modules = [
    "core",
    "visual",
    "bulletkit",
    "blitter",
    "benchmark",
    "environment/tree_2d",
    "environment/spherical_waves",
    "environment/water_splash",
    "environment/starfield",
    "environment/spider_anim",
    "fastnoise",
    "smooth",
    "debugdraw",
    "statemachine",
    "benet",
    "behaviornode",
    "flexbuffers",
    "nakama1",
    "settings",
    "sfxr",
    "flashdb",
    "vgamepad",
    "landiscovery",
]

if env["tools"] and is_enabled("qrcodetexture"):
    modules += ["qrcodetexture"]

if not env["disable_3d"]:
    modules += ["environment/vegetation_instance", "ccd", "ccd/src"]

if env["feature_multiplethreads_allowed"]:
    modules += ["thread_pool"]

if os.path.isdir("iap") and is_enabled("iap"):
    env_module.Prepend(CPPPATH=["submodules/iap"])
    sources += Glob("submodules/iap/*.cpp")
    if env["platform"] == "osx" or env["platform"] == "iphone":
        sources += Glob("submodules/iap/mac/*.mm")
        env.Append(LINKFLAGS=["-framework", "StoreKit"])

    elif env["platform"] == "android":
        sources += Glob("iap/android/*.cpp")

ignore = []
if env["platform"] == "3ds" or env["platform"] == "psp":
    ignore += ["submodules/visual/heatmap.cpp"]
if env["disable_advanced_gui"]:
    ignore += ["submodules/core/input_map_editor.cpp"]
if not env["module_mbedtls_enabled"]:
    ignore += ["submodules/core/cripter.cpp"]

for m in modules:
    if is_enabled(m):
        files = Glob("submodules/%s/*.cpp" % m)
        sources += [f for f in files if str(f) not in ignore]
        sources += Glob("submodules/%s/*.c" % m)

thirdparty_sources = [
    "#thirdparty/misc/cqueue.cpp",
]
if not env["disable_3d"] and is_enabled("ccd"):
    thirdparty_sources += Glob("#thirdparty/libccd/src/*.c") + Glob("#thirdparty/libccd/src/testsuites/*.c")

if is_enabled("flexbuffers") or is_enabled("nakama1"):
    env_module.Prepend(CPPPATH="#thirdparty/flatbuffers/include")
    if is_enabled("flexbuffers"):
        if env["platform"] == "frt" and env["frt_arch"] == "gcw0":
            env_module.Append(CPPDEFINES=["FLATBUFFERS_LOCALE_INDEPENDENT=0"])
        thirdparty_sources += ["#thirdparty/flatbuffers/src/util.cpp"]
    if is_enabled("nakama1"):
        sources += Glob("submodules/nakama1/client/*.cpp")

env_module.Append(
    CPPPATH=[
        "#thirdparty/enet",
        "#thirdparty/mbedtls/include",
        "#thirdparty/flashdb/inc",
        "#thirdparty/libccd/src",
        "#thirdparty",
        "submodules",
        ".",
    ]
)

if env["builtin_freetype"]:
    env_module.Prepend(CPPPATH=["#thirdparty/freetype/include"])
env_module.Append(CPPDEFINES=["GD_CQUEUE", "GD_GODOT_ENET", "GD_NO_UNUSED_FUNCTIONS"])

# Compile as a static library
lib = env_module.Library("gdextensions", thirdparty_sources + sources)
# Add the library as a dependency of the final executable
env.Prepend(LIBS=[lib])

if sub_enabled:
    print("(GDextensions) Enabling submodules: %s" % sorted(sub_enabled))
