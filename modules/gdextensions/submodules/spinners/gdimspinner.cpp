/**************************************************************************/
/*  gdimspinner.cpp                                                       */
/**************************************************************************/
/*                         This file is part of:                          */
/*                             GODOT ENGINE                               */
/*                        https://godotengine.org                         */
/**************************************************************************/
/* Copyright (c) 2014-present Godot Engine contributors (see AUTHORS.md). */
/* Copyright (c) 2007-2014 Juan Linietsky, Ariel Manzur.                  */
/*                                                                        */
/* Permission is hereby granted, free of charge, to any person obtaining  */
/* a copy of this software and associated documentation files (the        */
/* "Software"), to deal in the Software without restriction, including    */
/* without limitation the rights to use, copy, modify, merge, publish,    */
/* distribute, sublicense, and/or sell copies of the Software, and to     */
/* permit persons to whom the Software is furnished to do so, subject to  */
/* the following conditions:                                              */
/*                                                                        */
/* The above copyright notice and this permission notice shall be         */
/* included in all copies or substantial portions of the Software.        */
/*                                                                        */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,        */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF     */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. */
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY   */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,   */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE      */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                 */
/**************************************************************************/

#include "gdimspinner.h"

#include "common/gd_core.h"
#include "core/reference.h"

SpinnerCanvas::SpinnerCanvas() {
	velocity = 1;
	hue = 0;
}

// Node2D

void Spinner::_notification(int p_notification) {
	switch (p_notification) {
		case NOTIFICATION_DRAW: {
			canvas->draw_spinners(spinner_variant);
		} break;
		case NOTIFICATION_ENTER_TREE: {
		} break;
		case NOTIFICATION_EXIT_TREE: {
		} break;
		case NOTIFICATION_PROCESS: {
		} break;
	}
}

void Spinner::set_spinner_active(bool p_active) {
	if (spinner_active != p_active) {
		spinner_active = p_active;
		set_process_internal(p_active);
		update();
	}
}

bool Spinner::get_spinner_active() const {
	return spinner_active;
}

void Spinner::set_spinner_variant(int p_variant) {
	if (spinner_variant != p_variant) {
		spinner_variant = p_variant;
		update();
	}
}

int Spinner::get_spinner_variant() const {
	return spinner_variant;
}

void Spinner::_bind_methods() {
	ClassDB::bind_method(D_METHOD("set_spinner_variant"), &Spinner::set_spinner_variant);
	ClassDB::bind_method(D_METHOD("get_spinner_variant"), &Spinner::get_spinner_variant);
	ClassDB::bind_method(D_METHOD("set_spinner_active"), &Spinner::set_spinner_active);
	ClassDB::bind_method(D_METHOD("get_spinner_active"), &Spinner::get_spinner_active);

	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "active"), "set_spinner_active", "get_spinner_active");
	ADD_PROPERTY(PropertyInfo(Variant::BOOL, "variant"), "set_spinner_variant", "get_spinner_variant");

	BIND_ENUM_CONSTANT(SPINNER);
	BIND_ENUM_CONSTANT(SPINNERANG);
	BIND_ENUM_CONSTANT(SPINNERDOTS);
	BIND_ENUM_CONSTANT(SPINNERANGNOBG);
	BIND_ENUM_CONSTANT(SPINNERANG270);
	BIND_ENUM_CONSTANT(SPINNERANG270NOBG);
	BIND_ENUM_CONSTANT(SPINNERVDOTS);
	BIND_ENUM_CONSTANT(SPINNERBOUNCEBALL);
	BIND_ENUM_CONSTANT(SPINNERANGECLIPSE);
	BIND_ENUM_CONSTANT(SPINNERINGYANG);
	BIND_ENUM_CONSTANT(SPINNERBARCHARTSINE);
	BIND_ENUM_CONSTANT(SPINNERBOUNCEDOTS);
	BIND_ENUM_CONSTANT(SPINNERFADEDOTS);
	BIND_ENUM_CONSTANT(SPINNERSCALEDOTS);
	BIND_ENUM_CONSTANT(SPINNERMOVINGDOTS);
	BIND_ENUM_CONSTANT(SPINNERROTATEDOTS);
	BIND_ENUM_CONSTANT(SPINNERTWINANG);
	BIND_ENUM_CONSTANT(SPINNERCLOCK);
	BIND_ENUM_CONSTANT(SPINNERINGYANGR);
	BIND_ENUM_CONSTANT(SPINNERBARCHARTSINE2);
	BIND_ENUM_CONSTANT(SPINNERTWINANG180);
	BIND_ENUM_CONSTANT(SPINNERTWINANG360);
	BIND_ENUM_CONSTANT(SPINNERINCDOTS);
	BIND_ENUM_CONSTANT(SPINNERDOTSWOBG);
	BIND_ENUM_CONSTANT(SPINNERINCSCALEDOTS);
	BIND_ENUM_CONSTANT(SPINNERANG90BG);
	BIND_ENUM_CONSTANT(SPINNERANG90);
	BIND_ENUM_CONSTANT(SPINNERFADEBARS);
	BIND_ENUM_CONSTANT(SPINNERPULSARSEQ);
	BIND_ENUM_CONSTANT(SPINNERINGYANGR2);
	BIND_ENUM_CONSTANT(SPINNERBARCHARTRAINBOW);
	BIND_ENUM_CONSTANT(SPINNERBARSROTATEFADE);
	BIND_ENUM_CONSTANT(SPINNERFADESCALEBARS);
	BIND_ENUM_CONSTANT(SPINNERBARSSCALEMIDDLE);
	BIND_ENUM_CONSTANT(SPINNERANGTWIN1);
	BIND_ENUM_CONSTANT(SPINNERANGTWIN2);
	BIND_ENUM_CONSTANT(SPINNERANGTWIN3);
	BIND_ENUM_CONSTANT(SPINNERANGTWIN4);
	BIND_ENUM_CONSTANT(SPINNERTWINPULSAR);
	BIND_ENUM_CONSTANT(SPINNERANGTWIN5);
	BIND_ENUM_CONSTANT(SPINNERBLOCKS);
	BIND_ENUM_CONSTANT(SPINNERTWINBALL);
	BIND_ENUM_CONSTANT(SPINNERTWINBALL2);
	BIND_ENUM_CONSTANT(SPINNERTWINBALL3);
	BIND_ENUM_CONSTANT(SPINNERANGTRIPLE);
	BIND_ENUM_CONSTANT(SPINNERINCFULLDOTS);
	BIND_ENUM_CONSTANT(SPINNERGOOEYBALLS);
	BIND_ENUM_CONSTANT(SPINNERROTATEGOOEYBALLS2);
	BIND_ENUM_CONSTANT(SPINNERROTATEGOOEYBALLS3);
	BIND_ENUM_CONSTANT(SPINNERMOONLINE);
	BIND_ENUM_CONSTANT(SPINNERARCROTATION);
	BIND_ENUM_CONSTANT(SPINNERFLUID);
	BIND_ENUM_CONSTANT(SPINNERARCFADE);
	BIND_ENUM_CONSTANT(SPINNERFILLING);
	BIND_ENUM_CONSTANT(SPINNERTOPUP);
	BIND_ENUM_CONSTANT(SPINNERFADEPULSAR);
	BIND_ENUM_CONSTANT(SPINNERFADEPULSAR2);
	BIND_ENUM_CONSTANT(SPINNERPULSAR);
	BIND_ENUM_CONSTANT(SPINNERDOUBLEFADEPULSAR);
	BIND_ENUM_CONSTANT(SPINNERFILLEDARCFADE);
	BIND_ENUM_CONSTANT(SPINNERFILLEDARCFADE6);
	BIND_ENUM_CONSTANT(SPINNERFILLEDARCFADE8);
	BIND_ENUM_CONSTANT(SPINNERFILLEDARCCOLOR);
	BIND_ENUM_CONSTANT(SPINNERCIRCLEDROP);
	BIND_ENUM_CONSTANT(SPINNERSURROUNDEDINDICATOR);
	BIND_ENUM_CONSTANT(SPINNERTRIANGLESSELETOR);
	BIND_ENUM_CONSTANT(SPINNERFLOWINGFRADIENT);
	BIND_ENUM_CONSTANT(SPINNERROTATESEGMENTS);
	BIND_ENUM_CONSTANT(SPINNERROTATESEGMENTS2);
	BIND_ENUM_CONSTANT(SPINNERROTATESEGMENTS3);
	BIND_ENUM_CONSTANT(SPINNERLEMNISCATE);
	BIND_ENUM_CONSTANT(SPINNERROTATEGEAR);
	BIND_ENUM_CONSTANT(SPINNERROTATEDATOM);
	BIND_ENUM_CONSTANT(SPINNERATOM);
	BIND_ENUM_CONSTANT(SPINNERRAINBOWBALLS);
	BIND_ENUM_CONSTANT(SPINNERCAMERA);
	BIND_ENUM_CONSTANT(SPINNERARCPOLARFADE);
	BIND_ENUM_CONSTANT(SPINNERARCPOLARRADIUS);
	BIND_ENUM_CONSTANT(SPINNERARCPOLARPIES);
	BIND_ENUM_CONSTANT(SPINNERARCPOLARPIES2);
	BIND_ENUM_CONSTANT(SPINNERSCALEBLOCKS);
	BIND_ENUM_CONSTANT(SPINNERROTATETRIANGLES);
	BIND_ENUM_CONSTANT(SPINNERARCWEDGES);
	BIND_ENUM_CONSTANT(SPINNERSCALESQUARES);
	BIND_ENUM_CONSTANT(SPINNERMOVINGDHBOOTS);
	BIND_ENUM_CONSTANT(SPINNERMOVINGHBODOTS2);
	BIND_ENUM_CONSTANT(SPINNERBOUNCEBALL3);
	BIND_ENUM_CONSTANT(SPINNERBOUNCEBALLSHADOW);
	BIND_ENUM_CONSTANT(SPINNERBOUNCEBALL5SHADOW);
	BIND_ENUM_CONSTANT(SPINNERSQUARESTROKEFADE);
	BIND_ENUM_CONSTANT(SPINNERSQUARESTROKEFILL);
	BIND_ENUM_CONSTANT(SPINNERSWINGDOTS);
	BIND_ENUM_CONSTANT(SPINNERROTATEWHEEL);
	BIND_ENUM_CONSTANT(SPINNERWAVEDOTS);
	BIND_ENUM_CONSTANT(SPINNERROTATESHAPES);
	BIND_ENUM_CONSTANT(SPINNERSQUARESTROKELOANDING);
	BIND_ENUM_CONSTANT(SPINNERSINSQUARES);
	BIND_ENUM_CONSTANT(SPINNERZIPDOTS);
	BIND_ENUM_CONSTANT(SPINNERDOTSTOBAR);
	BIND_ENUM_CONSTANT(SPINNERSINEARCS);
	BIND_ENUM_CONSTANT(SPINNERTRIANGLESSHIFT);
	BIND_ENUM_CONSTANT(SPINNERCIRCULARLINES);
	BIND_ENUM_CONSTANT(SPINNERLOADINGRING);
	BIND_ENUM_CONSTANT(SPINNERPATTERNRINGS);
	BIND_ENUM_CONSTANT(SPINNERPATTERNSPHERE);
	BIND_ENUM_CONSTANT(SPINNERRINGSNCHRONOUS);
	BIND_ENUM_CONSTANT(SPINNERRINGWATERMARKS);
	BIND_ENUM_CONSTANT(SPINNERFILLEDARCRING);
	BIND_ENUM_CONSTANT(SPINNERPOINTSSHIFT);
	BIND_ENUM_CONSTANT(SPINNERCIRCULARPOINTS);
	BIND_ENUM_CONSTANT(SPINNERCURVEDCIRCLE);
	BIND_ENUM_CONSTANT(SPINNERMODCIRCLRE);
	BIND_ENUM_CONSTANT(SPINNERMODCIRCLRE2);
	BIND_ENUM_CONSTANT(SPINNERPATTERNECLIPSE);
	BIND_ENUM_CONSTANT(SPINNERPATTERNECLIPSE2);
	BIND_ENUM_CONSTANT(SPINNERMULTIFADEDOTS);
	BIND_ENUM_CONSTANT(SPINNERRAINBOWSHOT);
	BIND_ENUM_CONSTANT(SPINNERSPIRAL);
	BIND_ENUM_CONSTANT(SPINNERSPIRALEYE);
	BIND_ENUM_CONSTANT(SPINNERWIFIINDICATOR);
	BIND_ENUM_CONSTANT(SPINNERMOVINGDOTS3);
	BIND_ENUM_CONSTANT(SPINNERMOVINGDOTS4);
	BIND_ENUM_CONSTANT(SPINNERMOVINGDOTS5);
	BIND_ENUM_CONSTANT(SPINNERDNADOTSH);
	BIND_ENUM_CONSTANT(SPINNERDNADOTSV);
	BIND_ENUM_CONSTANT(SPINNERROTATEDOTS2);
	BIND_ENUM_CONSTANT(SPINNERSEVENSEGMENTS);
	BIND_ENUM_CONSTANT(SPINNERSOLARBALLS);
	BIND_ENUM_CONSTANT(SPINNERSOLARARCS);
	BIND_ENUM_CONSTANT(SPINNERRAINBOW);
}

Spinner::Spinner() {
	spinner_active = true;
	spinner_variant = 0;
	canvas = newref(SpinnerCanvas);
}
