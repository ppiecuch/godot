#!/usr/bin/env python
import os
import version

Import("env")
Import("env_modules")

is_gcc = "gcc" in os.path.basename(env["CC"])
is_clang_or_gcc = (
    ("gcc" in os.path.basename(env["CC"])) or ("clang" in os.path.basename(env["CC"])) or ("osxcross" in env)
)

env_module = env_modules.Clone()

sources = Glob("*.cpp")
modules = [
    "core",
    "common",
    "bulletkit",
    "visual",
    "environment/tree_2d",
    "environment/spherical_waves",
    "environment/water_splash",
    "environment/starfield",
    "environment/spider_anim",
    "smooth",
    "debugdraw",
    "statemachine",
    "benet",
    "behaviornode",
    "settings",
    "sfxr",
    "flashdb",
    "vgamepad",
    "landiscovery",
]

if env["tools"]:
    modules += ["qrcodetexture"]

if not env["disable_3d"]:
    modules += ["environment/vegetation_instance", "ccd/src"]

ignore = []
if env["platform"] == "3ds" or env["platform"] == "psp":
    ignore += ["visual/heatmap.cpp"]
if env["disable_advanced_gui"]:
    ignore += ["core/input_map_editor.cpp"]
if not env["module_mbedtls_enabled"]:
    ignore += ["core/cripter.cpp"]

for m in modules:
    files = Glob("%s/*.cpp" % m)
    sources += [f for f in files if str(f) not in ignore]
    sources += Glob("%s/*.c" % m)

thirdparty_sources = [
    "#thirdparty/misc/cqueue.cpp",
]
if not env["disable_3d"]:
    thirdparty_sources += Glob("#thirdparty/libccd/src/*.c") + Glob("#thirdparty/libccd/src/testsuites/*.c")

env_module.Append(
    CPPPATH=[
        "#thirdparty/enet",
        "#thirdparty/flashdb/inc",
        "#thirdparty/libccd/src",
        "#thirdparty",
        ".",
    ]
)

if env["builtin_freetype"]:
    env_module.Prepend(CPPPATH=["#thirdparty/freetype/include"])
env_module.Append(CPPDEFINES=["GD_CQUEUE", "GD_GODOT_ENET", "GD_NO_UNUSED_FUNCTIONS"])

# Compile as a static library
lib = env_module.Library("gdextensions", thirdparty_sources + sources)
# Add the library as a dependency of the final executable
env.Prepend(LIBS=[lib])
