<?xml version="1.0" encoding="UTF-8" ?>
<class name="BulletSpawner" inherits="Node2D" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Dynamic spawner node for [Bullet] objects.
	</brief_description>
	<description>
		Dynamic spawner node for [Bullet] objects.
		Consists of firing controls, an associated bullet type, pattern controls, and transform modifiers.
		A [BulletSpawner] in a scene will automatically connect to the [BulletServerRelay] singleton on ready, to send spawning signals to any active [BulletServer] nodes.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="can_fire" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this spawner is not in the editor, in the scene tree, and has a valid [code]bullet_type[/code].
			</description>
		</method>
		<method name="fire">
			<return type="void" />
			<description>
				Emits the "volley_fired" signal with the current parameters, to be connected to a bullet server for spawning the bullets appropiately.
				Passes duplicate of [code]bullet_type[/code] instead of referencing the resource directly, so active bullets' type will not be modified by changes made in this spawner.
			</description>
		</method>
		<method name="fire_shots">
			<return type="void" />
			<argument index="0" name="shot_indices" type="PoolIntArray" />
			<description>
				Functionally similar to [code]fire[/code], but takes an array of integers and fires only the shots whose indices are included.
				Ignores [code]pattern_mode[/code] and [code]active_shot_indices[/code].
			</description>
		</method>
		<method name="get_scattered_volley">
			<return type="Array" />
			<description>
				Returns the volley defined by this spawner's properties, with shot directions adjusted for scatter.
				The [Array] returned contains of [Dictionary] elements consisting of a [Vector2] "position" (bullet's spawn point relative to spawner), a [Vector2] "direction" (bullet's global direction vector).
			</description>
		</method>
		<method name="get_volley">
			<return type="Array" />
			<description>
				Returns the volley defined by this spawner's properties.
				The [Array] returned contains of [Dictionary] elements consisting of a [Vector2] "position" (bullet's spawn point relative to spawner) and a [Vector2] "direction" (bullet's global direction vector).
			</description>
		</method>
	</methods>
	<members>
		<member name="active_shot_indices" type="PoolIntArray" setter="set_active_shot_indices" getter="get_active_shot_indices" default="PoolIntArray(  )">
			The array defining the indices of the active shots for the current volley.  Only active shots will be fired in MANUAL pattern mode.
			Values entered here can be animated/tweened to make "sweeps", progressively activating and deactivating shots along the arc.
		</member>
		<member name="aim_angle" type="float" setter="set_aim_angle" getter="get_aim_angle" default="0.0">
			In [code]RADIAL[/code] aim mode, the offset applied to all spawned bullet's initial direction, in radians.
			In [code]UNIFORM[/code] aim mode, the global angle along which all spawned bullets will travel, in radians.
		</member>
		<member name="aim_angle_degrees" type="float" setter="set_aim_angle_degrees" getter="get_aim_angle_degrees" default="0.0">
			In [code]RADIAL[/code] aim mode, the offset applied to all spawned bullet's initial direction, in degrees.
			In [code]UNIFORM[/code] aim mode, the global angle along which all spawned bullets will travel, in degrees.
		</member>
		<member name="aim_mode" type="int" setter="set_aim_mode" getter="get_aim_mode" enum="BulletSpawner.AimMode" default="0">
			The mode used by this spawner to calculate the direction each bullet is fired in.
			[code]RADIAL[/code] causes bullets' directions to be determined by their position along this spawner's circumference, radiating outwards. Can be rotated with [code]aim_angle[/code].
			[code]UNIFORM[/code] causes all bullets to share the same direction vector. Defaults to a vector of (1,0), and rotated with [code]aim_angle[/code].
			[code]TARGET_RELATIVE[/code] causes all bullets' directions to point towards [code]aim_target_position[/code], relative to the spawner's center.
			[code]TARGET_GLOBAL[/code] causes all bullet's directions to point towards [code]aim_target_position[/code], in global space.
		</member>
		<member name="aim_target_position" type="Vector2" setter="set_aim_target_position" getter="get_aim_target_position" default="Vector2( 0, 0 )">
			The point all bullets fired by this spawner will be directed towards. For [code]TARGET_RELATIVE[/code] and [code]TARGET_GLOBAL[/code] aim modes.
		</member>
		<member name="arc_offset" type="float" setter="set_arc_offset" getter="get_arc_offset" default="0.0">
			The rotational offset of the volley's shot positions within the defined arc.
			At [code]0[/code], the shot positions are unchanged. At [code]-1[/code], the volley center is rotated to the counterclockwise extent of the arc, and at [code]1[/code], the volley center is rotated to the clockwise extent.
			Used to simulate arc rotation without affecting the bounds within which bullets are fired. With an arc width of 360 degrees, its visible effect is indistinguishable from [code]arc_rotation[/code].
			Causes issues with [code]MANUAL[/code] pattern mode, because it interferes with volley shot indexing.
		</member>
		<member name="arc_rotation" type="float" setter="set_arc_rotation" getter="get_arc_rotation" default="0.0">
			The rotation of the firing arc around this spawner's circumference, with respect to any scaling applied to this spawner. Measured in radians.
			Used rotate the positions of shots around this spawner, and can create interesting effects with uneven scale ratios.  With a 1:1 scale ratio, its visible effect is indistinguishable from [code]rotation[/code].
		</member>
		<member name="arc_rotation_degrees" type="float" setter="set_arc_rotation_degrees" getter="get_arc_rotation_degrees" default="0.0">
			The rotation of the firing arc around this spawner's circumference, with respect to any scaling applied to this spawner. Measured in degrees.
			Used rotate the positions of shots around this spawner, and can create interesting effects with uneven scale ratios.  With a 1:1 scale ratio, its visible effect is indistinguishable from [code]rotation[/code].
		</member>
		<member name="arc_width" type="float" setter="set_arc_width" getter="get_arc_width" default="0.0">
			The width of the arc in which bullets will be spawned, in radians. Shots in the volley are spaced evenly along this arc.
		</member>
		<member name="arc_width_degrees" type="float" setter="set_arc_width_degrees" getter="get_arc_width_degrees" default="0.0">
			The width of the arc in which bullets will be spawned, in degrees. Shots in the volley are spaced evenly along this arc.
		</member>
		<member name="autofire" type="bool" setter="set_autofire" getter="get_autofire" default="false">
			If [code]true[/code], this spawner will automatically fire a volley once [code]interval_frames[/code] have elapsed.
		</member>
		<member name="bullet_type" type="BulletType" setter="set_bullet_type" getter="get_bullet_type">
			The appearance and behavioural information used by bullets spawned by this spawner.
			A duplicate is passed to the volley when fired, so changes in this spawner's bullet type will not retroactively affect active bullets.
		</member>
		<member name="interval_frames" type="int" setter="set_interval_frames" getter="get_interval_frames" default="10">
			The number of frames to elapse before firing the next volley, if [code]autofire[/code] is enabled.
		</member>
		<member name="pattern_mode" type="int" setter="set_pattern_mode" getter="get_pattern_mode" enum="BulletSpawner.PatternMode" default="0">
			The method used to determine which shots will fire in the current volley.
			[code]ALL[/code] means all shots will fire, with no user configuration.
			[code]MANUAL[/code] means that the indices of shots to fire must be manually defined in [code]active_shot_indices[/code].
		</member>
		<member name="preview_arc_points" type="int" setter="set_preview_arc_points" getter="get_preview_arc_points" default="32">
			The number of points used to draw preview arcs for this spawner.
		</member>
		<member name="preview_color" type="Color" setter="set_preview_color" getter="get_preview_color" default="Color( 0, 1, 0, 1 )">
			The base color of the preview of this spawner.
		</member>
		<member name="preview_extent" type="float" setter="set_preview_extent" getter="get_preview_extent" default="50.0">
			The length of shots in the preview of this spawner.
		</member>
		<member name="preview_shot_color" type="Color" setter="set_preview_shot_color" getter="get_preview_shot_color" default="Color( 1, 1, 1, 1 )">
			The color used to draw the shots in the preview of this spawner.
		</member>
		<member name="preview_visible_in_game" type="bool" setter="set_preview_visible_in_game" getter="get_preview_visible_in_game" default="false">
			If [code]true[/code], this spawner's preview will be drawn in game.
		</member>
		<member name="radius" type="float" setter="set_radius" getter="get_radius" default="10.0">
			The radius of the spawning circle. All bullets originate at some position on this circle, as determined by the arc settings.
			At [code]0[/code], in aim modes other than [code]RADIAL[/code], only a single shot will fire and [code]arc_width[/code] will be useless, because all shots will have the same spawn point and direction.
		</member>
		<member name="relay_autoconnect" type="bool" setter="set_relay_autoconnect" getter="get_relay_autoconnect" default="true">
			If [code]true[/code], this spawner will automatically connect to the [BulletServerRelay] singleton on ready. Provides effortless connection between spawner and server. 
			If disabled, you must manually connect this spawner's [code]volley_fired[/code] signal to a server via script.
		</member>
		<member name="scatter_mode" type="int" setter="set_scatter_mode" getter="get_scatter_mode" enum="BulletSpawner.ScatterMode" default="0">
			The mode used to scatter bullets when firing.
			[code]BULLET[/code] causes each bullet's initial direction to be offset by individually randomised amounts.
			[code]VOLLEY[/code] causes every bullet's initial direction to be offset by the same randomised amount.
		</member>
		<member name="scatter_range" type="float" setter="set_scatter_range" getter="get_scatter_range" default="0.0">
			The range, in radians, in which bullets or volleys will randomly have their initial direction offset by when scattering.
		</member>
		<member name="scatter_range_degrees" type="float" setter="set_scatter_range_degrees" getter="get_scatter_range_degrees">
			The range, in degrees, in which bullets or volleys will randomly have their initial direction offset by when scattering.
		</member>
		<member name="shot_count" type="int" setter="set_shot_count" getter="get_shot_count" default="1">
			The number of shots in the current volley.
			Each shot represents a spawn point for a bullet, and has its own position and direction values that are passed to the bullet when fired.
			Shots can be fired collectively or individually. See [code]pattern_mode[/code] for more info.
		</member>
	</members>
	<signals>
		<signal name="volley_fired">
			<argument index="0" name="type" type="BulletType" />
			<argument index="1" name="origin" type="Vector2" />
			<argument index="2" name="volley" type="Array" />
			<description>
				Emitted when a volley of bullets is fired. To be passed to a server for spawning the required volley.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="ALL" value="0" enum="PatternMode">
		</constant>
		<constant name="MANUAL" value="1" enum="PatternMode">
		</constant>
		<constant name="RADIAL" value="0" enum="AimMode">
		</constant>
		<constant name="UNIFORM" value="1" enum="AimMode">
		</constant>
		<constant name="TARGET_RELATIVE" value="2" enum="AimMode">
		</constant>
		<constant name="TARGET_GLOBAL" value="3" enum="AimMode">
		</constant>
		<constant name="NONE" value="0" enum="ScatterMode">
		</constant>
		<constant name="BULLET" value="1" enum="ScatterMode">
		</constant>
		<constant name="VOLLEY" value="2" enum="ScatterMode">
		</constant>
	</constants>
</class>
