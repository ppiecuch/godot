/*************************************************************************/
/*  api.pb.cc                                                            */
/*************************************************************************/
/*                       This file is part of:                           */
/*                           GODOT ENGINE                                */
/*                      https://godotengine.org                          */
/*************************************************************************/
/* Copyright (c) 2007-2022 Juan Linietsky, Ariel Manzur.                 */
/* Copyright (c) 2014-2022 Godot Engine contributors (cf. AUTHORS.md).   */
/*                                                                       */
/* Permission is hereby granted, free of charge, to any person obtaining */
/* a copy of this software and associated documentation files (the       */
/* "Software"), to deal in the Software without restriction, including   */
/* without limitation the rights to use, copy, modify, merge, publish,   */
/* distribute, sublicense, and/or sell copies of the Software, and to    */
/* permit persons to whom the Software is furnished to do so, subject to */
/* the following conditions:                                             */
/*                                                                       */
/* The above copyright notice and this permission notice shall be        */
/* included in all copies or substantial portions of the Software.       */
/*                                                                       */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
/*************************************************************************/

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateRequest_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticateRequest_Email_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticateRequest_GameCenter_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthenticateResponse_Error_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticateResponse_Session_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Friend_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Group_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupUser_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heartbeat_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Leaderboard_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderboardRecord_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logout_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Match_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchData_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchDataSend_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchPresence_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MatchmakeFilter_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakeFilter_RangeFilter_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakeFilter_TermFilter_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MatchmakeMatched_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MatchmakeMatched_UserProperty_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Notification_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notifications_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyPair_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyPair_StringSet_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Self_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TFriends_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TFriendsAdd_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFriendsAdd_FriendsAdd_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFriendsBlock_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFriendsList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFriendsRemove_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupUsers_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupUsersAdd_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupUsersAdd_GroupUserAdd_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupUsersKick_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupUsersKick_GroupUserKick_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupUsersList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupUsersPromote_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupUsersPromote_GroupUserPromote_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroups_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsCreate_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsCreate_GroupCreate_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsFetch_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsFetch_GroupFetch_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsJoin_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsLeave_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsRemove_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsSelf_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsSelf_GroupSelf_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsSelfList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsUpdate_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsUpdate_GroupUpdate_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TLeaderboardRecords_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLeaderboardRecordsFetch_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TLeaderboardRecordsList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLeaderboardRecordsList_Owners_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TLeaderboardRecordsWrite_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLeaderboardRecordsWrite_LeaderboardRecordWrite_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TLeaderboards_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLeaderboardsList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TLink_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TMatch_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchCreate_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TMatches_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TMatchesJoin_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchesJoin_MatchJoin_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchesLeave_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TMatchmakeAdd_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchmakeRemove_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchmakeTicket_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TNotifications_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TNotificationsList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TNotificationsRemove_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPurchaseRecord_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TPurchaseValidation_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPurchaseValidation_ApplePurchase_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPurchaseValidation_GooglePurchase_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TRpc_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TSelf_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TSelfFetch_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TSelfUpdate_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageData_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageData_StorageData_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageFetch_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageFetch_StorageKey_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageKeys_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageKeys_StorageKey_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageRemove_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageRemove_StorageKey_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageUpdate_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TStorageUpdate_StorageUpdate_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageUpdate_StorageUpdate_StorageKey_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageUpdate_StorageUpdate_UpdateOp_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageWrite_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageWrite_StorageData_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TTopicMessageAck_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopicMessageSend_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopicMessages_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TTopicMessagesList_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopics_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TTopics_Topic_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopicsJoin_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TTopicsJoin_TopicJoin_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopicsLeave_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TUnlink_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TUsers_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TUsersFetch_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TUsersFetch_UsersFetch_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicId_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicMessage_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TopicPresence_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_api_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_api_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserPresence_api_2eproto;
namespace server {
class HeartbeatDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Heartbeat> _instance;
} _Heartbeat_default_instance_;
class ErrorDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Error> _instance;
} _Error_default_instance_;
class AuthenticateRequest_EmailDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateRequest_Email> _instance;
} _AuthenticateRequest_Email_default_instance_;
class AuthenticateRequest_GameCenterDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateRequest_GameCenter> _instance;
} _AuthenticateRequest_GameCenter_default_instance_;
class AuthenticateRequestDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateRequest> _instance;
} _AuthenticateRequest_default_instance_;
class AuthenticateResponse_SessionDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateResponse_Session> _instance;
} _AuthenticateResponse_Session_default_instance_;
class AuthenticateResponse_ErrorDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateResponse_Error> _instance;
} _AuthenticateResponse_Error_default_instance_;
class AuthenticateResponseDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticateResponse> _instance;
} _AuthenticateResponse_default_instance_;
class EnvelopeDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Envelope> _instance;
} _Envelope_default_instance_;
class LogoutDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logout> _instance;
} _Logout_default_instance_;
class TLinkDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLink> _instance;
} _TLink_default_instance_;
class TUnlinkDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TUnlink> _instance;
} _TUnlink_default_instance_;
class UserDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class SelfDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Self> _instance;
} _Self_default_instance_;
class TSelfFetchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TSelfFetch> _instance;
} _TSelfFetch_default_instance_;
class TSelfDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TSelf> _instance;
} _TSelf_default_instance_;
class TSelfUpdateDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TSelfUpdate> _instance;
} _TSelfUpdate_default_instance_;
class TUsersFetch_UsersFetchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TUsersFetch_UsersFetch> _instance;
} _TUsersFetch_UsersFetch_default_instance_;
class TUsersFetchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TUsersFetch> _instance;
} _TUsersFetch_default_instance_;
class TUsersDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TUsers> _instance;
} _TUsers_default_instance_;
class FriendDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Friend> _instance;
} _Friend_default_instance_;
class TFriendsAdd_FriendsAddDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFriendsAdd_FriendsAdd> _instance;
} _TFriendsAdd_FriendsAdd_default_instance_;
class TFriendsAddDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFriendsAdd> _instance;
} _TFriendsAdd_default_instance_;
class TFriendsRemoveDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFriendsRemove> _instance;
} _TFriendsRemove_default_instance_;
class TFriendsBlockDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFriendsBlock> _instance;
} _TFriendsBlock_default_instance_;
class TFriendsListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFriendsList> _instance;
} _TFriendsList_default_instance_;
class TFriendsDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TFriends> _instance;
} _TFriends_default_instance_;
class GroupDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Group> _instance;
} _Group_default_instance_;
class TGroupsCreate_GroupCreateDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsCreate_GroupCreate> _instance;
} _TGroupsCreate_GroupCreate_default_instance_;
class TGroupsCreateDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsCreate> _instance;
} _TGroupsCreate_default_instance_;
class TGroupsUpdate_GroupUpdateDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsUpdate_GroupUpdate> _instance;
} _TGroupsUpdate_GroupUpdate_default_instance_;
class TGroupsUpdateDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsUpdate> _instance;
} _TGroupsUpdate_default_instance_;
class TGroupsRemoveDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsRemove> _instance;
} _TGroupsRemove_default_instance_;
class TGroupsSelfListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsSelfList> _instance;
} _TGroupsSelfList_default_instance_;
class TGroupsFetch_GroupFetchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsFetch_GroupFetch> _instance;
} _TGroupsFetch_GroupFetch_default_instance_;
class TGroupsFetchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsFetch> _instance;
} _TGroupsFetch_default_instance_;
class TGroupsListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsList> _instance;
} _TGroupsList_default_instance_;
class TGroupsDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroups> _instance;
} _TGroups_default_instance_;
class TGroupsSelf_GroupSelfDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsSelf_GroupSelf> _instance;
} _TGroupsSelf_GroupSelf_default_instance_;
class TGroupsSelfDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsSelf> _instance;
} _TGroupsSelf_default_instance_;
class GroupUserDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroupUser> _instance;
} _GroupUser_default_instance_;
class TGroupUsersListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupUsersList> _instance;
} _TGroupUsersList_default_instance_;
class TGroupUsersDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupUsers> _instance;
} _TGroupUsers_default_instance_;
class TGroupsJoinDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsJoin> _instance;
} _TGroupsJoin_default_instance_;
class TGroupsLeaveDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupsLeave> _instance;
} _TGroupsLeave_default_instance_;
class TGroupUsersAdd_GroupUserAddDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupUsersAdd_GroupUserAdd> _instance;
} _TGroupUsersAdd_GroupUserAdd_default_instance_;
class TGroupUsersAddDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupUsersAdd> _instance;
} _TGroupUsersAdd_default_instance_;
class TGroupUsersKick_GroupUserKickDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupUsersKick_GroupUserKick> _instance;
} _TGroupUsersKick_GroupUserKick_default_instance_;
class TGroupUsersKickDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupUsersKick> _instance;
} _TGroupUsersKick_default_instance_;
class TGroupUsersPromote_GroupUserPromoteDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupUsersPromote_GroupUserPromote> _instance;
} _TGroupUsersPromote_GroupUserPromote_default_instance_;
class TGroupUsersPromoteDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TGroupUsersPromote> _instance;
} _TGroupUsersPromote_default_instance_;
class TopicIdDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicId> _instance;
} _TopicId_default_instance_;
class UserPresenceDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserPresence> _instance;
} _UserPresence_default_instance_;
class TTopicsJoin_TopicJoinDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopicsJoin_TopicJoin> _instance;
} _TTopicsJoin_TopicJoin_default_instance_;
class TTopicsJoinDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopicsJoin> _instance;
} _TTopicsJoin_default_instance_;
class TTopics_TopicDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopics_Topic> _instance;
} _TTopics_Topic_default_instance_;
class TTopicsDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopics> _instance;
} _TTopics_default_instance_;
class TTopicsLeaveDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopicsLeave> _instance;
} _TTopicsLeave_default_instance_;
class TTopicMessageSendDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopicMessageSend> _instance;
} _TTopicMessageSend_default_instance_;
class TTopicMessageAckDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopicMessageAck> _instance;
} _TTopicMessageAck_default_instance_;
class TopicMessageDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicMessage> _instance;
} _TopicMessage_default_instance_;
class TTopicMessagesListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopicMessagesList> _instance;
} _TTopicMessagesList_default_instance_;
class TTopicMessagesDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TTopicMessages> _instance;
} _TTopicMessages_default_instance_;
class TopicPresenceDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicPresence> _instance;
} _TopicPresence_default_instance_;
class PropertyPair_StringSetDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyPair_StringSet> _instance;
} _PropertyPair_StringSet_default_instance_;
class PropertyPairDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PropertyPair> _instance;
} _PropertyPair_default_instance_;
class MatchmakeFilter_TermFilterDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakeFilter_TermFilter> _instance;
} _MatchmakeFilter_TermFilter_default_instance_;
class MatchmakeFilter_RangeFilterDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakeFilter_RangeFilter> _instance;
} _MatchmakeFilter_RangeFilter_default_instance_;
class MatchmakeFilterDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakeFilter> _instance;
} _MatchmakeFilter_default_instance_;
class TMatchmakeAddDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatchmakeAdd> _instance;
} _TMatchmakeAdd_default_instance_;
class TMatchmakeTicketDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatchmakeTicket> _instance;
} _TMatchmakeTicket_default_instance_;
class TMatchmakeRemoveDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatchmakeRemove> _instance;
} _TMatchmakeRemove_default_instance_;
class MatchmakeMatched_UserPropertyDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakeMatched_UserProperty> _instance;
} _MatchmakeMatched_UserProperty_default_instance_;
class MatchmakeMatchedDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchmakeMatched> _instance;
} _MatchmakeMatched_default_instance_;
class MatchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Match> _instance;
} _Match_default_instance_;
class MatchPresenceDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchPresence> _instance;
} _MatchPresence_default_instance_;
class TMatchCreateDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatchCreate> _instance;
} _TMatchCreate_default_instance_;
class TMatchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatch> _instance;
} _TMatch_default_instance_;
class TMatchesJoin_MatchJoinDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatchesJoin_MatchJoin> _instance;
} _TMatchesJoin_MatchJoin_default_instance_;
class TMatchesJoinDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatchesJoin> _instance;
} _TMatchesJoin_default_instance_;
class TMatchesDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatches> _instance;
} _TMatches_default_instance_;
class MatchDataSendDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchDataSend> _instance;
} _MatchDataSend_default_instance_;
class MatchDataDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchData> _instance;
} _MatchData_default_instance_;
class TMatchesLeaveDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TMatchesLeave> _instance;
} _TMatchesLeave_default_instance_;
class TStorageListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageList> _instance;
} _TStorageList_default_instance_;
class TStorageFetch_StorageKeyDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageFetch_StorageKey> _instance;
} _TStorageFetch_StorageKey_default_instance_;
class TStorageFetchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageFetch> _instance;
} _TStorageFetch_default_instance_;
class TStorageData_StorageDataDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageData_StorageData> _instance;
} _TStorageData_StorageData_default_instance_;
class TStorageDataDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageData> _instance;
} _TStorageData_default_instance_;
class TStorageWrite_StorageDataDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageWrite_StorageData> _instance;
} _TStorageWrite_StorageData_default_instance_;
class TStorageWriteDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageWrite> _instance;
} _TStorageWrite_default_instance_;
class TStorageUpdate_StorageUpdate_UpdateOpDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate_UpdateOp> _instance;
} _TStorageUpdate_StorageUpdate_UpdateOp_default_instance_;
class TStorageUpdate_StorageUpdate_StorageKeyDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate_StorageKey> _instance;
} _TStorageUpdate_StorageUpdate_StorageKey_default_instance_;
class TStorageUpdate_StorageUpdateDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageUpdate_StorageUpdate> _instance;
} _TStorageUpdate_StorageUpdate_default_instance_;
class TStorageUpdateDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageUpdate> _instance;
} _TStorageUpdate_default_instance_;
class TStorageKeys_StorageKeyDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageKeys_StorageKey> _instance;
} _TStorageKeys_StorageKey_default_instance_;
class TStorageKeysDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageKeys> _instance;
} _TStorageKeys_default_instance_;
class TStorageRemove_StorageKeyDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageRemove_StorageKey> _instance;
} _TStorageRemove_StorageKey_default_instance_;
class TStorageRemoveDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TStorageRemove> _instance;
} _TStorageRemove_default_instance_;
class LeaderboardDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Leaderboard> _instance;
} _Leaderboard_default_instance_;
class LeaderboardRecordDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaderboardRecord> _instance;
} _LeaderboardRecord_default_instance_;
class TLeaderboardsListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLeaderboardsList> _instance;
} _TLeaderboardsList_default_instance_;
class TLeaderboardsDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLeaderboards> _instance;
} _TLeaderboards_default_instance_;
class TLeaderboardRecordsWrite_LeaderboardRecordWriteDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLeaderboardRecordsWrite_LeaderboardRecordWrite> _instance;
} _TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_;
class TLeaderboardRecordsWriteDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLeaderboardRecordsWrite> _instance;
} _TLeaderboardRecordsWrite_default_instance_;
class TLeaderboardRecordsFetchDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLeaderboardRecordsFetch> _instance;
} _TLeaderboardRecordsFetch_default_instance_;
class TLeaderboardRecordsList_OwnersDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLeaderboardRecordsList_Owners> _instance;
} _TLeaderboardRecordsList_Owners_default_instance_;
class TLeaderboardRecordsListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLeaderboardRecordsList> _instance;
} _TLeaderboardRecordsList_default_instance_;
class TLeaderboardRecordsDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TLeaderboardRecords> _instance;
} _TLeaderboardRecords_default_instance_;
class TRpcDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TRpc> _instance;
} _TRpc_default_instance_;
class TPurchaseValidation_ApplePurchaseDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPurchaseValidation_ApplePurchase> _instance;
} _TPurchaseValidation_ApplePurchase_default_instance_;
class TPurchaseValidation_GooglePurchaseDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPurchaseValidation_GooglePurchase> _instance;
} _TPurchaseValidation_GooglePurchase_default_instance_;
class TPurchaseValidationDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPurchaseValidation> _instance;
} _TPurchaseValidation_default_instance_;
class TPurchaseRecordDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TPurchaseRecord> _instance;
} _TPurchaseRecord_default_instance_;
class NotificationDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Notification> _instance;
} _Notification_default_instance_;
class NotificationsDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Notifications> _instance;
} _Notifications_default_instance_;
class TNotificationsListDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TNotificationsList> _instance;
} _TNotificationsList_default_instance_;
class TNotificationsDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TNotifications> _instance;
} _TNotifications_default_instance_;
class TNotificationsRemoveDefaultTypeInternal {
public:
	::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TNotificationsRemove> _instance;
} _TNotificationsRemove_default_instance_;
} // namespace server
static void InitDefaultsscc_info_AuthenticateRequest_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_AuthenticateRequest_default_instance_;
		new (ptr)::server::AuthenticateRequest();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateRequest_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateRequest_api_2eproto }, {
																																																													&scc_info_AuthenticateRequest_Email_api_2eproto.base,
																																																													&scc_info_AuthenticateRequest_GameCenter_api_2eproto.base,
																																																											} };

static void InitDefaultsscc_info_AuthenticateRequest_Email_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_AuthenticateRequest_Email_default_instance_;
		new (ptr)::server::AuthenticateRequest_Email();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticateRequest_Email_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthenticateRequest_Email_api_2eproto }, {} };

static void InitDefaultsscc_info_AuthenticateRequest_GameCenter_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_AuthenticateRequest_GameCenter_default_instance_;
		new (ptr)::server::AuthenticateRequest_GameCenter();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticateRequest_GameCenter_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthenticateRequest_GameCenter_api_2eproto }, {} };

static void InitDefaultsscc_info_AuthenticateResponse_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_AuthenticateResponse_default_instance_;
		new (ptr)::server::AuthenticateResponse();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AuthenticateResponse_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AuthenticateResponse_api_2eproto }, {
																																																													  &scc_info_AuthenticateResponse_Session_api_2eproto.base,
																																																													  &scc_info_AuthenticateResponse_Error_api_2eproto.base,
																																																											  } };

static void InitDefaultsscc_info_AuthenticateResponse_Error_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_AuthenticateResponse_Error_default_instance_;
		new (ptr)::server::AuthenticateResponse_Error();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AuthenticateResponse_Error_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AuthenticateResponse_Error_api_2eproto }, {
																																																																  &scc_info_AuthenticateRequest_api_2eproto.base,
																																																														  } };

static void InitDefaultsscc_info_AuthenticateResponse_Session_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_AuthenticateResponse_Session_default_instance_;
		new (ptr)::server::AuthenticateResponse_Session();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticateResponse_Session_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AuthenticateResponse_Session_api_2eproto }, {} };

static void InitDefaultsscc_info_Envelope_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Envelope_default_instance_;
		new (ptr)::server::Envelope();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<71> scc_info_Envelope_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 71, 0, InitDefaultsscc_info_Envelope_api_2eproto }, {
																																																								&scc_info_Error_api_2eproto.base,
																																																								&scc_info_Heartbeat_api_2eproto.base,
																																																								&scc_info_Logout_api_2eproto.base,
																																																								&scc_info_TLink_api_2eproto.base,
																																																								&scc_info_TUnlink_api_2eproto.base,
																																																								&scc_info_TSelfFetch_api_2eproto.base,
																																																								&scc_info_TSelfUpdate_api_2eproto.base,
																																																								&scc_info_TUsersFetch_api_2eproto.base,
																																																								&scc_info_TSelf_api_2eproto.base,
																																																								&scc_info_TUsers_api_2eproto.base,
																																																								&scc_info_TFriendsAdd_api_2eproto.base,
																																																								&scc_info_TFriendsRemove_api_2eproto.base,
																																																								&scc_info_TFriendsBlock_api_2eproto.base,
																																																								&scc_info_TFriendsList_api_2eproto.base,
																																																								&scc_info_TFriends_api_2eproto.base,
																																																								&scc_info_TGroupsCreate_api_2eproto.base,
																																																								&scc_info_TGroupsUpdate_api_2eproto.base,
																																																								&scc_info_TGroupsRemove_api_2eproto.base,
																																																								&scc_info_TGroupsFetch_api_2eproto.base,
																																																								&scc_info_TGroupsList_api_2eproto.base,
																																																								&scc_info_TGroupsSelfList_api_2eproto.base,
																																																								&scc_info_TGroupUsersList_api_2eproto.base,
																																																								&scc_info_TGroupsJoin_api_2eproto.base,
																																																								&scc_info_TGroupsLeave_api_2eproto.base,
																																																								&scc_info_TGroupUsersAdd_api_2eproto.base,
																																																								&scc_info_TGroupUsersKick_api_2eproto.base,
																																																								&scc_info_TGroupUsersPromote_api_2eproto.base,
																																																								&scc_info_TGroups_api_2eproto.base,
																																																								&scc_info_TGroupsSelf_api_2eproto.base,
																																																								&scc_info_TGroupUsers_api_2eproto.base,
																																																								&scc_info_TTopicsJoin_api_2eproto.base,
																																																								&scc_info_TTopicsLeave_api_2eproto.base,
																																																								&scc_info_TTopicMessageSend_api_2eproto.base,
																																																								&scc_info_TTopicMessagesList_api_2eproto.base,
																																																								&scc_info_TTopics_api_2eproto.base,
																																																								&scc_info_TTopicMessageAck_api_2eproto.base,
																																																								&scc_info_TopicMessage_api_2eproto.base,
																																																								&scc_info_TTopicMessages_api_2eproto.base,
																																																								&scc_info_TopicPresence_api_2eproto.base,
																																																								&scc_info_TMatchCreate_api_2eproto.base,
																																																								&scc_info_TMatchesJoin_api_2eproto.base,
																																																								&scc_info_TMatchesLeave_api_2eproto.base,
																																																								&scc_info_MatchDataSend_api_2eproto.base,
																																																								&scc_info_TMatch_api_2eproto.base,
																																																								&scc_info_TMatches_api_2eproto.base,
																																																								&scc_info_MatchData_api_2eproto.base,
																																																								&scc_info_MatchPresence_api_2eproto.base,
																																																								&scc_info_TStorageList_api_2eproto.base,
																																																								&scc_info_TStorageFetch_api_2eproto.base,
																																																								&scc_info_TStorageWrite_api_2eproto.base,
																																																								&scc_info_TStorageUpdate_api_2eproto.base,
																																																								&scc_info_TStorageRemove_api_2eproto.base,
																																																								&scc_info_TStorageData_api_2eproto.base,
																																																								&scc_info_TStorageKeys_api_2eproto.base,
																																																								&scc_info_TLeaderboardsList_api_2eproto.base,
																																																								&scc_info_TLeaderboardRecordsWrite_api_2eproto.base,
																																																								&scc_info_TLeaderboardRecordsFetch_api_2eproto.base,
																																																								&scc_info_TLeaderboardRecordsList_api_2eproto.base,
																																																								&scc_info_TLeaderboards_api_2eproto.base,
																																																								&scc_info_TLeaderboardRecords_api_2eproto.base,
																																																								&scc_info_TMatchmakeAdd_api_2eproto.base,
																																																								&scc_info_TMatchmakeRemove_api_2eproto.base,
																																																								&scc_info_TMatchmakeTicket_api_2eproto.base,
																																																								&scc_info_MatchmakeMatched_api_2eproto.base,
																																																								&scc_info_TRpc_api_2eproto.base,
																																																								&scc_info_TPurchaseValidation_api_2eproto.base,
																																																								&scc_info_TPurchaseRecord_api_2eproto.base,
																																																								&scc_info_TNotificationsList_api_2eproto.base,
																																																								&scc_info_TNotificationsRemove_api_2eproto.base,
																																																								&scc_info_TNotifications_api_2eproto.base,
																																																								&scc_info_Notifications_api_2eproto.base,
																																																						} };

static void InitDefaultsscc_info_Error_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Error_default_instance_;
		new (ptr)::server::Error();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Error_api_2eproto }, {} };

static void InitDefaultsscc_info_Friend_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Friend_default_instance_;
		new (ptr)::server::Friend();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Friend_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Friend_api_2eproto }, {
																																																						  &scc_info_User_api_2eproto.base,
																																																				  } };

static void InitDefaultsscc_info_Group_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Group_default_instance_;
		new (ptr)::server::Group();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Group_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Group_api_2eproto }, {} };

static void InitDefaultsscc_info_GroupUser_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_GroupUser_default_instance_;
		new (ptr)::server::GroupUser();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GroupUser_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GroupUser_api_2eproto }, {
																																																								&scc_info_User_api_2eproto.base,
																																																						} };

static void InitDefaultsscc_info_Heartbeat_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Heartbeat_default_instance_;
		new (ptr)::server::Heartbeat();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Heartbeat_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Heartbeat_api_2eproto }, {} };

static void InitDefaultsscc_info_Leaderboard_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Leaderboard_default_instance_;
		new (ptr)::server::Leaderboard();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Leaderboard_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Leaderboard_api_2eproto }, {} };

static void InitDefaultsscc_info_LeaderboardRecord_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_LeaderboardRecord_default_instance_;
		new (ptr)::server::LeaderboardRecord();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LeaderboardRecord_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LeaderboardRecord_api_2eproto }, {} };

static void InitDefaultsscc_info_Logout_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Logout_default_instance_;
		new (ptr)::server::Logout();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logout_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Logout_api_2eproto }, {} };

static void InitDefaultsscc_info_Match_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Match_default_instance_;
		new (ptr)::server::Match();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Match_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Match_api_2eproto }, {
																																																						&scc_info_UserPresence_api_2eproto.base,
																																																				} };

static void InitDefaultsscc_info_MatchData_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_MatchData_default_instance_;
		new (ptr)::server::MatchData();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchData_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchData_api_2eproto }, {
																																																								&scc_info_UserPresence_api_2eproto.base,
																																																						} };

static void InitDefaultsscc_info_MatchDataSend_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_MatchDataSend_default_instance_;
		new (ptr)::server::MatchDataSend();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchDataSend_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchDataSend_api_2eproto }, {
																																																										&scc_info_UserPresence_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_MatchPresence_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_MatchPresence_default_instance_;
		new (ptr)::server::MatchPresence();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MatchPresence_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MatchPresence_api_2eproto }, {
																																																										&scc_info_UserPresence_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_MatchmakeFilter_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_MatchmakeFilter_default_instance_;
		new (ptr)::server::MatchmakeFilter();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MatchmakeFilter_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MatchmakeFilter_api_2eproto }, {
																																																											&scc_info_MatchmakeFilter_TermFilter_api_2eproto.base,
																																																											&scc_info_MatchmakeFilter_RangeFilter_api_2eproto.base,
																																																									} };

static void InitDefaultsscc_info_MatchmakeFilter_RangeFilter_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_MatchmakeFilter_RangeFilter_default_instance_;
		new (ptr)::server::MatchmakeFilter_RangeFilter();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakeFilter_RangeFilter_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchmakeFilter_RangeFilter_api_2eproto }, {} };

static void InitDefaultsscc_info_MatchmakeFilter_TermFilter_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_MatchmakeFilter_TermFilter_default_instance_;
		new (ptr)::server::MatchmakeFilter_TermFilter();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchmakeFilter_TermFilter_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchmakeFilter_TermFilter_api_2eproto }, {} };

static void InitDefaultsscc_info_MatchmakeMatched_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_MatchmakeMatched_default_instance_;
		new (ptr)::server::MatchmakeMatched();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MatchmakeMatched_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MatchmakeMatched_api_2eproto }, {
																																																											  &scc_info_UserPresence_api_2eproto.base,
																																																											  &scc_info_MatchmakeMatched_UserProperty_api_2eproto.base,
																																																									  } };

static void InitDefaultsscc_info_MatchmakeMatched_UserProperty_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_MatchmakeMatched_UserProperty_default_instance_;
		new (ptr)::server::MatchmakeMatched_UserProperty();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MatchmakeMatched_UserProperty_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MatchmakeMatched_UserProperty_api_2eproto }, {
																																																																		&scc_info_PropertyPair_api_2eproto.base,
																																																																		&scc_info_MatchmakeFilter_api_2eproto.base,
																																																																} };

static void InitDefaultsscc_info_Notification_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Notification_default_instance_;
		new (ptr)::server::Notification();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Notification_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Notification_api_2eproto }, {} };

static void InitDefaultsscc_info_Notifications_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Notifications_default_instance_;
		new (ptr)::server::Notifications();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Notifications_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Notifications_api_2eproto }, {
																																																										&scc_info_Notification_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_PropertyPair_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_PropertyPair_default_instance_;
		new (ptr)::server::PropertyPair();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PropertyPair_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PropertyPair_api_2eproto }, {
																																																									  &scc_info_PropertyPair_StringSet_api_2eproto.base,
																																																							  } };

static void InitDefaultsscc_info_PropertyPair_StringSet_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_PropertyPair_StringSet_default_instance_;
		new (ptr)::server::PropertyPair_StringSet();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PropertyPair_StringSet_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PropertyPair_StringSet_api_2eproto }, {} };

static void InitDefaultsscc_info_Self_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_Self_default_instance_;
		new (ptr)::server::Self();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Self_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Self_api_2eproto }, {
																																																					  &scc_info_User_api_2eproto.base,
																																																			  } };

static void InitDefaultsscc_info_TFriends_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TFriends_default_instance_;
		new (ptr)::server::TFriends();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TFriends_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TFriends_api_2eproto }, {
																																																							  &scc_info_Friend_api_2eproto.base,
																																																					  } };

static void InitDefaultsscc_info_TFriendsAdd_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TFriendsAdd_default_instance_;
		new (ptr)::server::TFriendsAdd();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TFriendsAdd_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TFriendsAdd_api_2eproto }, {
																																																									&scc_info_TFriendsAdd_FriendsAdd_api_2eproto.base,
																																																							} };

static void InitDefaultsscc_info_TFriendsAdd_FriendsAdd_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TFriendsAdd_FriendsAdd_default_instance_;
		new (ptr)::server::TFriendsAdd_FriendsAdd();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFriendsAdd_FriendsAdd_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TFriendsAdd_FriendsAdd_api_2eproto }, {} };

static void InitDefaultsscc_info_TFriendsBlock_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TFriendsBlock_default_instance_;
		new (ptr)::server::TFriendsBlock();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFriendsBlock_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TFriendsBlock_api_2eproto }, {} };

static void InitDefaultsscc_info_TFriendsList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TFriendsList_default_instance_;
		new (ptr)::server::TFriendsList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFriendsList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TFriendsList_api_2eproto }, {} };

static void InitDefaultsscc_info_TFriendsRemove_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TFriendsRemove_default_instance_;
		new (ptr)::server::TFriendsRemove();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TFriendsRemove_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TFriendsRemove_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupUsers_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupUsers_default_instance_;
		new (ptr)::server::TGroupUsers();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupUsers_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupUsers_api_2eproto }, {
																																																									&scc_info_GroupUser_api_2eproto.base,
																																																							} };

static void InitDefaultsscc_info_TGroupUsersAdd_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupUsersAdd_default_instance_;
		new (ptr)::server::TGroupUsersAdd();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupUsersAdd_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupUsersAdd_api_2eproto }, {
																																																										  &scc_info_TGroupUsersAdd_GroupUserAdd_api_2eproto.base,
																																																								  } };

static void InitDefaultsscc_info_TGroupUsersAdd_GroupUserAdd_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupUsersAdd_GroupUserAdd_default_instance_;
		new (ptr)::server::TGroupUsersAdd_GroupUserAdd();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupUsersAdd_GroupUserAdd_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupUsersAdd_GroupUserAdd_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupUsersKick_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupUsersKick_default_instance_;
		new (ptr)::server::TGroupUsersKick();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupUsersKick_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupUsersKick_api_2eproto }, {
																																																											&scc_info_TGroupUsersKick_GroupUserKick_api_2eproto.base,
																																																									} };

static void InitDefaultsscc_info_TGroupUsersKick_GroupUserKick_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupUsersKick_GroupUserKick_default_instance_;
		new (ptr)::server::TGroupUsersKick_GroupUserKick();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupUsersKick_GroupUserKick_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupUsersKick_GroupUserKick_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupUsersList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupUsersList_default_instance_;
		new (ptr)::server::TGroupUsersList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupUsersList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupUsersList_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupUsersPromote_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupUsersPromote_default_instance_;
		new (ptr)::server::TGroupUsersPromote();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupUsersPromote_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupUsersPromote_api_2eproto }, {
																																																												  &scc_info_TGroupUsersPromote_GroupUserPromote_api_2eproto.base,
																																																										  } };

static void InitDefaultsscc_info_TGroupUsersPromote_GroupUserPromote_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupUsersPromote_GroupUserPromote_default_instance_;
		new (ptr)::server::TGroupUsersPromote_GroupUserPromote();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupUsersPromote_GroupUserPromote_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupUsersPromote_GroupUserPromote_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroups_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroups_default_instance_;
		new (ptr)::server::TGroups();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroups_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroups_api_2eproto }, {
																																																							&scc_info_Group_api_2eproto.base,
																																																					} };

static void InitDefaultsscc_info_TGroupsCreate_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsCreate_default_instance_;
		new (ptr)::server::TGroupsCreate();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsCreate_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupsCreate_api_2eproto }, {
																																																										&scc_info_TGroupsCreate_GroupCreate_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_TGroupsCreate_GroupCreate_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsCreate_GroupCreate_default_instance_;
		new (ptr)::server::TGroupsCreate_GroupCreate();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsCreate_GroupCreate_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupsCreate_GroupCreate_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupsFetch_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsFetch_default_instance_;
		new (ptr)::server::TGroupsFetch();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsFetch_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupsFetch_api_2eproto }, {
																																																									  &scc_info_TGroupsFetch_GroupFetch_api_2eproto.base,
																																																							  } };

static void InitDefaultsscc_info_TGroupsFetch_GroupFetch_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsFetch_GroupFetch_default_instance_;
		new (ptr)::server::TGroupsFetch_GroupFetch();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsFetch_GroupFetch_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupsFetch_GroupFetch_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupsJoin_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsJoin_default_instance_;
		new (ptr)::server::TGroupsJoin();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsJoin_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupsJoin_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupsLeave_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsLeave_default_instance_;
		new (ptr)::server::TGroupsLeave();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsLeave_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupsLeave_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupsList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsList_default_instance_;
		new (ptr)::server::TGroupsList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupsList_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupsRemove_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsRemove_default_instance_;
		new (ptr)::server::TGroupsRemove();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsRemove_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupsRemove_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupsSelf_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsSelf_default_instance_;
		new (ptr)::server::TGroupsSelf();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsSelf_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupsSelf_api_2eproto }, {
																																																									&scc_info_TGroupsSelf_GroupSelf_api_2eproto.base,
																																																							} };

static void InitDefaultsscc_info_TGroupsSelf_GroupSelf_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsSelf_GroupSelf_default_instance_;
		new (ptr)::server::TGroupsSelf_GroupSelf();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsSelf_GroupSelf_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupsSelf_GroupSelf_api_2eproto }, {
																																																														&scc_info_Group_api_2eproto.base,
																																																												} };

static void InitDefaultsscc_info_TGroupsSelfList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsSelfList_default_instance_;
		new (ptr)::server::TGroupsSelfList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsSelfList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupsSelfList_api_2eproto }, {} };

static void InitDefaultsscc_info_TGroupsUpdate_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsUpdate_default_instance_;
		new (ptr)::server::TGroupsUpdate();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TGroupsUpdate_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TGroupsUpdate_api_2eproto }, {
																																																										&scc_info_TGroupsUpdate_GroupUpdate_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_TGroupsUpdate_GroupUpdate_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TGroupsUpdate_GroupUpdate_default_instance_;
		new (ptr)::server::TGroupsUpdate_GroupUpdate();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TGroupsUpdate_GroupUpdate_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TGroupsUpdate_GroupUpdate_api_2eproto }, {} };

static void InitDefaultsscc_info_TLeaderboardRecords_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLeaderboardRecords_default_instance_;
		new (ptr)::server::TLeaderboardRecords();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TLeaderboardRecords_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TLeaderboardRecords_api_2eproto }, {
																																																													&scc_info_LeaderboardRecord_api_2eproto.base,
																																																											} };

static void InitDefaultsscc_info_TLeaderboardRecordsFetch_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLeaderboardRecordsFetch_default_instance_;
		new (ptr)::server::TLeaderboardRecordsFetch();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLeaderboardRecordsFetch_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TLeaderboardRecordsFetch_api_2eproto }, {} };

static void InitDefaultsscc_info_TLeaderboardRecordsList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLeaderboardRecordsList_default_instance_;
		new (ptr)::server::TLeaderboardRecordsList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TLeaderboardRecordsList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TLeaderboardRecordsList_api_2eproto }, {
																																																															&scc_info_TLeaderboardRecordsList_Owners_api_2eproto.base,
																																																													} };

static void InitDefaultsscc_info_TLeaderboardRecordsList_Owners_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLeaderboardRecordsList_Owners_default_instance_;
		new (ptr)::server::TLeaderboardRecordsList_Owners();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLeaderboardRecordsList_Owners_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TLeaderboardRecordsList_Owners_api_2eproto }, {} };

static void InitDefaultsscc_info_TLeaderboardRecordsWrite_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLeaderboardRecordsWrite_default_instance_;
		new (ptr)::server::TLeaderboardRecordsWrite();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TLeaderboardRecordsWrite_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TLeaderboardRecordsWrite_api_2eproto }, {
																																																															  &scc_info_TLeaderboardRecordsWrite_LeaderboardRecordWrite_api_2eproto.base,
																																																													  } };

static void InitDefaultsscc_info_TLeaderboardRecordsWrite_LeaderboardRecordWrite_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_;
		new (ptr)::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLeaderboardRecordsWrite_LeaderboardRecordWrite_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TLeaderboardRecordsWrite_LeaderboardRecordWrite_api_2eproto }, {} };

static void InitDefaultsscc_info_TLeaderboards_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLeaderboards_default_instance_;
		new (ptr)::server::TLeaderboards();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TLeaderboards_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TLeaderboards_api_2eproto }, {
																																																										&scc_info_Leaderboard_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_TLeaderboardsList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLeaderboardsList_default_instance_;
		new (ptr)::server::TLeaderboardsList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TLeaderboardsList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TLeaderboardsList_api_2eproto }, {} };

static void InitDefaultsscc_info_TLink_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TLink_default_instance_;
		new (ptr)::server::TLink();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TLink_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TLink_api_2eproto }, {
																																																						&scc_info_AuthenticateRequest_Email_api_2eproto.base,
																																																						&scc_info_AuthenticateRequest_GameCenter_api_2eproto.base,
																																																				} };

static void InitDefaultsscc_info_TMatch_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatch_default_instance_;
		new (ptr)::server::TMatch();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TMatch_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TMatch_api_2eproto }, {
																																																						  &scc_info_Match_api_2eproto.base,
																																																				  } };

static void InitDefaultsscc_info_TMatchCreate_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatchCreate_default_instance_;
		new (ptr)::server::TMatchCreate();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchCreate_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TMatchCreate_api_2eproto }, {} };

static void InitDefaultsscc_info_TMatches_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatches_default_instance_;
		new (ptr)::server::TMatches();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TMatches_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TMatches_api_2eproto }, {
																																																							  &scc_info_Match_api_2eproto.base,
																																																					  } };

static void InitDefaultsscc_info_TMatchesJoin_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatchesJoin_default_instance_;
		new (ptr)::server::TMatchesJoin();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TMatchesJoin_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TMatchesJoin_api_2eproto }, {
																																																									  &scc_info_TMatchesJoin_MatchJoin_api_2eproto.base,
																																																							  } };

static void InitDefaultsscc_info_TMatchesJoin_MatchJoin_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatchesJoin_MatchJoin_default_instance_;
		new (ptr)::server::TMatchesJoin_MatchJoin();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchesJoin_MatchJoin_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TMatchesJoin_MatchJoin_api_2eproto }, {} };

static void InitDefaultsscc_info_TMatchesLeave_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatchesLeave_default_instance_;
		new (ptr)::server::TMatchesLeave();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchesLeave_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TMatchesLeave_api_2eproto }, {} };

static void InitDefaultsscc_info_TMatchmakeAdd_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatchmakeAdd_default_instance_;
		new (ptr)::server::TMatchmakeAdd();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TMatchmakeAdd_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TMatchmakeAdd_api_2eproto }, {
																																																										&scc_info_MatchmakeFilter_api_2eproto.base,
																																																										&scc_info_PropertyPair_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_TMatchmakeRemove_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatchmakeRemove_default_instance_;
		new (ptr)::server::TMatchmakeRemove();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchmakeRemove_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TMatchmakeRemove_api_2eproto }, {} };

static void InitDefaultsscc_info_TMatchmakeTicket_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TMatchmakeTicket_default_instance_;
		new (ptr)::server::TMatchmakeTicket();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TMatchmakeTicket_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TMatchmakeTicket_api_2eproto }, {} };

static void InitDefaultsscc_info_TNotifications_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TNotifications_default_instance_;
		new (ptr)::server::TNotifications();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TNotifications_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TNotifications_api_2eproto }, {
																																																										  &scc_info_Notification_api_2eproto.base,
																																																								  } };

static void InitDefaultsscc_info_TNotificationsList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TNotificationsList_default_instance_;
		new (ptr)::server::TNotificationsList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TNotificationsList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TNotificationsList_api_2eproto }, {} };

static void InitDefaultsscc_info_TNotificationsRemove_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TNotificationsRemove_default_instance_;
		new (ptr)::server::TNotificationsRemove();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TNotificationsRemove_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TNotificationsRemove_api_2eproto }, {} };

static void InitDefaultsscc_info_TPurchaseRecord_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TPurchaseRecord_default_instance_;
		new (ptr)::server::TPurchaseRecord();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPurchaseRecord_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TPurchaseRecord_api_2eproto }, {} };

static void InitDefaultsscc_info_TPurchaseValidation_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TPurchaseValidation_default_instance_;
		new (ptr)::server::TPurchaseValidation();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TPurchaseValidation_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TPurchaseValidation_api_2eproto }, {
																																																													&scc_info_TPurchaseValidation_ApplePurchase_api_2eproto.base,
																																																													&scc_info_TPurchaseValidation_GooglePurchase_api_2eproto.base,
																																																											} };

static void InitDefaultsscc_info_TPurchaseValidation_ApplePurchase_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TPurchaseValidation_ApplePurchase_default_instance_;
		new (ptr)::server::TPurchaseValidation_ApplePurchase();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPurchaseValidation_ApplePurchase_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TPurchaseValidation_ApplePurchase_api_2eproto }, {} };

static void InitDefaultsscc_info_TPurchaseValidation_GooglePurchase_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TPurchaseValidation_GooglePurchase_default_instance_;
		new (ptr)::server::TPurchaseValidation_GooglePurchase();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TPurchaseValidation_GooglePurchase_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TPurchaseValidation_GooglePurchase_api_2eproto }, {} };

static void InitDefaultsscc_info_TRpc_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TRpc_default_instance_;
		new (ptr)::server::TRpc();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TRpc_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TRpc_api_2eproto }, {} };

static void InitDefaultsscc_info_TSelf_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TSelf_default_instance_;
		new (ptr)::server::TSelf();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TSelf_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TSelf_api_2eproto }, {
																																																						&scc_info_Self_api_2eproto.base,
																																																				} };

static void InitDefaultsscc_info_TSelfFetch_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TSelfFetch_default_instance_;
		new (ptr)::server::TSelfFetch();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TSelfFetch_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TSelfFetch_api_2eproto }, {} };

static void InitDefaultsscc_info_TSelfUpdate_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TSelfUpdate_default_instance_;
		new (ptr)::server::TSelfUpdate();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TSelfUpdate_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TSelfUpdate_api_2eproto }, {} };

static void InitDefaultsscc_info_TStorageData_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageData_default_instance_;
		new (ptr)::server::TStorageData();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageData_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TStorageData_api_2eproto }, {
																																																									  &scc_info_TStorageData_StorageData_api_2eproto.base,
																																																							  } };

static void InitDefaultsscc_info_TStorageData_StorageData_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageData_StorageData_default_instance_;
		new (ptr)::server::TStorageData_StorageData();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageData_StorageData_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStorageData_StorageData_api_2eproto }, {} };

static void InitDefaultsscc_info_TStorageFetch_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageFetch_default_instance_;
		new (ptr)::server::TStorageFetch();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageFetch_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TStorageFetch_api_2eproto }, {
																																																										&scc_info_TStorageFetch_StorageKey_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_TStorageFetch_StorageKey_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageFetch_StorageKey_default_instance_;
		new (ptr)::server::TStorageFetch_StorageKey();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageFetch_StorageKey_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStorageFetch_StorageKey_api_2eproto }, {} };

static void InitDefaultsscc_info_TStorageKeys_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageKeys_default_instance_;
		new (ptr)::server::TStorageKeys();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageKeys_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TStorageKeys_api_2eproto }, {
																																																									  &scc_info_TStorageKeys_StorageKey_api_2eproto.base,
																																																							  } };

static void InitDefaultsscc_info_TStorageKeys_StorageKey_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageKeys_StorageKey_default_instance_;
		new (ptr)::server::TStorageKeys_StorageKey();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageKeys_StorageKey_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStorageKeys_StorageKey_api_2eproto }, {} };

static void InitDefaultsscc_info_TStorageList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageList_default_instance_;
		new (ptr)::server::TStorageList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStorageList_api_2eproto }, {} };

static void InitDefaultsscc_info_TStorageRemove_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageRemove_default_instance_;
		new (ptr)::server::TStorageRemove();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageRemove_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TStorageRemove_api_2eproto }, {
																																																										  &scc_info_TStorageRemove_StorageKey_api_2eproto.base,
																																																								  } };

static void InitDefaultsscc_info_TStorageRemove_StorageKey_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageRemove_StorageKey_default_instance_;
		new (ptr)::server::TStorageRemove_StorageKey();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageRemove_StorageKey_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStorageRemove_StorageKey_api_2eproto }, {} };

static void InitDefaultsscc_info_TStorageUpdate_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageUpdate_default_instance_;
		new (ptr)::server::TStorageUpdate();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageUpdate_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TStorageUpdate_api_2eproto }, {
																																																										  &scc_info_TStorageUpdate_StorageUpdate_api_2eproto.base,
																																																								  } };

static void InitDefaultsscc_info_TStorageUpdate_StorageUpdate_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageUpdate_StorageUpdate_default_instance_;
		new (ptr)::server::TStorageUpdate_StorageUpdate();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TStorageUpdate_StorageUpdate_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TStorageUpdate_StorageUpdate_api_2eproto }, {
																																																																	  &scc_info_TStorageUpdate_StorageUpdate_StorageKey_api_2eproto.base,
																																																																	  &scc_info_TStorageUpdate_StorageUpdate_UpdateOp_api_2eproto.base,
																																																															  } };

static void InitDefaultsscc_info_TStorageUpdate_StorageUpdate_StorageKey_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageUpdate_StorageUpdate_StorageKey_default_instance_;
		new (ptr)::server::TStorageUpdate_StorageUpdate_StorageKey();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageUpdate_StorageUpdate_StorageKey_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStorageUpdate_StorageUpdate_StorageKey_api_2eproto }, {} };

static void InitDefaultsscc_info_TStorageUpdate_StorageUpdate_UpdateOp_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageUpdate_StorageUpdate_UpdateOp_default_instance_;
		new (ptr)::server::TStorageUpdate_StorageUpdate_UpdateOp();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageUpdate_StorageUpdate_UpdateOp_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStorageUpdate_StorageUpdate_UpdateOp_api_2eproto }, {} };

static void InitDefaultsscc_info_TStorageWrite_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageWrite_default_instance_;
		new (ptr)::server::TStorageWrite();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TStorageWrite_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TStorageWrite_api_2eproto }, {
																																																										&scc_info_TStorageWrite_StorageData_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_TStorageWrite_StorageData_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TStorageWrite_StorageData_default_instance_;
		new (ptr)::server::TStorageWrite_StorageData();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TStorageWrite_StorageData_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TStorageWrite_StorageData_api_2eproto }, {} };

static void InitDefaultsscc_info_TTopicMessageAck_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopicMessageAck_default_instance_;
		new (ptr)::server::TTopicMessageAck();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TTopicMessageAck_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TTopicMessageAck_api_2eproto }, {} };

static void InitDefaultsscc_info_TTopicMessageSend_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopicMessageSend_default_instance_;
		new (ptr)::server::TTopicMessageSend();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopicMessageSend_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TTopicMessageSend_api_2eproto }, {
																																																												&scc_info_TopicId_api_2eproto.base,
																																																										} };

static void InitDefaultsscc_info_TTopicMessages_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopicMessages_default_instance_;
		new (ptr)::server::TTopicMessages();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopicMessages_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TTopicMessages_api_2eproto }, {
																																																										  &scc_info_TopicMessage_api_2eproto.base,
																																																								  } };

static void InitDefaultsscc_info_TTopicMessagesList_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopicMessagesList_default_instance_;
		new (ptr)::server::TTopicMessagesList();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TTopicMessagesList_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TTopicMessagesList_api_2eproto }, {} };

static void InitDefaultsscc_info_TTopics_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopics_default_instance_;
		new (ptr)::server::TTopics();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopics_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TTopics_api_2eproto }, {
																																																							&scc_info_TTopics_Topic_api_2eproto.base,
																																																					} };

static void InitDefaultsscc_info_TTopics_Topic_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopics_Topic_default_instance_;
		new (ptr)::server::TTopics_Topic();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TTopics_Topic_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TTopics_Topic_api_2eproto }, {
																																																										&scc_info_TopicId_api_2eproto.base,
																																																										&scc_info_UserPresence_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_TTopicsJoin_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopicsJoin_default_instance_;
		new (ptr)::server::TTopicsJoin();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopicsJoin_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TTopicsJoin_api_2eproto }, {
																																																									&scc_info_TTopicsJoin_TopicJoin_api_2eproto.base,
																																																							} };

static void InitDefaultsscc_info_TTopicsJoin_TopicJoin_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopicsJoin_TopicJoin_default_instance_;
		new (ptr)::server::TTopicsJoin_TopicJoin();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TTopicsJoin_TopicJoin_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TTopicsJoin_TopicJoin_api_2eproto }, {} };

static void InitDefaultsscc_info_TTopicsLeave_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TTopicsLeave_default_instance_;
		new (ptr)::server::TTopicsLeave();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TTopicsLeave_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TTopicsLeave_api_2eproto }, {
																																																									  &scc_info_TopicId_api_2eproto.base,
																																																							  } };

static void InitDefaultsscc_info_TUnlink_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TUnlink_default_instance_;
		new (ptr)::server::TUnlink();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TUnlink_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TUnlink_api_2eproto }, {} };

static void InitDefaultsscc_info_TUsers_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TUsers_default_instance_;
		new (ptr)::server::TUsers();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TUsers_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TUsers_api_2eproto }, {
																																																						  &scc_info_User_api_2eproto.base,
																																																				  } };

static void InitDefaultsscc_info_TUsersFetch_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TUsersFetch_default_instance_;
		new (ptr)::server::TUsersFetch();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TUsersFetch_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TUsersFetch_api_2eproto }, {
																																																									&scc_info_TUsersFetch_UsersFetch_api_2eproto.base,
																																																							} };

static void InitDefaultsscc_info_TUsersFetch_UsersFetch_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TUsersFetch_UsersFetch_default_instance_;
		new (ptr)::server::TUsersFetch_UsersFetch();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TUsersFetch_UsersFetch_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TUsersFetch_UsersFetch_api_2eproto }, {} };

static void InitDefaultsscc_info_TopicId_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TopicId_default_instance_;
		new (ptr)::server::TopicId();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicId_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopicId_api_2eproto }, {} };

static void InitDefaultsscc_info_TopicMessage_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TopicMessage_default_instance_;
		new (ptr)::server::TopicMessage();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicMessage_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicMessage_api_2eproto }, {
																																																									  &scc_info_TopicId_api_2eproto.base,
																																																							  } };

static void InitDefaultsscc_info_TopicPresence_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_TopicPresence_default_instance_;
		new (ptr)::server::TopicPresence();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TopicPresence_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TopicPresence_api_2eproto }, {
																																																										&scc_info_TopicId_api_2eproto.base,
																																																										&scc_info_UserPresence_api_2eproto.base,
																																																								} };

static void InitDefaultsscc_info_User_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_User_default_instance_;
		new (ptr)::server::User();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_User_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_User_api_2eproto }, {} };

static void InitDefaultsscc_info_UserPresence_api_2eproto() {
	GOOGLE_PROTOBUF_VERIFY_VERSION;

	{
		void *ptr = &::server::_UserPresence_default_instance_;
		new (ptr)::server::UserPresence();
		::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
	}
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserPresence_api_2eproto = { { ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserPresence_api_2eproto }, {} };

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_api_2eproto[119];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *file_level_enum_descriptors_api_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_api_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_api_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Heartbeat, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Heartbeat, timestamp_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Error, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Error, code_),
	PROTOBUF_FIELD_OFFSET(::server::Error, msg_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_Email, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_Email, email_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_Email, password_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_GameCenter, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_GameCenter, player_id_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_GameCenter, bundle_id_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_GameCenter, timestamp_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_GameCenter, salt_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_GameCenter, signature_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest_GameCenter, public_key_url_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest, collationid_),
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateRequest, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse_Session, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse_Session, token_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse_Session, udp_token_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse_Error, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse_Error, code_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse_Error, message_),
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse_Error, request_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse, collation_id_),
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::AuthenticateResponse, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Envelope, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::Envelope, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Envelope, collation_id_),
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::Envelope, payload_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Logout, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLink, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TLink, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TLink, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TUnlink, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TUnlink, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TUnlink, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::User, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::User, id_),
	PROTOBUF_FIELD_OFFSET(::server::User, handle_),
	PROTOBUF_FIELD_OFFSET(::server::User, fullname_),
	PROTOBUF_FIELD_OFFSET(::server::User, avatar_url_),
	PROTOBUF_FIELD_OFFSET(::server::User, lang_),
	PROTOBUF_FIELD_OFFSET(::server::User, location_),
	PROTOBUF_FIELD_OFFSET(::server::User, timezone_),
	PROTOBUF_FIELD_OFFSET(::server::User, metadata_),
	PROTOBUF_FIELD_OFFSET(::server::User, created_at_),
	PROTOBUF_FIELD_OFFSET(::server::User, updated_at_),
	PROTOBUF_FIELD_OFFSET(::server::User, last_online_at_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Self, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Self, user_),
	PROTOBUF_FIELD_OFFSET(::server::Self, verified_),
	PROTOBUF_FIELD_OFFSET(::server::Self, email_),
	PROTOBUF_FIELD_OFFSET(::server::Self, device_ids_),
	PROTOBUF_FIELD_OFFSET(::server::Self, facebook_id_),
	PROTOBUF_FIELD_OFFSET(::server::Self, google_id_),
	PROTOBUF_FIELD_OFFSET(::server::Self, gamecenter_id_),
	PROTOBUF_FIELD_OFFSET(::server::Self, steam_id_),
	PROTOBUF_FIELD_OFFSET(::server::Self, custom_id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TSelfFetch, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TSelf, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TSelf, self_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TSelfUpdate, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TSelfUpdate, handle_),
	PROTOBUF_FIELD_OFFSET(::server::TSelfUpdate, fullname_),
	PROTOBUF_FIELD_OFFSET(::server::TSelfUpdate, timezone_),
	PROTOBUF_FIELD_OFFSET(::server::TSelfUpdate, location_),
	PROTOBUF_FIELD_OFFSET(::server::TSelfUpdate, lang_),
	PROTOBUF_FIELD_OFFSET(::server::TSelfUpdate, metadata_),
	PROTOBUF_FIELD_OFFSET(::server::TSelfUpdate, avatar_url_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TUsersFetch_UsersFetch, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TUsersFetch_UsersFetch, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TUsersFetch_UsersFetch, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TUsersFetch, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TUsersFetch, users_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TUsers, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TUsers, users_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Friend, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Friend, user_),
	PROTOBUF_FIELD_OFFSET(::server::Friend, state_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsAdd_FriendsAdd, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsAdd_FriendsAdd, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TFriendsAdd_FriendsAdd, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsAdd, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsAdd, friends_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsRemove, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsRemove, user_ids_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsBlock, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsBlock, user_ids_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TFriendsList, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TFriends, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TFriends, friends_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Group, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Group, id_),
	PROTOBUF_FIELD_OFFSET(::server::Group, private__),
	PROTOBUF_FIELD_OFFSET(::server::Group, creator_id_),
	PROTOBUF_FIELD_OFFSET(::server::Group, name_),
	PROTOBUF_FIELD_OFFSET(::server::Group, description_),
	PROTOBUF_FIELD_OFFSET(::server::Group, avatar_url_),
	PROTOBUF_FIELD_OFFSET(::server::Group, lang_),
	PROTOBUF_FIELD_OFFSET(::server::Group, utc_offset_ms_),
	PROTOBUF_FIELD_OFFSET(::server::Group, metadata_),
	PROTOBUF_FIELD_OFFSET(::server::Group, count_),
	PROTOBUF_FIELD_OFFSET(::server::Group, created_at_),
	PROTOBUF_FIELD_OFFSET(::server::Group, updated_at_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate_GroupCreate, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate_GroupCreate, name_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate_GroupCreate, description_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate_GroupCreate, avatar_url_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate_GroupCreate, lang_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate_GroupCreate, metadata_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate_GroupCreate, private__),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsCreate, groups_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate_GroupUpdate, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate_GroupUpdate, group_id_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate_GroupUpdate, private__),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate_GroupUpdate, name_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate_GroupUpdate, description_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate_GroupUpdate, avatar_url_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate_GroupUpdate, lang_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate_GroupUpdate, metadata_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsUpdate, groups_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsRemove, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsRemove, group_ids_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsSelfList, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsFetch_GroupFetch, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsFetch_GroupFetch, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TGroupsFetch_GroupFetch, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsFetch, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsFetch, groups_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsList, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsList, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsList, page_limit_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsList, order_by_asc_),
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TGroupsList, cursor_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsList, filter_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroups, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroups, groups_),
	PROTOBUF_FIELD_OFFSET(::server::TGroups, cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsSelf_GroupSelf, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsSelf_GroupSelf, group_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupsSelf_GroupSelf, state_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsSelf, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsSelf, groups_self_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::GroupUser, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::GroupUser, user_),
	PROTOBUF_FIELD_OFFSET(::server::GroupUser, state_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersList, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersList, group_id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsers, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsers, users_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsJoin, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsJoin, group_ids_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsLeave, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupsLeave, group_ids_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersAdd_GroupUserAdd, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersAdd_GroupUserAdd, group_id_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersAdd_GroupUserAdd, user_id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersAdd, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersAdd, group_users_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersKick_GroupUserKick, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersKick_GroupUserKick, group_id_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersKick_GroupUserKick, user_id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersKick, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersKick, group_users_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersPromote_GroupUserPromote, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersPromote_GroupUserPromote, group_id_),
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersPromote_GroupUserPromote, user_id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersPromote, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TGroupUsersPromote, group_users_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TopicId, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TopicId, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TopicId, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::UserPresence, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::UserPresence, user_id_),
	PROTOBUF_FIELD_OFFSET(::server::UserPresence, session_id_),
	PROTOBUF_FIELD_OFFSET(::server::UserPresence, handle_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopicsJoin_TopicJoin, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TTopicsJoin_TopicJoin, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TTopicsJoin_TopicJoin, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopicsJoin, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TTopicsJoin, joins_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopics_Topic, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TTopics_Topic, topic_),
	PROTOBUF_FIELD_OFFSET(::server::TTopics_Topic, presences_),
	PROTOBUF_FIELD_OFFSET(::server::TTopics_Topic, self_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopics, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TTopics, topics_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopicsLeave, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TTopicsLeave, topics_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessageSend, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessageSend, topic_),
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessageSend, data_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessageAck, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessageAck, message_id_),
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessageAck, created_at_),
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessageAck, expires_at_),
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessageAck, handle_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, topic_),
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, user_id_),
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, message_id_),
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, created_at_),
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, expires_at_),
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, handle_),
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, type_),
	PROTOBUF_FIELD_OFFSET(::server::TopicMessage, data_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessagesList, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessagesList, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessagesList, cursor_),
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessagesList, forward_),
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessagesList, limit_),
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessagesList, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessages, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessages, messages_),
	PROTOBUF_FIELD_OFFSET(::server::TTopicMessages, cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TopicPresence, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TopicPresence, topic_),
	PROTOBUF_FIELD_OFFSET(::server::TopicPresence, joins_),
	PROTOBUF_FIELD_OFFSET(::server::TopicPresence, leaves_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::PropertyPair_StringSet, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::PropertyPair_StringSet, values_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::PropertyPair, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::PropertyPair, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::PropertyPair, key_),
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::PropertyPair, value_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter_TermFilter, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter_TermFilter, terms_),
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter_TermFilter, matchallterms_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter_RangeFilter, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter_RangeFilter, lower_bound_),
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter_RangeFilter, upper_bound_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter, name_),
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeFilter, value_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatchmakeAdd, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TMatchmakeAdd, required_count_),
	PROTOBUF_FIELD_OFFSET(::server::TMatchmakeAdd, filters_),
	PROTOBUF_FIELD_OFFSET(::server::TMatchmakeAdd, properties_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatchmakeTicket, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TMatchmakeTicket, ticket_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatchmakeRemove, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TMatchmakeRemove, ticket_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched_UserProperty, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched_UserProperty, user_id_),
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched_UserProperty, properties_),
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched_UserProperty, filters_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched, ticket_),
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched, token_),
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched, presences_),
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched, self_),
	PROTOBUF_FIELD_OFFSET(::server::MatchmakeMatched, properties_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Match, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Match, match_id_),
	PROTOBUF_FIELD_OFFSET(::server::Match, presences_),
	PROTOBUF_FIELD_OFFSET(::server::Match, self_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::MatchPresence, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::MatchPresence, match_id_),
	PROTOBUF_FIELD_OFFSET(::server::MatchPresence, joins_),
	PROTOBUF_FIELD_OFFSET(::server::MatchPresence, leaves_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatchCreate, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatch, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TMatch, match_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatchesJoin_MatchJoin, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TMatchesJoin_MatchJoin, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TMatchesJoin_MatchJoin, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatchesJoin, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TMatchesJoin, matches_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatches, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TMatches, matches_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::MatchDataSend, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::MatchDataSend, match_id_),
	PROTOBUF_FIELD_OFFSET(::server::MatchDataSend, op_code_),
	PROTOBUF_FIELD_OFFSET(::server::MatchDataSend, data_),
	PROTOBUF_FIELD_OFFSET(::server::MatchDataSend, presences_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::MatchData, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::MatchData, match_id_),
	PROTOBUF_FIELD_OFFSET(::server::MatchData, presence_),
	PROTOBUF_FIELD_OFFSET(::server::MatchData, op_code_),
	PROTOBUF_FIELD_OFFSET(::server::MatchData, data_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TMatchesLeave, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TMatchesLeave, match_ids_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageList, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageList, user_id_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageList, bucket_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageList, collection_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageList, limit_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageList, cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageFetch_StorageKey, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageFetch_StorageKey, bucket_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageFetch_StorageKey, collection_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageFetch_StorageKey, record_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageFetch_StorageKey, user_id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageFetch, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageFetch, keys_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, bucket_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, collection_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, record_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, user_id_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, value_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, version_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, permission_read_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, permission_write_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, created_at_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, updated_at_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData_StorageData, expires_at_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageData, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageData, data_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageData, cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite_StorageData, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite_StorageData, bucket_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite_StorageData, collection_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite_StorageData, record_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite_StorageData, value_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite_StorageData, version_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite_StorageData, permission_read_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite_StorageData, permission_write_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageWrite, data_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_UpdateOp, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_UpdateOp, op_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_UpdateOp, path_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_UpdateOp, value_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_UpdateOp, from_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_UpdateOp, conditional_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_UpdateOp, assert_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_UpdateOp, ops_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_StorageKey, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_StorageKey, bucket_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_StorageKey, collection_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_StorageKey, record_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate_StorageKey, version_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate, key_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate, permission_read_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate, permission_write_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate_StorageUpdate, ops_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageUpdate, updates_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageKeys_StorageKey, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageKeys_StorageKey, bucket_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageKeys_StorageKey, collection_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageKeys_StorageKey, record_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageKeys_StorageKey, version_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageKeys, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageKeys, keys_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageRemove_StorageKey, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageRemove_StorageKey, bucket_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageRemove_StorageKey, collection_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageRemove_StorageKey, record_),
	PROTOBUF_FIELD_OFFSET(::server::TStorageRemove_StorageKey, version_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TStorageRemove, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TStorageRemove, keys_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Leaderboard, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Leaderboard, id_),
	PROTOBUF_FIELD_OFFSET(::server::Leaderboard, authoritative_),
	PROTOBUF_FIELD_OFFSET(::server::Leaderboard, sort_),
	PROTOBUF_FIELD_OFFSET(::server::Leaderboard, count_),
	PROTOBUF_FIELD_OFFSET(::server::Leaderboard, reset_schedule_),
	PROTOBUF_FIELD_OFFSET(::server::Leaderboard, metadata_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, leaderboard_id_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, owner_id_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, handle_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, lang_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, location_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, timezone_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, rank_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, score_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, num_score_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, metadata_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, ranked_at_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, updated_at_),
	PROTOBUF_FIELD_OFFSET(::server::LeaderboardRecord, expires_at_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardsList, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardsList, limit_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardsList, cursor_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardsList, filter_leaderboard_id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboards, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboards, leaderboards_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboards, cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite, leaderboard_id_),
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite, location_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite, timezone_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite, metadata_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite, op_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsWrite, records_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsFetch, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsFetch, leaderboard_ids_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsFetch, limit_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsFetch, cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsList_Owners, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsList_Owners, owner_ids_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsList, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsList, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsList, leaderboard_id_),
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsList, limit_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsList, cursor_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecordsList, filter_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecords, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecords, records_),
	PROTOBUF_FIELD_OFFSET(::server::TLeaderboardRecords, cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TRpc, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TRpc, id_),
	PROTOBUF_FIELD_OFFSET(::server::TRpc, payload_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation_ApplePurchase, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation_ApplePurchase, product_id_),
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation_ApplePurchase, receipt_data_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation_GooglePurchase, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation_GooglePurchase, product_id_),
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation_GooglePurchase, product_type_),
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation_GooglePurchase, purchase_token_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation, _internal_metadata_),
	~0u, // no _extensions_
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation, _oneof_case_[0]),
	~0u, // no _weak_field_map_
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseValidation, id_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseRecord, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseRecord, success_),
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseRecord, seen_before_),
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseRecord, purchase_provider_reachable_),
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseRecord, message_),
	PROTOBUF_FIELD_OFFSET(::server::TPurchaseRecord, data_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Notification, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Notification, id_),
	PROTOBUF_FIELD_OFFSET(::server::Notification, subject_),
	PROTOBUF_FIELD_OFFSET(::server::Notification, content_),
	PROTOBUF_FIELD_OFFSET(::server::Notification, code_),
	PROTOBUF_FIELD_OFFSET(::server::Notification, sender_id_),
	PROTOBUF_FIELD_OFFSET(::server::Notification, created_at_),
	PROTOBUF_FIELD_OFFSET(::server::Notification, expires_at_),
	PROTOBUF_FIELD_OFFSET(::server::Notification, persistent_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::Notifications, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::Notifications, notifications_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TNotificationsList, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TNotificationsList, limit_),
	PROTOBUF_FIELD_OFFSET(::server::TNotificationsList, resumable_cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TNotifications, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TNotifications, notifications_),
	PROTOBUF_FIELD_OFFSET(::server::TNotifications, resumable_cursor_),
	~0u, // no _has_bits_
	PROTOBUF_FIELD_OFFSET(::server::TNotificationsRemove, _internal_metadata_),
	~0u, // no _extensions_
	~0u, // no _oneof_case_
	~0u, // no _weak_field_map_
	PROTOBUF_FIELD_OFFSET(::server::TNotificationsRemove, notification_ids_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
	{ 0, -1, sizeof(::server::Heartbeat) },
	{ 6, -1, sizeof(::server::Error) },
	{ 13, -1, sizeof(::server::AuthenticateRequest_Email) },
	{ 20, -1, sizeof(::server::AuthenticateRequest_GameCenter) },
	{ 31, -1, sizeof(::server::AuthenticateRequest) },
	{ 45, -1, sizeof(::server::AuthenticateResponse_Session) },
	{ 52, -1, sizeof(::server::AuthenticateResponse_Error) },
	{ 60, -1, sizeof(::server::AuthenticateResponse) },
	{ 69, -1, sizeof(::server::Envelope) },
	{ 147, -1, sizeof(::server::Logout) },
	{ 152, -1, sizeof(::server::TLink) },
	{ 165, -1, sizeof(::server::TUnlink) },
	{ 178, -1, sizeof(::server::User) },
	{ 194, -1, sizeof(::server::Self) },
	{ 208, -1, sizeof(::server::TSelfFetch) },
	{ 213, -1, sizeof(::server::TSelf) },
	{ 219, -1, sizeof(::server::TSelfUpdate) },
	{ 231, -1, sizeof(::server::TUsersFetch_UsersFetch) },
	{ 239, -1, sizeof(::server::TUsersFetch) },
	{ 245, -1, sizeof(::server::TUsers) },
	{ 251, -1, sizeof(::server::Friend) },
	{ 258, -1, sizeof(::server::TFriendsAdd_FriendsAdd) },
	{ 266, -1, sizeof(::server::TFriendsAdd) },
	{ 272, -1, sizeof(::server::TFriendsRemove) },
	{ 278, -1, sizeof(::server::TFriendsBlock) },
	{ 284, -1, sizeof(::server::TFriendsList) },
	{ 289, -1, sizeof(::server::TFriends) },
	{ 295, -1, sizeof(::server::Group) },
	{ 312, -1, sizeof(::server::TGroupsCreate_GroupCreate) },
	{ 323, -1, sizeof(::server::TGroupsCreate) },
	{ 329, -1, sizeof(::server::TGroupsUpdate_GroupUpdate) },
	{ 341, -1, sizeof(::server::TGroupsUpdate) },
	{ 347, -1, sizeof(::server::TGroupsRemove) },
	{ 353, -1, sizeof(::server::TGroupsSelfList) },
	{ 358, -1, sizeof(::server::TGroupsFetch_GroupFetch) },
	{ 366, -1, sizeof(::server::TGroupsFetch) },
	{ 372, -1, sizeof(::server::TGroupsList) },
	{ 384, -1, sizeof(::server::TGroups) },
	{ 391, -1, sizeof(::server::TGroupsSelf_GroupSelf) },
	{ 398, -1, sizeof(::server::TGroupsSelf) },
	{ 404, -1, sizeof(::server::GroupUser) },
	{ 411, -1, sizeof(::server::TGroupUsersList) },
	{ 417, -1, sizeof(::server::TGroupUsers) },
	{ 423, -1, sizeof(::server::TGroupsJoin) },
	{ 429, -1, sizeof(::server::TGroupsLeave) },
	{ 435, -1, sizeof(::server::TGroupUsersAdd_GroupUserAdd) },
	{ 442, -1, sizeof(::server::TGroupUsersAdd) },
	{ 448, -1, sizeof(::server::TGroupUsersKick_GroupUserKick) },
	{ 455, -1, sizeof(::server::TGroupUsersKick) },
	{ 461, -1, sizeof(::server::TGroupUsersPromote_GroupUserPromote) },
	{ 468, -1, sizeof(::server::TGroupUsersPromote) },
	{ 474, -1, sizeof(::server::TopicId) },
	{ 483, -1, sizeof(::server::UserPresence) },
	{ 491, -1, sizeof(::server::TTopicsJoin_TopicJoin) },
	{ 500, -1, sizeof(::server::TTopicsJoin) },
	{ 506, -1, sizeof(::server::TTopics_Topic) },
	{ 514, -1, sizeof(::server::TTopics) },
	{ 520, -1, sizeof(::server::TTopicsLeave) },
	{ 526, -1, sizeof(::server::TTopicMessageSend) },
	{ 533, -1, sizeof(::server::TTopicMessageAck) },
	{ 542, -1, sizeof(::server::TopicMessage) },
	{ 555, -1, sizeof(::server::TTopicMessagesList) },
	{ 567, -1, sizeof(::server::TTopicMessages) },
	{ 574, -1, sizeof(::server::TopicPresence) },
	{ 582, -1, sizeof(::server::PropertyPair_StringSet) },
	{ 588, -1, sizeof(::server::PropertyPair) },
	{ 598, -1, sizeof(::server::MatchmakeFilter_TermFilter) },
	{ 605, -1, sizeof(::server::MatchmakeFilter_RangeFilter) },
	{ 612, -1, sizeof(::server::MatchmakeFilter) },
	{ 622, -1, sizeof(::server::TMatchmakeAdd) },
	{ 630, -1, sizeof(::server::TMatchmakeTicket) },
	{ 636, -1, sizeof(::server::TMatchmakeRemove) },
	{ 642, -1, sizeof(::server::MatchmakeMatched_UserProperty) },
	{ 650, -1, sizeof(::server::MatchmakeMatched) },
	{ 660, -1, sizeof(::server::Match) },
	{ 668, -1, sizeof(::server::MatchPresence) },
	{ 676, -1, sizeof(::server::TMatchCreate) },
	{ 681, -1, sizeof(::server::TMatch) },
	{ 687, -1, sizeof(::server::TMatchesJoin_MatchJoin) },
	{ 695, -1, sizeof(::server::TMatchesJoin) },
	{ 701, -1, sizeof(::server::TMatches) },
	{ 707, -1, sizeof(::server::MatchDataSend) },
	{ 716, -1, sizeof(::server::MatchData) },
	{ 725, -1, sizeof(::server::TMatchesLeave) },
	{ 731, -1, sizeof(::server::TStorageList) },
	{ 741, -1, sizeof(::server::TStorageFetch_StorageKey) },
	{ 750, -1, sizeof(::server::TStorageFetch) },
	{ 756, -1, sizeof(::server::TStorageData_StorageData) },
	{ 772, -1, sizeof(::server::TStorageData) },
	{ 779, -1, sizeof(::server::TStorageWrite_StorageData) },
	{ 791, -1, sizeof(::server::TStorageWrite) },
	{ 797, -1, sizeof(::server::TStorageUpdate_StorageUpdate_UpdateOp) },
	{ 809, -1, sizeof(::server::TStorageUpdate_StorageUpdate_StorageKey) },
	{ 818, -1, sizeof(::server::TStorageUpdate_StorageUpdate) },
	{ 827, -1, sizeof(::server::TStorageUpdate) },
	{ 833, -1, sizeof(::server::TStorageKeys_StorageKey) },
	{ 842, -1, sizeof(::server::TStorageKeys) },
	{ 848, -1, sizeof(::server::TStorageRemove_StorageKey) },
	{ 857, -1, sizeof(::server::TStorageRemove) },
	{ 863, -1, sizeof(::server::Leaderboard) },
	{ 874, -1, sizeof(::server::LeaderboardRecord) },
	{ 892, -1, sizeof(::server::TLeaderboardsList) },
	{ 900, -1, sizeof(::server::TLeaderboards) },
	{ 907, -1, sizeof(::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite) },
	{ 921, -1, sizeof(::server::TLeaderboardRecordsWrite) },
	{ 927, -1, sizeof(::server::TLeaderboardRecordsFetch) },
	{ 935, -1, sizeof(::server::TLeaderboardRecordsList_Owners) },
	{ 941, -1, sizeof(::server::TLeaderboardRecordsList) },
	{ 955, -1, sizeof(::server::TLeaderboardRecords) },
	{ 962, -1, sizeof(::server::TRpc) },
	{ 969, -1, sizeof(::server::TPurchaseValidation_ApplePurchase) },
	{ 976, -1, sizeof(::server::TPurchaseValidation_GooglePurchase) },
	{ 984, -1, sizeof(::server::TPurchaseValidation) },
	{ 992, -1, sizeof(::server::TPurchaseRecord) },
	{ 1002, -1, sizeof(::server::Notification) },
	{ 1015, -1, sizeof(::server::Notifications) },
	{ 1021, -1, sizeof(::server::TNotificationsList) },
	{ 1028, -1, sizeof(::server::TNotifications) },
	{ 1035, -1, sizeof(::server::TNotificationsRemove) },
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Heartbeat_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Error_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_AuthenticateRequest_Email_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_AuthenticateRequest_GameCenter_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_AuthenticateRequest_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_AuthenticateResponse_Session_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_AuthenticateResponse_Error_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_AuthenticateResponse_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Envelope_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Logout_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLink_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TUnlink_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_User_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Self_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TSelfFetch_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TSelf_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TSelfUpdate_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TUsersFetch_UsersFetch_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TUsersFetch_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TUsers_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Friend_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TFriendsAdd_FriendsAdd_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TFriendsAdd_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TFriendsRemove_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TFriendsBlock_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TFriendsList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TFriends_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Group_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsCreate_GroupCreate_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsCreate_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsUpdate_GroupUpdate_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsUpdate_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsRemove_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsSelfList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsFetch_GroupFetch_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsFetch_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroups_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsSelf_GroupSelf_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsSelf_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_GroupUser_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupUsersList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupUsers_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsJoin_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupsLeave_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupUsersAdd_GroupUserAdd_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupUsersAdd_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupUsersKick_GroupUserKick_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupUsersKick_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupUsersPromote_GroupUserPromote_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TGroupUsersPromote_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TopicId_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_UserPresence_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopicsJoin_TopicJoin_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopicsJoin_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopics_Topic_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopics_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopicsLeave_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopicMessageSend_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopicMessageAck_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TopicMessage_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopicMessagesList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TTopicMessages_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TopicPresence_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_PropertyPair_StringSet_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_PropertyPair_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_MatchmakeFilter_TermFilter_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_MatchmakeFilter_RangeFilter_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_MatchmakeFilter_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatchmakeAdd_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatchmakeTicket_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatchmakeRemove_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_MatchmakeMatched_UserProperty_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_MatchmakeMatched_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Match_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_MatchPresence_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatchCreate_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatch_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatchesJoin_MatchJoin_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatchesJoin_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatches_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_MatchDataSend_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_MatchData_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TMatchesLeave_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageFetch_StorageKey_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageFetch_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageData_StorageData_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageData_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageWrite_StorageData_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageWrite_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageUpdate_StorageUpdate_UpdateOp_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageUpdate_StorageUpdate_StorageKey_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageUpdate_StorageUpdate_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageUpdate_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageKeys_StorageKey_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageKeys_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageRemove_StorageKey_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TStorageRemove_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Leaderboard_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_LeaderboardRecord_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLeaderboardsList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLeaderboards_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLeaderboardRecordsWrite_LeaderboardRecordWrite_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLeaderboardRecordsWrite_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLeaderboardRecordsFetch_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLeaderboardRecordsList_Owners_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLeaderboardRecordsList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TLeaderboardRecords_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TRpc_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TPurchaseValidation_ApplePurchase_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TPurchaseValidation_GooglePurchase_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TPurchaseValidation_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TPurchaseRecord_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Notification_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_Notifications_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TNotificationsList_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TNotifications_default_instance_),
	reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::server::_TNotificationsRemove_default_instance_),
};

const char descriptor_table_protodef_api_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
		"\n\tapi.proto\022\006server\"\036\n\tHeartbeat\022\021\n\ttime"
		"stamp\030\001 \001(\003\"\300\003\n\005Error\022\014\n\004code\030\001 \001(\005\022\013\n\003m"
		"sg\030\002 \001(\t\"\233\003\n\004Code\022\025\n\021RUNTIME_EXCEPTION\020\000"
		"\022\030\n\024UNRECOGNIZED_PAYLOAD\020\001\022\023\n\017MISSING_PA"
		"YLOAD\020\002\022\r\n\tBAD_INPUT\020\003\022\016\n\nAUTH_ERROR\020\004\022\022"
		"\n\016USER_NOT_FOUND\020\005\022\027\n\023USER_REGISTER_INUS"
		"E\020\006\022\023\n\017USER_LINK_INUSE\020\007\022\"\n\036USER_LINK_PR"
		"OVIDER_UNAVAILABLE\020\010\022\032\n\026USER_UNLINK_DISA"
		"LLOWED\020\t\022\025\n\021USER_HANDLE_INUSE\020\n\022\024\n\020GROUP"
		"_NAME_INUSE\020\013\022\024\n\020GROUP_LAST_ADMIN\020\014\022\024\n\020S"
		"TORAGE_REJECTED\020\r\022\023\n\017MATCH_NOT_FOUND\020\016\022\036"
		"\n\032RUNTIME_FUNCTION_NOT_FOUND\020\017\022\036\n\032RUNTIM"
		"E_FUNCTION_EXCEPTION\020\020\"\250\003\n\023AuthenticateR"
		"equest\022\023\n\013collationId\030\001 \001(\t\0222\n\005email\030\002 \001"
		"(\0132!.server.AuthenticateRequest.EmailH\000\022"
		"\022\n\010facebook\030\003 \001(\tH\000\022\020\n\006google\030\004 \001(\tH\000\022=\n"
		"\013game_center\030\005 \001(\0132&.server.Authenticate"
		"Request.GameCenterH\000\022\017\n\005steam\030\006 \001(\tH\000\022\020\n"
		"\006device\030\007 \001(\tH\000\022\020\n\006custom\030\010 \001(\tH\000\032(\n\005Ema"
		"il\022\r\n\005email\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\032~\n\nG"
		"ameCenter\022\021\n\tplayer_id\030\001 \001(\t\022\021\n\tbundle_i"
		"d\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\003\022\014\n\004salt\030\004 \001(\t"
		"\022\021\n\tsignature\030\005 \001(\t\022\026\n\016public_key_url\030\006 "
		"\001(\tB\004\n\002id\"\243\002\n\024AuthenticateResponse\022\024\n\014co"
		"llation_id\030\001 \001(\t\0227\n\007session\030\002 \001(\0132$.serv"
		"er.AuthenticateResponse.SessionH\000\0223\n\005err"
		"or\030\003 \001(\0132\".server.AuthenticateResponse.E"
		"rrorH\000\032+\n\007Session\022\r\n\005token\030\001 \001(\t\022\021\n\tudp_"
		"token\030\002 \001(\t\032T\n\005Error\022\014\n\004code\030\001 \001(\005\022\017\n\007me"
		"ssage\030\002 \001(\t\022,\n\007request\030\003 \001(\0132\033.server.Au"
		"thenticateRequestB\004\n\002id\"\325\032\n\010Envelope\022\024\n\014"
		"collation_id\030\001 \001(\t\022\036\n\005error\030\002 \001(\0132\r.serv"
		"er.ErrorH\000\022&\n\theartbeat\030\003 \001(\0132\021.server.H"
		"eartbeatH\000\022 \n\006logout\030\004 \001(\0132\016.server.Logo"
		"utH\000\022\035\n\004link\030\005 \001(\0132\r.server.TLinkH\000\022!\n\006u"
		"nlink\030\006 \001(\0132\017.server.TUnlinkH\000\022(\n\nself_f"
		"etch\030\007 \001(\0132\022.server.TSelfFetchH\000\022*\n\013self"
		"_update\030\010 \001(\0132\023.server.TSelfUpdateH\000\022*\n\013"
		"users_fetch\030\t \001(\0132\023.server.TUsersFetchH\000"
		"\022\035\n\004self\030\n \001(\0132\r.server.TSelfH\000\022\037\n\005users"
		"\030\013 \001(\0132\016.server.TUsersH\000\022*\n\013friends_add\030"
		"\014 \001(\0132\023.server.TFriendsAddH\000\0220\n\016friends_"
		"remove\030\r \001(\0132\026.server.TFriendsRemoveH\000\022."
		"\n\rfriends_block\030\016 \001(\0132\025.server.TFriendsB"
		"lockH\000\022,\n\014friends_list\030\017 \001(\0132\024.server.TF"
		"riendsListH\000\022#\n\007friends\030\020 \001(\0132\020.server.T"
		"FriendsH\000\022.\n\rgroups_create\030\021 \001(\0132\025.serve"
		"r.TGroupsCreateH\000\022.\n\rgroups_update\030\022 \001(\013"
		"2\025.server.TGroupsUpdateH\000\022.\n\rgroups_remo"
		"ve\030\023 \001(\0132\025.server.TGroupsRemoveH\000\022,\n\014gro"
		"ups_fetch\030\024 \001(\0132\024.server.TGroupsFetchH\000\022"
		"*\n\013groups_list\030\025 \001(\0132\023.server.TGroupsLis"
		"tH\000\0223\n\020groups_self_list\030\026 \001(\0132\027.server.T"
		"GroupsSelfListH\000\0223\n\020group_users_list\030\027 \001"
		"(\0132\027.server.TGroupUsersListH\000\022*\n\013groups_"
		"join\030\030 \001(\0132\023.server.TGroupsJoinH\000\022,\n\014gro"
		"ups_leave\030\031 \001(\0132\024.server.TGroupsLeaveH\000\022"
		"1\n\017group_users_add\030\032 \001(\0132\026.server.TGroup"
		"UsersAddH\000\0223\n\020group_users_kick\030\033 \001(\0132\027.s"
		"erver.TGroupUsersKickH\000\0229\n\023group_users_p"
		"romote\030\034 \001(\0132\032.server.TGroupUsersPromote"
		"H\000\022!\n\006groups\030\035 \001(\0132\017.server.TGroupsH\000\022*\n"
		"\013groups_self\030\036 \001(\0132\023.server.TGroupsSelfH"
		"\000\022*\n\013group_users\030\037 \001(\0132\023.server.TGroupUs"
		"ersH\000\022*\n\013topics_join\030  \001(\0132\023.server.TTop"
		"icsJoinH\000\022,\n\014topics_leave\030! \001(\0132\024.server"
		".TTopicsLeaveH\000\0227\n\022topic_message_send\030\" "
		"\001(\0132\031.server.TTopicMessageSendH\000\0229\n\023topi"
		"c_messages_list\030# \001(\0132\032.server.TTopicMes"
		"sagesListH\000\022!\n\006topics\030$ \001(\0132\017.server.TTo"
		"picsH\000\0225\n\021topic_message_ack\030% \001(\0132\030.serv"
		"er.TTopicMessageAckH\000\022-\n\rtopic_message\030&"
		" \001(\0132\024.server.TopicMessageH\000\0220\n\016topic_me"
		"ssages\030\' \001(\0132\026.server.TTopicMessagesH\000\022/"
		"\n\016topic_presence\030( \001(\0132\025.server.TopicPre"
		"senceH\000\022,\n\014match_create\030) \001(\0132\024.server.T"
		"MatchCreateH\000\022,\n\014matches_join\030* \001(\0132\024.se"
		"rver.TMatchesJoinH\000\022.\n\rmatches_leave\030+ \001"
		"(\0132\025.server.TMatchesLeaveH\000\0220\n\017match_dat"
		"a_send\030, \001(\0132\025.server.MatchDataSendH\000\022\037\n"
		"\005match\030- \001(\0132\016.server.TMatchH\000\022#\n\007matche"
		"s\030. \001(\0132\020.server.TMatchesH\000\022\'\n\nmatch_dat"
		"a\030/ \001(\0132\021.server.MatchDataH\000\022/\n\016match_pr"
		"esence\0300 \001(\0132\025.server.MatchPresenceH\000\022,\n"
		"\014storage_list\0301 \001(\0132\024.server.TStorageLis"
		"tH\000\022.\n\rstorage_fetch\0302 \001(\0132\025.server.TSto"
		"rageFetchH\000\022.\n\rstorage_write\0303 \001(\0132\025.ser"
		"ver.TStorageWriteH\000\0220\n\016storage_update\0304 "
		"\001(\0132\026.server.TStorageUpdateH\000\0220\n\016storage"
		"_remove\0305 \001(\0132\026.server.TStorageRemoveH\000\022"
		",\n\014storage_data\0306 \001(\0132\024.server.TStorageD"
		"ataH\000\022,\n\014storage_keys\0307 \001(\0132\024.server.TSt"
		"orageKeysH\000\0226\n\021leaderboards_list\0308 \001(\0132\031"
		".server.TLeaderboardsListH\000\022E\n\031leaderboa"
		"rd_records_write\0309 \001(\0132 .server.TLeaderb"
		"oardRecordsWriteH\000\022E\n\031leaderboard_record"
		"s_fetch\030: \001(\0132 .server.TLeaderboardRecor"
		"dsFetchH\000\022C\n\030leaderboard_records_list\030; "
		"\001(\0132\037.server.TLeaderboardRecordsListH\000\022-"
		"\n\014leaderboards\030< \001(\0132\025.server.TLeaderboa"
		"rdsH\000\022:\n\023leaderboard_records\030= \001(\0132\033.ser"
		"ver.TLeaderboardRecordsH\000\022.\n\rmatchmake_a"
		"dd\030> \001(\0132\025.server.TMatchmakeAddH\000\0224\n\020mat"
		"chmake_remove\030\? \001(\0132\030.server.TMatchmakeR"
		"emoveH\000\0224\n\020matchmake_ticket\030@ \001(\0132\030.serv"
		"er.TMatchmakeTicketH\000\0225\n\021matchmake_match"
		"ed\030A \001(\0132\030.server.MatchmakeMatchedH\000\022\033\n\003"
		"rpc\030B \001(\0132\014.server.TRpcH\000\022/\n\010purchase\030C "
		"\001(\0132\033.server.TPurchaseValidationH\000\0222\n\017pu"
		"rchase_record\030D \001(\0132\027.server.TPurchaseRe"
		"cordH\000\0228\n\022notifications_list\030E \001(\0132\032.ser"
		"ver.TNotificationsListH\000\022<\n\024notification"
		"s_remove\030F \001(\0132\034.server.TNotificationsRe"
		"moveH\000\022/\n\rnotifications\030G \001(\0132\026.server.T"
		"NotificationsH\000\0223\n\022live_notifications\030H "
		"\001(\0132\025.server.NotificationsH\000B\t\n\007payload\""
		"\010\n\006Logout\"\333\001\n\005TLink\0222\n\005email\030\001 \001(\0132!.ser"
		"ver.AuthenticateRequest.EmailH\000\022\022\n\010faceb"
		"ook\030\002 \001(\tH\000\022\020\n\006google\030\003 \001(\tH\000\022=\n\013game_ce"
		"nter\030\004 \001(\0132&.server.AuthenticateRequest."
		"GameCenterH\000\022\017\n\005steam\030\005 \001(\tH\000\022\020\n\006device\030"
		"\006 \001(\tH\000\022\020\n\006custom\030\007 \001(\tH\000B\004\n\002id\"\222\001\n\007TUnl"
		"ink\022\017\n\005email\030\001 \001(\tH\000\022\022\n\010facebook\030\002 \001(\tH\000"
		"\022\020\n\006google\030\003 \001(\tH\000\022\025\n\013game_center\030\004 \001(\tH"
		"\000\022\017\n\005steam\030\005 \001(\tH\000\022\020\n\006device\030\006 \001(\tH\000\022\020\n\006"
		"custom\030\007 \001(\tH\000B\004\n\002id\"\314\001\n\004User\022\n\n\002id\030\001 \001("
		"\t\022\016\n\006handle\030\002 \001(\t\022\020\n\010fullname\030\003 \001(\t\022\022\n\na"
		"vatar_url\030\004 \001(\t\022\014\n\004lang\030\005 \001(\t\022\020\n\010locatio"
		"n\030\006 \001(\t\022\020\n\010timezone\030\007 \001(\t\022\020\n\010metadata\030\010 "
		"\001(\t\022\022\n\ncreated_at\030\t \001(\003\022\022\n\nupdated_at\030\n "
		"\001(\003\022\026\n\016last_online_at\030\013 \001(\003\"\273\001\n\004Self\022\032\n\004"
		"user\030\001 \001(\0132\014.server.User\022\020\n\010verified\030\002 \001"
		"(\010\022\r\n\005email\030\003 \001(\t\022\022\n\ndevice_ids\030\004 \003(\t\022\023\n"
		"\013facebook_id\030\005 \001(\t\022\021\n\tgoogle_id\030\006 \001(\t\022\025\n"
		"\rgamecenter_id\030\007 \001(\t\022\020\n\010steam_id\030\010 \001(\t\022\021"
		"\n\tcustom_id\030\t \001(\t\"\014\n\nTSelfFetch\"#\n\005TSelf"
		"\022\032\n\004self\030\001 \001(\0132\014.server.Self\"\207\001\n\013TSelfUp"
		"date\022\016\n\006handle\030\001 \001(\t\022\020\n\010fullname\030\002 \001(\t\022\020"
		"\n\010timezone\030\003 \001(\t\022\020\n\010location\030\004 \001(\t\022\014\n\004la"
		"ng\030\005 \001(\t\022\020\n\010metadata\030\006 \001(\t\022\022\n\navatar_url"
		"\030\007 \001(\t\"u\n\013TUsersFetch\022-\n\005users\030\001 \003(\0132\036.s"
		"erver.TUsersFetch.UsersFetch\0327\n\nUsersFet"
		"ch\022\021\n\007user_id\030\001 \001(\tH\000\022\020\n\006handle\030\002 \001(\tH\000B"
		"\004\n\002id\"%\n\006TUsers\022\033\n\005users\030\001 \003(\0132\014.server."
		"User\"3\n\006Friend\022\032\n\004user\030\001 \001(\0132\014.server.Us"
		"er\022\r\n\005state\030\002 \001(\003\"w\n\013TFriendsAdd\022/\n\007frie"
		"nds\030\001 \003(\0132\036.server.TFriendsAdd.FriendsAd"
		"d\0327\n\nFriendsAdd\022\021\n\007user_id\030\001 \001(\tH\000\022\020\n\006ha"
		"ndle\030\002 \001(\tH\000B\004\n\002id\"\"\n\016TFriendsRemove\022\020\n\010"
		"user_ids\030\001 \003(\t\"!\n\rTFriendsBlock\022\020\n\010user_"
		"ids\030\001 \003(\t\"\016\n\014TFriendsList\"+\n\010TFriends\022\037\n"
		"\007friends\030\001 \003(\0132\016.server.Friend\"\335\001\n\005Group"
		"\022\n\n\002id\030\001 \001(\t\022\017\n\007private\030\002 \001(\010\022\022\n\ncreator"
		"_id\030\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\023\n\013description\030\005"
		" \001(\t\022\022\n\navatar_url\030\006 \001(\t\022\014\n\004lang\030\007 \001(\t\022\025"
		"\n\rutc_offset_ms\030\010 \001(\003\022\020\n\010metadata\030\t \001(\t\022"
		"\r\n\005count\030\n \001(\003\022\022\n\ncreated_at\030\013 \001(\003\022\022\n\nup"
		"dated_at\030\014 \001(\003\"\271\001\n\rTGroupsCreate\0221\n\006grou"
		"ps\030\001 \003(\0132!.server.TGroupsCreate.GroupCre"
		"ate\032u\n\013GroupCreate\022\014\n\004name\030\001 \001(\t\022\023\n\013desc"
		"ription\030\002 \001(\t\022\022\n\navatar_url\030\003 \001(\t\022\014\n\004lan"
		"g\030\004 \001(\t\022\020\n\010metadata\030\005 \001(\t\022\017\n\007private\030\006 \001"
		"(\010\"\314\001\n\rTGroupsUpdate\0221\n\006groups\030\001 \003(\0132!.s"
		"erver.TGroupsUpdate.GroupUpdate\032\207\001\n\013Grou"
		"pUpdate\022\020\n\010group_id\030\001 \001(\t\022\017\n\007private\030\002 \001"
		"(\010\022\014\n\004name\030\003 \001(\t\022\023\n\013description\030\004 \001(\t\022\022\n"
		"\navatar_url\030\005 \001(\t\022\014\n\004lang\030\006 \001(\t\022\020\n\010metad"
		"ata\030\007 \001(\t\"\"\n\rTGroupsRemove\022\021\n\tgroup_ids\030"
		"\001 \003(\t\"\021\n\017TGroupsSelfList\"w\n\014TGroupsFetch"
		"\022/\n\006groups\030\001 \003(\0132\037.server.TGroupsFetch.G"
		"roupFetch\0326\n\nGroupFetch\022\022\n\010group_id\030\001 \001("
		"\tH\000\022\016\n\004name\030\002 \001(\tH\000B\004\n\002id\"\210\001\n\013TGroupsLis"
		"t\022\022\n\npage_limit\030\001 \001(\003\022\024\n\014order_by_asc\030\002 "
		"\001(\010\022\016\n\004lang\030\003 \001(\tH\000\022\024\n\ncreated_at\030\004 \001(\003H"
		"\000\022\017\n\005count\030\005 \001(\003H\000\022\016\n\006cursor\030\007 \001(\tB\010\n\006fi"
		"lter\"8\n\007TGroups\022\035\n\006groups\030\001 \003(\0132\r.server"
		".Group\022\016\n\006cursor\030\002 \001(\t\"{\n\013TGroupsSelf\0222\n"
		"\013groups_self\030\001 \003(\0132\035.server.TGroupsSelf."
		"GroupSelf\0328\n\tGroupSelf\022\034\n\005group\030\001 \001(\0132\r."
		"server.Group\022\r\n\005state\030\002 \001(\003\"6\n\tGroupUser"
		"\022\032\n\004user\030\001 \001(\0132\014.server.User\022\r\n\005state\030\002 "
		"\001(\003\"#\n\017TGroupUsersList\022\020\n\010group_id\030\001 \001(\t"
		"\"/\n\013TGroupUsers\022 \n\005users\030\001 \003(\0132\021.server."
		"GroupUser\" \n\013TGroupsJoin\022\021\n\tgroup_ids\030\001 "
		"\003(\t\"!\n\014TGroupsLeave\022\021\n\tgroup_ids\030\001 \003(\t\"}"
		"\n\016TGroupUsersAdd\0228\n\013group_users\030\001 \003(\0132#."
		"server.TGroupUsersAdd.GroupUserAdd\0321\n\014Gr"
		"oupUserAdd\022\020\n\010group_id\030\001 \001(\t\022\017\n\007user_id\030"
		"\002 \001(\t\"\201\001\n\017TGroupUsersKick\022:\n\013group_users"
		"\030\001 \003(\0132%.server.TGroupUsersKick.GroupUse"
		"rKick\0322\n\rGroupUserKick\022\020\n\010group_id\030\001 \001(\t"
		"\022\017\n\007user_id\030\002 \001(\t\"\215\001\n\022TGroupUsersPromote"
		"\022@\n\013group_users\030\001 \003(\0132+.server.TGroupUse"
		"rsPromote.GroupUserPromote\0325\n\020GroupUserP"
		"romote\022\020\n\010group_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001("
		"\t\"A\n\007TopicId\022\014\n\002dm\030\001 \001(\tH\000\022\016\n\004room\030\002 \001(\t"
		"H\000\022\022\n\010group_id\030\003 \001(\tH\000B\004\n\002id\"C\n\014UserPres"
		"ence\022\017\n\007user_id\030\001 \001(\t\022\022\n\nsession_id\030\002 \001("
		"\t\022\016\n\006handle\030\003 \001(\t\"\205\001\n\013TTopicsJoin\022,\n\005joi"
		"ns\030\001 \003(\0132\035.server.TTopicsJoin.TopicJoin\032"
		"H\n\tTopicJoin\022\021\n\007user_id\030\001 \001(\tH\000\022\016\n\004room\030"
		"\002 \001(\tH\000\022\022\n\010group_id\030\003 \001(\tH\000B\004\n\002id\"\246\001\n\007TT"
		"opics\022%\n\006topics\030\001 \003(\0132\025.server.TTopics.T"
		"opic\032t\n\005Topic\022\036\n\005topic\030\001 \001(\0132\017.server.To"
		"picId\022\'\n\tpresences\030\002 \003(\0132\024.server.UserPr"
		"esence\022\"\n\004self\030\003 \001(\0132\024.server.UserPresen"
		"ce\"/\n\014TTopicsLeave\022\037\n\006topics\030\001 \003(\0132\017.ser"
		"ver.TopicId\"A\n\021TTopicMessageSend\022\036\n\005topi"
		"c\030\001 \001(\0132\017.server.TopicId\022\014\n\004data\030\002 \001(\t\"^"
		"\n\020TTopicMessageAck\022\022\n\nmessage_id\030\001 \001(\t\022\022"
		"\n\ncreated_at\030\002 \001(\003\022\022\n\nexpires_at\030\003 \001(\003\022\016"
		"\n\006handle\030\004 \001(\t\"\247\001\n\014TopicMessage\022\036\n\005topic"
		"\030\001 \001(\0132\017.server.TopicId\022\017\n\007user_id\030\002 \001(\t"
		"\022\022\n\nmessage_id\030\003 \001(\t\022\022\n\ncreated_at\030\004 \001(\003"
		"\022\022\n\nexpires_at\030\005 \001(\003\022\016\n\006handle\030\006 \001(\t\022\014\n\004"
		"type\030\007 \001(\003\022\014\n\004data\030\010 \001(\t\"\201\001\n\022TTopicMessa"
		"gesList\022\021\n\007user_id\030\001 \001(\tH\000\022\016\n\004room\030\002 \001(\t"
		"H\000\022\022\n\010group_id\030\003 \001(\tH\000\022\016\n\006cursor\030\004 \001(\t\022\017"
		"\n\007forward\030\005 \001(\010\022\r\n\005limit\030\006 \001(\003B\004\n\002id\"H\n\016"
		"TTopicMessages\022&\n\010messages\030\001 \003(\0132\024.serve"
		"r.TopicMessage\022\016\n\006cursor\030\002 \001(\t\"z\n\rTopicP"
		"resence\022\036\n\005topic\030\001 \001(\0132\017.server.TopicId\022"
		"#\n\005joins\030\002 \003(\0132\024.server.UserPresence\022$\n\006"
		"leaves\030\003 \003(\0132\024.server.UserPresence\"\237\001\n\014P"
		"ropertyPair\022\013\n\003key\030\001 \001(\t\0223\n\tstringSet\030\002 "
		"\001(\0132\036.server.PropertyPair.StringSetH\000\022\023\n"
		"\tboolValue\030\003 \001(\010H\000\022\022\n\010intValue\030\004 \001(\003H\000\032\033"
		"\n\tStringSet\022\016\n\006values\030\001 \003(\tB\007\n\005value\"\220\002\n"
		"\017MatchmakeFilter\022\014\n\004name\030\001 \001(\t\0222\n\004term\030\002"
		" \001(\0132\".server.MatchmakeFilter.TermFilter"
		"H\000\0224\n\005range\030\003 \001(\0132#.server.MatchmakeFilt"
		"er.RangeFilterH\000\022\017\n\005check\030\004 \001(\010H\000\0322\n\nTer"
		"mFilter\022\r\n\005terms\030\001 \003(\t\022\025\n\rmatchAllTerms\030"
		"\002 \001(\010\0327\n\013RangeFilter\022\023\n\013lower_bound\030\001 \001("
		"\003\022\023\n\013upper_bound\030\002 \001(\003B\007\n\005value\"{\n\rTMatc"
		"hmakeAdd\022\026\n\016required_count\030\001 \001(\003\022(\n\007filt"
		"ers\030\002 \003(\0132\027.server.MatchmakeFilter\022(\n\npr"
		"operties\030\003 \003(\0132\024.server.PropertyPair\"\"\n\020"
		"TMatchmakeTicket\022\016\n\006ticket\030\001 \001(\t\"\"\n\020TMat"
		"chmakeRemove\022\016\n\006ticket\030\001 \001(\t\"\256\002\n\020Matchma"
		"keMatched\022\016\n\006ticket\030\001 \001(\t\022\r\n\005token\030\002 \001(\t"
		"\022\'\n\tpresences\030\003 \003(\0132\024.server.UserPresenc"
		"e\022\"\n\004self\030\004 \001(\0132\024.server.UserPresence\0229\n"
		"\nproperties\030\005 \003(\0132%.server.MatchmakeMatc"
		"hed.UserProperty\032s\n\014UserProperty\022\017\n\007user"
		"_id\030\001 \001(\t\022(\n\nproperties\030\002 \003(\0132\024.server.P"
		"ropertyPair\022(\n\007filters\030\003 \003(\0132\027.server.Ma"
		"tchmakeFilter\"f\n\005Match\022\020\n\010match_id\030\001 \001(\t"
		"\022\'\n\tpresences\030\002 \003(\0132\024.server.UserPresenc"
		"e\022\"\n\004self\030\003 \001(\0132\024.server.UserPresence\"l\n"
		"\rMatchPresence\022\020\n\010match_id\030\001 \001(\t\022#\n\005join"
		"s\030\002 \003(\0132\024.server.UserPresence\022$\n\006leaves\030"
		"\003 \003(\0132\024.server.UserPresence\"\016\n\014TMatchCre"
		"ate\"&\n\006TMatch\022\034\n\005match\030\001 \001(\0132\r.server.Ma"
		"tch\"w\n\014TMatchesJoin\022/\n\007matches\030\001 \003(\0132\036.s"
		"erver.TMatchesJoin.MatchJoin\0326\n\tMatchJoi"
		"n\022\022\n\010match_id\030\001 \001(\tH\000\022\017\n\005token\030\002 \001(\tH\000B\004"
		"\n\002id\"*\n\010TMatches\022\036\n\007matches\030\001 \003(\0132\r.serv"
		"er.Match\"i\n\rMatchDataSend\022\020\n\010match_id\030\001 "
		"\001(\t\022\017\n\007op_code\030\002 \001(\003\022\014\n\004data\030\003 \001(\014\022\'\n\tpr"
		"esences\030\004 \003(\0132\024.server.UserPresence\"d\n\tM"
		"atchData\022\020\n\010match_id\030\001 \001(\t\022&\n\010presence\030\002"
		" \001(\0132\024.server.UserPresence\022\017\n\007op_code\030\003 "
		"\001(\003\022\014\n\004data\030\004 \001(\014\"\"\n\rTMatchesLeave\022\021\n\tma"
		"tch_ids\030\001 \003(\t\"b\n\014TStorageList\022\017\n\007user_id"
		"\030\001 \001(\t\022\016\n\006bucket\030\002 \001(\t\022\022\n\ncollection\030\003 \001"
		"(\t\022\r\n\005limit\030\004 \001(\003\022\016\n\006cursor\030\005 \001(\t\"\222\001\n\rTS"
		"torageFetch\022.\n\004keys\030\001 \003(\0132 .server.TStor"
		"ageFetch.StorageKey\032Q\n\nStorageKey\022\016\n\006buc"
		"ket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006record\030"
		"\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\"\262\002\n\014TStorageData\022"
		".\n\004data\030\001 \003(\0132 .server.TStorageData.Stor"
		"ageData\022\016\n\006cursor\030\002 \001(\t\032\341\001\n\013StorageData\022"
		"\016\n\006bucket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006r"
		"ecord\030\003 \001(\t\022\017\n\007user_id\030\004 \001(\t\022\r\n\005value\030\005 "
		"\001(\t\022\017\n\007version\030\006 \001(\t\022\027\n\017permission_read\030"
		"\007 \001(\005\022\030\n\020permission_write\030\010 \001(\005\022\022\n\ncreat"
		"ed_at\030\t \001(\003\022\022\n\nupdated_at\030\n \001(\003\022\022\n\nexpir"
		"es_at\030\013 \001(\003\"\327\001\n\rTStorageWrite\022/\n\004data\030\003 "
		"\003(\0132!.server.TStorageWrite.StorageData\032\224"
		"\001\n\013StorageData\022\016\n\006bucket\030\001 \001(\t\022\022\n\ncollec"
		"tion\030\002 \001(\t\022\016\n\006record\030\003 \001(\t\022\r\n\005value\030\004 \001("
		"\t\022\017\n\007version\030\005 \001(\t\022\027\n\017permission_read\030\006 "
		"\001(\005\022\030\n\020permission_write\030\007 \001(\005\"\222\005\n\016TStora"
		"geUpdate\0225\n\007updates\030\001 \003(\0132$.server.TStor"
		"ageUpdate.StorageUpdate\032\310\004\n\rStorageUpdat"
		"e\022<\n\003key\030\001 \001(\0132/.server.TStorageUpdate.S"
		"torageUpdate.StorageKey\022\027\n\017permission_re"
		"ad\030\002 \001(\005\022\030\n\020permission_write\030\003 \001(\005\022:\n\003op"
		"s\030\004 \003(\0132-.server.TStorageUpdate.StorageU"
		"pdate.UpdateOp\032\266\002\n\010UpdateOp\022\n\n\002op\030\001 \001(\005\022"
		"\014\n\004path\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\022\014\n\004from\030\004 \001"
		"(\t\022\023\n\013conditional\030\005 \001(\010\022\016\n\006assert\030\006 \001(\003\022"
		":\n\003ops\030\007 \003(\0132-.server.TStorageUpdate.Sto"
		"rageUpdate.UpdateOp\"\221\001\n\014UpdateOpCode\022\007\n\003"
		"ADD\020\000\022\n\n\006APPEND\020\001\022\010\n\004COPY\020\002\022\010\n\004INCR\020\003\022\010\n"
		"\004INIT\020\004\022\t\n\005MERGE\020\005\022\010\n\004MOVE\020\006\022\t\n\005PATCH\020\007\022"
		"\n\n\006REMOVE\020\010\022\013\n\007REPLACE\020\t\022\010\n\004TEST\020\n\022\013\n\007CO"
		"MPARE\020\013\032Q\n\nStorageKey\022\016\n\006bucket\030\001 \001(\t\022\022\n"
		"\ncollection\030\002 \001(\t\022\016\n\006record\030\003 \001(\t\022\017\n\007ver"
		"sion\030\004 \001(\t\"\220\001\n\014TStorageKeys\022-\n\004keys\030\001 \003("
		"\0132\037.server.TStorageKeys.StorageKey\032Q\n\nSt"
		"orageKey\022\016\n\006bucket\030\001 \001(\t\022\022\n\ncollection\030\002"
		" \001(\t\022\016\n\006record\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\"\224\001"
		"\n\016TStorageRemove\022/\n\004keys\030\001 \003(\0132!.server."
		"TStorageRemove.StorageKey\032Q\n\nStorageKey\022"
		"\016\n\006bucket\030\001 \001(\t\022\022\n\ncollection\030\002 \001(\t\022\016\n\006r"
		"ecord\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\"\203\001\n\013Leaderb"
		"oard\022\n\n\002id\030\001 \001(\t\022\025\n\rauthoritative\030\002 \001(\010\022"
		"\014\n\004sort\030\003 \001(\003\022\r\n\005count\030\004 \001(\003\022\026\n\016reset_sc"
		"hedule\030\005 \001(\t\022\020\n\010metadata\030\006 \001(\tJ\004\010\007\020\010J\004\010\010"
		"\020\t\"\374\001\n\021LeaderboardRecord\022\026\n\016leaderboard_"
		"id\030\001 \001(\t\022\020\n\010owner_id\030\002 \001(\t\022\016\n\006handle\030\003 \001"
		"(\t\022\014\n\004lang\030\004 \001(\t\022\020\n\010location\030\005 \001(\t\022\020\n\010ti"
		"mezone\030\006 \001(\t\022\014\n\004rank\030\007 \001(\003\022\r\n\005score\030\010 \001("
		"\003\022\021\n\tnum_score\030\t \001(\003\022\020\n\010metadata\030\n \001(\t\022\021"
		"\n\tranked_at\030\013 \001(\003\022\022\n\nupdated_at\030\014 \001(\003\022\022\n"
		"\nexpires_at\030\r \001(\003\"Q\n\021TLeaderboardsList\022\r"
		"\n\005limit\030\001 \001(\003\022\016\n\006cursor\030\002 \001(\t\022\035\n\025filter_"
		"leaderboard_id\030\003 \003(\t\"J\n\rTLeaderboards\022)\n"
		"\014leaderboards\030\001 \003(\0132\023.server.Leaderboard"
		"\022\016\n\006cursor\030\002 \001(\t\"\222\002\n\030TLeaderboardRecords"
		"Write\022H\n\007records\030\001 \003(\01327.server.TLeaderb"
		"oardRecordsWrite.LeaderboardRecordWrite\032"
		"\253\001\n\026LeaderboardRecordWrite\022\026\n\016leaderboar"
		"d_id\030\001 \001(\t\022\016\n\004incr\030\002 \001(\003H\000\022\016\n\004decr\030\003 \001(\003"
		"H\000\022\r\n\003set\030\004 \001(\003H\000\022\016\n\004best\030\005 \001(\003H\000\022\020\n\010loc"
		"ation\030\006 \001(\t\022\020\n\010timezone\030\007 \001(\t\022\020\n\010metadat"
		"a\030\010 \001(\tB\004\n\002op\"R\n\030TLeaderboardRecordsFetc"
		"h\022\027\n\017leaderboard_ids\030\001 \003(\t\022\r\n\005limit\030\002 \001("
		"\003\022\016\n\006cursor\030\003 \001(\t\"\200\002\n\027TLeaderboardRecord"
		"sList\022\026\n\016leaderboard_id\030\001 \001(\t\022\022\n\010owner_i"
		"d\030\002 \001(\tH\000\022;\n\towner_ids\030\003 \001(\0132&.server.TL"
		"eaderboardRecordsList.OwnersH\000\022\016\n\004lang\030\004"
		" \001(\tH\000\022\022\n\010location\030\005 \001(\tH\000\022\022\n\010timezone\030\006"
		" \001(\tH\000\022\r\n\005limit\030\007 \001(\003\022\016\n\006cursor\030\010 \001(\t\032\033\n"
		"\006Owners\022\021\n\towner_ids\030\001 \003(\tB\010\n\006filter\"Q\n\023"
		"TLeaderboardRecords\022*\n\007records\030\001 \003(\0132\031.s"
		"erver.LeaderboardRecord\022\016\n\006cursor\030\002 \001(\t\""
		"#\n\004TRpc\022\n\n\002id\030\001 \001(\t\022\017\n\007payload\030\002 \001(\t\"\266\002\n"
		"\023TPurchaseValidation\022C\n\016apple_purchase\030\001"
		" \001(\0132).server.TPurchaseValidation.AppleP"
		"urchaseH\000\022E\n\017google_purchase\030\002 \001(\0132*.ser"
		"ver.TPurchaseValidation.GooglePurchaseH\000"
		"\0329\n\rApplePurchase\022\022\n\nproduct_id\030\001 \001(\t\022\024\n"
		"\014receipt_data\030\002 \001(\t\032R\n\016GooglePurchase\022\022\n"
		"\nproduct_id\030\001 \001(\t\022\024\n\014product_type\030\002 \001(\t\022"
		"\026\n\016purchase_token\030\003 \001(\tB\004\n\002id\"{\n\017TPurcha"
		"seRecord\022\017\n\007success\030\001 \001(\010\022\023\n\013seen_before"
		"\030\002 \001(\010\022#\n\033purchase_provider_reachable\030\003 "
		"\001(\010\022\017\n\007message\030\006 \001(\t\022\014\n\004data\030\005 \001(\t\"\231\001\n\014N"
		"otification\022\n\n\002id\030\001 \001(\t\022\017\n\007subject\030\002 \001(\t"
		"\022\017\n\007content\030\003 \001(\t\022\014\n\004code\030\004 \001(\003\022\021\n\tsende"
		"r_id\030\005 \001(\t\022\022\n\ncreated_at\030\006 \001(\003\022\022\n\nexpire"
		"s_at\030\007 \001(\003\022\022\n\npersistent\030\010 \001(\010\"<\n\rNotifi"
		"cations\022+\n\rnotifications\030\001 \003(\0132\024.server."
		"Notification\"=\n\022TNotificationsList\022\r\n\005li"
		"mit\030\001 \001(\003\022\030\n\020resumable_cursor\030\002 \001(\t\"W\n\016T"
		"Notifications\022+\n\rnotifications\030\001 \003(\0132\024.s"
		"erver.Notification\022\030\n\020resumable_cursor\030\002"
		" \001(\t\"0\n\024TNotificationsRemove\022\030\n\020notifica"
		"tion_ids\030\001 \003(\t*E\n\025StoragePermissionRead\022"
		"\013\n\007NO_READ\020\000\022\016\n\nOWNER_READ\020\001\022\017\n\013PUBLIC_R"
		"EAD\020\002*7\n\026StoragePermissionWrite\022\014\n\010NO_WR"
		"ITE\020\000\022\017\n\013OWNER_WRITE\020\001B \n\025com.heroiclabs"
		".nakama\252\002\006Nakamab\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_api_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_api_2eproto_sccs[119] = {
	&scc_info_AuthenticateRequest_api_2eproto.base,
	&scc_info_AuthenticateRequest_Email_api_2eproto.base,
	&scc_info_AuthenticateRequest_GameCenter_api_2eproto.base,
	&scc_info_AuthenticateResponse_api_2eproto.base,
	&scc_info_AuthenticateResponse_Error_api_2eproto.base,
	&scc_info_AuthenticateResponse_Session_api_2eproto.base,
	&scc_info_Envelope_api_2eproto.base,
	&scc_info_Error_api_2eproto.base,
	&scc_info_Friend_api_2eproto.base,
	&scc_info_Group_api_2eproto.base,
	&scc_info_GroupUser_api_2eproto.base,
	&scc_info_Heartbeat_api_2eproto.base,
	&scc_info_Leaderboard_api_2eproto.base,
	&scc_info_LeaderboardRecord_api_2eproto.base,
	&scc_info_Logout_api_2eproto.base,
	&scc_info_Match_api_2eproto.base,
	&scc_info_MatchData_api_2eproto.base,
	&scc_info_MatchDataSend_api_2eproto.base,
	&scc_info_MatchPresence_api_2eproto.base,
	&scc_info_MatchmakeFilter_api_2eproto.base,
	&scc_info_MatchmakeFilter_RangeFilter_api_2eproto.base,
	&scc_info_MatchmakeFilter_TermFilter_api_2eproto.base,
	&scc_info_MatchmakeMatched_api_2eproto.base,
	&scc_info_MatchmakeMatched_UserProperty_api_2eproto.base,
	&scc_info_Notification_api_2eproto.base,
	&scc_info_Notifications_api_2eproto.base,
	&scc_info_PropertyPair_api_2eproto.base,
	&scc_info_PropertyPair_StringSet_api_2eproto.base,
	&scc_info_Self_api_2eproto.base,
	&scc_info_TFriends_api_2eproto.base,
	&scc_info_TFriendsAdd_api_2eproto.base,
	&scc_info_TFriendsAdd_FriendsAdd_api_2eproto.base,
	&scc_info_TFriendsBlock_api_2eproto.base,
	&scc_info_TFriendsList_api_2eproto.base,
	&scc_info_TFriendsRemove_api_2eproto.base,
	&scc_info_TGroupUsers_api_2eproto.base,
	&scc_info_TGroupUsersAdd_api_2eproto.base,
	&scc_info_TGroupUsersAdd_GroupUserAdd_api_2eproto.base,
	&scc_info_TGroupUsersKick_api_2eproto.base,
	&scc_info_TGroupUsersKick_GroupUserKick_api_2eproto.base,
	&scc_info_TGroupUsersList_api_2eproto.base,
	&scc_info_TGroupUsersPromote_api_2eproto.base,
	&scc_info_TGroupUsersPromote_GroupUserPromote_api_2eproto.base,
	&scc_info_TGroups_api_2eproto.base,
	&scc_info_TGroupsCreate_api_2eproto.base,
	&scc_info_TGroupsCreate_GroupCreate_api_2eproto.base,
	&scc_info_TGroupsFetch_api_2eproto.base,
	&scc_info_TGroupsFetch_GroupFetch_api_2eproto.base,
	&scc_info_TGroupsJoin_api_2eproto.base,
	&scc_info_TGroupsLeave_api_2eproto.base,
	&scc_info_TGroupsList_api_2eproto.base,
	&scc_info_TGroupsRemove_api_2eproto.base,
	&scc_info_TGroupsSelf_api_2eproto.base,
	&scc_info_TGroupsSelf_GroupSelf_api_2eproto.base,
	&scc_info_TGroupsSelfList_api_2eproto.base,
	&scc_info_TGroupsUpdate_api_2eproto.base,
	&scc_info_TGroupsUpdate_GroupUpdate_api_2eproto.base,
	&scc_info_TLeaderboardRecords_api_2eproto.base,
	&scc_info_TLeaderboardRecordsFetch_api_2eproto.base,
	&scc_info_TLeaderboardRecordsList_api_2eproto.base,
	&scc_info_TLeaderboardRecordsList_Owners_api_2eproto.base,
	&scc_info_TLeaderboardRecordsWrite_api_2eproto.base,
	&scc_info_TLeaderboardRecordsWrite_LeaderboardRecordWrite_api_2eproto.base,
	&scc_info_TLeaderboards_api_2eproto.base,
	&scc_info_TLeaderboardsList_api_2eproto.base,
	&scc_info_TLink_api_2eproto.base,
	&scc_info_TMatch_api_2eproto.base,
	&scc_info_TMatchCreate_api_2eproto.base,
	&scc_info_TMatches_api_2eproto.base,
	&scc_info_TMatchesJoin_api_2eproto.base,
	&scc_info_TMatchesJoin_MatchJoin_api_2eproto.base,
	&scc_info_TMatchesLeave_api_2eproto.base,
	&scc_info_TMatchmakeAdd_api_2eproto.base,
	&scc_info_TMatchmakeRemove_api_2eproto.base,
	&scc_info_TMatchmakeTicket_api_2eproto.base,
	&scc_info_TNotifications_api_2eproto.base,
	&scc_info_TNotificationsList_api_2eproto.base,
	&scc_info_TNotificationsRemove_api_2eproto.base,
	&scc_info_TPurchaseRecord_api_2eproto.base,
	&scc_info_TPurchaseValidation_api_2eproto.base,
	&scc_info_TPurchaseValidation_ApplePurchase_api_2eproto.base,
	&scc_info_TPurchaseValidation_GooglePurchase_api_2eproto.base,
	&scc_info_TRpc_api_2eproto.base,
	&scc_info_TSelf_api_2eproto.base,
	&scc_info_TSelfFetch_api_2eproto.base,
	&scc_info_TSelfUpdate_api_2eproto.base,
	&scc_info_TStorageData_api_2eproto.base,
	&scc_info_TStorageData_StorageData_api_2eproto.base,
	&scc_info_TStorageFetch_api_2eproto.base,
	&scc_info_TStorageFetch_StorageKey_api_2eproto.base,
	&scc_info_TStorageKeys_api_2eproto.base,
	&scc_info_TStorageKeys_StorageKey_api_2eproto.base,
	&scc_info_TStorageList_api_2eproto.base,
	&scc_info_TStorageRemove_api_2eproto.base,
	&scc_info_TStorageRemove_StorageKey_api_2eproto.base,
	&scc_info_TStorageUpdate_api_2eproto.base,
	&scc_info_TStorageUpdate_StorageUpdate_api_2eproto.base,
	&scc_info_TStorageUpdate_StorageUpdate_StorageKey_api_2eproto.base,
	&scc_info_TStorageUpdate_StorageUpdate_UpdateOp_api_2eproto.base,
	&scc_info_TStorageWrite_api_2eproto.base,
	&scc_info_TStorageWrite_StorageData_api_2eproto.base,
	&scc_info_TTopicMessageAck_api_2eproto.base,
	&scc_info_TTopicMessageSend_api_2eproto.base,
	&scc_info_TTopicMessages_api_2eproto.base,
	&scc_info_TTopicMessagesList_api_2eproto.base,
	&scc_info_TTopics_api_2eproto.base,
	&scc_info_TTopics_Topic_api_2eproto.base,
	&scc_info_TTopicsJoin_api_2eproto.base,
	&scc_info_TTopicsJoin_TopicJoin_api_2eproto.base,
	&scc_info_TTopicsLeave_api_2eproto.base,
	&scc_info_TUnlink_api_2eproto.base,
	&scc_info_TUsers_api_2eproto.base,
	&scc_info_TUsersFetch_api_2eproto.base,
	&scc_info_TUsersFetch_UsersFetch_api_2eproto.base,
	&scc_info_TopicId_api_2eproto.base,
	&scc_info_TopicMessage_api_2eproto.base,
	&scc_info_TopicPresence_api_2eproto.base,
	&scc_info_User_api_2eproto.base,
	&scc_info_UserPresence_api_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_api_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto = {
	false,
	false,
	descriptor_table_protodef_api_2eproto,
	"api.proto",
	14624,
	&descriptor_table_api_2eproto_once,
	descriptor_table_api_2eproto_sccs,
	descriptor_table_api_2eproto_deps,
	119,
	0,
	schemas,
	file_default_instances,
	TableStruct_api_2eproto::offsets,
	file_level_metadata_api_2eproto,
	119,
	file_level_enum_descriptors_api_2eproto,
	file_level_service_descriptors_api_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_api_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_api_2eproto)), true);
namespace server {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Error_Code_descriptor() {
	::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
	return file_level_enum_descriptors_api_2eproto[0];
}
bool Error_Code_IsValid(int value) {
	switch (value) {
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:
		case 16:
			return true;
		default:
			return false;
	}
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Error_Code Error::RUNTIME_EXCEPTION;
constexpr Error_Code Error::UNRECOGNIZED_PAYLOAD;
constexpr Error_Code Error::MISSING_PAYLOAD;
constexpr Error_Code Error::BAD_INPUT;
constexpr Error_Code Error::AUTH_ERROR;
constexpr Error_Code Error::USER_NOT_FOUND;
constexpr Error_Code Error::USER_REGISTER_INUSE;
constexpr Error_Code Error::USER_LINK_INUSE;
constexpr Error_Code Error::USER_LINK_PROVIDER_UNAVAILABLE;
constexpr Error_Code Error::USER_UNLINK_DISALLOWED;
constexpr Error_Code Error::USER_HANDLE_INUSE;
constexpr Error_Code Error::GROUP_NAME_INUSE;
constexpr Error_Code Error::GROUP_LAST_ADMIN;
constexpr Error_Code Error::STORAGE_REJECTED;
constexpr Error_Code Error::MATCH_NOT_FOUND;
constexpr Error_Code Error::RUNTIME_FUNCTION_NOT_FOUND;
constexpr Error_Code Error::RUNTIME_FUNCTION_EXCEPTION;
constexpr Error_Code Error::Code_MIN;
constexpr Error_Code Error::Code_MAX;
constexpr int Error::Code_ARRAYSIZE;
#endif // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_descriptor() {
	::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
	return file_level_enum_descriptors_api_2eproto[1];
}
bool TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode_IsValid(int value) {
	switch (value) {
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
			return true;
		default:
			return false;
	}
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::ADD;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::APPEND;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::COPY;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::INCR;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::INIT;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::MERGE;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::MOVE;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::PATCH;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::REMOVE;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::REPLACE;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::TEST;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::COMPARE;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::UpdateOpCode_MIN;
constexpr TStorageUpdate_StorageUpdate_UpdateOp_UpdateOpCode TStorageUpdate_StorageUpdate_UpdateOp::UpdateOpCode_MAX;
constexpr int TStorageUpdate_StorageUpdate_UpdateOp::UpdateOpCode_ARRAYSIZE;
#endif // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *StoragePermissionRead_descriptor() {
	::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
	return file_level_enum_descriptors_api_2eproto[2];
}
bool StoragePermissionRead_IsValid(int value) {
	switch (value) {
		case 0:
		case 1:
		case 2:
			return true;
		default:
			return false;
	}
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *StoragePermissionWrite_descriptor() {
	::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_api_2eproto);
	return file_level_enum_descriptors_api_2eproto[3];
}
bool StoragePermissionWrite_IsValid(int value) {
	switch (value) {
		case 0:
		case 1:
			return true;
		default:
			return false;
	}
}

// ===================================================================

class Heartbeat::_Internal {
public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	timestamp_ = from.timestamp_;
	// @@protoc_insertion_point(copy_constructor:server.Heartbeat)
}

void Heartbeat::SharedCtor() {
	timestamp_ = PROTOBUF_LONGLONG(0);
}

Heartbeat::~Heartbeat() {
	// @@protoc_insertion_point(destructor:server.Heartbeat)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Heartbeat::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void Heartbeat::ArenaDtor(void *object) {
	Heartbeat *_this = reinterpret_cast<Heartbeat *>(object);
	(void)_this;
}
void Heartbeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Heartbeat::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Heartbeat &Heartbeat::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Heartbeat_api_2eproto.base);
	return *internal_default_instance();
}

void Heartbeat::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Heartbeat)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	timestamp_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Heartbeat::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int64 timestamp = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Heartbeat::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Heartbeat)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int64 timestamp = 1;
	if (this->timestamp() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Heartbeat)
	return target;
}

size_t Heartbeat::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Heartbeat)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// int64 timestamp = 1;
	if (this->timestamp() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_timestamp());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Heartbeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Heartbeat)
	GOOGLE_DCHECK_NE(&from, this);
	const Heartbeat *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Heartbeat>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Heartbeat)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Heartbeat)
		MergeFrom(*source);
	}
}

void Heartbeat::MergeFrom(const Heartbeat &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Heartbeat)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.timestamp() != 0) {
		_internal_set_timestamp(from._internal_timestamp());
	}
}

void Heartbeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Heartbeat)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Heartbeat)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
	return true;
}

void Heartbeat::InternalSwap(Heartbeat *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Error::_Internal {
public:
};

Error::Error(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Error)
}
Error::Error(const Error &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_msg().empty()) {
		msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_msg(),
				GetArena());
	}
	code_ = from.code_;
	// @@protoc_insertion_point(copy_constructor:server.Error)
}

void Error::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Error_api_2eproto.base);
	msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	code_ = 0;
}

Error::~Error() {
	// @@protoc_insertion_point(destructor:server.Error)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Error::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Error::ArenaDtor(void *object) {
	Error *_this = reinterpret_cast<Error *>(object);
	(void)_this;
}
void Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Error::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Error &Error::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Error_api_2eproto.base);
	return *internal_default_instance();
}

void Error::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Error)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	code_ = 0;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Error::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int32 code = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string msg = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_msg();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Error.msg"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Error::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Error)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int32 code = 1;
	if (this->code() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
	}

	// string msg = 2;
	if (this->msg().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Error.msg");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_msg(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Error)
	return target;
}

size_t Error::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Error)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string msg = 2;
	if (this->msg().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_msg());
	}

	// int32 code = 1;
	if (this->code() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_code());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Error)
	GOOGLE_DCHECK_NE(&from, this);
	const Error *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Error>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Error)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Error)
		MergeFrom(*source);
	}
}

void Error::MergeFrom(const Error &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Error)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.msg().size() > 0) {
		_internal_set_msg(from._internal_msg());
	}
	if (from.code() != 0) {
		_internal_set_code(from._internal_code());
	}
}

void Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Error)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Error::CopyFrom(const Error &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Error)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Error::IsInitialized() const {
	return true;
}

void Error::InternalSwap(Error *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Error::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class AuthenticateRequest_Email::_Internal {
public:
};

AuthenticateRequest_Email::AuthenticateRequest_Email(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.AuthenticateRequest.Email)
}
AuthenticateRequest_Email::AuthenticateRequest_Email(const AuthenticateRequest_Email &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_email().empty()) {
		email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
				GetArena());
	}
	password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_password().empty()) {
		password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_password(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest.Email)
}

void AuthenticateRequest_Email::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateRequest_Email_api_2eproto.base);
	email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthenticateRequest_Email::~AuthenticateRequest_Email() {
	// @@protoc_insertion_point(destructor:server.AuthenticateRequest.Email)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateRequest_Email::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest_Email::ArenaDtor(void *object) {
	AuthenticateRequest_Email *_this = reinterpret_cast<AuthenticateRequest_Email *>(object);
	(void)_this;
}
void AuthenticateRequest_Email::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void AuthenticateRequest_Email::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const AuthenticateRequest_Email &AuthenticateRequest_Email::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateRequest_Email_api_2eproto.base);
	return *internal_default_instance();
}

void AuthenticateRequest_Email::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest.Email)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *AuthenticateRequest_Email::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string email = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_email();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.Email.email"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string password = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_password();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.Email.password"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *AuthenticateRequest_Email::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest.Email)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string email = 1;
	if (this->email().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.Email.email");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_email(), target);
	}

	// string password = 2;
	if (this->password().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.Email.password");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_password(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest.Email)
	return target;
}

size_t AuthenticateRequest_Email::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest.Email)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string email = 1;
	if (this->email().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_email());
	}

	// string password = 2;
	if (this->password().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_password());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void AuthenticateRequest_Email::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest.Email)
	GOOGLE_DCHECK_NE(&from, this);
	const AuthenticateRequest_Email *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateRequest_Email>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest.Email)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest.Email)
		MergeFrom(*source);
	}
}

void AuthenticateRequest_Email::MergeFrom(const AuthenticateRequest_Email &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest.Email)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.email().size() > 0) {
		_internal_set_email(from._internal_email());
	}
	if (from.password().size() > 0) {
		_internal_set_password(from._internal_password());
	}
}

void AuthenticateRequest_Email::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest.Email)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void AuthenticateRequest_Email::CopyFrom(const AuthenticateRequest_Email &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest.Email)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool AuthenticateRequest_Email::IsInitialized() const {
	return true;
}

void AuthenticateRequest_Email::InternalSwap(AuthenticateRequest_Email *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateRequest_Email::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class AuthenticateRequest_GameCenter::_Internal {
public:
};

AuthenticateRequest_GameCenter::AuthenticateRequest_GameCenter(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.AuthenticateRequest.GameCenter)
}
AuthenticateRequest_GameCenter::AuthenticateRequest_GameCenter(const AuthenticateRequest_GameCenter &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_player_id().empty()) {
		player_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_id(),
				GetArena());
	}
	bundle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_bundle_id().empty()) {
		bundle_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bundle_id(),
				GetArena());
	}
	salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_salt().empty()) {
		salt_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_salt(),
				GetArena());
	}
	signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_signature().empty()) {
		signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
				GetArena());
	}
	public_key_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_public_key_url().empty()) {
		public_key_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_key_url(),
				GetArena());
	}
	timestamp_ = from.timestamp_;
	// @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest.GameCenter)
}

void AuthenticateRequest_GameCenter::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateRequest_GameCenter_api_2eproto.base);
	player_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	bundle_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	salt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	public_key_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timestamp_ = PROTOBUF_LONGLONG(0);
}

AuthenticateRequest_GameCenter::~AuthenticateRequest_GameCenter() {
	// @@protoc_insertion_point(destructor:server.AuthenticateRequest.GameCenter)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateRequest_GameCenter::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	player_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	bundle_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	salt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	public_key_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateRequest_GameCenter::ArenaDtor(void *object) {
	AuthenticateRequest_GameCenter *_this = reinterpret_cast<AuthenticateRequest_GameCenter *>(object);
	(void)_this;
}
void AuthenticateRequest_GameCenter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void AuthenticateRequest_GameCenter::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const AuthenticateRequest_GameCenter &AuthenticateRequest_GameCenter::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateRequest_GameCenter_api_2eproto.base);
	return *internal_default_instance();
}

void AuthenticateRequest_GameCenter::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest.GameCenter)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	player_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	bundle_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	salt_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	public_key_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timestamp_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *AuthenticateRequest_GameCenter::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string player_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_player_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.GameCenter.player_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string bundle_id = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_bundle_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.GameCenter.bundle_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 timestamp = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
					timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string salt = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_salt();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.GameCenter.salt"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string signature = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_signature();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.GameCenter.signature"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string public_key_url = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_public_key_url();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.GameCenter.public_key_url"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *AuthenticateRequest_GameCenter::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest.GameCenter)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string player_id = 1;
	if (this->player_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_player_id().data(), static_cast<int>(this->_internal_player_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.GameCenter.player_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_player_id(), target);
	}

	// string bundle_id = 2;
	if (this->bundle_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_bundle_id().data(), static_cast<int>(this->_internal_bundle_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.GameCenter.bundle_id");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_bundle_id(), target);
	}

	// int64 timestamp = 3;
	if (this->timestamp() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
	}

	// string salt = 4;
	if (this->salt().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_salt().data(), static_cast<int>(this->_internal_salt().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.GameCenter.salt");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_salt(), target);
	}

	// string signature = 5;
	if (this->signature().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.GameCenter.signature");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_signature(), target);
	}

	// string public_key_url = 6;
	if (this->public_key_url().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_public_key_url().data(), static_cast<int>(this->_internal_public_key_url().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.GameCenter.public_key_url");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_public_key_url(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest.GameCenter)
	return target;
}

size_t AuthenticateRequest_GameCenter::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest.GameCenter)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string player_id = 1;
	if (this->player_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_player_id());
	}

	// string bundle_id = 2;
	if (this->bundle_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_bundle_id());
	}

	// string salt = 4;
	if (this->salt().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_salt());
	}

	// string signature = 5;
	if (this->signature().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_signature());
	}

	// string public_key_url = 6;
	if (this->public_key_url().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_public_key_url());
	}

	// int64 timestamp = 3;
	if (this->timestamp() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_timestamp());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void AuthenticateRequest_GameCenter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest.GameCenter)
	GOOGLE_DCHECK_NE(&from, this);
	const AuthenticateRequest_GameCenter *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateRequest_GameCenter>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest.GameCenter)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest.GameCenter)
		MergeFrom(*source);
	}
}

void AuthenticateRequest_GameCenter::MergeFrom(const AuthenticateRequest_GameCenter &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest.GameCenter)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.player_id().size() > 0) {
		_internal_set_player_id(from._internal_player_id());
	}
	if (from.bundle_id().size() > 0) {
		_internal_set_bundle_id(from._internal_bundle_id());
	}
	if (from.salt().size() > 0) {
		_internal_set_salt(from._internal_salt());
	}
	if (from.signature().size() > 0) {
		_internal_set_signature(from._internal_signature());
	}
	if (from.public_key_url().size() > 0) {
		_internal_set_public_key_url(from._internal_public_key_url());
	}
	if (from.timestamp() != 0) {
		_internal_set_timestamp(from._internal_timestamp());
	}
}

void AuthenticateRequest_GameCenter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest.GameCenter)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void AuthenticateRequest_GameCenter::CopyFrom(const AuthenticateRequest_GameCenter &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest.GameCenter)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool AuthenticateRequest_GameCenter::IsInitialized() const {
	return true;
}

void AuthenticateRequest_GameCenter::InternalSwap(AuthenticateRequest_GameCenter *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	player_id_.Swap(&other->player_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	bundle_id_.Swap(&other->bundle_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	salt_.Swap(&other->salt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	public_key_url_.Swap(&other->public_key_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateRequest_GameCenter::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class AuthenticateRequest::_Internal {
public:
	static const ::server::AuthenticateRequest_Email &email(const AuthenticateRequest *msg);
	static const ::server::AuthenticateRequest_GameCenter &game_center(const AuthenticateRequest *msg);
};

const ::server::AuthenticateRequest_Email &
AuthenticateRequest::_Internal::email(const AuthenticateRequest *msg) {
	return *msg->id_.email_;
}
const ::server::AuthenticateRequest_GameCenter &
AuthenticateRequest::_Internal::game_center(const AuthenticateRequest *msg) {
	return *msg->id_.game_center_;
}
void AuthenticateRequest::set_allocated_email(::server::AuthenticateRequest_Email *email) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_id();
	if (email) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(email);
		if (message_arena != submessage_arena) {
			email = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, email, submessage_arena);
		}
		set_has_email();
		id_.email_ = email;
	}
	// @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.email)
}
void AuthenticateRequest::set_allocated_game_center(::server::AuthenticateRequest_GameCenter *game_center) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_id();
	if (game_center) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(game_center);
		if (message_arena != submessage_arena) {
			game_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, game_center, submessage_arena);
		}
		set_has_game_center();
		id_.game_center_ = game_center;
	}
	// @@protoc_insertion_point(field_set_allocated:server.AuthenticateRequest.game_center)
}
AuthenticateRequest::AuthenticateRequest(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.AuthenticateRequest)
}
AuthenticateRequest::AuthenticateRequest(const AuthenticateRequest &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	collationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collationid().empty()) {
		collationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collationid(),
				GetArena());
	}
	clear_has_id();
	switch (from.id_case()) {
		case kEmail: {
			_internal_mutable_email()->::server::AuthenticateRequest_Email::MergeFrom(from._internal_email());
			break;
		}
		case kFacebook: {
			_internal_set_facebook(from._internal_facebook());
			break;
		}
		case kGoogle: {
			_internal_set_google(from._internal_google());
			break;
		}
		case kGameCenter: {
			_internal_mutable_game_center()->::server::AuthenticateRequest_GameCenter::MergeFrom(from._internal_game_center());
			break;
		}
		case kSteam: {
			_internal_set_steam(from._internal_steam());
			break;
		}
		case kDevice: {
			_internal_set_device(from._internal_device());
			break;
		}
		case kCustom: {
			_internal_set_custom(from._internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.AuthenticateRequest)
}

void AuthenticateRequest::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateRequest_api_2eproto.base);
	collationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	clear_has_id();
}

AuthenticateRequest::~AuthenticateRequest() {
	// @@protoc_insertion_point(destructor:server.AuthenticateRequest)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateRequest::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	collationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_id()) {
		clear_id();
	}
}

void AuthenticateRequest::ArenaDtor(void *object) {
	AuthenticateRequest *_this = reinterpret_cast<AuthenticateRequest *>(object);
	(void)_this;
}
void AuthenticateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void AuthenticateRequest::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const AuthenticateRequest &AuthenticateRequest::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateRequest_api_2eproto.base);
	return *internal_default_instance();
}

void AuthenticateRequest::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.AuthenticateRequest)
	switch (id_case()) {
		case kEmail: {
			if (GetArena() == nullptr) {
				delete id_.email_;
			}
			break;
		}
		case kFacebook: {
			id_.facebook_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGoogle: {
			id_.google_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGameCenter: {
			if (GetArena() == nullptr) {
				delete id_.game_center_;
			}
			break;
		}
		case kSteam: {
			id_.steam_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kDevice: {
			id_.device_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kCustom: {
			id_.custom_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void AuthenticateRequest::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.AuthenticateRequest)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	collationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *AuthenticateRequest::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string collationId = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_collationid();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.collationId"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.AuthenticateRequest.Email email = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_email(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string facebook = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_facebook();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.facebook"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string google = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_google();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.google"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.AuthenticateRequest.GameCenter game_center = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					ptr = ctx->ParseMessage(_internal_mutable_game_center(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string steam = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_steam();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.steam"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string device = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_device();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.device"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string custom = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					auto str = _internal_mutable_custom();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateRequest.custom"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *AuthenticateRequest::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateRequest)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string collationId = 1;
	if (this->collationid().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collationid().data(), static_cast<int>(this->_internal_collationid().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.collationId");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_collationid(), target);
	}

	// .server.AuthenticateRequest.Email email = 2;
	if (_internal_has_email()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						2, _Internal::email(this), target, stream);
	}

	// string facebook = 3;
	if (_internal_has_facebook()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_facebook().data(), static_cast<int>(this->_internal_facebook().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.facebook");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_facebook(), target);
	}

	// string google = 4;
	if (_internal_has_google()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_google().data(), static_cast<int>(this->_internal_google().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.google");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_google(), target);
	}

	// .server.AuthenticateRequest.GameCenter game_center = 5;
	if (_internal_has_game_center()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						5, _Internal::game_center(this), target, stream);
	}

	// string steam = 6;
	if (_internal_has_steam()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_steam().data(), static_cast<int>(this->_internal_steam().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.steam");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_steam(), target);
	}

	// string device = 7;
	if (_internal_has_device()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.device");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_device(), target);
	}

	// string custom = 8;
	if (_internal_has_custom()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_custom().data(), static_cast<int>(this->_internal_custom().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateRequest.custom");
		target = stream->WriteStringMaybeAliased(
				8, this->_internal_custom(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateRequest)
	return target;
}

size_t AuthenticateRequest::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateRequest)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string collationId = 1;
	if (this->collationid().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collationid());
	}

	switch (id_case()) {
		// .server.AuthenticateRequest.Email email = 2;
		case kEmail: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*id_.email_);
			break;
		}
		// string facebook = 3;
		case kFacebook: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_facebook());
			break;
		}
		// string google = 4;
		case kGoogle: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_google());
			break;
		}
		// .server.AuthenticateRequest.GameCenter game_center = 5;
		case kGameCenter: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*id_.game_center_);
			break;
		}
		// string steam = 6;
		case kSteam: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_steam());
			break;
		}
		// string device = 7;
		case kDevice: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_device());
			break;
		}
		// string custom = 8;
		case kCustom: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void AuthenticateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateRequest)
	GOOGLE_DCHECK_NE(&from, this);
	const AuthenticateRequest *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateRequest>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateRequest)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateRequest)
		MergeFrom(*source);
	}
}

void AuthenticateRequest::MergeFrom(const AuthenticateRequest &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateRequest)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.collationid().size() > 0) {
		_internal_set_collationid(from._internal_collationid());
	}
	switch (from.id_case()) {
		case kEmail: {
			_internal_mutable_email()->::server::AuthenticateRequest_Email::MergeFrom(from._internal_email());
			break;
		}
		case kFacebook: {
			_internal_set_facebook(from._internal_facebook());
			break;
		}
		case kGoogle: {
			_internal_set_google(from._internal_google());
			break;
		}
		case kGameCenter: {
			_internal_mutable_game_center()->::server::AuthenticateRequest_GameCenter::MergeFrom(from._internal_game_center());
			break;
		}
		case kSteam: {
			_internal_set_steam(from._internal_steam());
			break;
		}
		case kDevice: {
			_internal_set_device(from._internal_device());
			break;
		}
		case kCustom: {
			_internal_set_custom(from._internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void AuthenticateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateRequest)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void AuthenticateRequest::CopyFrom(const AuthenticateRequest &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateRequest)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool AuthenticateRequest::IsInitialized() const {
	return true;
}

void AuthenticateRequest::InternalSwap(AuthenticateRequest *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	collationid_.Swap(&other->collationid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateRequest::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class AuthenticateResponse_Session::_Internal {
public:
};

AuthenticateResponse_Session::AuthenticateResponse_Session(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.AuthenticateResponse.Session)
}
AuthenticateResponse_Session::AuthenticateResponse_Session(const AuthenticateResponse_Session &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_token().empty()) {
		token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
				GetArena());
	}
	udp_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_udp_token().empty()) {
		udp_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_udp_token(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse.Session)
}

void AuthenticateResponse_Session::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateResponse_Session_api_2eproto.base);
	token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	udp_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AuthenticateResponse_Session::~AuthenticateResponse_Session() {
	// @@protoc_insertion_point(destructor:server.AuthenticateResponse.Session)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateResponse_Session::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	udp_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateResponse_Session::ArenaDtor(void *object) {
	AuthenticateResponse_Session *_this = reinterpret_cast<AuthenticateResponse_Session *>(object);
	(void)_this;
}
void AuthenticateResponse_Session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void AuthenticateResponse_Session::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const AuthenticateResponse_Session &AuthenticateResponse_Session::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateResponse_Session_api_2eproto.base);
	return *internal_default_instance();
}

void AuthenticateResponse_Session::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse.Session)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	udp_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *AuthenticateResponse_Session::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string token = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_token();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateResponse.Session.token"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string udp_token = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_udp_token();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateResponse.Session.udp_token"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *AuthenticateResponse_Session::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse.Session)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string token = 1;
	if (this->token().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateResponse.Session.token");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_token(), target);
	}

	// string udp_token = 2;
	if (this->udp_token().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_udp_token().data(), static_cast<int>(this->_internal_udp_token().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateResponse.Session.udp_token");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_udp_token(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse.Session)
	return target;
}

size_t AuthenticateResponse_Session::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse.Session)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string token = 1;
	if (this->token().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_token());
	}

	// string udp_token = 2;
	if (this->udp_token().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_udp_token());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void AuthenticateResponse_Session::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse.Session)
	GOOGLE_DCHECK_NE(&from, this);
	const AuthenticateResponse_Session *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateResponse_Session>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse.Session)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse.Session)
		MergeFrom(*source);
	}
}

void AuthenticateResponse_Session::MergeFrom(const AuthenticateResponse_Session &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse.Session)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.token().size() > 0) {
		_internal_set_token(from._internal_token());
	}
	if (from.udp_token().size() > 0) {
		_internal_set_udp_token(from._internal_udp_token());
	}
}

void AuthenticateResponse_Session::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse.Session)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void AuthenticateResponse_Session::CopyFrom(const AuthenticateResponse_Session &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse.Session)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool AuthenticateResponse_Session::IsInitialized() const {
	return true;
}

void AuthenticateResponse_Session::InternalSwap(AuthenticateResponse_Session *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	udp_token_.Swap(&other->udp_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateResponse_Session::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class AuthenticateResponse_Error::_Internal {
public:
	static const ::server::AuthenticateRequest &request(const AuthenticateResponse_Error *msg);
};

const ::server::AuthenticateRequest &
AuthenticateResponse_Error::_Internal::request(const AuthenticateResponse_Error *msg) {
	return *msg->request_;
}
AuthenticateResponse_Error::AuthenticateResponse_Error(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.AuthenticateResponse.Error)
}
AuthenticateResponse_Error::AuthenticateResponse_Error(const AuthenticateResponse_Error &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_message().empty()) {
		message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
				GetArena());
	}
	if (from._internal_has_request()) {
		request_ = new ::server::AuthenticateRequest(*from.request_);
	} else {
		request_ = nullptr;
	}
	code_ = from.code_;
	// @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse.Error)
}

void AuthenticateResponse_Error::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateResponse_Error_api_2eproto.base);
	message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&request_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&code_) - reinterpret_cast<char *>(&request_)) + sizeof(code_));
}

AuthenticateResponse_Error::~AuthenticateResponse_Error() {
	// @@protoc_insertion_point(destructor:server.AuthenticateResponse.Error)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateResponse_Error::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (this != internal_default_instance())
		delete request_;
}

void AuthenticateResponse_Error::ArenaDtor(void *object) {
	AuthenticateResponse_Error *_this = reinterpret_cast<AuthenticateResponse_Error *>(object);
	(void)_this;
}
void AuthenticateResponse_Error::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void AuthenticateResponse_Error::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const AuthenticateResponse_Error &AuthenticateResponse_Error::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateResponse_Error_api_2eproto.base);
	return *internal_default_instance();
}

void AuthenticateResponse_Error::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse.Error)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	if (GetArena() == nullptr && request_ != nullptr) {
		delete request_;
	}
	request_ = nullptr;
	code_ = 0;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *AuthenticateResponse_Error::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int32 code = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string message = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_message();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateResponse.Error.message"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.AuthenticateRequest request = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *AuthenticateResponse_Error::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse.Error)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int32 code = 1;
	if (this->code() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
	}

	// string message = 2;
	if (this->message().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateResponse.Error.message");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_message(), target);
	}

	// .server.AuthenticateRequest request = 3;
	if (this->has_request()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						3, _Internal::request(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse.Error)
	return target;
}

size_t AuthenticateResponse_Error::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse.Error)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string message = 2;
	if (this->message().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_message());
	}

	// .server.AuthenticateRequest request = 3;
	if (this->has_request()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*request_);
	}

	// int32 code = 1;
	if (this->code() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_code());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void AuthenticateResponse_Error::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse.Error)
	GOOGLE_DCHECK_NE(&from, this);
	const AuthenticateResponse_Error *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateResponse_Error>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse.Error)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse.Error)
		MergeFrom(*source);
	}
}

void AuthenticateResponse_Error::MergeFrom(const AuthenticateResponse_Error &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse.Error)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.message().size() > 0) {
		_internal_set_message(from._internal_message());
	}
	if (from.has_request()) {
		_internal_mutable_request()->::server::AuthenticateRequest::MergeFrom(from._internal_request());
	}
	if (from.code() != 0) {
		_internal_set_code(from._internal_code());
	}
}

void AuthenticateResponse_Error::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse.Error)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void AuthenticateResponse_Error::CopyFrom(const AuthenticateResponse_Error &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse.Error)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool AuthenticateResponse_Error::IsInitialized() const {
	return true;
}

void AuthenticateResponse_Error::InternalSwap(AuthenticateResponse_Error *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(AuthenticateResponse_Error, code_) + sizeof(AuthenticateResponse_Error::code_) - PROTOBUF_FIELD_OFFSET(AuthenticateResponse_Error, request_)>(
			reinterpret_cast<char *>(&request_),
			reinterpret_cast<char *>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateResponse_Error::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class AuthenticateResponse::_Internal {
public:
	static const ::server::AuthenticateResponse_Session &session(const AuthenticateResponse *msg);
	static const ::server::AuthenticateResponse_Error &error(const AuthenticateResponse *msg);
};

const ::server::AuthenticateResponse_Session &
AuthenticateResponse::_Internal::session(const AuthenticateResponse *msg) {
	return *msg->id_.session_;
}
const ::server::AuthenticateResponse_Error &
AuthenticateResponse::_Internal::error(const AuthenticateResponse *msg) {
	return *msg->id_.error_;
}
void AuthenticateResponse::set_allocated_session(::server::AuthenticateResponse_Session *session) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_id();
	if (session) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(session);
		if (message_arena != submessage_arena) {
			session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, session, submessage_arena);
		}
		set_has_session();
		id_.session_ = session;
	}
	// @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.session)
}
void AuthenticateResponse::set_allocated_error(::server::AuthenticateResponse_Error *error) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_id();
	if (error) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
		if (message_arena != submessage_arena) {
			error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, error, submessage_arena);
		}
		set_has_error();
		id_.error_ = error;
	}
	// @@protoc_insertion_point(field_set_allocated:server.AuthenticateResponse.error)
}
AuthenticateResponse::AuthenticateResponse(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.AuthenticateResponse)
}
AuthenticateResponse::AuthenticateResponse(const AuthenticateResponse &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	collation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collation_id().empty()) {
		collation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collation_id(),
				GetArena());
	}
	clear_has_id();
	switch (from.id_case()) {
		case kSession: {
			_internal_mutable_session()->::server::AuthenticateResponse_Session::MergeFrom(from._internal_session());
			break;
		}
		case kError: {
			_internal_mutable_error()->::server::AuthenticateResponse_Error::MergeFrom(from._internal_error());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.AuthenticateResponse)
}

void AuthenticateResponse::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AuthenticateResponse_api_2eproto.base);
	collation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	clear_has_id();
}

AuthenticateResponse::~AuthenticateResponse() {
	// @@protoc_insertion_point(destructor:server.AuthenticateResponse)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AuthenticateResponse::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	collation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_id()) {
		clear_id();
	}
}

void AuthenticateResponse::ArenaDtor(void *object) {
	AuthenticateResponse *_this = reinterpret_cast<AuthenticateResponse *>(object);
	(void)_this;
}
void AuthenticateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void AuthenticateResponse::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const AuthenticateResponse &AuthenticateResponse::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticateResponse_api_2eproto.base);
	return *internal_default_instance();
}

void AuthenticateResponse::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.AuthenticateResponse)
	switch (id_case()) {
		case kSession: {
			if (GetArena() == nullptr) {
				delete id_.session_;
			}
			break;
		}
		case kError: {
			if (GetArena() == nullptr) {
				delete id_.error_;
			}
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void AuthenticateResponse::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.AuthenticateResponse)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	collation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *AuthenticateResponse::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string collation_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_collation_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.AuthenticateResponse.collation_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.AuthenticateResponse.Session session = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.AuthenticateResponse.Error error = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *AuthenticateResponse::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.AuthenticateResponse)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string collation_id = 1;
	if (this->collation_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collation_id().data(), static_cast<int>(this->_internal_collation_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.AuthenticateResponse.collation_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_collation_id(), target);
	}

	// .server.AuthenticateResponse.Session session = 2;
	if (_internal_has_session()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						2, _Internal::session(this), target, stream);
	}

	// .server.AuthenticateResponse.Error error = 3;
	if (_internal_has_error()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						3, _Internal::error(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.AuthenticateResponse)
	return target;
}

size_t AuthenticateResponse::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.AuthenticateResponse)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string collation_id = 1;
	if (this->collation_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collation_id());
	}

	switch (id_case()) {
		// .server.AuthenticateResponse.Session session = 2;
		case kSession: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*id_.session_);
			break;
		}
		// .server.AuthenticateResponse.Error error = 3;
		case kError: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*id_.error_);
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void AuthenticateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.AuthenticateResponse)
	GOOGLE_DCHECK_NE(&from, this);
	const AuthenticateResponse *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticateResponse>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.AuthenticateResponse)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.AuthenticateResponse)
		MergeFrom(*source);
	}
}

void AuthenticateResponse::MergeFrom(const AuthenticateResponse &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.AuthenticateResponse)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.collation_id().size() > 0) {
		_internal_set_collation_id(from._internal_collation_id());
	}
	switch (from.id_case()) {
		case kSession: {
			_internal_mutable_session()->::server::AuthenticateResponse_Session::MergeFrom(from._internal_session());
			break;
		}
		case kError: {
			_internal_mutable_error()->::server::AuthenticateResponse_Error::MergeFrom(from._internal_error());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void AuthenticateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.AuthenticateResponse)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void AuthenticateResponse::CopyFrom(const AuthenticateResponse &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.AuthenticateResponse)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool AuthenticateResponse::IsInitialized() const {
	return true;
}

void AuthenticateResponse::InternalSwap(AuthenticateResponse *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	collation_id_.Swap(&other->collation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticateResponse::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Envelope::_Internal {
public:
	static const ::server::Error &error(const Envelope *msg);
	static const ::server::Heartbeat &heartbeat(const Envelope *msg);
	static const ::server::Logout &logout(const Envelope *msg);
	static const ::server::TLink &link(const Envelope *msg);
	static const ::server::TUnlink &unlink(const Envelope *msg);
	static const ::server::TSelfFetch &self_fetch(const Envelope *msg);
	static const ::server::TSelfUpdate &self_update(const Envelope *msg);
	static const ::server::TUsersFetch &users_fetch(const Envelope *msg);
	static const ::server::TSelf &self(const Envelope *msg);
	static const ::server::TUsers &users(const Envelope *msg);
	static const ::server::TFriendsAdd &friends_add(const Envelope *msg);
	static const ::server::TFriendsRemove &friends_remove(const Envelope *msg);
	static const ::server::TFriendsBlock &friends_block(const Envelope *msg);
	static const ::server::TFriendsList &friends_list(const Envelope *msg);
	static const ::server::TFriends &friends(const Envelope *msg);
	static const ::server::TGroupsCreate &groups_create(const Envelope *msg);
	static const ::server::TGroupsUpdate &groups_update(const Envelope *msg);
	static const ::server::TGroupsRemove &groups_remove(const Envelope *msg);
	static const ::server::TGroupsFetch &groups_fetch(const Envelope *msg);
	static const ::server::TGroupsList &groups_list(const Envelope *msg);
	static const ::server::TGroupsSelfList &groups_self_list(const Envelope *msg);
	static const ::server::TGroupUsersList &group_users_list(const Envelope *msg);
	static const ::server::TGroupsJoin &groups_join(const Envelope *msg);
	static const ::server::TGroupsLeave &groups_leave(const Envelope *msg);
	static const ::server::TGroupUsersAdd &group_users_add(const Envelope *msg);
	static const ::server::TGroupUsersKick &group_users_kick(const Envelope *msg);
	static const ::server::TGroupUsersPromote &group_users_promote(const Envelope *msg);
	static const ::server::TGroups &groups(const Envelope *msg);
	static const ::server::TGroupsSelf &groups_self(const Envelope *msg);
	static const ::server::TGroupUsers &group_users(const Envelope *msg);
	static const ::server::TTopicsJoin &topics_join(const Envelope *msg);
	static const ::server::TTopicsLeave &topics_leave(const Envelope *msg);
	static const ::server::TTopicMessageSend &topic_message_send(const Envelope *msg);
	static const ::server::TTopicMessagesList &topic_messages_list(const Envelope *msg);
	static const ::server::TTopics &topics(const Envelope *msg);
	static const ::server::TTopicMessageAck &topic_message_ack(const Envelope *msg);
	static const ::server::TopicMessage &topic_message(const Envelope *msg);
	static const ::server::TTopicMessages &topic_messages(const Envelope *msg);
	static const ::server::TopicPresence &topic_presence(const Envelope *msg);
	static const ::server::TMatchCreate &match_create(const Envelope *msg);
	static const ::server::TMatchesJoin &matches_join(const Envelope *msg);
	static const ::server::TMatchesLeave &matches_leave(const Envelope *msg);
	static const ::server::MatchDataSend &match_data_send(const Envelope *msg);
	static const ::server::TMatch &match(const Envelope *msg);
	static const ::server::TMatches &matches(const Envelope *msg);
	static const ::server::MatchData &match_data(const Envelope *msg);
	static const ::server::MatchPresence &match_presence(const Envelope *msg);
	static const ::server::TStorageList &storage_list(const Envelope *msg);
	static const ::server::TStorageFetch &storage_fetch(const Envelope *msg);
	static const ::server::TStorageWrite &storage_write(const Envelope *msg);
	static const ::server::TStorageUpdate &storage_update(const Envelope *msg);
	static const ::server::TStorageRemove &storage_remove(const Envelope *msg);
	static const ::server::TStorageData &storage_data(const Envelope *msg);
	static const ::server::TStorageKeys &storage_keys(const Envelope *msg);
	static const ::server::TLeaderboardsList &leaderboards_list(const Envelope *msg);
	static const ::server::TLeaderboardRecordsWrite &leaderboard_records_write(const Envelope *msg);
	static const ::server::TLeaderboardRecordsFetch &leaderboard_records_fetch(const Envelope *msg);
	static const ::server::TLeaderboardRecordsList &leaderboard_records_list(const Envelope *msg);
	static const ::server::TLeaderboards &leaderboards(const Envelope *msg);
	static const ::server::TLeaderboardRecords &leaderboard_records(const Envelope *msg);
	static const ::server::TMatchmakeAdd &matchmake_add(const Envelope *msg);
	static const ::server::TMatchmakeRemove &matchmake_remove(const Envelope *msg);
	static const ::server::TMatchmakeTicket &matchmake_ticket(const Envelope *msg);
	static const ::server::MatchmakeMatched &matchmake_matched(const Envelope *msg);
	static const ::server::TRpc &rpc(const Envelope *msg);
	static const ::server::TPurchaseValidation &purchase(const Envelope *msg);
	static const ::server::TPurchaseRecord &purchase_record(const Envelope *msg);
	static const ::server::TNotificationsList &notifications_list(const Envelope *msg);
	static const ::server::TNotificationsRemove &notifications_remove(const Envelope *msg);
	static const ::server::TNotifications &notifications(const Envelope *msg);
	static const ::server::Notifications &live_notifications(const Envelope *msg);
};

const ::server::Error &
Envelope::_Internal::error(const Envelope *msg) {
	return *msg->payload_.error_;
}
const ::server::Heartbeat &
Envelope::_Internal::heartbeat(const Envelope *msg) {
	return *msg->payload_.heartbeat_;
}
const ::server::Logout &
Envelope::_Internal::logout(const Envelope *msg) {
	return *msg->payload_.logout_;
}
const ::server::TLink &
Envelope::_Internal::link(const Envelope *msg) {
	return *msg->payload_.link_;
}
const ::server::TUnlink &
Envelope::_Internal::unlink(const Envelope *msg) {
	return *msg->payload_.unlink_;
}
const ::server::TSelfFetch &
Envelope::_Internal::self_fetch(const Envelope *msg) {
	return *msg->payload_.self_fetch_;
}
const ::server::TSelfUpdate &
Envelope::_Internal::self_update(const Envelope *msg) {
	return *msg->payload_.self_update_;
}
const ::server::TUsersFetch &
Envelope::_Internal::users_fetch(const Envelope *msg) {
	return *msg->payload_.users_fetch_;
}
const ::server::TSelf &
Envelope::_Internal::self(const Envelope *msg) {
	return *msg->payload_.self_;
}
const ::server::TUsers &
Envelope::_Internal::users(const Envelope *msg) {
	return *msg->payload_.users_;
}
const ::server::TFriendsAdd &
Envelope::_Internal::friends_add(const Envelope *msg) {
	return *msg->payload_.friends_add_;
}
const ::server::TFriendsRemove &
Envelope::_Internal::friends_remove(const Envelope *msg) {
	return *msg->payload_.friends_remove_;
}
const ::server::TFriendsBlock &
Envelope::_Internal::friends_block(const Envelope *msg) {
	return *msg->payload_.friends_block_;
}
const ::server::TFriendsList &
Envelope::_Internal::friends_list(const Envelope *msg) {
	return *msg->payload_.friends_list_;
}
const ::server::TFriends &
Envelope::_Internal::friends(const Envelope *msg) {
	return *msg->payload_.friends_;
}
const ::server::TGroupsCreate &
Envelope::_Internal::groups_create(const Envelope *msg) {
	return *msg->payload_.groups_create_;
}
const ::server::TGroupsUpdate &
Envelope::_Internal::groups_update(const Envelope *msg) {
	return *msg->payload_.groups_update_;
}
const ::server::TGroupsRemove &
Envelope::_Internal::groups_remove(const Envelope *msg) {
	return *msg->payload_.groups_remove_;
}
const ::server::TGroupsFetch &
Envelope::_Internal::groups_fetch(const Envelope *msg) {
	return *msg->payload_.groups_fetch_;
}
const ::server::TGroupsList &
Envelope::_Internal::groups_list(const Envelope *msg) {
	return *msg->payload_.groups_list_;
}
const ::server::TGroupsSelfList &
Envelope::_Internal::groups_self_list(const Envelope *msg) {
	return *msg->payload_.groups_self_list_;
}
const ::server::TGroupUsersList &
Envelope::_Internal::group_users_list(const Envelope *msg) {
	return *msg->payload_.group_users_list_;
}
const ::server::TGroupsJoin &
Envelope::_Internal::groups_join(const Envelope *msg) {
	return *msg->payload_.groups_join_;
}
const ::server::TGroupsLeave &
Envelope::_Internal::groups_leave(const Envelope *msg) {
	return *msg->payload_.groups_leave_;
}
const ::server::TGroupUsersAdd &
Envelope::_Internal::group_users_add(const Envelope *msg) {
	return *msg->payload_.group_users_add_;
}
const ::server::TGroupUsersKick &
Envelope::_Internal::group_users_kick(const Envelope *msg) {
	return *msg->payload_.group_users_kick_;
}
const ::server::TGroupUsersPromote &
Envelope::_Internal::group_users_promote(const Envelope *msg) {
	return *msg->payload_.group_users_promote_;
}
const ::server::TGroups &
Envelope::_Internal::groups(const Envelope *msg) {
	return *msg->payload_.groups_;
}
const ::server::TGroupsSelf &
Envelope::_Internal::groups_self(const Envelope *msg) {
	return *msg->payload_.groups_self_;
}
const ::server::TGroupUsers &
Envelope::_Internal::group_users(const Envelope *msg) {
	return *msg->payload_.group_users_;
}
const ::server::TTopicsJoin &
Envelope::_Internal::topics_join(const Envelope *msg) {
	return *msg->payload_.topics_join_;
}
const ::server::TTopicsLeave &
Envelope::_Internal::topics_leave(const Envelope *msg) {
	return *msg->payload_.topics_leave_;
}
const ::server::TTopicMessageSend &
Envelope::_Internal::topic_message_send(const Envelope *msg) {
	return *msg->payload_.topic_message_send_;
}
const ::server::TTopicMessagesList &
Envelope::_Internal::topic_messages_list(const Envelope *msg) {
	return *msg->payload_.topic_messages_list_;
}
const ::server::TTopics &
Envelope::_Internal::topics(const Envelope *msg) {
	return *msg->payload_.topics_;
}
const ::server::TTopicMessageAck &
Envelope::_Internal::topic_message_ack(const Envelope *msg) {
	return *msg->payload_.topic_message_ack_;
}
const ::server::TopicMessage &
Envelope::_Internal::topic_message(const Envelope *msg) {
	return *msg->payload_.topic_message_;
}
const ::server::TTopicMessages &
Envelope::_Internal::topic_messages(const Envelope *msg) {
	return *msg->payload_.topic_messages_;
}
const ::server::TopicPresence &
Envelope::_Internal::topic_presence(const Envelope *msg) {
	return *msg->payload_.topic_presence_;
}
const ::server::TMatchCreate &
Envelope::_Internal::match_create(const Envelope *msg) {
	return *msg->payload_.match_create_;
}
const ::server::TMatchesJoin &
Envelope::_Internal::matches_join(const Envelope *msg) {
	return *msg->payload_.matches_join_;
}
const ::server::TMatchesLeave &
Envelope::_Internal::matches_leave(const Envelope *msg) {
	return *msg->payload_.matches_leave_;
}
const ::server::MatchDataSend &
Envelope::_Internal::match_data_send(const Envelope *msg) {
	return *msg->payload_.match_data_send_;
}
const ::server::TMatch &
Envelope::_Internal::match(const Envelope *msg) {
	return *msg->payload_.match_;
}
const ::server::TMatches &
Envelope::_Internal::matches(const Envelope *msg) {
	return *msg->payload_.matches_;
}
const ::server::MatchData &
Envelope::_Internal::match_data(const Envelope *msg) {
	return *msg->payload_.match_data_;
}
const ::server::MatchPresence &
Envelope::_Internal::match_presence(const Envelope *msg) {
	return *msg->payload_.match_presence_;
}
const ::server::TStorageList &
Envelope::_Internal::storage_list(const Envelope *msg) {
	return *msg->payload_.storage_list_;
}
const ::server::TStorageFetch &
Envelope::_Internal::storage_fetch(const Envelope *msg) {
	return *msg->payload_.storage_fetch_;
}
const ::server::TStorageWrite &
Envelope::_Internal::storage_write(const Envelope *msg) {
	return *msg->payload_.storage_write_;
}
const ::server::TStorageUpdate &
Envelope::_Internal::storage_update(const Envelope *msg) {
	return *msg->payload_.storage_update_;
}
const ::server::TStorageRemove &
Envelope::_Internal::storage_remove(const Envelope *msg) {
	return *msg->payload_.storage_remove_;
}
const ::server::TStorageData &
Envelope::_Internal::storage_data(const Envelope *msg) {
	return *msg->payload_.storage_data_;
}
const ::server::TStorageKeys &
Envelope::_Internal::storage_keys(const Envelope *msg) {
	return *msg->payload_.storage_keys_;
}
const ::server::TLeaderboardsList &
Envelope::_Internal::leaderboards_list(const Envelope *msg) {
	return *msg->payload_.leaderboards_list_;
}
const ::server::TLeaderboardRecordsWrite &
Envelope::_Internal::leaderboard_records_write(const Envelope *msg) {
	return *msg->payload_.leaderboard_records_write_;
}
const ::server::TLeaderboardRecordsFetch &
Envelope::_Internal::leaderboard_records_fetch(const Envelope *msg) {
	return *msg->payload_.leaderboard_records_fetch_;
}
const ::server::TLeaderboardRecordsList &
Envelope::_Internal::leaderboard_records_list(const Envelope *msg) {
	return *msg->payload_.leaderboard_records_list_;
}
const ::server::TLeaderboards &
Envelope::_Internal::leaderboards(const Envelope *msg) {
	return *msg->payload_.leaderboards_;
}
const ::server::TLeaderboardRecords &
Envelope::_Internal::leaderboard_records(const Envelope *msg) {
	return *msg->payload_.leaderboard_records_;
}
const ::server::TMatchmakeAdd &
Envelope::_Internal::matchmake_add(const Envelope *msg) {
	return *msg->payload_.matchmake_add_;
}
const ::server::TMatchmakeRemove &
Envelope::_Internal::matchmake_remove(const Envelope *msg) {
	return *msg->payload_.matchmake_remove_;
}
const ::server::TMatchmakeTicket &
Envelope::_Internal::matchmake_ticket(const Envelope *msg) {
	return *msg->payload_.matchmake_ticket_;
}
const ::server::MatchmakeMatched &
Envelope::_Internal::matchmake_matched(const Envelope *msg) {
	return *msg->payload_.matchmake_matched_;
}
const ::server::TRpc &
Envelope::_Internal::rpc(const Envelope *msg) {
	return *msg->payload_.rpc_;
}
const ::server::TPurchaseValidation &
Envelope::_Internal::purchase(const Envelope *msg) {
	return *msg->payload_.purchase_;
}
const ::server::TPurchaseRecord &
Envelope::_Internal::purchase_record(const Envelope *msg) {
	return *msg->payload_.purchase_record_;
}
const ::server::TNotificationsList &
Envelope::_Internal::notifications_list(const Envelope *msg) {
	return *msg->payload_.notifications_list_;
}
const ::server::TNotificationsRemove &
Envelope::_Internal::notifications_remove(const Envelope *msg) {
	return *msg->payload_.notifications_remove_;
}
const ::server::TNotifications &
Envelope::_Internal::notifications(const Envelope *msg) {
	return *msg->payload_.notifications_;
}
const ::server::Notifications &
Envelope::_Internal::live_notifications(const Envelope *msg) {
	return *msg->payload_.live_notifications_;
}
void Envelope::set_allocated_error(::server::Error *error) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (error) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
		if (message_arena != submessage_arena) {
			error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, error, submessage_arena);
		}
		set_has_error();
		payload_.error_ = error;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.error)
}
void Envelope::set_allocated_heartbeat(::server::Heartbeat *heartbeat) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (heartbeat) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heartbeat);
		if (message_arena != submessage_arena) {
			heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, heartbeat, submessage_arena);
		}
		set_has_heartbeat();
		payload_.heartbeat_ = heartbeat;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.heartbeat)
}
void Envelope::set_allocated_logout(::server::Logout *logout) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (logout) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(logout);
		if (message_arena != submessage_arena) {
			logout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, logout, submessage_arena);
		}
		set_has_logout();
		payload_.logout_ = logout;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.logout)
}
void Envelope::set_allocated_link(::server::TLink *link) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (link) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(link);
		if (message_arena != submessage_arena) {
			link = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, link, submessage_arena);
		}
		set_has_link();
		payload_.link_ = link;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.link)
}
void Envelope::set_allocated_unlink(::server::TUnlink *unlink) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (unlink) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unlink);
		if (message_arena != submessage_arena) {
			unlink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, unlink, submessage_arena);
		}
		set_has_unlink();
		payload_.unlink_ = unlink;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.unlink)
}
void Envelope::set_allocated_self_fetch(::server::TSelfFetch *self_fetch) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (self_fetch) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self_fetch);
		if (message_arena != submessage_arena) {
			self_fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, self_fetch, submessage_arena);
		}
		set_has_self_fetch();
		payload_.self_fetch_ = self_fetch;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.self_fetch)
}
void Envelope::set_allocated_self_update(::server::TSelfUpdate *self_update) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (self_update) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self_update);
		if (message_arena != submessage_arena) {
			self_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, self_update, submessage_arena);
		}
		set_has_self_update();
		payload_.self_update_ = self_update;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.self_update)
}
void Envelope::set_allocated_users_fetch(::server::TUsersFetch *users_fetch) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (users_fetch) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(users_fetch);
		if (message_arena != submessage_arena) {
			users_fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, users_fetch, submessage_arena);
		}
		set_has_users_fetch();
		payload_.users_fetch_ = users_fetch;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.users_fetch)
}
void Envelope::set_allocated_self(::server::TSelf *self) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (self) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(self);
		if (message_arena != submessage_arena) {
			self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, self, submessage_arena);
		}
		set_has_self();
		payload_.self_ = self;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.self)
}
void Envelope::set_allocated_users(::server::TUsers *users) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (users) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(users);
		if (message_arena != submessage_arena) {
			users = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, users, submessage_arena);
		}
		set_has_users();
		payload_.users_ = users;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.users)
}
void Envelope::set_allocated_friends_add(::server::TFriendsAdd *friends_add) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (friends_add) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friends_add);
		if (message_arena != submessage_arena) {
			friends_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, friends_add, submessage_arena);
		}
		set_has_friends_add();
		payload_.friends_add_ = friends_add;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_add)
}
void Envelope::set_allocated_friends_remove(::server::TFriendsRemove *friends_remove) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (friends_remove) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friends_remove);
		if (message_arena != submessage_arena) {
			friends_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, friends_remove, submessage_arena);
		}
		set_has_friends_remove();
		payload_.friends_remove_ = friends_remove;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_remove)
}
void Envelope::set_allocated_friends_block(::server::TFriendsBlock *friends_block) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (friends_block) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friends_block);
		if (message_arena != submessage_arena) {
			friends_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, friends_block, submessage_arena);
		}
		set_has_friends_block();
		payload_.friends_block_ = friends_block;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_block)
}
void Envelope::set_allocated_friends_list(::server::TFriendsList *friends_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (friends_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friends_list);
		if (message_arena != submessage_arena) {
			friends_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, friends_list, submessage_arena);
		}
		set_has_friends_list();
		payload_.friends_list_ = friends_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.friends_list)
}
void Envelope::set_allocated_friends(::server::TFriends *friends) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (friends) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(friends);
		if (message_arena != submessage_arena) {
			friends = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, friends, submessage_arena);
		}
		set_has_friends();
		payload_.friends_ = friends;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.friends)
}
void Envelope::set_allocated_groups_create(::server::TGroupsCreate *groups_create) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_create) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_create);
		if (message_arena != submessage_arena) {
			groups_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_create, submessage_arena);
		}
		set_has_groups_create();
		payload_.groups_create_ = groups_create;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_create)
}
void Envelope::set_allocated_groups_update(::server::TGroupsUpdate *groups_update) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_update) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_update);
		if (message_arena != submessage_arena) {
			groups_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_update, submessage_arena);
		}
		set_has_groups_update();
		payload_.groups_update_ = groups_update;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_update)
}
void Envelope::set_allocated_groups_remove(::server::TGroupsRemove *groups_remove) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_remove) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_remove);
		if (message_arena != submessage_arena) {
			groups_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_remove, submessage_arena);
		}
		set_has_groups_remove();
		payload_.groups_remove_ = groups_remove;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_remove)
}
void Envelope::set_allocated_groups_fetch(::server::TGroupsFetch *groups_fetch) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_fetch) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_fetch);
		if (message_arena != submessage_arena) {
			groups_fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_fetch, submessage_arena);
		}
		set_has_groups_fetch();
		payload_.groups_fetch_ = groups_fetch;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_fetch)
}
void Envelope::set_allocated_groups_list(::server::TGroupsList *groups_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_list);
		if (message_arena != submessage_arena) {
			groups_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_list, submessage_arena);
		}
		set_has_groups_list();
		payload_.groups_list_ = groups_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_list)
}
void Envelope::set_allocated_groups_self_list(::server::TGroupsSelfList *groups_self_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_self_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_self_list);
		if (message_arena != submessage_arena) {
			groups_self_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_self_list, submessage_arena);
		}
		set_has_groups_self_list();
		payload_.groups_self_list_ = groups_self_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_self_list)
}
void Envelope::set_allocated_group_users_list(::server::TGroupUsersList *group_users_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (group_users_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_users_list);
		if (message_arena != submessage_arena) {
			group_users_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, group_users_list, submessage_arena);
		}
		set_has_group_users_list();
		payload_.group_users_list_ = group_users_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_list)
}
void Envelope::set_allocated_groups_join(::server::TGroupsJoin *groups_join) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_join) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_join);
		if (message_arena != submessage_arena) {
			groups_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_join, submessage_arena);
		}
		set_has_groups_join();
		payload_.groups_join_ = groups_join;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_join)
}
void Envelope::set_allocated_groups_leave(::server::TGroupsLeave *groups_leave) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_leave) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_leave);
		if (message_arena != submessage_arena) {
			groups_leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_leave, submessage_arena);
		}
		set_has_groups_leave();
		payload_.groups_leave_ = groups_leave;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_leave)
}
void Envelope::set_allocated_group_users_add(::server::TGroupUsersAdd *group_users_add) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (group_users_add) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_users_add);
		if (message_arena != submessage_arena) {
			group_users_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, group_users_add, submessage_arena);
		}
		set_has_group_users_add();
		payload_.group_users_add_ = group_users_add;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_add)
}
void Envelope::set_allocated_group_users_kick(::server::TGroupUsersKick *group_users_kick) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (group_users_kick) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_users_kick);
		if (message_arena != submessage_arena) {
			group_users_kick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, group_users_kick, submessage_arena);
		}
		set_has_group_users_kick();
		payload_.group_users_kick_ = group_users_kick;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_kick)
}
void Envelope::set_allocated_group_users_promote(::server::TGroupUsersPromote *group_users_promote) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (group_users_promote) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_users_promote);
		if (message_arena != submessage_arena) {
			group_users_promote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, group_users_promote, submessage_arena);
		}
		set_has_group_users_promote();
		payload_.group_users_promote_ = group_users_promote;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users_promote)
}
void Envelope::set_allocated_groups(::server::TGroups *groups) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups);
		if (message_arena != submessage_arena) {
			groups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups, submessage_arena);
		}
		set_has_groups();
		payload_.groups_ = groups;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups)
}
void Envelope::set_allocated_groups_self(::server::TGroupsSelf *groups_self) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (groups_self) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(groups_self);
		if (message_arena != submessage_arena) {
			groups_self = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, groups_self, submessage_arena);
		}
		set_has_groups_self();
		payload_.groups_self_ = groups_self;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.groups_self)
}
void Envelope::set_allocated_group_users(::server::TGroupUsers *group_users) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (group_users) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group_users);
		if (message_arena != submessage_arena) {
			group_users = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, group_users, submessage_arena);
		}
		set_has_group_users();
		payload_.group_users_ = group_users;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.group_users)
}
void Envelope::set_allocated_topics_join(::server::TTopicsJoin *topics_join) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topics_join) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topics_join);
		if (message_arena != submessage_arena) {
			topics_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topics_join, submessage_arena);
		}
		set_has_topics_join();
		payload_.topics_join_ = topics_join;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topics_join)
}
void Envelope::set_allocated_topics_leave(::server::TTopicsLeave *topics_leave) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topics_leave) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topics_leave);
		if (message_arena != submessage_arena) {
			topics_leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topics_leave, submessage_arena);
		}
		set_has_topics_leave();
		payload_.topics_leave_ = topics_leave;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topics_leave)
}
void Envelope::set_allocated_topic_message_send(::server::TTopicMessageSend *topic_message_send) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topic_message_send) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic_message_send);
		if (message_arena != submessage_arena) {
			topic_message_send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topic_message_send, submessage_arena);
		}
		set_has_topic_message_send();
		payload_.topic_message_send_ = topic_message_send;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message_send)
}
void Envelope::set_allocated_topic_messages_list(::server::TTopicMessagesList *topic_messages_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topic_messages_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic_messages_list);
		if (message_arena != submessage_arena) {
			topic_messages_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topic_messages_list, submessage_arena);
		}
		set_has_topic_messages_list();
		payload_.topic_messages_list_ = topic_messages_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_messages_list)
}
void Envelope::set_allocated_topics(::server::TTopics *topics) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topics) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topics);
		if (message_arena != submessage_arena) {
			topics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topics, submessage_arena);
		}
		set_has_topics();
		payload_.topics_ = topics;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topics)
}
void Envelope::set_allocated_topic_message_ack(::server::TTopicMessageAck *topic_message_ack) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topic_message_ack) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic_message_ack);
		if (message_arena != submessage_arena) {
			topic_message_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topic_message_ack, submessage_arena);
		}
		set_has_topic_message_ack();
		payload_.topic_message_ack_ = topic_message_ack;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message_ack)
}
void Envelope::set_allocated_topic_message(::server::TopicMessage *topic_message) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topic_message) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic_message);
		if (message_arena != submessage_arena) {
			topic_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topic_message, submessage_arena);
		}
		set_has_topic_message();
		payload_.topic_message_ = topic_message;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_message)
}
void Envelope::set_allocated_topic_messages(::server::TTopicMessages *topic_messages) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topic_messages) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic_messages);
		if (message_arena != submessage_arena) {
			topic_messages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topic_messages, submessage_arena);
		}
		set_has_topic_messages();
		payload_.topic_messages_ = topic_messages;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_messages)
}
void Envelope::set_allocated_topic_presence(::server::TopicPresence *topic_presence) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (topic_presence) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topic_presence);
		if (message_arena != submessage_arena) {
			topic_presence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, topic_presence, submessage_arena);
		}
		set_has_topic_presence();
		payload_.topic_presence_ = topic_presence;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.topic_presence)
}
void Envelope::set_allocated_match_create(::server::TMatchCreate *match_create) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (match_create) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_create);
		if (message_arena != submessage_arena) {
			match_create = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, match_create, submessage_arena);
		}
		set_has_match_create();
		payload_.match_create_ = match_create;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.match_create)
}
void Envelope::set_allocated_matches_join(::server::TMatchesJoin *matches_join) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (matches_join) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matches_join);
		if (message_arena != submessage_arena) {
			matches_join = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, matches_join, submessage_arena);
		}
		set_has_matches_join();
		payload_.matches_join_ = matches_join;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.matches_join)
}
void Envelope::set_allocated_matches_leave(::server::TMatchesLeave *matches_leave) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (matches_leave) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matches_leave);
		if (message_arena != submessage_arena) {
			matches_leave = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, matches_leave, submessage_arena);
		}
		set_has_matches_leave();
		payload_.matches_leave_ = matches_leave;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.matches_leave)
}
void Envelope::set_allocated_match_data_send(::server::MatchDataSend *match_data_send) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (match_data_send) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_data_send);
		if (message_arena != submessage_arena) {
			match_data_send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, match_data_send, submessage_arena);
		}
		set_has_match_data_send();
		payload_.match_data_send_ = match_data_send;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.match_data_send)
}
void Envelope::set_allocated_match(::server::TMatch *match) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (match) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match);
		if (message_arena != submessage_arena) {
			match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, match, submessage_arena);
		}
		set_has_match();
		payload_.match_ = match;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.match)
}
void Envelope::set_allocated_matches(::server::TMatches *matches) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (matches) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matches);
		if (message_arena != submessage_arena) {
			matches = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, matches, submessage_arena);
		}
		set_has_matches();
		payload_.matches_ = matches;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.matches)
}
void Envelope::set_allocated_match_data(::server::MatchData *match_data) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (match_data) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_data);
		if (message_arena != submessage_arena) {
			match_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, match_data, submessage_arena);
		}
		set_has_match_data();
		payload_.match_data_ = match_data;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.match_data)
}
void Envelope::set_allocated_match_presence(::server::MatchPresence *match_presence) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (match_presence) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(match_presence);
		if (message_arena != submessage_arena) {
			match_presence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, match_presence, submessage_arena);
		}
		set_has_match_presence();
		payload_.match_presence_ = match_presence;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.match_presence)
}
void Envelope::set_allocated_storage_list(::server::TStorageList *storage_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (storage_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage_list);
		if (message_arena != submessage_arena) {
			storage_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, storage_list, submessage_arena);
		}
		set_has_storage_list();
		payload_.storage_list_ = storage_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_list)
}
void Envelope::set_allocated_storage_fetch(::server::TStorageFetch *storage_fetch) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (storage_fetch) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage_fetch);
		if (message_arena != submessage_arena) {
			storage_fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, storage_fetch, submessage_arena);
		}
		set_has_storage_fetch();
		payload_.storage_fetch_ = storage_fetch;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_fetch)
}
void Envelope::set_allocated_storage_write(::server::TStorageWrite *storage_write) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (storage_write) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage_write);
		if (message_arena != submessage_arena) {
			storage_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, storage_write, submessage_arena);
		}
		set_has_storage_write();
		payload_.storage_write_ = storage_write;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_write)
}
void Envelope::set_allocated_storage_update(::server::TStorageUpdate *storage_update) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (storage_update) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage_update);
		if (message_arena != submessage_arena) {
			storage_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, storage_update, submessage_arena);
		}
		set_has_storage_update();
		payload_.storage_update_ = storage_update;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_update)
}
void Envelope::set_allocated_storage_remove(::server::TStorageRemove *storage_remove) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (storage_remove) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage_remove);
		if (message_arena != submessage_arena) {
			storage_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, storage_remove, submessage_arena);
		}
		set_has_storage_remove();
		payload_.storage_remove_ = storage_remove;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_remove)
}
void Envelope::set_allocated_storage_data(::server::TStorageData *storage_data) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (storage_data) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage_data);
		if (message_arena != submessage_arena) {
			storage_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, storage_data, submessage_arena);
		}
		set_has_storage_data();
		payload_.storage_data_ = storage_data;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_data)
}
void Envelope::set_allocated_storage_keys(::server::TStorageKeys *storage_keys) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (storage_keys) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(storage_keys);
		if (message_arena != submessage_arena) {
			storage_keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, storage_keys, submessage_arena);
		}
		set_has_storage_keys();
		payload_.storage_keys_ = storage_keys;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.storage_keys)
}
void Envelope::set_allocated_leaderboards_list(::server::TLeaderboardsList *leaderboards_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (leaderboards_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaderboards_list);
		if (message_arena != submessage_arena) {
			leaderboards_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, leaderboards_list, submessage_arena);
		}
		set_has_leaderboards_list();
		payload_.leaderboards_list_ = leaderboards_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboards_list)
}
void Envelope::set_allocated_leaderboard_records_write(::server::TLeaderboardRecordsWrite *leaderboard_records_write) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (leaderboard_records_write) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaderboard_records_write);
		if (message_arena != submessage_arena) {
			leaderboard_records_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, leaderboard_records_write, submessage_arena);
		}
		set_has_leaderboard_records_write();
		payload_.leaderboard_records_write_ = leaderboard_records_write;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_write)
}
void Envelope::set_allocated_leaderboard_records_fetch(::server::TLeaderboardRecordsFetch *leaderboard_records_fetch) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (leaderboard_records_fetch) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaderboard_records_fetch);
		if (message_arena != submessage_arena) {
			leaderboard_records_fetch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, leaderboard_records_fetch, submessage_arena);
		}
		set_has_leaderboard_records_fetch();
		payload_.leaderboard_records_fetch_ = leaderboard_records_fetch;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_fetch)
}
void Envelope::set_allocated_leaderboard_records_list(::server::TLeaderboardRecordsList *leaderboard_records_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (leaderboard_records_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaderboard_records_list);
		if (message_arena != submessage_arena) {
			leaderboard_records_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, leaderboard_records_list, submessage_arena);
		}
		set_has_leaderboard_records_list();
		payload_.leaderboard_records_list_ = leaderboard_records_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records_list)
}
void Envelope::set_allocated_leaderboards(::server::TLeaderboards *leaderboards) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (leaderboards) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaderboards);
		if (message_arena != submessage_arena) {
			leaderboards = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, leaderboards, submessage_arena);
		}
		set_has_leaderboards();
		payload_.leaderboards_ = leaderboards;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboards)
}
void Envelope::set_allocated_leaderboard_records(::server::TLeaderboardRecords *leaderboard_records) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (leaderboard_records) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leaderboard_records);
		if (message_arena != submessage_arena) {
			leaderboard_records = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, leaderboard_records, submessage_arena);
		}
		set_has_leaderboard_records();
		payload_.leaderboard_records_ = leaderboard_records;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.leaderboard_records)
}
void Envelope::set_allocated_matchmake_add(::server::TMatchmakeAdd *matchmake_add) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (matchmake_add) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matchmake_add);
		if (message_arena != submessage_arena) {
			matchmake_add = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, matchmake_add, submessage_arena);
		}
		set_has_matchmake_add();
		payload_.matchmake_add_ = matchmake_add;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_add)
}
void Envelope::set_allocated_matchmake_remove(::server::TMatchmakeRemove *matchmake_remove) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (matchmake_remove) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matchmake_remove);
		if (message_arena != submessage_arena) {
			matchmake_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, matchmake_remove, submessage_arena);
		}
		set_has_matchmake_remove();
		payload_.matchmake_remove_ = matchmake_remove;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_remove)
}
void Envelope::set_allocated_matchmake_ticket(::server::TMatchmakeTicket *matchmake_ticket) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (matchmake_ticket) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matchmake_ticket);
		if (message_arena != submessage_arena) {
			matchmake_ticket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, matchmake_ticket, submessage_arena);
		}
		set_has_matchmake_ticket();
		payload_.matchmake_ticket_ = matchmake_ticket;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_ticket)
}
void Envelope::set_allocated_matchmake_matched(::server::MatchmakeMatched *matchmake_matched) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (matchmake_matched) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(matchmake_matched);
		if (message_arena != submessage_arena) {
			matchmake_matched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, matchmake_matched, submessage_arena);
		}
		set_has_matchmake_matched();
		payload_.matchmake_matched_ = matchmake_matched;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.matchmake_matched)
}
void Envelope::set_allocated_rpc(::server::TRpc *rpc) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (rpc) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rpc);
		if (message_arena != submessage_arena) {
			rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, rpc, submessage_arena);
		}
		set_has_rpc();
		payload_.rpc_ = rpc;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.rpc)
}
void Envelope::set_allocated_purchase(::server::TPurchaseValidation *purchase) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (purchase) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(purchase);
		if (message_arena != submessage_arena) {
			purchase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, purchase, submessage_arena);
		}
		set_has_purchase();
		payload_.purchase_ = purchase;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.purchase)
}
void Envelope::set_allocated_purchase_record(::server::TPurchaseRecord *purchase_record) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (purchase_record) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(purchase_record);
		if (message_arena != submessage_arena) {
			purchase_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, purchase_record, submessage_arena);
		}
		set_has_purchase_record();
		payload_.purchase_record_ = purchase_record;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.purchase_record)
}
void Envelope::set_allocated_notifications_list(::server::TNotificationsList *notifications_list) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (notifications_list) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notifications_list);
		if (message_arena != submessage_arena) {
			notifications_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, notifications_list, submessage_arena);
		}
		set_has_notifications_list();
		payload_.notifications_list_ = notifications_list;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications_list)
}
void Envelope::set_allocated_notifications_remove(::server::TNotificationsRemove *notifications_remove) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (notifications_remove) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notifications_remove);
		if (message_arena != submessage_arena) {
			notifications_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, notifications_remove, submessage_arena);
		}
		set_has_notifications_remove();
		payload_.notifications_remove_ = notifications_remove;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications_remove)
}
void Envelope::set_allocated_notifications(::server::TNotifications *notifications) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (notifications) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notifications);
		if (message_arena != submessage_arena) {
			notifications = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, notifications, submessage_arena);
		}
		set_has_notifications();
		payload_.notifications_ = notifications;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.notifications)
}
void Envelope::set_allocated_live_notifications(::server::Notifications *live_notifications) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_payload();
	if (live_notifications) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(live_notifications);
		if (message_arena != submessage_arena) {
			live_notifications = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, live_notifications, submessage_arena);
		}
		set_has_live_notifications();
		payload_.live_notifications_ = live_notifications;
	}
	// @@protoc_insertion_point(field_set_allocated:server.Envelope.live_notifications)
}
Envelope::Envelope(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Envelope)
}
Envelope::Envelope(const Envelope &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	collation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collation_id().empty()) {
		collation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collation_id(),
				GetArena());
	}
	clear_has_payload();
	switch (from.payload_case()) {
		case kError: {
			_internal_mutable_error()->::server::Error::MergeFrom(from._internal_error());
			break;
		}
		case kHeartbeat: {
			_internal_mutable_heartbeat()->::server::Heartbeat::MergeFrom(from._internal_heartbeat());
			break;
		}
		case kLogout: {
			_internal_mutable_logout()->::server::Logout::MergeFrom(from._internal_logout());
			break;
		}
		case kLink: {
			_internal_mutable_link()->::server::TLink::MergeFrom(from._internal_link());
			break;
		}
		case kUnlink: {
			_internal_mutable_unlink()->::server::TUnlink::MergeFrom(from._internal_unlink());
			break;
		}
		case kSelfFetch: {
			_internal_mutable_self_fetch()->::server::TSelfFetch::MergeFrom(from._internal_self_fetch());
			break;
		}
		case kSelfUpdate: {
			_internal_mutable_self_update()->::server::TSelfUpdate::MergeFrom(from._internal_self_update());
			break;
		}
		case kUsersFetch: {
			_internal_mutable_users_fetch()->::server::TUsersFetch::MergeFrom(from._internal_users_fetch());
			break;
		}
		case kSelf: {
			_internal_mutable_self()->::server::TSelf::MergeFrom(from._internal_self());
			break;
		}
		case kUsers: {
			_internal_mutable_users()->::server::TUsers::MergeFrom(from._internal_users());
			break;
		}
		case kFriendsAdd: {
			_internal_mutable_friends_add()->::server::TFriendsAdd::MergeFrom(from._internal_friends_add());
			break;
		}
		case kFriendsRemove: {
			_internal_mutable_friends_remove()->::server::TFriendsRemove::MergeFrom(from._internal_friends_remove());
			break;
		}
		case kFriendsBlock: {
			_internal_mutable_friends_block()->::server::TFriendsBlock::MergeFrom(from._internal_friends_block());
			break;
		}
		case kFriendsList: {
			_internal_mutable_friends_list()->::server::TFriendsList::MergeFrom(from._internal_friends_list());
			break;
		}
		case kFriends: {
			_internal_mutable_friends()->::server::TFriends::MergeFrom(from._internal_friends());
			break;
		}
		case kGroupsCreate: {
			_internal_mutable_groups_create()->::server::TGroupsCreate::MergeFrom(from._internal_groups_create());
			break;
		}
		case kGroupsUpdate: {
			_internal_mutable_groups_update()->::server::TGroupsUpdate::MergeFrom(from._internal_groups_update());
			break;
		}
		case kGroupsRemove: {
			_internal_mutable_groups_remove()->::server::TGroupsRemove::MergeFrom(from._internal_groups_remove());
			break;
		}
		case kGroupsFetch: {
			_internal_mutable_groups_fetch()->::server::TGroupsFetch::MergeFrom(from._internal_groups_fetch());
			break;
		}
		case kGroupsList: {
			_internal_mutable_groups_list()->::server::TGroupsList::MergeFrom(from._internal_groups_list());
			break;
		}
		case kGroupsSelfList: {
			_internal_mutable_groups_self_list()->::server::TGroupsSelfList::MergeFrom(from._internal_groups_self_list());
			break;
		}
		case kGroupUsersList: {
			_internal_mutable_group_users_list()->::server::TGroupUsersList::MergeFrom(from._internal_group_users_list());
			break;
		}
		case kGroupsJoin: {
			_internal_mutable_groups_join()->::server::TGroupsJoin::MergeFrom(from._internal_groups_join());
			break;
		}
		case kGroupsLeave: {
			_internal_mutable_groups_leave()->::server::TGroupsLeave::MergeFrom(from._internal_groups_leave());
			break;
		}
		case kGroupUsersAdd: {
			_internal_mutable_group_users_add()->::server::TGroupUsersAdd::MergeFrom(from._internal_group_users_add());
			break;
		}
		case kGroupUsersKick: {
			_internal_mutable_group_users_kick()->::server::TGroupUsersKick::MergeFrom(from._internal_group_users_kick());
			break;
		}
		case kGroupUsersPromote: {
			_internal_mutable_group_users_promote()->::server::TGroupUsersPromote::MergeFrom(from._internal_group_users_promote());
			break;
		}
		case kGroups: {
			_internal_mutable_groups()->::server::TGroups::MergeFrom(from._internal_groups());
			break;
		}
		case kGroupsSelf: {
			_internal_mutable_groups_self()->::server::TGroupsSelf::MergeFrom(from._internal_groups_self());
			break;
		}
		case kGroupUsers: {
			_internal_mutable_group_users()->::server::TGroupUsers::MergeFrom(from._internal_group_users());
			break;
		}
		case kTopicsJoin: {
			_internal_mutable_topics_join()->::server::TTopicsJoin::MergeFrom(from._internal_topics_join());
			break;
		}
		case kTopicsLeave: {
			_internal_mutable_topics_leave()->::server::TTopicsLeave::MergeFrom(from._internal_topics_leave());
			break;
		}
		case kTopicMessageSend: {
			_internal_mutable_topic_message_send()->::server::TTopicMessageSend::MergeFrom(from._internal_topic_message_send());
			break;
		}
		case kTopicMessagesList: {
			_internal_mutable_topic_messages_list()->::server::TTopicMessagesList::MergeFrom(from._internal_topic_messages_list());
			break;
		}
		case kTopics: {
			_internal_mutable_topics()->::server::TTopics::MergeFrom(from._internal_topics());
			break;
		}
		case kTopicMessageAck: {
			_internal_mutable_topic_message_ack()->::server::TTopicMessageAck::MergeFrom(from._internal_topic_message_ack());
			break;
		}
		case kTopicMessage: {
			_internal_mutable_topic_message()->::server::TopicMessage::MergeFrom(from._internal_topic_message());
			break;
		}
		case kTopicMessages: {
			_internal_mutable_topic_messages()->::server::TTopicMessages::MergeFrom(from._internal_topic_messages());
			break;
		}
		case kTopicPresence: {
			_internal_mutable_topic_presence()->::server::TopicPresence::MergeFrom(from._internal_topic_presence());
			break;
		}
		case kMatchCreate: {
			_internal_mutable_match_create()->::server::TMatchCreate::MergeFrom(from._internal_match_create());
			break;
		}
		case kMatchesJoin: {
			_internal_mutable_matches_join()->::server::TMatchesJoin::MergeFrom(from._internal_matches_join());
			break;
		}
		case kMatchesLeave: {
			_internal_mutable_matches_leave()->::server::TMatchesLeave::MergeFrom(from._internal_matches_leave());
			break;
		}
		case kMatchDataSend: {
			_internal_mutable_match_data_send()->::server::MatchDataSend::MergeFrom(from._internal_match_data_send());
			break;
		}
		case kMatch: {
			_internal_mutable_match()->::server::TMatch::MergeFrom(from._internal_match());
			break;
		}
		case kMatches: {
			_internal_mutable_matches()->::server::TMatches::MergeFrom(from._internal_matches());
			break;
		}
		case kMatchData: {
			_internal_mutable_match_data()->::server::MatchData::MergeFrom(from._internal_match_data());
			break;
		}
		case kMatchPresence: {
			_internal_mutable_match_presence()->::server::MatchPresence::MergeFrom(from._internal_match_presence());
			break;
		}
		case kStorageList: {
			_internal_mutable_storage_list()->::server::TStorageList::MergeFrom(from._internal_storage_list());
			break;
		}
		case kStorageFetch: {
			_internal_mutable_storage_fetch()->::server::TStorageFetch::MergeFrom(from._internal_storage_fetch());
			break;
		}
		case kStorageWrite: {
			_internal_mutable_storage_write()->::server::TStorageWrite::MergeFrom(from._internal_storage_write());
			break;
		}
		case kStorageUpdate: {
			_internal_mutable_storage_update()->::server::TStorageUpdate::MergeFrom(from._internal_storage_update());
			break;
		}
		case kStorageRemove: {
			_internal_mutable_storage_remove()->::server::TStorageRemove::MergeFrom(from._internal_storage_remove());
			break;
		}
		case kStorageData: {
			_internal_mutable_storage_data()->::server::TStorageData::MergeFrom(from._internal_storage_data());
			break;
		}
		case kStorageKeys: {
			_internal_mutable_storage_keys()->::server::TStorageKeys::MergeFrom(from._internal_storage_keys());
			break;
		}
		case kLeaderboardsList: {
			_internal_mutable_leaderboards_list()->::server::TLeaderboardsList::MergeFrom(from._internal_leaderboards_list());
			break;
		}
		case kLeaderboardRecordsWrite: {
			_internal_mutable_leaderboard_records_write()->::server::TLeaderboardRecordsWrite::MergeFrom(from._internal_leaderboard_records_write());
			break;
		}
		case kLeaderboardRecordsFetch: {
			_internal_mutable_leaderboard_records_fetch()->::server::TLeaderboardRecordsFetch::MergeFrom(from._internal_leaderboard_records_fetch());
			break;
		}
		case kLeaderboardRecordsList: {
			_internal_mutable_leaderboard_records_list()->::server::TLeaderboardRecordsList::MergeFrom(from._internal_leaderboard_records_list());
			break;
		}
		case kLeaderboards: {
			_internal_mutable_leaderboards()->::server::TLeaderboards::MergeFrom(from._internal_leaderboards());
			break;
		}
		case kLeaderboardRecords: {
			_internal_mutable_leaderboard_records()->::server::TLeaderboardRecords::MergeFrom(from._internal_leaderboard_records());
			break;
		}
		case kMatchmakeAdd: {
			_internal_mutable_matchmake_add()->::server::TMatchmakeAdd::MergeFrom(from._internal_matchmake_add());
			break;
		}
		case kMatchmakeRemove: {
			_internal_mutable_matchmake_remove()->::server::TMatchmakeRemove::MergeFrom(from._internal_matchmake_remove());
			break;
		}
		case kMatchmakeTicket: {
			_internal_mutable_matchmake_ticket()->::server::TMatchmakeTicket::MergeFrom(from._internal_matchmake_ticket());
			break;
		}
		case kMatchmakeMatched: {
			_internal_mutable_matchmake_matched()->::server::MatchmakeMatched::MergeFrom(from._internal_matchmake_matched());
			break;
		}
		case kRpc: {
			_internal_mutable_rpc()->::server::TRpc::MergeFrom(from._internal_rpc());
			break;
		}
		case kPurchase: {
			_internal_mutable_purchase()->::server::TPurchaseValidation::MergeFrom(from._internal_purchase());
			break;
		}
		case kPurchaseRecord: {
			_internal_mutable_purchase_record()->::server::TPurchaseRecord::MergeFrom(from._internal_purchase_record());
			break;
		}
		case kNotificationsList: {
			_internal_mutable_notifications_list()->::server::TNotificationsList::MergeFrom(from._internal_notifications_list());
			break;
		}
		case kNotificationsRemove: {
			_internal_mutable_notifications_remove()->::server::TNotificationsRemove::MergeFrom(from._internal_notifications_remove());
			break;
		}
		case kNotifications: {
			_internal_mutable_notifications()->::server::TNotifications::MergeFrom(from._internal_notifications());
			break;
		}
		case kLiveNotifications: {
			_internal_mutable_live_notifications()->::server::Notifications::MergeFrom(from._internal_live_notifications());
			break;
		}
		case PAYLOAD_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.Envelope)
}

void Envelope::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Envelope_api_2eproto.base);
	collation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	clear_has_payload();
}

Envelope::~Envelope() {
	// @@protoc_insertion_point(destructor:server.Envelope)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Envelope::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	collation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_payload()) {
		clear_payload();
	}
}

void Envelope::ArenaDtor(void *object) {
	Envelope *_this = reinterpret_cast<Envelope *>(object);
	(void)_this;
}
void Envelope::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Envelope::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Envelope &Envelope::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Envelope_api_2eproto.base);
	return *internal_default_instance();
}

void Envelope::clear_payload() {
	// @@protoc_insertion_point(one_of_clear_start:server.Envelope)
	switch (payload_case()) {
		case kError: {
			if (GetArena() == nullptr) {
				delete payload_.error_;
			}
			break;
		}
		case kHeartbeat: {
			if (GetArena() == nullptr) {
				delete payload_.heartbeat_;
			}
			break;
		}
		case kLogout: {
			if (GetArena() == nullptr) {
				delete payload_.logout_;
			}
			break;
		}
		case kLink: {
			if (GetArena() == nullptr) {
				delete payload_.link_;
			}
			break;
		}
		case kUnlink: {
			if (GetArena() == nullptr) {
				delete payload_.unlink_;
			}
			break;
		}
		case kSelfFetch: {
			if (GetArena() == nullptr) {
				delete payload_.self_fetch_;
			}
			break;
		}
		case kSelfUpdate: {
			if (GetArena() == nullptr) {
				delete payload_.self_update_;
			}
			break;
		}
		case kUsersFetch: {
			if (GetArena() == nullptr) {
				delete payload_.users_fetch_;
			}
			break;
		}
		case kSelf: {
			if (GetArena() == nullptr) {
				delete payload_.self_;
			}
			break;
		}
		case kUsers: {
			if (GetArena() == nullptr) {
				delete payload_.users_;
			}
			break;
		}
		case kFriendsAdd: {
			if (GetArena() == nullptr) {
				delete payload_.friends_add_;
			}
			break;
		}
		case kFriendsRemove: {
			if (GetArena() == nullptr) {
				delete payload_.friends_remove_;
			}
			break;
		}
		case kFriendsBlock: {
			if (GetArena() == nullptr) {
				delete payload_.friends_block_;
			}
			break;
		}
		case kFriendsList: {
			if (GetArena() == nullptr) {
				delete payload_.friends_list_;
			}
			break;
		}
		case kFriends: {
			if (GetArena() == nullptr) {
				delete payload_.friends_;
			}
			break;
		}
		case kGroupsCreate: {
			if (GetArena() == nullptr) {
				delete payload_.groups_create_;
			}
			break;
		}
		case kGroupsUpdate: {
			if (GetArena() == nullptr) {
				delete payload_.groups_update_;
			}
			break;
		}
		case kGroupsRemove: {
			if (GetArena() == nullptr) {
				delete payload_.groups_remove_;
			}
			break;
		}
		case kGroupsFetch: {
			if (GetArena() == nullptr) {
				delete payload_.groups_fetch_;
			}
			break;
		}
		case kGroupsList: {
			if (GetArena() == nullptr) {
				delete payload_.groups_list_;
			}
			break;
		}
		case kGroupsSelfList: {
			if (GetArena() == nullptr) {
				delete payload_.groups_self_list_;
			}
			break;
		}
		case kGroupUsersList: {
			if (GetArena() == nullptr) {
				delete payload_.group_users_list_;
			}
			break;
		}
		case kGroupsJoin: {
			if (GetArena() == nullptr) {
				delete payload_.groups_join_;
			}
			break;
		}
		case kGroupsLeave: {
			if (GetArena() == nullptr) {
				delete payload_.groups_leave_;
			}
			break;
		}
		case kGroupUsersAdd: {
			if (GetArena() == nullptr) {
				delete payload_.group_users_add_;
			}
			break;
		}
		case kGroupUsersKick: {
			if (GetArena() == nullptr) {
				delete payload_.group_users_kick_;
			}
			break;
		}
		case kGroupUsersPromote: {
			if (GetArena() == nullptr) {
				delete payload_.group_users_promote_;
			}
			break;
		}
		case kGroups: {
			if (GetArena() == nullptr) {
				delete payload_.groups_;
			}
			break;
		}
		case kGroupsSelf: {
			if (GetArena() == nullptr) {
				delete payload_.groups_self_;
			}
			break;
		}
		case kGroupUsers: {
			if (GetArena() == nullptr) {
				delete payload_.group_users_;
			}
			break;
		}
		case kTopicsJoin: {
			if (GetArena() == nullptr) {
				delete payload_.topics_join_;
			}
			break;
		}
		case kTopicsLeave: {
			if (GetArena() == nullptr) {
				delete payload_.topics_leave_;
			}
			break;
		}
		case kTopicMessageSend: {
			if (GetArena() == nullptr) {
				delete payload_.topic_message_send_;
			}
			break;
		}
		case kTopicMessagesList: {
			if (GetArena() == nullptr) {
				delete payload_.topic_messages_list_;
			}
			break;
		}
		case kTopics: {
			if (GetArena() == nullptr) {
				delete payload_.topics_;
			}
			break;
		}
		case kTopicMessageAck: {
			if (GetArena() == nullptr) {
				delete payload_.topic_message_ack_;
			}
			break;
		}
		case kTopicMessage: {
			if (GetArena() == nullptr) {
				delete payload_.topic_message_;
			}
			break;
		}
		case kTopicMessages: {
			if (GetArena() == nullptr) {
				delete payload_.topic_messages_;
			}
			break;
		}
		case kTopicPresence: {
			if (GetArena() == nullptr) {
				delete payload_.topic_presence_;
			}
			break;
		}
		case kMatchCreate: {
			if (GetArena() == nullptr) {
				delete payload_.match_create_;
			}
			break;
		}
		case kMatchesJoin: {
			if (GetArena() == nullptr) {
				delete payload_.matches_join_;
			}
			break;
		}
		case kMatchesLeave: {
			if (GetArena() == nullptr) {
				delete payload_.matches_leave_;
			}
			break;
		}
		case kMatchDataSend: {
			if (GetArena() == nullptr) {
				delete payload_.match_data_send_;
			}
			break;
		}
		case kMatch: {
			if (GetArena() == nullptr) {
				delete payload_.match_;
			}
			break;
		}
		case kMatches: {
			if (GetArena() == nullptr) {
				delete payload_.matches_;
			}
			break;
		}
		case kMatchData: {
			if (GetArena() == nullptr) {
				delete payload_.match_data_;
			}
			break;
		}
		case kMatchPresence: {
			if (GetArena() == nullptr) {
				delete payload_.match_presence_;
			}
			break;
		}
		case kStorageList: {
			if (GetArena() == nullptr) {
				delete payload_.storage_list_;
			}
			break;
		}
		case kStorageFetch: {
			if (GetArena() == nullptr) {
				delete payload_.storage_fetch_;
			}
			break;
		}
		case kStorageWrite: {
			if (GetArena() == nullptr) {
				delete payload_.storage_write_;
			}
			break;
		}
		case kStorageUpdate: {
			if (GetArena() == nullptr) {
				delete payload_.storage_update_;
			}
			break;
		}
		case kStorageRemove: {
			if (GetArena() == nullptr) {
				delete payload_.storage_remove_;
			}
			break;
		}
		case kStorageData: {
			if (GetArena() == nullptr) {
				delete payload_.storage_data_;
			}
			break;
		}
		case kStorageKeys: {
			if (GetArena() == nullptr) {
				delete payload_.storage_keys_;
			}
			break;
		}
		case kLeaderboardsList: {
			if (GetArena() == nullptr) {
				delete payload_.leaderboards_list_;
			}
			break;
		}
		case kLeaderboardRecordsWrite: {
			if (GetArena() == nullptr) {
				delete payload_.leaderboard_records_write_;
			}
			break;
		}
		case kLeaderboardRecordsFetch: {
			if (GetArena() == nullptr) {
				delete payload_.leaderboard_records_fetch_;
			}
			break;
		}
		case kLeaderboardRecordsList: {
			if (GetArena() == nullptr) {
				delete payload_.leaderboard_records_list_;
			}
			break;
		}
		case kLeaderboards: {
			if (GetArena() == nullptr) {
				delete payload_.leaderboards_;
			}
			break;
		}
		case kLeaderboardRecords: {
			if (GetArena() == nullptr) {
				delete payload_.leaderboard_records_;
			}
			break;
		}
		case kMatchmakeAdd: {
			if (GetArena() == nullptr) {
				delete payload_.matchmake_add_;
			}
			break;
		}
		case kMatchmakeRemove: {
			if (GetArena() == nullptr) {
				delete payload_.matchmake_remove_;
			}
			break;
		}
		case kMatchmakeTicket: {
			if (GetArena() == nullptr) {
				delete payload_.matchmake_ticket_;
			}
			break;
		}
		case kMatchmakeMatched: {
			if (GetArena() == nullptr) {
				delete payload_.matchmake_matched_;
			}
			break;
		}
		case kRpc: {
			if (GetArena() == nullptr) {
				delete payload_.rpc_;
			}
			break;
		}
		case kPurchase: {
			if (GetArena() == nullptr) {
				delete payload_.purchase_;
			}
			break;
		}
		case kPurchaseRecord: {
			if (GetArena() == nullptr) {
				delete payload_.purchase_record_;
			}
			break;
		}
		case kNotificationsList: {
			if (GetArena() == nullptr) {
				delete payload_.notifications_list_;
			}
			break;
		}
		case kNotificationsRemove: {
			if (GetArena() == nullptr) {
				delete payload_.notifications_remove_;
			}
			break;
		}
		case kNotifications: {
			if (GetArena() == nullptr) {
				delete payload_.notifications_;
			}
			break;
		}
		case kLiveNotifications: {
			if (GetArena() == nullptr) {
				delete payload_.live_notifications_;
			}
			break;
		}
		case PAYLOAD_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = PAYLOAD_NOT_SET;
}

void Envelope::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Envelope)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	collation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	clear_payload();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Envelope::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string collation_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_collation_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Envelope.collation_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.Error error = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.Heartbeat heartbeat = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.Logout logout = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					ptr = ctx->ParseMessage(_internal_mutable_logout(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TLink link = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					ptr = ctx->ParseMessage(_internal_mutable_link(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TUnlink unlink = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					ptr = ctx->ParseMessage(_internal_mutable_unlink(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TSelfFetch self_fetch = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					ptr = ctx->ParseMessage(_internal_mutable_self_fetch(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TSelfUpdate self_update = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					ptr = ctx->ParseMessage(_internal_mutable_self_update(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TUsersFetch users_fetch = 9;
			case 9:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
					ptr = ctx->ParseMessage(_internal_mutable_users_fetch(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TSelf self = 10;
			case 10:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
					ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TUsers users = 11;
			case 11:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
					ptr = ctx->ParseMessage(_internal_mutable_users(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TFriendsAdd friends_add = 12;
			case 12:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
					ptr = ctx->ParseMessage(_internal_mutable_friends_add(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TFriendsRemove friends_remove = 13;
			case 13:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
					ptr = ctx->ParseMessage(_internal_mutable_friends_remove(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TFriendsBlock friends_block = 14;
			case 14:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
					ptr = ctx->ParseMessage(_internal_mutable_friends_block(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TFriendsList friends_list = 15;
			case 15:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
					ptr = ctx->ParseMessage(_internal_mutable_friends_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TFriends friends = 16;
			case 16:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
					ptr = ctx->ParseMessage(_internal_mutable_friends(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsCreate groups_create = 17;
			case 17:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_create(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsUpdate groups_update = 18;
			case 18:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_update(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsRemove groups_remove = 19;
			case 19:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_remove(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsFetch groups_fetch = 20;
			case 20:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_fetch(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsList groups_list = 21;
			case 21:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsSelfList groups_self_list = 22;
			case 22:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_self_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupUsersList group_users_list = 23;
			case 23:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
					ptr = ctx->ParseMessage(_internal_mutable_group_users_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsJoin groups_join = 24;
			case 24:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_join(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsLeave groups_leave = 25;
			case 25:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_leave(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupUsersAdd group_users_add = 26;
			case 26:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
					ptr = ctx->ParseMessage(_internal_mutable_group_users_add(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupUsersKick group_users_kick = 27;
			case 27:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
					ptr = ctx->ParseMessage(_internal_mutable_group_users_kick(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupUsersPromote group_users_promote = 28;
			case 28:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
					ptr = ctx->ParseMessage(_internal_mutable_group_users_promote(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroups groups = 29;
			case 29:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupsSelf groups_self = 30;
			case 30:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
					ptr = ctx->ParseMessage(_internal_mutable_groups_self(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TGroupUsers group_users = 31;
			case 31:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
					ptr = ctx->ParseMessage(_internal_mutable_group_users(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TTopicsJoin topics_join = 32;
			case 32:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
					ptr = ctx->ParseMessage(_internal_mutable_topics_join(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TTopicsLeave topics_leave = 33;
			case 33:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_topics_leave(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TTopicMessageSend topic_message_send = 34;
			case 34:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic_message_send(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TTopicMessagesList topic_messages_list = 35;
			case 35:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic_messages_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TTopics topics = 36;
			case 36:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					ptr = ctx->ParseMessage(_internal_mutable_topics(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TTopicMessageAck topic_message_ack = 37;
			case 37:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic_message_ack(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TopicMessage topic_message = 38;
			case 38:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic_message(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TTopicMessages topic_messages = 39;
			case 39:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic_messages(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TopicPresence topic_presence = 40;
			case 40:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic_presence(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TMatchCreate match_create = 41;
			case 41:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
					ptr = ctx->ParseMessage(_internal_mutable_match_create(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TMatchesJoin matches_join = 42;
			case 42:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
					ptr = ctx->ParseMessage(_internal_mutable_matches_join(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TMatchesLeave matches_leave = 43;
			case 43:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
					ptr = ctx->ParseMessage(_internal_mutable_matches_leave(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.MatchDataSend match_data_send = 44;
			case 44:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
					ptr = ctx->ParseMessage(_internal_mutable_match_data_send(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TMatch match = 45;
			case 45:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
					ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TMatches matches = 46;
			case 46:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
					ptr = ctx->ParseMessage(_internal_mutable_matches(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.MatchData match_data = 47;
			case 47:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
					ptr = ctx->ParseMessage(_internal_mutable_match_data(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.MatchPresence match_presence = 48;
			case 48:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
					ptr = ctx->ParseMessage(_internal_mutable_match_presence(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TStorageList storage_list = 49;
			case 49:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
					ptr = ctx->ParseMessage(_internal_mutable_storage_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TStorageFetch storage_fetch = 50;
			case 50:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
					ptr = ctx->ParseMessage(_internal_mutable_storage_fetch(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TStorageWrite storage_write = 51;
			case 51:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
					ptr = ctx->ParseMessage(_internal_mutable_storage_write(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TStorageUpdate storage_update = 52;
			case 52:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
					ptr = ctx->ParseMessage(_internal_mutable_storage_update(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TStorageRemove storage_remove = 53;
			case 53:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
					ptr = ctx->ParseMessage(_internal_mutable_storage_remove(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TStorageData storage_data = 54;
			case 54:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
					ptr = ctx->ParseMessage(_internal_mutable_storage_data(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TStorageKeys storage_keys = 55;
			case 55:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
					ptr = ctx->ParseMessage(_internal_mutable_storage_keys(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TLeaderboardsList leaderboards_list = 56;
			case 56:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
					ptr = ctx->ParseMessage(_internal_mutable_leaderboards_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
			case 57:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
					ptr = ctx->ParseMessage(_internal_mutable_leaderboard_records_write(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
			case 58:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
					ptr = ctx->ParseMessage(_internal_mutable_leaderboard_records_fetch(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TLeaderboardRecordsList leaderboard_records_list = 59;
			case 59:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
					ptr = ctx->ParseMessage(_internal_mutable_leaderboard_records_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TLeaderboards leaderboards = 60;
			case 60:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
					ptr = ctx->ParseMessage(_internal_mutable_leaderboards(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TLeaderboardRecords leaderboard_records = 61;
			case 61:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
					ptr = ctx->ParseMessage(_internal_mutable_leaderboard_records(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TMatchmakeAdd matchmake_add = 62;
			case 62:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
					ptr = ctx->ParseMessage(_internal_mutable_matchmake_add(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TMatchmakeRemove matchmake_remove = 63;
			case 63:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
					ptr = ctx->ParseMessage(_internal_mutable_matchmake_remove(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TMatchmakeTicket matchmake_ticket = 64;
			case 64:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
					ptr = ctx->ParseMessage(_internal_mutable_matchmake_ticket(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.MatchmakeMatched matchmake_matched = 65;
			case 65:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_matchmake_matched(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TRpc rpc = 66;
			case 66:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_rpc(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TPurchaseValidation purchase = 67;
			case 67:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_purchase(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TPurchaseRecord purchase_record = 68;
			case 68:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					ptr = ctx->ParseMessage(_internal_mutable_purchase_record(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TNotificationsList notifications_list = 69;
			case 69:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					ptr = ctx->ParseMessage(_internal_mutable_notifications_list(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TNotificationsRemove notifications_remove = 70;
			case 70:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					ptr = ctx->ParseMessage(_internal_mutable_notifications_remove(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TNotifications notifications = 71;
			case 71:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					ptr = ctx->ParseMessage(_internal_mutable_notifications(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.Notifications live_notifications = 72;
			case 72:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					ptr = ctx->ParseMessage(_internal_mutable_live_notifications(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Envelope::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Envelope)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string collation_id = 1;
	if (this->collation_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collation_id().data(), static_cast<int>(this->_internal_collation_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Envelope.collation_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_collation_id(), target);
	}

	// .server.Error error = 2;
	if (_internal_has_error()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						2, _Internal::error(this), target, stream);
	}

	// .server.Heartbeat heartbeat = 3;
	if (_internal_has_heartbeat()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						3, _Internal::heartbeat(this), target, stream);
	}

	// .server.Logout logout = 4;
	if (_internal_has_logout()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						4, _Internal::logout(this), target, stream);
	}

	// .server.TLink link = 5;
	if (_internal_has_link()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						5, _Internal::link(this), target, stream);
	}

	// .server.TUnlink unlink = 6;
	if (_internal_has_unlink()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						6, _Internal::unlink(this), target, stream);
	}

	// .server.TSelfFetch self_fetch = 7;
	if (_internal_has_self_fetch()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						7, _Internal::self_fetch(this), target, stream);
	}

	// .server.TSelfUpdate self_update = 8;
	if (_internal_has_self_update()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						8, _Internal::self_update(this), target, stream);
	}

	// .server.TUsersFetch users_fetch = 9;
	if (_internal_has_users_fetch()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						9, _Internal::users_fetch(this), target, stream);
	}

	// .server.TSelf self = 10;
	if (_internal_has_self()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						10, _Internal::self(this), target, stream);
	}

	// .server.TUsers users = 11;
	if (_internal_has_users()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						11, _Internal::users(this), target, stream);
	}

	// .server.TFriendsAdd friends_add = 12;
	if (_internal_has_friends_add()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						12, _Internal::friends_add(this), target, stream);
	}

	// .server.TFriendsRemove friends_remove = 13;
	if (_internal_has_friends_remove()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						13, _Internal::friends_remove(this), target, stream);
	}

	// .server.TFriendsBlock friends_block = 14;
	if (_internal_has_friends_block()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						14, _Internal::friends_block(this), target, stream);
	}

	// .server.TFriendsList friends_list = 15;
	if (_internal_has_friends_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						15, _Internal::friends_list(this), target, stream);
	}

	// .server.TFriends friends = 16;
	if (_internal_has_friends()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						16, _Internal::friends(this), target, stream);
	}

	// .server.TGroupsCreate groups_create = 17;
	if (_internal_has_groups_create()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						17, _Internal::groups_create(this), target, stream);
	}

	// .server.TGroupsUpdate groups_update = 18;
	if (_internal_has_groups_update()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						18, _Internal::groups_update(this), target, stream);
	}

	// .server.TGroupsRemove groups_remove = 19;
	if (_internal_has_groups_remove()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						19, _Internal::groups_remove(this), target, stream);
	}

	// .server.TGroupsFetch groups_fetch = 20;
	if (_internal_has_groups_fetch()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						20, _Internal::groups_fetch(this), target, stream);
	}

	// .server.TGroupsList groups_list = 21;
	if (_internal_has_groups_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						21, _Internal::groups_list(this), target, stream);
	}

	// .server.TGroupsSelfList groups_self_list = 22;
	if (_internal_has_groups_self_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						22, _Internal::groups_self_list(this), target, stream);
	}

	// .server.TGroupUsersList group_users_list = 23;
	if (_internal_has_group_users_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						23, _Internal::group_users_list(this), target, stream);
	}

	// .server.TGroupsJoin groups_join = 24;
	if (_internal_has_groups_join()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						24, _Internal::groups_join(this), target, stream);
	}

	// .server.TGroupsLeave groups_leave = 25;
	if (_internal_has_groups_leave()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						25, _Internal::groups_leave(this), target, stream);
	}

	// .server.TGroupUsersAdd group_users_add = 26;
	if (_internal_has_group_users_add()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						26, _Internal::group_users_add(this), target, stream);
	}

	// .server.TGroupUsersKick group_users_kick = 27;
	if (_internal_has_group_users_kick()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						27, _Internal::group_users_kick(this), target, stream);
	}

	// .server.TGroupUsersPromote group_users_promote = 28;
	if (_internal_has_group_users_promote()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						28, _Internal::group_users_promote(this), target, stream);
	}

	// .server.TGroups groups = 29;
	if (_internal_has_groups()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						29, _Internal::groups(this), target, stream);
	}

	// .server.TGroupsSelf groups_self = 30;
	if (_internal_has_groups_self()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						30, _Internal::groups_self(this), target, stream);
	}

	// .server.TGroupUsers group_users = 31;
	if (_internal_has_group_users()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						31, _Internal::group_users(this), target, stream);
	}

	// .server.TTopicsJoin topics_join = 32;
	if (_internal_has_topics_join()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						32, _Internal::topics_join(this), target, stream);
	}

	// .server.TTopicsLeave topics_leave = 33;
	if (_internal_has_topics_leave()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						33, _Internal::topics_leave(this), target, stream);
	}

	// .server.TTopicMessageSend topic_message_send = 34;
	if (_internal_has_topic_message_send()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						34, _Internal::topic_message_send(this), target, stream);
	}

	// .server.TTopicMessagesList topic_messages_list = 35;
	if (_internal_has_topic_messages_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						35, _Internal::topic_messages_list(this), target, stream);
	}

	// .server.TTopics topics = 36;
	if (_internal_has_topics()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						36, _Internal::topics(this), target, stream);
	}

	// .server.TTopicMessageAck topic_message_ack = 37;
	if (_internal_has_topic_message_ack()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						37, _Internal::topic_message_ack(this), target, stream);
	}

	// .server.TopicMessage topic_message = 38;
	if (_internal_has_topic_message()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						38, _Internal::topic_message(this), target, stream);
	}

	// .server.TTopicMessages topic_messages = 39;
	if (_internal_has_topic_messages()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						39, _Internal::topic_messages(this), target, stream);
	}

	// .server.TopicPresence topic_presence = 40;
	if (_internal_has_topic_presence()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						40, _Internal::topic_presence(this), target, stream);
	}

	// .server.TMatchCreate match_create = 41;
	if (_internal_has_match_create()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						41, _Internal::match_create(this), target, stream);
	}

	// .server.TMatchesJoin matches_join = 42;
	if (_internal_has_matches_join()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						42, _Internal::matches_join(this), target, stream);
	}

	// .server.TMatchesLeave matches_leave = 43;
	if (_internal_has_matches_leave()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						43, _Internal::matches_leave(this), target, stream);
	}

	// .server.MatchDataSend match_data_send = 44;
	if (_internal_has_match_data_send()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						44, _Internal::match_data_send(this), target, stream);
	}

	// .server.TMatch match = 45;
	if (_internal_has_match()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						45, _Internal::match(this), target, stream);
	}

	// .server.TMatches matches = 46;
	if (_internal_has_matches()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						46, _Internal::matches(this), target, stream);
	}

	// .server.MatchData match_data = 47;
	if (_internal_has_match_data()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						47, _Internal::match_data(this), target, stream);
	}

	// .server.MatchPresence match_presence = 48;
	if (_internal_has_match_presence()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						48, _Internal::match_presence(this), target, stream);
	}

	// .server.TStorageList storage_list = 49;
	if (_internal_has_storage_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						49, _Internal::storage_list(this), target, stream);
	}

	// .server.TStorageFetch storage_fetch = 50;
	if (_internal_has_storage_fetch()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						50, _Internal::storage_fetch(this), target, stream);
	}

	// .server.TStorageWrite storage_write = 51;
	if (_internal_has_storage_write()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						51, _Internal::storage_write(this), target, stream);
	}

	// .server.TStorageUpdate storage_update = 52;
	if (_internal_has_storage_update()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						52, _Internal::storage_update(this), target, stream);
	}

	// .server.TStorageRemove storage_remove = 53;
	if (_internal_has_storage_remove()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						53, _Internal::storage_remove(this), target, stream);
	}

	// .server.TStorageData storage_data = 54;
	if (_internal_has_storage_data()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						54, _Internal::storage_data(this), target, stream);
	}

	// .server.TStorageKeys storage_keys = 55;
	if (_internal_has_storage_keys()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						55, _Internal::storage_keys(this), target, stream);
	}

	// .server.TLeaderboardsList leaderboards_list = 56;
	if (_internal_has_leaderboards_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						56, _Internal::leaderboards_list(this), target, stream);
	}

	// .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
	if (_internal_has_leaderboard_records_write()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						57, _Internal::leaderboard_records_write(this), target, stream);
	}

	// .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
	if (_internal_has_leaderboard_records_fetch()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						58, _Internal::leaderboard_records_fetch(this), target, stream);
	}

	// .server.TLeaderboardRecordsList leaderboard_records_list = 59;
	if (_internal_has_leaderboard_records_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						59, _Internal::leaderboard_records_list(this), target, stream);
	}

	// .server.TLeaderboards leaderboards = 60;
	if (_internal_has_leaderboards()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						60, _Internal::leaderboards(this), target, stream);
	}

	// .server.TLeaderboardRecords leaderboard_records = 61;
	if (_internal_has_leaderboard_records()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						61, _Internal::leaderboard_records(this), target, stream);
	}

	// .server.TMatchmakeAdd matchmake_add = 62;
	if (_internal_has_matchmake_add()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						62, _Internal::matchmake_add(this), target, stream);
	}

	// .server.TMatchmakeRemove matchmake_remove = 63;
	if (_internal_has_matchmake_remove()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						63, _Internal::matchmake_remove(this), target, stream);
	}

	// .server.TMatchmakeTicket matchmake_ticket = 64;
	if (_internal_has_matchmake_ticket()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						64, _Internal::matchmake_ticket(this), target, stream);
	}

	// .server.MatchmakeMatched matchmake_matched = 65;
	if (_internal_has_matchmake_matched()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						65, _Internal::matchmake_matched(this), target, stream);
	}

	// .server.TRpc rpc = 66;
	if (_internal_has_rpc()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						66, _Internal::rpc(this), target, stream);
	}

	// .server.TPurchaseValidation purchase = 67;
	if (_internal_has_purchase()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						67, _Internal::purchase(this), target, stream);
	}

	// .server.TPurchaseRecord purchase_record = 68;
	if (_internal_has_purchase_record()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						68, _Internal::purchase_record(this), target, stream);
	}

	// .server.TNotificationsList notifications_list = 69;
	if (_internal_has_notifications_list()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						69, _Internal::notifications_list(this), target, stream);
	}

	// .server.TNotificationsRemove notifications_remove = 70;
	if (_internal_has_notifications_remove()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						70, _Internal::notifications_remove(this), target, stream);
	}

	// .server.TNotifications notifications = 71;
	if (_internal_has_notifications()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						71, _Internal::notifications(this), target, stream);
	}

	// .server.Notifications live_notifications = 72;
	if (_internal_has_live_notifications()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						72, _Internal::live_notifications(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Envelope)
	return target;
}

size_t Envelope::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Envelope)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string collation_id = 1;
	if (this->collation_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collation_id());
	}

	switch (payload_case()) {
		// .server.Error error = 2;
		case kError: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.error_);
			break;
		}
		// .server.Heartbeat heartbeat = 3;
		case kHeartbeat: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.heartbeat_);
			break;
		}
		// .server.Logout logout = 4;
		case kLogout: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.logout_);
			break;
		}
		// .server.TLink link = 5;
		case kLink: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.link_);
			break;
		}
		// .server.TUnlink unlink = 6;
		case kUnlink: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.unlink_);
			break;
		}
		// .server.TSelfFetch self_fetch = 7;
		case kSelfFetch: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.self_fetch_);
			break;
		}
		// .server.TSelfUpdate self_update = 8;
		case kSelfUpdate: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.self_update_);
			break;
		}
		// .server.TUsersFetch users_fetch = 9;
		case kUsersFetch: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.users_fetch_);
			break;
		}
		// .server.TSelf self = 10;
		case kSelf: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.self_);
			break;
		}
		// .server.TUsers users = 11;
		case kUsers: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.users_);
			break;
		}
		// .server.TFriendsAdd friends_add = 12;
		case kFriendsAdd: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.friends_add_);
			break;
		}
		// .server.TFriendsRemove friends_remove = 13;
		case kFriendsRemove: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.friends_remove_);
			break;
		}
		// .server.TFriendsBlock friends_block = 14;
		case kFriendsBlock: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.friends_block_);
			break;
		}
		// .server.TFriendsList friends_list = 15;
		case kFriendsList: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.friends_list_);
			break;
		}
		// .server.TFriends friends = 16;
		case kFriends: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.friends_);
			break;
		}
		// .server.TGroupsCreate groups_create = 17;
		case kGroupsCreate: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_create_);
			break;
		}
		// .server.TGroupsUpdate groups_update = 18;
		case kGroupsUpdate: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_update_);
			break;
		}
		// .server.TGroupsRemove groups_remove = 19;
		case kGroupsRemove: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_remove_);
			break;
		}
		// .server.TGroupsFetch groups_fetch = 20;
		case kGroupsFetch: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_fetch_);
			break;
		}
		// .server.TGroupsList groups_list = 21;
		case kGroupsList: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_list_);
			break;
		}
		// .server.TGroupsSelfList groups_self_list = 22;
		case kGroupsSelfList: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_self_list_);
			break;
		}
		// .server.TGroupUsersList group_users_list = 23;
		case kGroupUsersList: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.group_users_list_);
			break;
		}
		// .server.TGroupsJoin groups_join = 24;
		case kGroupsJoin: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_join_);
			break;
		}
		// .server.TGroupsLeave groups_leave = 25;
		case kGroupsLeave: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_leave_);
			break;
		}
		// .server.TGroupUsersAdd group_users_add = 26;
		case kGroupUsersAdd: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.group_users_add_);
			break;
		}
		// .server.TGroupUsersKick group_users_kick = 27;
		case kGroupUsersKick: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.group_users_kick_);
			break;
		}
		// .server.TGroupUsersPromote group_users_promote = 28;
		case kGroupUsersPromote: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.group_users_promote_);
			break;
		}
		// .server.TGroups groups = 29;
		case kGroups: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_);
			break;
		}
		// .server.TGroupsSelf groups_self = 30;
		case kGroupsSelf: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.groups_self_);
			break;
		}
		// .server.TGroupUsers group_users = 31;
		case kGroupUsers: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.group_users_);
			break;
		}
		// .server.TTopicsJoin topics_join = 32;
		case kTopicsJoin: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topics_join_);
			break;
		}
		// .server.TTopicsLeave topics_leave = 33;
		case kTopicsLeave: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topics_leave_);
			break;
		}
		// .server.TTopicMessageSend topic_message_send = 34;
		case kTopicMessageSend: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topic_message_send_);
			break;
		}
		// .server.TTopicMessagesList topic_messages_list = 35;
		case kTopicMessagesList: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topic_messages_list_);
			break;
		}
		// .server.TTopics topics = 36;
		case kTopics: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topics_);
			break;
		}
		// .server.TTopicMessageAck topic_message_ack = 37;
		case kTopicMessageAck: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topic_message_ack_);
			break;
		}
		// .server.TopicMessage topic_message = 38;
		case kTopicMessage: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topic_message_);
			break;
		}
		// .server.TTopicMessages topic_messages = 39;
		case kTopicMessages: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topic_messages_);
			break;
		}
		// .server.TopicPresence topic_presence = 40;
		case kTopicPresence: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.topic_presence_);
			break;
		}
		// .server.TMatchCreate match_create = 41;
		case kMatchCreate: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.match_create_);
			break;
		}
		// .server.TMatchesJoin matches_join = 42;
		case kMatchesJoin: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.matches_join_);
			break;
		}
		// .server.TMatchesLeave matches_leave = 43;
		case kMatchesLeave: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.matches_leave_);
			break;
		}
		// .server.MatchDataSend match_data_send = 44;
		case kMatchDataSend: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.match_data_send_);
			break;
		}
		// .server.TMatch match = 45;
		case kMatch: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.match_);
			break;
		}
		// .server.TMatches matches = 46;
		case kMatches: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.matches_);
			break;
		}
		// .server.MatchData match_data = 47;
		case kMatchData: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.match_data_);
			break;
		}
		// .server.MatchPresence match_presence = 48;
		case kMatchPresence: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.match_presence_);
			break;
		}
		// .server.TStorageList storage_list = 49;
		case kStorageList: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.storage_list_);
			break;
		}
		// .server.TStorageFetch storage_fetch = 50;
		case kStorageFetch: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.storage_fetch_);
			break;
		}
		// .server.TStorageWrite storage_write = 51;
		case kStorageWrite: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.storage_write_);
			break;
		}
		// .server.TStorageUpdate storage_update = 52;
		case kStorageUpdate: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.storage_update_);
			break;
		}
		// .server.TStorageRemove storage_remove = 53;
		case kStorageRemove: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.storage_remove_);
			break;
		}
		// .server.TStorageData storage_data = 54;
		case kStorageData: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.storage_data_);
			break;
		}
		// .server.TStorageKeys storage_keys = 55;
		case kStorageKeys: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.storage_keys_);
			break;
		}
		// .server.TLeaderboardsList leaderboards_list = 56;
		case kLeaderboardsList: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.leaderboards_list_);
			break;
		}
		// .server.TLeaderboardRecordsWrite leaderboard_records_write = 57;
		case kLeaderboardRecordsWrite: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.leaderboard_records_write_);
			break;
		}
		// .server.TLeaderboardRecordsFetch leaderboard_records_fetch = 58;
		case kLeaderboardRecordsFetch: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.leaderboard_records_fetch_);
			break;
		}
		// .server.TLeaderboardRecordsList leaderboard_records_list = 59;
		case kLeaderboardRecordsList: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.leaderboard_records_list_);
			break;
		}
		// .server.TLeaderboards leaderboards = 60;
		case kLeaderboards: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.leaderboards_);
			break;
		}
		// .server.TLeaderboardRecords leaderboard_records = 61;
		case kLeaderboardRecords: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.leaderboard_records_);
			break;
		}
		// .server.TMatchmakeAdd matchmake_add = 62;
		case kMatchmakeAdd: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.matchmake_add_);
			break;
		}
		// .server.TMatchmakeRemove matchmake_remove = 63;
		case kMatchmakeRemove: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.matchmake_remove_);
			break;
		}
		// .server.TMatchmakeTicket matchmake_ticket = 64;
		case kMatchmakeTicket: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.matchmake_ticket_);
			break;
		}
		// .server.MatchmakeMatched matchmake_matched = 65;
		case kMatchmakeMatched: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.matchmake_matched_);
			break;
		}
		// .server.TRpc rpc = 66;
		case kRpc: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.rpc_);
			break;
		}
		// .server.TPurchaseValidation purchase = 67;
		case kPurchase: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.purchase_);
			break;
		}
		// .server.TPurchaseRecord purchase_record = 68;
		case kPurchaseRecord: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.purchase_record_);
			break;
		}
		// .server.TNotificationsList notifications_list = 69;
		case kNotificationsList: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.notifications_list_);
			break;
		}
		// .server.TNotificationsRemove notifications_remove = 70;
		case kNotificationsRemove: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.notifications_remove_);
			break;
		}
		// .server.TNotifications notifications = 71;
		case kNotifications: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.notifications_);
			break;
		}
		// .server.Notifications live_notifications = 72;
		case kLiveNotifications: {
			total_size += 2 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*payload_.live_notifications_);
			break;
		}
		case PAYLOAD_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Envelope::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Envelope)
	GOOGLE_DCHECK_NE(&from, this);
	const Envelope *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Envelope>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Envelope)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Envelope)
		MergeFrom(*source);
	}
}

void Envelope::MergeFrom(const Envelope &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Envelope)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.collation_id().size() > 0) {
		_internal_set_collation_id(from._internal_collation_id());
	}
	switch (from.payload_case()) {
		case kError: {
			_internal_mutable_error()->::server::Error::MergeFrom(from._internal_error());
			break;
		}
		case kHeartbeat: {
			_internal_mutable_heartbeat()->::server::Heartbeat::MergeFrom(from._internal_heartbeat());
			break;
		}
		case kLogout: {
			_internal_mutable_logout()->::server::Logout::MergeFrom(from._internal_logout());
			break;
		}
		case kLink: {
			_internal_mutable_link()->::server::TLink::MergeFrom(from._internal_link());
			break;
		}
		case kUnlink: {
			_internal_mutable_unlink()->::server::TUnlink::MergeFrom(from._internal_unlink());
			break;
		}
		case kSelfFetch: {
			_internal_mutable_self_fetch()->::server::TSelfFetch::MergeFrom(from._internal_self_fetch());
			break;
		}
		case kSelfUpdate: {
			_internal_mutable_self_update()->::server::TSelfUpdate::MergeFrom(from._internal_self_update());
			break;
		}
		case kUsersFetch: {
			_internal_mutable_users_fetch()->::server::TUsersFetch::MergeFrom(from._internal_users_fetch());
			break;
		}
		case kSelf: {
			_internal_mutable_self()->::server::TSelf::MergeFrom(from._internal_self());
			break;
		}
		case kUsers: {
			_internal_mutable_users()->::server::TUsers::MergeFrom(from._internal_users());
			break;
		}
		case kFriendsAdd: {
			_internal_mutable_friends_add()->::server::TFriendsAdd::MergeFrom(from._internal_friends_add());
			break;
		}
		case kFriendsRemove: {
			_internal_mutable_friends_remove()->::server::TFriendsRemove::MergeFrom(from._internal_friends_remove());
			break;
		}
		case kFriendsBlock: {
			_internal_mutable_friends_block()->::server::TFriendsBlock::MergeFrom(from._internal_friends_block());
			break;
		}
		case kFriendsList: {
			_internal_mutable_friends_list()->::server::TFriendsList::MergeFrom(from._internal_friends_list());
			break;
		}
		case kFriends: {
			_internal_mutable_friends()->::server::TFriends::MergeFrom(from._internal_friends());
			break;
		}
		case kGroupsCreate: {
			_internal_mutable_groups_create()->::server::TGroupsCreate::MergeFrom(from._internal_groups_create());
			break;
		}
		case kGroupsUpdate: {
			_internal_mutable_groups_update()->::server::TGroupsUpdate::MergeFrom(from._internal_groups_update());
			break;
		}
		case kGroupsRemove: {
			_internal_mutable_groups_remove()->::server::TGroupsRemove::MergeFrom(from._internal_groups_remove());
			break;
		}
		case kGroupsFetch: {
			_internal_mutable_groups_fetch()->::server::TGroupsFetch::MergeFrom(from._internal_groups_fetch());
			break;
		}
		case kGroupsList: {
			_internal_mutable_groups_list()->::server::TGroupsList::MergeFrom(from._internal_groups_list());
			break;
		}
		case kGroupsSelfList: {
			_internal_mutable_groups_self_list()->::server::TGroupsSelfList::MergeFrom(from._internal_groups_self_list());
			break;
		}
		case kGroupUsersList: {
			_internal_mutable_group_users_list()->::server::TGroupUsersList::MergeFrom(from._internal_group_users_list());
			break;
		}
		case kGroupsJoin: {
			_internal_mutable_groups_join()->::server::TGroupsJoin::MergeFrom(from._internal_groups_join());
			break;
		}
		case kGroupsLeave: {
			_internal_mutable_groups_leave()->::server::TGroupsLeave::MergeFrom(from._internal_groups_leave());
			break;
		}
		case kGroupUsersAdd: {
			_internal_mutable_group_users_add()->::server::TGroupUsersAdd::MergeFrom(from._internal_group_users_add());
			break;
		}
		case kGroupUsersKick: {
			_internal_mutable_group_users_kick()->::server::TGroupUsersKick::MergeFrom(from._internal_group_users_kick());
			break;
		}
		case kGroupUsersPromote: {
			_internal_mutable_group_users_promote()->::server::TGroupUsersPromote::MergeFrom(from._internal_group_users_promote());
			break;
		}
		case kGroups: {
			_internal_mutable_groups()->::server::TGroups::MergeFrom(from._internal_groups());
			break;
		}
		case kGroupsSelf: {
			_internal_mutable_groups_self()->::server::TGroupsSelf::MergeFrom(from._internal_groups_self());
			break;
		}
		case kGroupUsers: {
			_internal_mutable_group_users()->::server::TGroupUsers::MergeFrom(from._internal_group_users());
			break;
		}
		case kTopicsJoin: {
			_internal_mutable_topics_join()->::server::TTopicsJoin::MergeFrom(from._internal_topics_join());
			break;
		}
		case kTopicsLeave: {
			_internal_mutable_topics_leave()->::server::TTopicsLeave::MergeFrom(from._internal_topics_leave());
			break;
		}
		case kTopicMessageSend: {
			_internal_mutable_topic_message_send()->::server::TTopicMessageSend::MergeFrom(from._internal_topic_message_send());
			break;
		}
		case kTopicMessagesList: {
			_internal_mutable_topic_messages_list()->::server::TTopicMessagesList::MergeFrom(from._internal_topic_messages_list());
			break;
		}
		case kTopics: {
			_internal_mutable_topics()->::server::TTopics::MergeFrom(from._internal_topics());
			break;
		}
		case kTopicMessageAck: {
			_internal_mutable_topic_message_ack()->::server::TTopicMessageAck::MergeFrom(from._internal_topic_message_ack());
			break;
		}
		case kTopicMessage: {
			_internal_mutable_topic_message()->::server::TopicMessage::MergeFrom(from._internal_topic_message());
			break;
		}
		case kTopicMessages: {
			_internal_mutable_topic_messages()->::server::TTopicMessages::MergeFrom(from._internal_topic_messages());
			break;
		}
		case kTopicPresence: {
			_internal_mutable_topic_presence()->::server::TopicPresence::MergeFrom(from._internal_topic_presence());
			break;
		}
		case kMatchCreate: {
			_internal_mutable_match_create()->::server::TMatchCreate::MergeFrom(from._internal_match_create());
			break;
		}
		case kMatchesJoin: {
			_internal_mutable_matches_join()->::server::TMatchesJoin::MergeFrom(from._internal_matches_join());
			break;
		}
		case kMatchesLeave: {
			_internal_mutable_matches_leave()->::server::TMatchesLeave::MergeFrom(from._internal_matches_leave());
			break;
		}
		case kMatchDataSend: {
			_internal_mutable_match_data_send()->::server::MatchDataSend::MergeFrom(from._internal_match_data_send());
			break;
		}
		case kMatch: {
			_internal_mutable_match()->::server::TMatch::MergeFrom(from._internal_match());
			break;
		}
		case kMatches: {
			_internal_mutable_matches()->::server::TMatches::MergeFrom(from._internal_matches());
			break;
		}
		case kMatchData: {
			_internal_mutable_match_data()->::server::MatchData::MergeFrom(from._internal_match_data());
			break;
		}
		case kMatchPresence: {
			_internal_mutable_match_presence()->::server::MatchPresence::MergeFrom(from._internal_match_presence());
			break;
		}
		case kStorageList: {
			_internal_mutable_storage_list()->::server::TStorageList::MergeFrom(from._internal_storage_list());
			break;
		}
		case kStorageFetch: {
			_internal_mutable_storage_fetch()->::server::TStorageFetch::MergeFrom(from._internal_storage_fetch());
			break;
		}
		case kStorageWrite: {
			_internal_mutable_storage_write()->::server::TStorageWrite::MergeFrom(from._internal_storage_write());
			break;
		}
		case kStorageUpdate: {
			_internal_mutable_storage_update()->::server::TStorageUpdate::MergeFrom(from._internal_storage_update());
			break;
		}
		case kStorageRemove: {
			_internal_mutable_storage_remove()->::server::TStorageRemove::MergeFrom(from._internal_storage_remove());
			break;
		}
		case kStorageData: {
			_internal_mutable_storage_data()->::server::TStorageData::MergeFrom(from._internal_storage_data());
			break;
		}
		case kStorageKeys: {
			_internal_mutable_storage_keys()->::server::TStorageKeys::MergeFrom(from._internal_storage_keys());
			break;
		}
		case kLeaderboardsList: {
			_internal_mutable_leaderboards_list()->::server::TLeaderboardsList::MergeFrom(from._internal_leaderboards_list());
			break;
		}
		case kLeaderboardRecordsWrite: {
			_internal_mutable_leaderboard_records_write()->::server::TLeaderboardRecordsWrite::MergeFrom(from._internal_leaderboard_records_write());
			break;
		}
		case kLeaderboardRecordsFetch: {
			_internal_mutable_leaderboard_records_fetch()->::server::TLeaderboardRecordsFetch::MergeFrom(from._internal_leaderboard_records_fetch());
			break;
		}
		case kLeaderboardRecordsList: {
			_internal_mutable_leaderboard_records_list()->::server::TLeaderboardRecordsList::MergeFrom(from._internal_leaderboard_records_list());
			break;
		}
		case kLeaderboards: {
			_internal_mutable_leaderboards()->::server::TLeaderboards::MergeFrom(from._internal_leaderboards());
			break;
		}
		case kLeaderboardRecords: {
			_internal_mutable_leaderboard_records()->::server::TLeaderboardRecords::MergeFrom(from._internal_leaderboard_records());
			break;
		}
		case kMatchmakeAdd: {
			_internal_mutable_matchmake_add()->::server::TMatchmakeAdd::MergeFrom(from._internal_matchmake_add());
			break;
		}
		case kMatchmakeRemove: {
			_internal_mutable_matchmake_remove()->::server::TMatchmakeRemove::MergeFrom(from._internal_matchmake_remove());
			break;
		}
		case kMatchmakeTicket: {
			_internal_mutable_matchmake_ticket()->::server::TMatchmakeTicket::MergeFrom(from._internal_matchmake_ticket());
			break;
		}
		case kMatchmakeMatched: {
			_internal_mutable_matchmake_matched()->::server::MatchmakeMatched::MergeFrom(from._internal_matchmake_matched());
			break;
		}
		case kRpc: {
			_internal_mutable_rpc()->::server::TRpc::MergeFrom(from._internal_rpc());
			break;
		}
		case kPurchase: {
			_internal_mutable_purchase()->::server::TPurchaseValidation::MergeFrom(from._internal_purchase());
			break;
		}
		case kPurchaseRecord: {
			_internal_mutable_purchase_record()->::server::TPurchaseRecord::MergeFrom(from._internal_purchase_record());
			break;
		}
		case kNotificationsList: {
			_internal_mutable_notifications_list()->::server::TNotificationsList::MergeFrom(from._internal_notifications_list());
			break;
		}
		case kNotificationsRemove: {
			_internal_mutable_notifications_remove()->::server::TNotificationsRemove::MergeFrom(from._internal_notifications_remove());
			break;
		}
		case kNotifications: {
			_internal_mutable_notifications()->::server::TNotifications::MergeFrom(from._internal_notifications());
			break;
		}
		case kLiveNotifications: {
			_internal_mutable_live_notifications()->::server::Notifications::MergeFrom(from._internal_live_notifications());
			break;
		}
		case PAYLOAD_NOT_SET: {
			break;
		}
	}
}

void Envelope::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Envelope)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Envelope)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Envelope::IsInitialized() const {
	return true;
}

void Envelope::InternalSwap(Envelope *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	collation_id_.Swap(&other->collation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(payload_, other->payload_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Envelope::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Logout::_Internal {
public:
};

Logout::Logout(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Logout)
}
Logout::Logout(const Logout &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.Logout)
}

void Logout::SharedCtor() {
}

Logout::~Logout() {
	// @@protoc_insertion_point(destructor:server.Logout)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logout::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void Logout::ArenaDtor(void *object) {
	Logout *_this = reinterpret_cast<Logout *>(object);
	(void)_this;
}
void Logout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Logout::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Logout &Logout::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logout_api_2eproto.base);
	return *internal_default_instance();
}

void Logout::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Logout)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Logout::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		if ((tag & 7) == 4 || tag == 0) {
			ctx->SetLastTag(tag);
			goto success;
		}
		ptr = UnknownFieldParse(tag,
				_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
				ptr, ctx);
		CHK_(ptr != nullptr);
		continue;
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Logout::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Logout)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Logout)
	return target;
}

size_t Logout::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Logout)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Logout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Logout)
	GOOGLE_DCHECK_NE(&from, this);
	const Logout *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logout>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Logout)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Logout)
		MergeFrom(*source);
	}
}

void Logout::MergeFrom(const Logout &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Logout)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;
}

void Logout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Logout)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Logout::CopyFrom(const Logout &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Logout)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Logout::IsInitialized() const {
	return true;
}

void Logout::InternalSwap(Logout *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Logout::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLink::_Internal {
public:
	static const ::server::AuthenticateRequest_Email &email(const TLink *msg);
	static const ::server::AuthenticateRequest_GameCenter &game_center(const TLink *msg);
};

const ::server::AuthenticateRequest_Email &
TLink::_Internal::email(const TLink *msg) {
	return *msg->id_.email_;
}
const ::server::AuthenticateRequest_GameCenter &
TLink::_Internal::game_center(const TLink *msg) {
	return *msg->id_.game_center_;
}
void TLink::set_allocated_email(::server::AuthenticateRequest_Email *email) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_id();
	if (email) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(email);
		if (message_arena != submessage_arena) {
			email = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, email, submessage_arena);
		}
		set_has_email();
		id_.email_ = email;
	}
	// @@protoc_insertion_point(field_set_allocated:server.TLink.email)
}
void TLink::set_allocated_game_center(::server::AuthenticateRequest_GameCenter *game_center) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_id();
	if (game_center) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(game_center);
		if (message_arena != submessage_arena) {
			game_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, game_center, submessage_arena);
		}
		set_has_game_center();
		id_.game_center_ = game_center;
	}
	// @@protoc_insertion_point(field_set_allocated:server.TLink.game_center)
}
TLink::TLink(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLink)
}
TLink::TLink(const TLink &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kEmail: {
			_internal_mutable_email()->::server::AuthenticateRequest_Email::MergeFrom(from._internal_email());
			break;
		}
		case kFacebook: {
			_internal_set_facebook(from._internal_facebook());
			break;
		}
		case kGoogle: {
			_internal_set_google(from._internal_google());
			break;
		}
		case kGameCenter: {
			_internal_mutable_game_center()->::server::AuthenticateRequest_GameCenter::MergeFrom(from._internal_game_center());
			break;
		}
		case kSteam: {
			_internal_set_steam(from._internal_steam());
			break;
		}
		case kDevice: {
			_internal_set_device(from._internal_device());
			break;
		}
		case kCustom: {
			_internal_set_custom(from._internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TLink)
}

void TLink::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLink_api_2eproto.base);
	clear_has_id();
}

TLink::~TLink() {
	// @@protoc_insertion_point(destructor:server.TLink)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLink::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TLink::ArenaDtor(void *object) {
	TLink *_this = reinterpret_cast<TLink *>(object);
	(void)_this;
}
void TLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLink::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLink &TLink::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLink_api_2eproto.base);
	return *internal_default_instance();
}

void TLink::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TLink)
	switch (id_case()) {
		case kEmail: {
			if (GetArena() == nullptr) {
				delete id_.email_;
			}
			break;
		}
		case kFacebook: {
			id_.facebook_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGoogle: {
			id_.google_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGameCenter: {
			if (GetArena() == nullptr) {
				delete id_.game_center_;
			}
			break;
		}
		case kSteam: {
			id_.steam_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kDevice: {
			id_.device_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kCustom: {
			id_.custom_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TLink::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLink)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLink::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.AuthenticateRequest.Email email = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_email(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string facebook = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_facebook();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLink.facebook"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string google = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_google();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLink.google"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.AuthenticateRequest.GameCenter game_center = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					ptr = ctx->ParseMessage(_internal_mutable_game_center(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string steam = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_steam();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLink.steam"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string device = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_device();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLink.device"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string custom = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_custom();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLink.custom"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLink::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLink)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.AuthenticateRequest.Email email = 1;
	if (_internal_has_email()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::email(this), target, stream);
	}

	// string facebook = 2;
	if (_internal_has_facebook()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_facebook().data(), static_cast<int>(this->_internal_facebook().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLink.facebook");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_facebook(), target);
	}

	// string google = 3;
	if (_internal_has_google()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_google().data(), static_cast<int>(this->_internal_google().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLink.google");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_google(), target);
	}

	// .server.AuthenticateRequest.GameCenter game_center = 4;
	if (_internal_has_game_center()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						4, _Internal::game_center(this), target, stream);
	}

	// string steam = 5;
	if (_internal_has_steam()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_steam().data(), static_cast<int>(this->_internal_steam().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLink.steam");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_steam(), target);
	}

	// string device = 6;
	if (_internal_has_device()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLink.device");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_device(), target);
	}

	// string custom = 7;
	if (_internal_has_custom()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_custom().data(), static_cast<int>(this->_internal_custom().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLink.custom");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_custom(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLink)
	return target;
}

size_t TLink::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLink)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// .server.AuthenticateRequest.Email email = 1;
		case kEmail: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*id_.email_);
			break;
		}
		// string facebook = 2;
		case kFacebook: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_facebook());
			break;
		}
		// string google = 3;
		case kGoogle: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_google());
			break;
		}
		// .server.AuthenticateRequest.GameCenter game_center = 4;
		case kGameCenter: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*id_.game_center_);
			break;
		}
		// string steam = 5;
		case kSteam: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_steam());
			break;
		}
		// string device = 6;
		case kDevice: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_device());
			break;
		}
		// string custom = 7;
		case kCustom: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLink)
	GOOGLE_DCHECK_NE(&from, this);
	const TLink *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLink>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLink)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLink)
		MergeFrom(*source);
	}
}

void TLink::MergeFrom(const TLink &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLink)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kEmail: {
			_internal_mutable_email()->::server::AuthenticateRequest_Email::MergeFrom(from._internal_email());
			break;
		}
		case kFacebook: {
			_internal_set_facebook(from._internal_facebook());
			break;
		}
		case kGoogle: {
			_internal_set_google(from._internal_google());
			break;
		}
		case kGameCenter: {
			_internal_mutable_game_center()->::server::AuthenticateRequest_GameCenter::MergeFrom(from._internal_game_center());
			break;
		}
		case kSteam: {
			_internal_set_steam(from._internal_steam());
			break;
		}
		case kDevice: {
			_internal_set_device(from._internal_device());
			break;
		}
		case kCustom: {
			_internal_set_custom(from._internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLink)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLink::CopyFrom(const TLink &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLink)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLink::IsInitialized() const {
	return true;
}

void TLink::InternalSwap(TLink *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLink::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TUnlink::_Internal {
public:
};

TUnlink::TUnlink(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TUnlink)
}
TUnlink::TUnlink(const TUnlink &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kEmail: {
			_internal_set_email(from._internal_email());
			break;
		}
		case kFacebook: {
			_internal_set_facebook(from._internal_facebook());
			break;
		}
		case kGoogle: {
			_internal_set_google(from._internal_google());
			break;
		}
		case kGameCenter: {
			_internal_set_game_center(from._internal_game_center());
			break;
		}
		case kSteam: {
			_internal_set_steam(from._internal_steam());
			break;
		}
		case kDevice: {
			_internal_set_device(from._internal_device());
			break;
		}
		case kCustom: {
			_internal_set_custom(from._internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TUnlink)
}

void TUnlink::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TUnlink_api_2eproto.base);
	clear_has_id();
}

TUnlink::~TUnlink() {
	// @@protoc_insertion_point(destructor:server.TUnlink)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TUnlink::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TUnlink::ArenaDtor(void *object) {
	TUnlink *_this = reinterpret_cast<TUnlink *>(object);
	(void)_this;
}
void TUnlink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TUnlink::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TUnlink &TUnlink::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TUnlink_api_2eproto.base);
	return *internal_default_instance();
}

void TUnlink::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TUnlink)
	switch (id_case()) {
		case kEmail: {
			id_.email_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kFacebook: {
			id_.facebook_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGoogle: {
			id_.google_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGameCenter: {
			id_.game_center_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kSteam: {
			id_.steam_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kDevice: {
			id_.device_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kCustom: {
			id_.custom_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TUnlink::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TUnlink)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TUnlink::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string email = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_email();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUnlink.email"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string facebook = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_facebook();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUnlink.facebook"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string google = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_google();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUnlink.google"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string game_center = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_game_center();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUnlink.game_center"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string steam = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_steam();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUnlink.steam"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string device = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_device();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUnlink.device"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string custom = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_custom();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUnlink.custom"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TUnlink::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TUnlink)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string email = 1;
	if (_internal_has_email()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUnlink.email");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_email(), target);
	}

	// string facebook = 2;
	if (_internal_has_facebook()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_facebook().data(), static_cast<int>(this->_internal_facebook().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUnlink.facebook");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_facebook(), target);
	}

	// string google = 3;
	if (_internal_has_google()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_google().data(), static_cast<int>(this->_internal_google().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUnlink.google");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_google(), target);
	}

	// string game_center = 4;
	if (_internal_has_game_center()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_game_center().data(), static_cast<int>(this->_internal_game_center().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUnlink.game_center");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_game_center(), target);
	}

	// string steam = 5;
	if (_internal_has_steam()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_steam().data(), static_cast<int>(this->_internal_steam().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUnlink.steam");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_steam(), target);
	}

	// string device = 6;
	if (_internal_has_device()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUnlink.device");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_device(), target);
	}

	// string custom = 7;
	if (_internal_has_custom()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_custom().data(), static_cast<int>(this->_internal_custom().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUnlink.custom");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_custom(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TUnlink)
	return target;
}

size_t TUnlink::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TUnlink)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// string email = 1;
		case kEmail: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_email());
			break;
		}
		// string facebook = 2;
		case kFacebook: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_facebook());
			break;
		}
		// string google = 3;
		case kGoogle: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_google());
			break;
		}
		// string game_center = 4;
		case kGameCenter: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_game_center());
			break;
		}
		// string steam = 5;
		case kSteam: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_steam());
			break;
		}
		// string device = 6;
		case kDevice: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_device());
			break;
		}
		// string custom = 7;
		case kCustom: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TUnlink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TUnlink)
	GOOGLE_DCHECK_NE(&from, this);
	const TUnlink *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TUnlink>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUnlink)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUnlink)
		MergeFrom(*source);
	}
}

void TUnlink::MergeFrom(const TUnlink &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TUnlink)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kEmail: {
			_internal_set_email(from._internal_email());
			break;
		}
		case kFacebook: {
			_internal_set_facebook(from._internal_facebook());
			break;
		}
		case kGoogle: {
			_internal_set_google(from._internal_google());
			break;
		}
		case kGameCenter: {
			_internal_set_game_center(from._internal_game_center());
			break;
		}
		case kSteam: {
			_internal_set_steam(from._internal_steam());
			break;
		}
		case kDevice: {
			_internal_set_device(from._internal_device());
			break;
		}
		case kCustom: {
			_internal_set_custom(from._internal_custom());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TUnlink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TUnlink)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TUnlink::CopyFrom(const TUnlink &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TUnlink)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TUnlink::IsInitialized() const {
	return true;
}

void TUnlink::InternalSwap(TUnlink *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TUnlink::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class User::_Internal {
public:
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.User)
}
User::User(const User &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_id().empty()) {
		id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
				GetArena());
	}
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_handle().empty()) {
		handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_handle(),
				GetArena());
	}
	fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_fullname().empty()) {
		fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fullname(),
				GetArena());
	}
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_avatar_url().empty()) {
		avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
				GetArena());
	}
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_lang().empty()) {
		lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lang(),
				GetArena());
	}
	location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_location().empty()) {
		location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location(),
				GetArena());
	}
	timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_timezone().empty()) {
		timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezone(),
				GetArena());
	}
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_metadata().empty()) {
		metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata(),
				GetArena());
	}
	::memcpy(&created_at_, &from.created_at_,
			static_cast<size_t>(reinterpret_cast<char *>(&last_online_at_) -
					reinterpret_cast<char *>(&created_at_)) +
					sizeof(last_online_at_));
	// @@protoc_insertion_point(copy_constructor:server.User)
}

void User::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_api_2eproto.base);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&created_at_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&last_online_at_) - reinterpret_cast<char *>(&created_at_)) + sizeof(last_online_at_));
}

User::~User() {
	// @@protoc_insertion_point(destructor:server.User)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void User::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User::ArenaDtor(void *object) {
	User *_this = reinterpret_cast<User *>(object);
	(void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void User::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const User &User::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_api_2eproto.base);
	return *internal_default_instance();
}

void User::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.User)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&created_at_, 0, static_cast<size_t>(reinterpret_cast<char *>(&last_online_at_) - reinterpret_cast<char *>(&created_at_)) + sizeof(last_online_at_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *User::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.User.id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string handle = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_handle();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.User.handle"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string fullname = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_fullname();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.User.fullname"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string avatar_url = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_avatar_url();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.User.avatar_url"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string lang = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_lang();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.User.lang"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string location = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_location();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.User.location"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string timezone = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_timezone();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.User.timezone"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string metadata = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					auto str = _internal_mutable_metadata();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.User.metadata"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 created_at = 9;
			case 9:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
					created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 updated_at = 10;
			case 10:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
					updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 last_online_at = 11;
			case 11:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
					last_online_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *User::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.User)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.User.id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_id(), target);
	}

	// string handle = 2;
	if (this->handle().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.User.handle");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_handle(), target);
	}

	// string fullname = 3;
	if (this->fullname().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.User.fullname");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_fullname(), target);
	}

	// string avatar_url = 4;
	if (this->avatar_url().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.User.avatar_url");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_avatar_url(), target);
	}

	// string lang = 5;
	if (this->lang().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.User.lang");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_lang(), target);
	}

	// string location = 6;
	if (this->location().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.User.location");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_location(), target);
	}

	// string timezone = 7;
	if (this->timezone().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.User.timezone");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_timezone(), target);
	}

	// string metadata = 8;
	if (this->metadata().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.User.metadata");
		target = stream->WriteStringMaybeAliased(
				8, this->_internal_metadata(), target);
	}

	// int64 created_at = 9;
	if (this->created_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_created_at(), target);
	}

	// int64 updated_at = 10;
	if (this->updated_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_updated_at(), target);
	}

	// int64 last_online_at = 11;
	if (this->last_online_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_last_online_at(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.User)
	return target;
}

size_t User::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.User)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_id());
	}

	// string handle = 2;
	if (this->handle().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_handle());
	}

	// string fullname = 3;
	if (this->fullname().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_fullname());
	}

	// string avatar_url = 4;
	if (this->avatar_url().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_avatar_url());
	}

	// string lang = 5;
	if (this->lang().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_lang());
	}

	// string location = 6;
	if (this->location().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_location());
	}

	// string timezone = 7;
	if (this->timezone().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_timezone());
	}

	// string metadata = 8;
	if (this->metadata().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_metadata());
	}

	// int64 created_at = 9;
	if (this->created_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_created_at());
	}

	// int64 updated_at = 10;
	if (this->updated_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_updated_at());
	}

	// int64 last_online_at = 11;
	if (this->last_online_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_last_online_at());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.User)
	GOOGLE_DCHECK_NE(&from, this);
	const User *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.User)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.User)
		MergeFrom(*source);
	}
}

void User::MergeFrom(const User &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.User)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.id().size() > 0) {
		_internal_set_id(from._internal_id());
	}
	if (from.handle().size() > 0) {
		_internal_set_handle(from._internal_handle());
	}
	if (from.fullname().size() > 0) {
		_internal_set_fullname(from._internal_fullname());
	}
	if (from.avatar_url().size() > 0) {
		_internal_set_avatar_url(from._internal_avatar_url());
	}
	if (from.lang().size() > 0) {
		_internal_set_lang(from._internal_lang());
	}
	if (from.location().size() > 0) {
		_internal_set_location(from._internal_location());
	}
	if (from.timezone().size() > 0) {
		_internal_set_timezone(from._internal_timezone());
	}
	if (from.metadata().size() > 0) {
		_internal_set_metadata(from._internal_metadata());
	}
	if (from.created_at() != 0) {
		_internal_set_created_at(from._internal_created_at());
	}
	if (from.updated_at() != 0) {
		_internal_set_updated_at(from._internal_updated_at());
	}
	if (from.last_online_at() != 0) {
		_internal_set_last_online_at(from._internal_last_online_at());
	}
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.User)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void User::CopyFrom(const User &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.User)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool User::IsInitialized() const {
	return true;
}

void User::InternalSwap(User *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.Swap(&other->handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	fullname_.Swap(&other->fullname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(User, last_online_at_) + sizeof(User::last_online_at_) - PROTOBUF_FIELD_OFFSET(User, created_at_)>(
			reinterpret_cast<char *>(&created_at_),
			reinterpret_cast<char *>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Self::_Internal {
public:
	static const ::server::User &user(const Self *msg);
};

const ::server::User &
Self::_Internal::user(const Self *msg) {
	return *msg->user_;
}
Self::Self(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		device_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Self)
}
Self::Self(const Self &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		device_ids_(from.device_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_email().empty()) {
		email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
				GetArena());
	}
	facebook_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_facebook_id().empty()) {
		facebook_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_facebook_id(),
				GetArena());
	}
	google_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_google_id().empty()) {
		google_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_google_id(),
				GetArena());
	}
	gamecenter_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_gamecenter_id().empty()) {
		gamecenter_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gamecenter_id(),
				GetArena());
	}
	steam_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_steam_id().empty()) {
		steam_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_steam_id(),
				GetArena());
	}
	custom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_custom_id().empty()) {
		custom_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_custom_id(),
				GetArena());
	}
	if (from._internal_has_user()) {
		user_ = new ::server::User(*from.user_);
	} else {
		user_ = nullptr;
	}
	verified_ = from.verified_;
	// @@protoc_insertion_point(copy_constructor:server.Self)
}

void Self::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Self_api_2eproto.base);
	email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	facebook_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	google_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	gamecenter_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	steam_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	custom_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&user_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&verified_) - reinterpret_cast<char *>(&user_)) + sizeof(verified_));
}

Self::~Self() {
	// @@protoc_insertion_point(destructor:server.Self)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Self::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	facebook_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	google_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	gamecenter_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	steam_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	custom_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (this != internal_default_instance())
		delete user_;
}

void Self::ArenaDtor(void *object) {
	Self *_this = reinterpret_cast<Self *>(object);
	(void)_this;
}
void Self::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Self::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Self &Self::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Self_api_2eproto.base);
	return *internal_default_instance();
}

void Self::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Self)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	device_ids_.Clear();
	email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	facebook_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	google_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	gamecenter_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	steam_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	custom_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	if (GetArena() == nullptr && user_ != nullptr) {
		delete user_;
	}
	user_ = nullptr;
	verified_ = false;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Self::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.User user = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool verified = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string email = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_email();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Self.email"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated string device_ids = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_device_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Self.device_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
				} else
					goto handle_unusual;
				continue;
			// string facebook_id = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_facebook_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Self.facebook_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string google_id = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_google_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Self.google_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string gamecenter_id = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_gamecenter_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Self.gamecenter_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string steam_id = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					auto str = _internal_mutable_steam_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Self.steam_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string custom_id = 9;
			case 9:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
					auto str = _internal_mutable_custom_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Self.custom_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Self::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Self)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.User user = 1;
	if (this->has_user()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::user(this), target, stream);
	}

	// bool verified = 2;
	if (this->verified() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verified(), target);
	}

	// string email = 3;
	if (this->email().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Self.email");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_email(), target);
	}

	// repeated string device_ids = 4;
	for (int i = 0, n = this->_internal_device_ids_size(); i < n; i++) {
		const auto &s = this->_internal_device_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Self.device_ids");
		target = stream->WriteString(4, s, target);
	}

	// string facebook_id = 5;
	if (this->facebook_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_facebook_id().data(), static_cast<int>(this->_internal_facebook_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Self.facebook_id");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_facebook_id(), target);
	}

	// string google_id = 6;
	if (this->google_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_google_id().data(), static_cast<int>(this->_internal_google_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Self.google_id");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_google_id(), target);
	}

	// string gamecenter_id = 7;
	if (this->gamecenter_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_gamecenter_id().data(), static_cast<int>(this->_internal_gamecenter_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Self.gamecenter_id");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_gamecenter_id(), target);
	}

	// string steam_id = 8;
	if (this->steam_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_steam_id().data(), static_cast<int>(this->_internal_steam_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Self.steam_id");
		target = stream->WriteStringMaybeAliased(
				8, this->_internal_steam_id(), target);
	}

	// string custom_id = 9;
	if (this->custom_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_custom_id().data(), static_cast<int>(this->_internal_custom_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Self.custom_id");
		target = stream->WriteStringMaybeAliased(
				9, this->_internal_custom_id(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Self)
	return target;
}

size_t Self::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Self)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string device_ids = 4;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_ids_.size());
	for (int i = 0, n = device_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				device_ids_.Get(i));
	}

	// string email = 3;
	if (this->email().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_email());
	}

	// string facebook_id = 5;
	if (this->facebook_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_facebook_id());
	}

	// string google_id = 6;
	if (this->google_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_google_id());
	}

	// string gamecenter_id = 7;
	if (this->gamecenter_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_gamecenter_id());
	}

	// string steam_id = 8;
	if (this->steam_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_steam_id());
	}

	// string custom_id = 9;
	if (this->custom_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_custom_id());
	}

	// .server.User user = 1;
	if (this->has_user()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*user_);
	}

	// bool verified = 2;
	if (this->verified() != 0) {
		total_size += 1 + 1;
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Self::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Self)
	GOOGLE_DCHECK_NE(&from, this);
	const Self *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Self>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Self)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Self)
		MergeFrom(*source);
	}
}

void Self::MergeFrom(const Self &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Self)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	device_ids_.MergeFrom(from.device_ids_);
	if (from.email().size() > 0) {
		_internal_set_email(from._internal_email());
	}
	if (from.facebook_id().size() > 0) {
		_internal_set_facebook_id(from._internal_facebook_id());
	}
	if (from.google_id().size() > 0) {
		_internal_set_google_id(from._internal_google_id());
	}
	if (from.gamecenter_id().size() > 0) {
		_internal_set_gamecenter_id(from._internal_gamecenter_id());
	}
	if (from.steam_id().size() > 0) {
		_internal_set_steam_id(from._internal_steam_id());
	}
	if (from.custom_id().size() > 0) {
		_internal_set_custom_id(from._internal_custom_id());
	}
	if (from.has_user()) {
		_internal_mutable_user()->::server::User::MergeFrom(from._internal_user());
	}
	if (from.verified() != 0) {
		_internal_set_verified(from._internal_verified());
	}
}

void Self::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Self)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Self::CopyFrom(const Self &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Self)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Self::IsInitialized() const {
	return true;
}

void Self::InternalSwap(Self *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	device_ids_.InternalSwap(&other->device_ids_);
	email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	facebook_id_.Swap(&other->facebook_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	google_id_.Swap(&other->google_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	gamecenter_id_.Swap(&other->gamecenter_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	steam_id_.Swap(&other->steam_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	custom_id_.Swap(&other->custom_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(Self, verified_) + sizeof(Self::verified_) - PROTOBUF_FIELD_OFFSET(Self, user_)>(
			reinterpret_cast<char *>(&user_),
			reinterpret_cast<char *>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Self::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TSelfFetch::_Internal {
public:
};

TSelfFetch::TSelfFetch(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TSelfFetch)
}
TSelfFetch::TSelfFetch(const TSelfFetch &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TSelfFetch)
}

void TSelfFetch::SharedCtor() {
}

TSelfFetch::~TSelfFetch() {
	// @@protoc_insertion_point(destructor:server.TSelfFetch)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TSelfFetch::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TSelfFetch::ArenaDtor(void *object) {
	TSelfFetch *_this = reinterpret_cast<TSelfFetch *>(object);
	(void)_this;
}
void TSelfFetch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TSelfFetch::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TSelfFetch &TSelfFetch::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TSelfFetch_api_2eproto.base);
	return *internal_default_instance();
}

void TSelfFetch::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TSelfFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TSelfFetch::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		if ((tag & 7) == 4 || tag == 0) {
			ctx->SetLastTag(tag);
			goto success;
		}
		ptr = UnknownFieldParse(tag,
				_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
				ptr, ctx);
		CHK_(ptr != nullptr);
		continue;
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TSelfFetch::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TSelfFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TSelfFetch)
	return target;
}

size_t TSelfFetch::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TSelfFetch)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TSelfFetch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TSelfFetch)
	GOOGLE_DCHECK_NE(&from, this);
	const TSelfFetch *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TSelfFetch>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelfFetch)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelfFetch)
		MergeFrom(*source);
	}
}

void TSelfFetch::MergeFrom(const TSelfFetch &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelfFetch)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;
}

void TSelfFetch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TSelfFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TSelfFetch::CopyFrom(const TSelfFetch &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelfFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TSelfFetch::IsInitialized() const {
	return true;
}

void TSelfFetch::InternalSwap(TSelfFetch *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TSelfFetch::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TSelf::_Internal {
public:
	static const ::server::Self &self(const TSelf *msg);
};

const ::server::Self &
TSelf::_Internal::self(const TSelf *msg) {
	return *msg->self_;
}
TSelf::TSelf(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TSelf)
}
TSelf::TSelf(const TSelf &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	if (from._internal_has_self()) {
		self_ = new ::server::Self(*from.self_);
	} else {
		self_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:server.TSelf)
}

void TSelf::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TSelf_api_2eproto.base);
	self_ = nullptr;
}

TSelf::~TSelf() {
	// @@protoc_insertion_point(destructor:server.TSelf)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TSelf::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (this != internal_default_instance())
		delete self_;
}

void TSelf::ArenaDtor(void *object) {
	TSelf *_this = reinterpret_cast<TSelf *>(object);
	(void)_this;
}
void TSelf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TSelf::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TSelf &TSelf::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TSelf_api_2eproto.base);
	return *internal_default_instance();
}

void TSelf::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TSelf)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (GetArena() == nullptr && self_ != nullptr) {
		delete self_;
	}
	self_ = nullptr;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TSelf::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.Self self = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TSelf::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TSelf)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.Self self = 1;
	if (this->has_self()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::self(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TSelf)
	return target;
}

size_t TSelf::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TSelf)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// .server.Self self = 1;
	if (this->has_self()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*self_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TSelf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TSelf)
	GOOGLE_DCHECK_NE(&from, this);
	const TSelf *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TSelf>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelf)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelf)
		MergeFrom(*source);
	}
}

void TSelf::MergeFrom(const TSelf &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelf)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.has_self()) {
		_internal_mutable_self()->::server::Self::MergeFrom(from._internal_self());
	}
}

void TSelf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TSelf)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TSelf::CopyFrom(const TSelf &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelf)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TSelf::IsInitialized() const {
	return true;
}

void TSelf::InternalSwap(TSelf *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(self_, other->self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TSelf::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TSelfUpdate::_Internal {
public:
};

TSelfUpdate::TSelfUpdate(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TSelfUpdate)
}
TSelfUpdate::TSelfUpdate(const TSelfUpdate &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_handle().empty()) {
		handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_handle(),
				GetArena());
	}
	fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_fullname().empty()) {
		fullname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fullname(),
				GetArena());
	}
	timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_timezone().empty()) {
		timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezone(),
				GetArena());
	}
	location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_location().empty()) {
		location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location(),
				GetArena());
	}
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_lang().empty()) {
		lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lang(),
				GetArena());
	}
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_metadata().empty()) {
		metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata(),
				GetArena());
	}
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_avatar_url().empty()) {
		avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TSelfUpdate)
}

void TSelfUpdate::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TSelfUpdate_api_2eproto.base);
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	fullname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TSelfUpdate::~TSelfUpdate() {
	// @@protoc_insertion_point(destructor:server.TSelfUpdate)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TSelfUpdate::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	fullname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TSelfUpdate::ArenaDtor(void *object) {
	TSelfUpdate *_this = reinterpret_cast<TSelfUpdate *>(object);
	(void)_this;
}
void TSelfUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TSelfUpdate::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TSelfUpdate &TSelfUpdate::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TSelfUpdate_api_2eproto.base);
	return *internal_default_instance();
}

void TSelfUpdate::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TSelfUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	fullname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TSelfUpdate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string handle = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_handle();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TSelfUpdate.handle"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string fullname = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_fullname();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TSelfUpdate.fullname"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string timezone = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_timezone();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TSelfUpdate.timezone"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string location = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_location();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TSelfUpdate.location"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string lang = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_lang();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TSelfUpdate.lang"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string metadata = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_metadata();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TSelfUpdate.metadata"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string avatar_url = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_avatar_url();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TSelfUpdate.avatar_url"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TSelfUpdate::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TSelfUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string handle = 1;
	if (this->handle().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TSelfUpdate.handle");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_handle(), target);
	}

	// string fullname = 2;
	if (this->fullname().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_fullname().data(), static_cast<int>(this->_internal_fullname().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TSelfUpdate.fullname");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_fullname(), target);
	}

	// string timezone = 3;
	if (this->timezone().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TSelfUpdate.timezone");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_timezone(), target);
	}

	// string location = 4;
	if (this->location().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TSelfUpdate.location");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_location(), target);
	}

	// string lang = 5;
	if (this->lang().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TSelfUpdate.lang");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_lang(), target);
	}

	// string metadata = 6;
	if (this->metadata().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TSelfUpdate.metadata");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_metadata(), target);
	}

	// string avatar_url = 7;
	if (this->avatar_url().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TSelfUpdate.avatar_url");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_avatar_url(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TSelfUpdate)
	return target;
}

size_t TSelfUpdate::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TSelfUpdate)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string handle = 1;
	if (this->handle().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_handle());
	}

	// string fullname = 2;
	if (this->fullname().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_fullname());
	}

	// string timezone = 3;
	if (this->timezone().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_timezone());
	}

	// string location = 4;
	if (this->location().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_location());
	}

	// string lang = 5;
	if (this->lang().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_lang());
	}

	// string metadata = 6;
	if (this->metadata().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_metadata());
	}

	// string avatar_url = 7;
	if (this->avatar_url().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_avatar_url());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TSelfUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TSelfUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	const TSelfUpdate *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TSelfUpdate>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TSelfUpdate)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TSelfUpdate)
		MergeFrom(*source);
	}
}

void TSelfUpdate::MergeFrom(const TSelfUpdate &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TSelfUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.handle().size() > 0) {
		_internal_set_handle(from._internal_handle());
	}
	if (from.fullname().size() > 0) {
		_internal_set_fullname(from._internal_fullname());
	}
	if (from.timezone().size() > 0) {
		_internal_set_timezone(from._internal_timezone());
	}
	if (from.location().size() > 0) {
		_internal_set_location(from._internal_location());
	}
	if (from.lang().size() > 0) {
		_internal_set_lang(from._internal_lang());
	}
	if (from.metadata().size() > 0) {
		_internal_set_metadata(from._internal_metadata());
	}
	if (from.avatar_url().size() > 0) {
		_internal_set_avatar_url(from._internal_avatar_url());
	}
}

void TSelfUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TSelfUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TSelfUpdate::CopyFrom(const TSelfUpdate &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TSelfUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TSelfUpdate::IsInitialized() const {
	return true;
}

void TSelfUpdate::InternalSwap(TSelfUpdate *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	handle_.Swap(&other->handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	fullname_.Swap(&other->fullname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TSelfUpdate::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TUsersFetch_UsersFetch::_Internal {
public:
};

TUsersFetch_UsersFetch::TUsersFetch_UsersFetch(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TUsersFetch.UsersFetch)
}
TUsersFetch_UsersFetch::TUsersFetch_UsersFetch(const TUsersFetch_UsersFetch &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kUserId: {
			_internal_set_user_id(from._internal_user_id());
			break;
		}
		case kHandle: {
			_internal_set_handle(from._internal_handle());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TUsersFetch.UsersFetch)
}

void TUsersFetch_UsersFetch::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TUsersFetch_UsersFetch_api_2eproto.base);
	clear_has_id();
}

TUsersFetch_UsersFetch::~TUsersFetch_UsersFetch() {
	// @@protoc_insertion_point(destructor:server.TUsersFetch.UsersFetch)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TUsersFetch_UsersFetch::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TUsersFetch_UsersFetch::ArenaDtor(void *object) {
	TUsersFetch_UsersFetch *_this = reinterpret_cast<TUsersFetch_UsersFetch *>(object);
	(void)_this;
}
void TUsersFetch_UsersFetch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TUsersFetch_UsersFetch::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TUsersFetch_UsersFetch &TUsersFetch_UsersFetch::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TUsersFetch_UsersFetch_api_2eproto.base);
	return *internal_default_instance();
}

void TUsersFetch_UsersFetch::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TUsersFetch.UsersFetch)
	switch (id_case()) {
		case kUserId: {
			id_.user_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kHandle: {
			id_.handle_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TUsersFetch_UsersFetch::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TUsersFetch.UsersFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TUsersFetch_UsersFetch::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string user_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUsersFetch.UsersFetch.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string handle = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_handle();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TUsersFetch.UsersFetch.handle"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TUsersFetch_UsersFetch::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TUsersFetch.UsersFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string user_id = 1;
	if (_internal_has_user_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUsersFetch.UsersFetch.user_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_user_id(), target);
	}

	// string handle = 2;
	if (_internal_has_handle()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TUsersFetch.UsersFetch.handle");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_handle(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TUsersFetch.UsersFetch)
	return target;
}

size_t TUsersFetch_UsersFetch::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TUsersFetch.UsersFetch)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// string user_id = 1;
		case kUserId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_user_id());
			break;
		}
		// string handle = 2;
		case kHandle: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_handle());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TUsersFetch_UsersFetch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TUsersFetch.UsersFetch)
	GOOGLE_DCHECK_NE(&from, this);
	const TUsersFetch_UsersFetch *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TUsersFetch_UsersFetch>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUsersFetch.UsersFetch)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUsersFetch.UsersFetch)
		MergeFrom(*source);
	}
}

void TUsersFetch_UsersFetch::MergeFrom(const TUsersFetch_UsersFetch &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TUsersFetch.UsersFetch)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kUserId: {
			_internal_set_user_id(from._internal_user_id());
			break;
		}
		case kHandle: {
			_internal_set_handle(from._internal_handle());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TUsersFetch_UsersFetch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TUsersFetch.UsersFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TUsersFetch_UsersFetch::CopyFrom(const TUsersFetch_UsersFetch &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TUsersFetch.UsersFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TUsersFetch_UsersFetch::IsInitialized() const {
	return true;
}

void TUsersFetch_UsersFetch::InternalSwap(TUsersFetch_UsersFetch *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TUsersFetch_UsersFetch::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TUsersFetch::_Internal {
public:
};

TUsersFetch::TUsersFetch(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		users_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TUsersFetch)
}
TUsersFetch::TUsersFetch(const TUsersFetch &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		users_(from.users_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TUsersFetch)
}

void TUsersFetch::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TUsersFetch_api_2eproto.base);
}

TUsersFetch::~TUsersFetch() {
	// @@protoc_insertion_point(destructor:server.TUsersFetch)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TUsersFetch::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TUsersFetch::ArenaDtor(void *object) {
	TUsersFetch *_this = reinterpret_cast<TUsersFetch *>(object);
	(void)_this;
}
void TUsersFetch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TUsersFetch::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TUsersFetch &TUsersFetch::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TUsersFetch_api_2eproto.base);
	return *internal_default_instance();
}

void TUsersFetch::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TUsersFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	users_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TUsersFetch::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TUsersFetch.UsersFetch users = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_users(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TUsersFetch::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TUsersFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TUsersFetch.UsersFetch users = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_users_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_users(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TUsersFetch)
	return target;
}

size_t TUsersFetch::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TUsersFetch)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TUsersFetch.UsersFetch users = 1;
	total_size += 1UL * this->_internal_users_size();
	for (const auto &msg : this->users_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TUsersFetch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TUsersFetch)
	GOOGLE_DCHECK_NE(&from, this);
	const TUsersFetch *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TUsersFetch>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUsersFetch)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUsersFetch)
		MergeFrom(*source);
	}
}

void TUsersFetch::MergeFrom(const TUsersFetch &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TUsersFetch)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	users_.MergeFrom(from.users_);
}

void TUsersFetch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TUsersFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TUsersFetch::CopyFrom(const TUsersFetch &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TUsersFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TUsersFetch::IsInitialized() const {
	return true;
}

void TUsersFetch::InternalSwap(TUsersFetch *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TUsersFetch::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TUsers::_Internal {
public:
};

TUsers::TUsers(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		users_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TUsers)
}
TUsers::TUsers(const TUsers &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		users_(from.users_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TUsers)
}

void TUsers::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TUsers_api_2eproto.base);
}

TUsers::~TUsers() {
	// @@protoc_insertion_point(destructor:server.TUsers)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TUsers::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TUsers::ArenaDtor(void *object) {
	TUsers *_this = reinterpret_cast<TUsers *>(object);
	(void)_this;
}
void TUsers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TUsers::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TUsers &TUsers::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TUsers_api_2eproto.base);
	return *internal_default_instance();
}

void TUsers::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TUsers)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	users_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TUsers::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.User users = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_users(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TUsers::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TUsers)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.User users = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_users_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_users(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TUsers)
	return target;
}

size_t TUsers::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TUsers)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.User users = 1;
	total_size += 1UL * this->_internal_users_size();
	for (const auto &msg : this->users_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TUsers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TUsers)
	GOOGLE_DCHECK_NE(&from, this);
	const TUsers *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TUsers>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TUsers)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TUsers)
		MergeFrom(*source);
	}
}

void TUsers::MergeFrom(const TUsers &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TUsers)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	users_.MergeFrom(from.users_);
}

void TUsers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TUsers)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TUsers::CopyFrom(const TUsers &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TUsers)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TUsers::IsInitialized() const {
	return true;
}

void TUsers::InternalSwap(TUsers *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TUsers::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Friend::_Internal {
public:
	static const ::server::User &user(const Friend *msg);
};

const ::server::User &
Friend::_Internal::user(const Friend *msg) {
	return *msg->user_;
}
Friend::Friend(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Friend)
}
Friend::Friend(const Friend &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	if (from._internal_has_user()) {
		user_ = new ::server::User(*from.user_);
	} else {
		user_ = nullptr;
	}
	state_ = from.state_;
	// @@protoc_insertion_point(copy_constructor:server.Friend)
}

void Friend::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Friend_api_2eproto.base);
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&user_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&state_) - reinterpret_cast<char *>(&user_)) + sizeof(state_));
}

Friend::~Friend() {
	// @@protoc_insertion_point(destructor:server.Friend)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Friend::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (this != internal_default_instance())
		delete user_;
}

void Friend::ArenaDtor(void *object) {
	Friend *_this = reinterpret_cast<Friend *>(object);
	(void)_this;
}
void Friend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Friend::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Friend &Friend::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Friend_api_2eproto.base);
	return *internal_default_instance();
}

void Friend::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Friend)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (GetArena() == nullptr && user_ != nullptr) {
		delete user_;
	}
	user_ = nullptr;
	state_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Friend::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.User user = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 state = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Friend::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Friend)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.User user = 1;
	if (this->has_user()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::user(this), target, stream);
	}

	// int64 state = 2;
	if (this->state() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_state(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Friend)
	return target;
}

size_t Friend::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Friend)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// .server.User user = 1;
	if (this->has_user()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*user_);
	}

	// int64 state = 2;
	if (this->state() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_state());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Friend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Friend)
	GOOGLE_DCHECK_NE(&from, this);
	const Friend *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Friend>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Friend)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Friend)
		MergeFrom(*source);
	}
}

void Friend::MergeFrom(const Friend &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Friend)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.has_user()) {
		_internal_mutable_user()->::server::User::MergeFrom(from._internal_user());
	}
	if (from.state() != 0) {
		_internal_set_state(from._internal_state());
	}
}

void Friend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Friend)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Friend::CopyFrom(const Friend &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Friend)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Friend::IsInitialized() const {
	return true;
}

void Friend::InternalSwap(Friend *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(Friend, state_) + sizeof(Friend::state_) - PROTOBUF_FIELD_OFFSET(Friend, user_)>(
			reinterpret_cast<char *>(&user_),
			reinterpret_cast<char *>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Friend::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TFriendsAdd_FriendsAdd::_Internal {
public:
};

TFriendsAdd_FriendsAdd::TFriendsAdd_FriendsAdd(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TFriendsAdd.FriendsAdd)
}
TFriendsAdd_FriendsAdd::TFriendsAdd_FriendsAdd(const TFriendsAdd_FriendsAdd &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kUserId: {
			_internal_set_user_id(from._internal_user_id());
			break;
		}
		case kHandle: {
			_internal_set_handle(from._internal_handle());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TFriendsAdd.FriendsAdd)
}

void TFriendsAdd_FriendsAdd::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFriendsAdd_FriendsAdd_api_2eproto.base);
	clear_has_id();
}

TFriendsAdd_FriendsAdd::~TFriendsAdd_FriendsAdd() {
	// @@protoc_insertion_point(destructor:server.TFriendsAdd.FriendsAdd)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFriendsAdd_FriendsAdd::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TFriendsAdd_FriendsAdd::ArenaDtor(void *object) {
	TFriendsAdd_FriendsAdd *_this = reinterpret_cast<TFriendsAdd_FriendsAdd *>(object);
	(void)_this;
}
void TFriendsAdd_FriendsAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TFriendsAdd_FriendsAdd::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TFriendsAdd_FriendsAdd &TFriendsAdd_FriendsAdd::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFriendsAdd_FriendsAdd_api_2eproto.base);
	return *internal_default_instance();
}

void TFriendsAdd_FriendsAdd::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TFriendsAdd.FriendsAdd)
	switch (id_case()) {
		case kUserId: {
			id_.user_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kHandle: {
			id_.handle_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TFriendsAdd_FriendsAdd::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TFriendsAdd.FriendsAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TFriendsAdd_FriendsAdd::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string user_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TFriendsAdd.FriendsAdd.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string handle = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_handle();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TFriendsAdd.FriendsAdd.handle"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TFriendsAdd_FriendsAdd::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TFriendsAdd.FriendsAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string user_id = 1;
	if (_internal_has_user_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TFriendsAdd.FriendsAdd.user_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_user_id(), target);
	}

	// string handle = 2;
	if (_internal_has_handle()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TFriendsAdd.FriendsAdd.handle");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_handle(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TFriendsAdd.FriendsAdd)
	return target;
}

size_t TFriendsAdd_FriendsAdd::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TFriendsAdd.FriendsAdd)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// string user_id = 1;
		case kUserId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_user_id());
			break;
		}
		// string handle = 2;
		case kHandle: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_handle());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TFriendsAdd_FriendsAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsAdd.FriendsAdd)
	GOOGLE_DCHECK_NE(&from, this);
	const TFriendsAdd_FriendsAdd *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFriendsAdd_FriendsAdd>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsAdd.FriendsAdd)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsAdd.FriendsAdd)
		MergeFrom(*source);
	}
}

void TFriendsAdd_FriendsAdd::MergeFrom(const TFriendsAdd_FriendsAdd &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsAdd.FriendsAdd)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kUserId: {
			_internal_set_user_id(from._internal_user_id());
			break;
		}
		case kHandle: {
			_internal_set_handle(from._internal_handle());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TFriendsAdd_FriendsAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsAdd.FriendsAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TFriendsAdd_FriendsAdd::CopyFrom(const TFriendsAdd_FriendsAdd &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsAdd.FriendsAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TFriendsAdd_FriendsAdd::IsInitialized() const {
	return true;
}

void TFriendsAdd_FriendsAdd::InternalSwap(TFriendsAdd_FriendsAdd *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFriendsAdd_FriendsAdd::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TFriendsAdd::_Internal {
public:
};

TFriendsAdd::TFriendsAdd(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		friends_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TFriendsAdd)
}
TFriendsAdd::TFriendsAdd(const TFriendsAdd &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		friends_(from.friends_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TFriendsAdd)
}

void TFriendsAdd::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFriendsAdd_api_2eproto.base);
}

TFriendsAdd::~TFriendsAdd() {
	// @@protoc_insertion_point(destructor:server.TFriendsAdd)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFriendsAdd::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TFriendsAdd::ArenaDtor(void *object) {
	TFriendsAdd *_this = reinterpret_cast<TFriendsAdd *>(object);
	(void)_this;
}
void TFriendsAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TFriendsAdd::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TFriendsAdd &TFriendsAdd::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFriendsAdd_api_2eproto.base);
	return *internal_default_instance();
}

void TFriendsAdd::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TFriendsAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	friends_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TFriendsAdd::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TFriendsAdd.FriendsAdd friends = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TFriendsAdd::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TFriendsAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TFriendsAdd.FriendsAdd friends = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_friends_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_friends(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TFriendsAdd)
	return target;
}

size_t TFriendsAdd::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TFriendsAdd)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TFriendsAdd.FriendsAdd friends = 1;
	total_size += 1UL * this->_internal_friends_size();
	for (const auto &msg : this->friends_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TFriendsAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsAdd)
	GOOGLE_DCHECK_NE(&from, this);
	const TFriendsAdd *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFriendsAdd>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsAdd)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsAdd)
		MergeFrom(*source);
	}
}

void TFriendsAdd::MergeFrom(const TFriendsAdd &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsAdd)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	friends_.MergeFrom(from.friends_);
}

void TFriendsAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TFriendsAdd::CopyFrom(const TFriendsAdd &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TFriendsAdd::IsInitialized() const {
	return true;
}

void TFriendsAdd::InternalSwap(TFriendsAdd *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	friends_.InternalSwap(&other->friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFriendsAdd::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TFriendsRemove::_Internal {
public:
};

TFriendsRemove::TFriendsRemove(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		user_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TFriendsRemove)
}
TFriendsRemove::TFriendsRemove(const TFriendsRemove &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		user_ids_(from.user_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TFriendsRemove)
}

void TFriendsRemove::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFriendsRemove_api_2eproto.base);
}

TFriendsRemove::~TFriendsRemove() {
	// @@protoc_insertion_point(destructor:server.TFriendsRemove)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFriendsRemove::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TFriendsRemove::ArenaDtor(void *object) {
	TFriendsRemove *_this = reinterpret_cast<TFriendsRemove *>(object);
	(void)_this;
}
void TFriendsRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TFriendsRemove::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TFriendsRemove &TFriendsRemove::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFriendsRemove_api_2eproto.base);
	return *internal_default_instance();
}

void TFriendsRemove::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TFriendsRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	user_ids_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TFriendsRemove::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string user_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_user_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TFriendsRemove.user_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TFriendsRemove::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TFriendsRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string user_ids = 1;
	for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
		const auto &s = this->_internal_user_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TFriendsRemove.user_ids");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TFriendsRemove)
	return target;
}

size_t TFriendsRemove::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TFriendsRemove)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string user_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
	for (int i = 0, n = user_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				user_ids_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TFriendsRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsRemove)
	GOOGLE_DCHECK_NE(&from, this);
	const TFriendsRemove *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFriendsRemove>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsRemove)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsRemove)
		MergeFrom(*source);
	}
}

void TFriendsRemove::MergeFrom(const TFriendsRemove &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsRemove)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	user_ids_.MergeFrom(from.user_ids_);
}

void TFriendsRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TFriendsRemove::CopyFrom(const TFriendsRemove &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TFriendsRemove::IsInitialized() const {
	return true;
}

void TFriendsRemove::InternalSwap(TFriendsRemove *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	user_ids_.InternalSwap(&other->user_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFriendsRemove::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TFriendsBlock::_Internal {
public:
};

TFriendsBlock::TFriendsBlock(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		user_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TFriendsBlock)
}
TFriendsBlock::TFriendsBlock(const TFriendsBlock &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		user_ids_(from.user_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TFriendsBlock)
}

void TFriendsBlock::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFriendsBlock_api_2eproto.base);
}

TFriendsBlock::~TFriendsBlock() {
	// @@protoc_insertion_point(destructor:server.TFriendsBlock)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFriendsBlock::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TFriendsBlock::ArenaDtor(void *object) {
	TFriendsBlock *_this = reinterpret_cast<TFriendsBlock *>(object);
	(void)_this;
}
void TFriendsBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TFriendsBlock::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TFriendsBlock &TFriendsBlock::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFriendsBlock_api_2eproto.base);
	return *internal_default_instance();
}

void TFriendsBlock::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TFriendsBlock)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	user_ids_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TFriendsBlock::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string user_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_user_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TFriendsBlock.user_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TFriendsBlock::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TFriendsBlock)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string user_ids = 1;
	for (int i = 0, n = this->_internal_user_ids_size(); i < n; i++) {
		const auto &s = this->_internal_user_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TFriendsBlock.user_ids");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TFriendsBlock)
	return target;
}

size_t TFriendsBlock::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TFriendsBlock)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string user_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(user_ids_.size());
	for (int i = 0, n = user_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				user_ids_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TFriendsBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsBlock)
	GOOGLE_DCHECK_NE(&from, this);
	const TFriendsBlock *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFriendsBlock>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsBlock)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsBlock)
		MergeFrom(*source);
	}
}

void TFriendsBlock::MergeFrom(const TFriendsBlock &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsBlock)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	user_ids_.MergeFrom(from.user_ids_);
}

void TFriendsBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsBlock)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TFriendsBlock::CopyFrom(const TFriendsBlock &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsBlock)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TFriendsBlock::IsInitialized() const {
	return true;
}

void TFriendsBlock::InternalSwap(TFriendsBlock *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	user_ids_.InternalSwap(&other->user_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFriendsBlock::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TFriendsList::_Internal {
public:
};

TFriendsList::TFriendsList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TFriendsList)
}
TFriendsList::TFriendsList(const TFriendsList &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TFriendsList)
}

void TFriendsList::SharedCtor() {
}

TFriendsList::~TFriendsList() {
	// @@protoc_insertion_point(destructor:server.TFriendsList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFriendsList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TFriendsList::ArenaDtor(void *object) {
	TFriendsList *_this = reinterpret_cast<TFriendsList *>(object);
	(void)_this;
}
void TFriendsList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TFriendsList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TFriendsList &TFriendsList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFriendsList_api_2eproto.base);
	return *internal_default_instance();
}

void TFriendsList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TFriendsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TFriendsList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		if ((tag & 7) == 4 || tag == 0) {
			ctx->SetLastTag(tag);
			goto success;
		}
		ptr = UnknownFieldParse(tag,
				_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
				ptr, ctx);
		CHK_(ptr != nullptr);
		continue;
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TFriendsList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TFriendsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TFriendsList)
	return target;
}

size_t TFriendsList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TFriendsList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TFriendsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TFriendsList)
	GOOGLE_DCHECK_NE(&from, this);
	const TFriendsList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFriendsList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriendsList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriendsList)
		MergeFrom(*source);
	}
}

void TFriendsList::MergeFrom(const TFriendsList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriendsList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;
}

void TFriendsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TFriendsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TFriendsList::CopyFrom(const TFriendsList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriendsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TFriendsList::IsInitialized() const {
	return true;
}

void TFriendsList::InternalSwap(TFriendsList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFriendsList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TFriends::_Internal {
public:
};

TFriends::TFriends(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		friends_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TFriends)
}
TFriends::TFriends(const TFriends &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		friends_(from.friends_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TFriends)
}

void TFriends::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TFriends_api_2eproto.base);
}

TFriends::~TFriends() {
	// @@protoc_insertion_point(destructor:server.TFriends)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TFriends::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TFriends::ArenaDtor(void *object) {
	TFriends *_this = reinterpret_cast<TFriends *>(object);
	(void)_this;
}
void TFriends::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TFriends::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TFriends &TFriends::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TFriends_api_2eproto.base);
	return *internal_default_instance();
}

void TFriends::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TFriends)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	friends_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TFriends::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.Friend friends = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TFriends::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TFriends)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.Friend friends = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_friends_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_friends(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TFriends)
	return target;
}

size_t TFriends::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TFriends)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.Friend friends = 1;
	total_size += 1UL * this->_internal_friends_size();
	for (const auto &msg : this->friends_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TFriends::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TFriends)
	GOOGLE_DCHECK_NE(&from, this);
	const TFriends *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TFriends>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TFriends)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TFriends)
		MergeFrom(*source);
	}
}

void TFriends::MergeFrom(const TFriends &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TFriends)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	friends_.MergeFrom(from.friends_);
}

void TFriends::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TFriends)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TFriends::CopyFrom(const TFriends &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TFriends)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TFriends::IsInitialized() const {
	return true;
}

void TFriends::InternalSwap(TFriends *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	friends_.InternalSwap(&other->friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TFriends::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Group::_Internal {
public:
};

Group::Group(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Group)
}
Group::Group(const Group &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_id().empty()) {
		id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
				GetArena());
	}
	creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_creator_id().empty()) {
		creator_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_creator_id(),
				GetArena());
	}
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_name().empty()) {
		name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
				GetArena());
	}
	description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_description().empty()) {
		description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
				GetArena());
	}
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_avatar_url().empty()) {
		avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
				GetArena());
	}
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_lang().empty()) {
		lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lang(),
				GetArena());
	}
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_metadata().empty()) {
		metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata(),
				GetArena());
	}
	::memcpy(&utc_offset_ms_, &from.utc_offset_ms_,
			static_cast<size_t>(reinterpret_cast<char *>(&private__) -
					reinterpret_cast<char *>(&utc_offset_ms_)) +
					sizeof(private__));
	// @@protoc_insertion_point(copy_constructor:server.Group)
}

void Group::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Group_api_2eproto.base);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	creator_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&utc_offset_ms_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&private__) - reinterpret_cast<char *>(&utc_offset_ms_)) + sizeof(private__));
}

Group::~Group() {
	// @@protoc_insertion_point(destructor:server.Group)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Group::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	creator_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Group::ArenaDtor(void *object) {
	Group *_this = reinterpret_cast<Group *>(object);
	(void)_this;
}
void Group::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Group::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Group &Group::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Group_api_2eproto.base);
	return *internal_default_instance();
}

void Group::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Group)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	creator_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&utc_offset_ms_, 0, static_cast<size_t>(reinterpret_cast<char *>(&private__) - reinterpret_cast<char *>(&utc_offset_ms_)) + sizeof(private__));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Group::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Group.id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool private = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string creator_id = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_creator_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Group.creator_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string name = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_name();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Group.name"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string description = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_description();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Group.description"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string avatar_url = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_avatar_url();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Group.avatar_url"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string lang = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_lang();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Group.lang"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 utc_offset_ms = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
					utc_offset_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string metadata = 9;
			case 9:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
					auto str = _internal_mutable_metadata();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Group.metadata"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 count = 10;
			case 10:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
					count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 created_at = 11;
			case 11:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
					created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 updated_at = 12;
			case 12:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
					updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Group::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Group)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Group.id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_id(), target);
	}

	// bool private = 2;
	if (this->private_() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_private_(), target);
	}

	// string creator_id = 3;
	if (this->creator_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_creator_id().data(), static_cast<int>(this->_internal_creator_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Group.creator_id");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_creator_id(), target);
	}

	// string name = 4;
	if (this->name().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Group.name");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_name(), target);
	}

	// string description = 5;
	if (this->description().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Group.description");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_description(), target);
	}

	// string avatar_url = 6;
	if (this->avatar_url().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Group.avatar_url");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_avatar_url(), target);
	}

	// string lang = 7;
	if (this->lang().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Group.lang");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_lang(), target);
	}

	// int64 utc_offset_ms = 8;
	if (this->utc_offset_ms() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_utc_offset_ms(), target);
	}

	// string metadata = 9;
	if (this->metadata().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Group.metadata");
		target = stream->WriteStringMaybeAliased(
				9, this->_internal_metadata(), target);
	}

	// int64 count = 10;
	if (this->count() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_count(), target);
	}

	// int64 created_at = 11;
	if (this->created_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_created_at(), target);
	}

	// int64 updated_at = 12;
	if (this->updated_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_updated_at(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Group)
	return target;
}

size_t Group::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Group)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_id());
	}

	// string creator_id = 3;
	if (this->creator_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_creator_id());
	}

	// string name = 4;
	if (this->name().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_name());
	}

	// string description = 5;
	if (this->description().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_description());
	}

	// string avatar_url = 6;
	if (this->avatar_url().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_avatar_url());
	}

	// string lang = 7;
	if (this->lang().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_lang());
	}

	// string metadata = 9;
	if (this->metadata().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_metadata());
	}

	// int64 utc_offset_ms = 8;
	if (this->utc_offset_ms() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_utc_offset_ms());
	}

	// int64 count = 10;
	if (this->count() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_count());
	}

	// int64 created_at = 11;
	if (this->created_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_created_at());
	}

	// int64 updated_at = 12;
	if (this->updated_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_updated_at());
	}

	// bool private = 2;
	if (this->private_() != 0) {
		total_size += 1 + 1;
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Group::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Group)
	GOOGLE_DCHECK_NE(&from, this);
	const Group *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Group>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Group)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Group)
		MergeFrom(*source);
	}
}

void Group::MergeFrom(const Group &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Group)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.id().size() > 0) {
		_internal_set_id(from._internal_id());
	}
	if (from.creator_id().size() > 0) {
		_internal_set_creator_id(from._internal_creator_id());
	}
	if (from.name().size() > 0) {
		_internal_set_name(from._internal_name());
	}
	if (from.description().size() > 0) {
		_internal_set_description(from._internal_description());
	}
	if (from.avatar_url().size() > 0) {
		_internal_set_avatar_url(from._internal_avatar_url());
	}
	if (from.lang().size() > 0) {
		_internal_set_lang(from._internal_lang());
	}
	if (from.metadata().size() > 0) {
		_internal_set_metadata(from._internal_metadata());
	}
	if (from.utc_offset_ms() != 0) {
		_internal_set_utc_offset_ms(from._internal_utc_offset_ms());
	}
	if (from.count() != 0) {
		_internal_set_count(from._internal_count());
	}
	if (from.created_at() != 0) {
		_internal_set_created_at(from._internal_created_at());
	}
	if (from.updated_at() != 0) {
		_internal_set_updated_at(from._internal_updated_at());
	}
	if (from.private_() != 0) {
		_internal_set_private_(from._internal_private_());
	}
}

void Group::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Group)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Group::CopyFrom(const Group &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Group)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Group::IsInitialized() const {
	return true;
}

void Group::InternalSwap(Group *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	creator_id_.Swap(&other->creator_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(Group, private__) + sizeof(Group::private__) - PROTOBUF_FIELD_OFFSET(Group, utc_offset_ms_)>(
			reinterpret_cast<char *>(&utc_offset_ms_),
			reinterpret_cast<char *>(&other->utc_offset_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Group::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsCreate_GroupCreate::_Internal {
public:
};

TGroupsCreate_GroupCreate::TGroupsCreate_GroupCreate(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsCreate.GroupCreate)
}
TGroupsCreate_GroupCreate::TGroupsCreate_GroupCreate(const TGroupsCreate_GroupCreate &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_name().empty()) {
		name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
				GetArena());
	}
	description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_description().empty()) {
		description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
				GetArena());
	}
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_avatar_url().empty()) {
		avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
				GetArena());
	}
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_lang().empty()) {
		lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lang(),
				GetArena());
	}
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_metadata().empty()) {
		metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata(),
				GetArena());
	}
	private__ = from.private__;
	// @@protoc_insertion_point(copy_constructor:server.TGroupsCreate.GroupCreate)
}

void TGroupsCreate_GroupCreate::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsCreate_GroupCreate_api_2eproto.base);
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	private__ = false;
}

TGroupsCreate_GroupCreate::~TGroupsCreate_GroupCreate() {
	// @@protoc_insertion_point(destructor:server.TGroupsCreate.GroupCreate)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsCreate_GroupCreate::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TGroupsCreate_GroupCreate::ArenaDtor(void *object) {
	TGroupsCreate_GroupCreate *_this = reinterpret_cast<TGroupsCreate_GroupCreate *>(object);
	(void)_this;
}
void TGroupsCreate_GroupCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsCreate_GroupCreate::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsCreate_GroupCreate &TGroupsCreate_GroupCreate::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsCreate_GroupCreate_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsCreate_GroupCreate::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsCreate.GroupCreate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	private__ = false;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsCreate_GroupCreate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string name = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_name();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsCreate.GroupCreate.name"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string description = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_description();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsCreate.GroupCreate.description"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string avatar_url = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_avatar_url();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsCreate.GroupCreate.avatar_url"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string lang = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_lang();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsCreate.GroupCreate.lang"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string metadata = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_metadata();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsCreate.GroupCreate.metadata"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool private = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
					private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsCreate_GroupCreate::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsCreate.GroupCreate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string name = 1;
	if (this->name().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsCreate.GroupCreate.name");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_name(), target);
	}

	// string description = 2;
	if (this->description().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsCreate.GroupCreate.description");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_description(), target);
	}

	// string avatar_url = 3;
	if (this->avatar_url().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsCreate.GroupCreate.avatar_url");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_avatar_url(), target);
	}

	// string lang = 4;
	if (this->lang().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsCreate.GroupCreate.lang");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_lang(), target);
	}

	// string metadata = 5;
	if (this->metadata().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsCreate.GroupCreate.metadata");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_metadata(), target);
	}

	// bool private = 6;
	if (this->private_() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_private_(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsCreate.GroupCreate)
	return target;
}

size_t TGroupsCreate_GroupCreate::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsCreate.GroupCreate)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string name = 1;
	if (this->name().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_name());
	}

	// string description = 2;
	if (this->description().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_description());
	}

	// string avatar_url = 3;
	if (this->avatar_url().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_avatar_url());
	}

	// string lang = 4;
	if (this->lang().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_lang());
	}

	// string metadata = 5;
	if (this->metadata().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_metadata());
	}

	// bool private = 6;
	if (this->private_() != 0) {
		total_size += 1 + 1;
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsCreate_GroupCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsCreate.GroupCreate)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsCreate_GroupCreate *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsCreate_GroupCreate>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsCreate.GroupCreate)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsCreate.GroupCreate)
		MergeFrom(*source);
	}
}

void TGroupsCreate_GroupCreate::MergeFrom(const TGroupsCreate_GroupCreate &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsCreate.GroupCreate)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.name().size() > 0) {
		_internal_set_name(from._internal_name());
	}
	if (from.description().size() > 0) {
		_internal_set_description(from._internal_description());
	}
	if (from.avatar_url().size() > 0) {
		_internal_set_avatar_url(from._internal_avatar_url());
	}
	if (from.lang().size() > 0) {
		_internal_set_lang(from._internal_lang());
	}
	if (from.metadata().size() > 0) {
		_internal_set_metadata(from._internal_metadata());
	}
	if (from.private_() != 0) {
		_internal_set_private_(from._internal_private_());
	}
}

void TGroupsCreate_GroupCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsCreate.GroupCreate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsCreate_GroupCreate::CopyFrom(const TGroupsCreate_GroupCreate &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsCreate.GroupCreate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsCreate_GroupCreate::IsInitialized() const {
	return true;
}

void TGroupsCreate_GroupCreate::InternalSwap(TGroupsCreate_GroupCreate *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(private__, other->private__);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsCreate_GroupCreate::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsCreate::_Internal {
public:
};

TGroupsCreate::TGroupsCreate(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		groups_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsCreate)
}
TGroupsCreate::TGroupsCreate(const TGroupsCreate &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		groups_(from.groups_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupsCreate)
}

void TGroupsCreate::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsCreate_api_2eproto.base);
}

TGroupsCreate::~TGroupsCreate() {
	// @@protoc_insertion_point(destructor:server.TGroupsCreate)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsCreate::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupsCreate::ArenaDtor(void *object) {
	TGroupsCreate *_this = reinterpret_cast<TGroupsCreate *>(object);
	(void)_this;
}
void TGroupsCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsCreate::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsCreate &TGroupsCreate::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsCreate_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsCreate::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsCreate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	groups_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsCreate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TGroupsCreate.GroupCreate groups = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsCreate::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsCreate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TGroupsCreate.GroupCreate groups = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_groups_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_groups(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsCreate)
	return target;
}

size_t TGroupsCreate::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsCreate)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TGroupsCreate.GroupCreate groups = 1;
	total_size += 1UL * this->_internal_groups_size();
	for (const auto &msg : this->groups_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsCreate)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsCreate *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsCreate>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsCreate)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsCreate)
		MergeFrom(*source);
	}
}

void TGroupsCreate::MergeFrom(const TGroupsCreate &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsCreate)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	groups_.MergeFrom(from.groups_);
}

void TGroupsCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsCreate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsCreate::CopyFrom(const TGroupsCreate &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsCreate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsCreate::IsInitialized() const {
	return true;
}

void TGroupsCreate::InternalSwap(TGroupsCreate *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsCreate::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsUpdate_GroupUpdate::_Internal {
public:
};

TGroupsUpdate_GroupUpdate::TGroupsUpdate_GroupUpdate(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsUpdate.GroupUpdate)
}
TGroupsUpdate_GroupUpdate::TGroupsUpdate_GroupUpdate(const TGroupsUpdate_GroupUpdate &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_group_id().empty()) {
		group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
				GetArena());
	}
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_name().empty()) {
		name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
				GetArena());
	}
	description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_description().empty()) {
		description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
				GetArena());
	}
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_avatar_url().empty()) {
		avatar_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar_url(),
				GetArena());
	}
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_lang().empty()) {
		lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lang(),
				GetArena());
	}
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_metadata().empty()) {
		metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata(),
				GetArena());
	}
	private__ = from.private__;
	// @@protoc_insertion_point(copy_constructor:server.TGroupsUpdate.GroupUpdate)
}

void TGroupsUpdate_GroupUpdate::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsUpdate_GroupUpdate_api_2eproto.base);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	private__ = false;
}

TGroupsUpdate_GroupUpdate::~TGroupsUpdate_GroupUpdate() {
	// @@protoc_insertion_point(destructor:server.TGroupsUpdate.GroupUpdate)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsUpdate_GroupUpdate::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	avatar_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TGroupsUpdate_GroupUpdate::ArenaDtor(void *object) {
	TGroupsUpdate_GroupUpdate *_this = reinterpret_cast<TGroupsUpdate_GroupUpdate *>(object);
	(void)_this;
}
void TGroupsUpdate_GroupUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsUpdate_GroupUpdate::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsUpdate_GroupUpdate &TGroupsUpdate_GroupUpdate::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsUpdate_GroupUpdate_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsUpdate_GroupUpdate::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsUpdate.GroupUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	private__ = false;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsUpdate_GroupUpdate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string group_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsUpdate.GroupUpdate.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool private = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string name = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_name();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsUpdate.GroupUpdate.name"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string description = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_description();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsUpdate.GroupUpdate.description"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string avatar_url = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_avatar_url();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsUpdate.GroupUpdate.avatar_url"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string lang = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_lang();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsUpdate.GroupUpdate.lang"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string metadata = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_metadata();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsUpdate.GroupUpdate.metadata"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsUpdate_GroupUpdate::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsUpdate.GroupUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsUpdate.GroupUpdate.group_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_group_id(), target);
	}

	// bool private = 2;
	if (this->private_() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_private_(), target);
	}

	// string name = 3;
	if (this->name().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsUpdate.GroupUpdate.name");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_name(), target);
	}

	// string description = 4;
	if (this->description().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsUpdate.GroupUpdate.description");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_description(), target);
	}

	// string avatar_url = 5;
	if (this->avatar_url().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_avatar_url().data(), static_cast<int>(this->_internal_avatar_url().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsUpdate.GroupUpdate.avatar_url");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_avatar_url(), target);
	}

	// string lang = 6;
	if (this->lang().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsUpdate.GroupUpdate.lang");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_lang(), target);
	}

	// string metadata = 7;
	if (this->metadata().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsUpdate.GroupUpdate.metadata");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_metadata(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsUpdate.GroupUpdate)
	return target;
}

size_t TGroupsUpdate_GroupUpdate::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsUpdate.GroupUpdate)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_group_id());
	}

	// string name = 3;
	if (this->name().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_name());
	}

	// string description = 4;
	if (this->description().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_description());
	}

	// string avatar_url = 5;
	if (this->avatar_url().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_avatar_url());
	}

	// string lang = 6;
	if (this->lang().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_lang());
	}

	// string metadata = 7;
	if (this->metadata().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_metadata());
	}

	// bool private = 2;
	if (this->private_() != 0) {
		total_size += 1 + 1;
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsUpdate_GroupUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsUpdate.GroupUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsUpdate_GroupUpdate *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsUpdate_GroupUpdate>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsUpdate.GroupUpdate)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsUpdate.GroupUpdate)
		MergeFrom(*source);
	}
}

void TGroupsUpdate_GroupUpdate::MergeFrom(const TGroupsUpdate_GroupUpdate &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsUpdate.GroupUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.group_id().size() > 0) {
		_internal_set_group_id(from._internal_group_id());
	}
	if (from.name().size() > 0) {
		_internal_set_name(from._internal_name());
	}
	if (from.description().size() > 0) {
		_internal_set_description(from._internal_description());
	}
	if (from.avatar_url().size() > 0) {
		_internal_set_avatar_url(from._internal_avatar_url());
	}
	if (from.lang().size() > 0) {
		_internal_set_lang(from._internal_lang());
	}
	if (from.metadata().size() > 0) {
		_internal_set_metadata(from._internal_metadata());
	}
	if (from.private_() != 0) {
		_internal_set_private_(from._internal_private_());
	}
}

void TGroupsUpdate_GroupUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsUpdate.GroupUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsUpdate_GroupUpdate::CopyFrom(const TGroupsUpdate_GroupUpdate &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsUpdate.GroupUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsUpdate_GroupUpdate::IsInitialized() const {
	return true;
}

void TGroupsUpdate_GroupUpdate::InternalSwap(TGroupsUpdate_GroupUpdate *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	avatar_url_.Swap(&other->avatar_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(private__, other->private__);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsUpdate_GroupUpdate::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsUpdate::_Internal {
public:
};

TGroupsUpdate::TGroupsUpdate(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		groups_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsUpdate)
}
TGroupsUpdate::TGroupsUpdate(const TGroupsUpdate &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		groups_(from.groups_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupsUpdate)
}

void TGroupsUpdate::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsUpdate_api_2eproto.base);
}

TGroupsUpdate::~TGroupsUpdate() {
	// @@protoc_insertion_point(destructor:server.TGroupsUpdate)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsUpdate::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupsUpdate::ArenaDtor(void *object) {
	TGroupsUpdate *_this = reinterpret_cast<TGroupsUpdate *>(object);
	(void)_this;
}
void TGroupsUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsUpdate::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsUpdate &TGroupsUpdate::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsUpdate_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsUpdate::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	groups_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsUpdate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsUpdate::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_groups_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_groups(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsUpdate)
	return target;
}

size_t TGroupsUpdate::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsUpdate)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TGroupsUpdate.GroupUpdate groups = 1;
	total_size += 1UL * this->_internal_groups_size();
	for (const auto &msg : this->groups_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsUpdate *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsUpdate>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsUpdate)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsUpdate)
		MergeFrom(*source);
	}
}

void TGroupsUpdate::MergeFrom(const TGroupsUpdate &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	groups_.MergeFrom(from.groups_);
}

void TGroupsUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsUpdate::CopyFrom(const TGroupsUpdate &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsUpdate::IsInitialized() const {
	return true;
}

void TGroupsUpdate::InternalSwap(TGroupsUpdate *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsUpdate::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsRemove::_Internal {
public:
};

TGroupsRemove::TGroupsRemove(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		group_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsRemove)
}
TGroupsRemove::TGroupsRemove(const TGroupsRemove &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		group_ids_(from.group_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupsRemove)
}

void TGroupsRemove::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsRemove_api_2eproto.base);
}

TGroupsRemove::~TGroupsRemove() {
	// @@protoc_insertion_point(destructor:server.TGroupsRemove)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsRemove::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupsRemove::ArenaDtor(void *object) {
	TGroupsRemove *_this = reinterpret_cast<TGroupsRemove *>(object);
	(void)_this;
}
void TGroupsRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsRemove::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsRemove &TGroupsRemove::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsRemove_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsRemove::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_ids_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsRemove::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string group_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_group_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsRemove.group_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsRemove::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string group_ids = 1;
	for (int i = 0, n = this->_internal_group_ids_size(); i < n; i++) {
		const auto &s = this->_internal_group_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsRemove.group_ids");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsRemove)
	return target;
}

size_t TGroupsRemove::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsRemove)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string group_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_ids_.size());
	for (int i = 0, n = group_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				group_ids_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsRemove)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsRemove *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsRemove>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsRemove)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsRemove)
		MergeFrom(*source);
	}
}

void TGroupsRemove::MergeFrom(const TGroupsRemove &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsRemove)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	group_ids_.MergeFrom(from.group_ids_);
}

void TGroupsRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsRemove::CopyFrom(const TGroupsRemove &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsRemove::IsInitialized() const {
	return true;
}

void TGroupsRemove::InternalSwap(TGroupsRemove *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_ids_.InternalSwap(&other->group_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsRemove::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsSelfList::_Internal {
public:
};

TGroupsSelfList::TGroupsSelfList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsSelfList)
}
TGroupsSelfList::TGroupsSelfList(const TGroupsSelfList &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupsSelfList)
}

void TGroupsSelfList::SharedCtor() {
}

TGroupsSelfList::~TGroupsSelfList() {
	// @@protoc_insertion_point(destructor:server.TGroupsSelfList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsSelfList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupsSelfList::ArenaDtor(void *object) {
	TGroupsSelfList *_this = reinterpret_cast<TGroupsSelfList *>(object);
	(void)_this;
}
void TGroupsSelfList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsSelfList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsSelfList &TGroupsSelfList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsSelfList_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsSelfList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsSelfList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsSelfList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		if ((tag & 7) == 4 || tag == 0) {
			ctx->SetLastTag(tag);
			goto success;
		}
		ptr = UnknownFieldParse(tag,
				_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
				ptr, ctx);
		CHK_(ptr != nullptr);
		continue;
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsSelfList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsSelfList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsSelfList)
	return target;
}

size_t TGroupsSelfList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsSelfList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsSelfList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsSelfList)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsSelfList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsSelfList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsSelfList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsSelfList)
		MergeFrom(*source);
	}
}

void TGroupsSelfList::MergeFrom(const TGroupsSelfList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsSelfList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;
}

void TGroupsSelfList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsSelfList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsSelfList::CopyFrom(const TGroupsSelfList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsSelfList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsSelfList::IsInitialized() const {
	return true;
}

void TGroupsSelfList::InternalSwap(TGroupsSelfList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsSelfList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsFetch_GroupFetch::_Internal {
public:
};

TGroupsFetch_GroupFetch::TGroupsFetch_GroupFetch(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsFetch.GroupFetch)
}
TGroupsFetch_GroupFetch::TGroupsFetch_GroupFetch(const TGroupsFetch_GroupFetch &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kGroupId: {
			_internal_set_group_id(from._internal_group_id());
			break;
		}
		case kName: {
			_internal_set_name(from._internal_name());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TGroupsFetch.GroupFetch)
}

void TGroupsFetch_GroupFetch::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsFetch_GroupFetch_api_2eproto.base);
	clear_has_id();
}

TGroupsFetch_GroupFetch::~TGroupsFetch_GroupFetch() {
	// @@protoc_insertion_point(destructor:server.TGroupsFetch.GroupFetch)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsFetch_GroupFetch::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TGroupsFetch_GroupFetch::ArenaDtor(void *object) {
	TGroupsFetch_GroupFetch *_this = reinterpret_cast<TGroupsFetch_GroupFetch *>(object);
	(void)_this;
}
void TGroupsFetch_GroupFetch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsFetch_GroupFetch::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsFetch_GroupFetch &TGroupsFetch_GroupFetch::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsFetch_GroupFetch_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsFetch_GroupFetch::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TGroupsFetch.GroupFetch)
	switch (id_case()) {
		case kGroupId: {
			id_.group_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kName: {
			id_.name_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TGroupsFetch_GroupFetch::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsFetch.GroupFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsFetch_GroupFetch::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string group_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsFetch.GroupFetch.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string name = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_name();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsFetch.GroupFetch.name"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsFetch_GroupFetch::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsFetch.GroupFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string group_id = 1;
	if (_internal_has_group_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsFetch.GroupFetch.group_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_group_id(), target);
	}

	// string name = 2;
	if (_internal_has_name()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsFetch.GroupFetch.name");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_name(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsFetch.GroupFetch)
	return target;
}

size_t TGroupsFetch_GroupFetch::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsFetch.GroupFetch)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// string group_id = 1;
		case kGroupId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_group_id());
			break;
		}
		// string name = 2;
		case kName: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_name());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsFetch_GroupFetch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsFetch.GroupFetch)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsFetch_GroupFetch *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsFetch_GroupFetch>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsFetch.GroupFetch)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsFetch.GroupFetch)
		MergeFrom(*source);
	}
}

void TGroupsFetch_GroupFetch::MergeFrom(const TGroupsFetch_GroupFetch &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsFetch.GroupFetch)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kGroupId: {
			_internal_set_group_id(from._internal_group_id());
			break;
		}
		case kName: {
			_internal_set_name(from._internal_name());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TGroupsFetch_GroupFetch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsFetch.GroupFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsFetch_GroupFetch::CopyFrom(const TGroupsFetch_GroupFetch &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsFetch.GroupFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsFetch_GroupFetch::IsInitialized() const {
	return true;
}

void TGroupsFetch_GroupFetch::InternalSwap(TGroupsFetch_GroupFetch *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsFetch_GroupFetch::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsFetch::_Internal {
public:
};

TGroupsFetch::TGroupsFetch(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		groups_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsFetch)
}
TGroupsFetch::TGroupsFetch(const TGroupsFetch &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		groups_(from.groups_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupsFetch)
}

void TGroupsFetch::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsFetch_api_2eproto.base);
}

TGroupsFetch::~TGroupsFetch() {
	// @@protoc_insertion_point(destructor:server.TGroupsFetch)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsFetch::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupsFetch::ArenaDtor(void *object) {
	TGroupsFetch *_this = reinterpret_cast<TGroupsFetch *>(object);
	(void)_this;
}
void TGroupsFetch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsFetch::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsFetch &TGroupsFetch::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsFetch_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsFetch::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	groups_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsFetch::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TGroupsFetch.GroupFetch groups = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsFetch::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TGroupsFetch.GroupFetch groups = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_groups_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_groups(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsFetch)
	return target;
}

size_t TGroupsFetch::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsFetch)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TGroupsFetch.GroupFetch groups = 1;
	total_size += 1UL * this->_internal_groups_size();
	for (const auto &msg : this->groups_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsFetch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsFetch)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsFetch *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsFetch>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsFetch)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsFetch)
		MergeFrom(*source);
	}
}

void TGroupsFetch::MergeFrom(const TGroupsFetch &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsFetch)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	groups_.MergeFrom(from.groups_);
}

void TGroupsFetch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsFetch::CopyFrom(const TGroupsFetch &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsFetch::IsInitialized() const {
	return true;
}

void TGroupsFetch::InternalSwap(TGroupsFetch *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	groups_.InternalSwap(&other->groups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsFetch::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsList::_Internal {
public:
};

TGroupsList::TGroupsList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsList)
}
TGroupsList::TGroupsList(const TGroupsList &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	::memcpy(&page_limit_, &from.page_limit_,
			static_cast<size_t>(reinterpret_cast<char *>(&order_by_asc_) -
					reinterpret_cast<char *>(&page_limit_)) +
					sizeof(order_by_asc_));
	clear_has_filter();
	switch (from.filter_case()) {
		case kLang: {
			_internal_set_lang(from._internal_lang());
			break;
		}
		case kCreatedAt: {
			_internal_set_created_at(from._internal_created_at());
			break;
		}
		case kCount: {
			_internal_set_count(from._internal_count());
			break;
		}
		case FILTER_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TGroupsList)
}

void TGroupsList::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsList_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&page_limit_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&order_by_asc_) - reinterpret_cast<char *>(&page_limit_)) + sizeof(order_by_asc_));
	clear_has_filter();
}

TGroupsList::~TGroupsList() {
	// @@protoc_insertion_point(destructor:server.TGroupsList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_filter()) {
		clear_filter();
	}
}

void TGroupsList::ArenaDtor(void *object) {
	TGroupsList *_this = reinterpret_cast<TGroupsList *>(object);
	(void)_this;
}
void TGroupsList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsList &TGroupsList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsList_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsList::clear_filter() {
	// @@protoc_insertion_point(one_of_clear_start:server.TGroupsList)
	switch (filter_case()) {
		case kLang: {
			filter_.lang_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kCreatedAt: {
			// No need to clear
			break;
		}
		case kCount: {
			// No need to clear
			break;
		}
		case FILTER_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = FILTER_NOT_SET;
}

void TGroupsList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&page_limit_, 0, static_cast<size_t>(reinterpret_cast<char *>(&order_by_asc_) - reinterpret_cast<char *>(&page_limit_)) + sizeof(order_by_asc_));
	clear_filter();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int64 page_limit = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					page_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool order_by_asc = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					order_by_asc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string lang = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_lang();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsList.lang"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 created_at = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
					_internal_set_created_at(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 count = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
					_internal_set_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string cursor = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsList.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int64 page_limit = 1;
	if (this->page_limit() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_page_limit(), target);
	}

	// bool order_by_asc = 2;
	if (this->order_by_asc() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_order_by_asc(), target);
	}

	// string lang = 3;
	if (_internal_has_lang()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsList.lang");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_lang(), target);
	}

	// int64 created_at = 4;
	if (_internal_has_created_at()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_created_at(), target);
	}

	// int64 count = 5;
	if (_internal_has_count()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_count(), target);
	}

	// string cursor = 7;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsList.cursor");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsList)
	return target;
}

size_t TGroupsList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string cursor = 7;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	// int64 page_limit = 1;
	if (this->page_limit() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_page_limit());
	}

	// bool order_by_asc = 2;
	if (this->order_by_asc() != 0) {
		total_size += 1 + 1;
	}

	switch (filter_case()) {
		// string lang = 3;
		case kLang: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_lang());
			break;
		}
		// int64 created_at = 4;
		case kCreatedAt: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
							this->_internal_created_at());
			break;
		}
		// int64 count = 5;
		case kCount: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
							this->_internal_count());
			break;
		}
		case FILTER_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsList)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsList)
		MergeFrom(*source);
	}
}

void TGroupsList::MergeFrom(const TGroupsList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
	if (from.page_limit() != 0) {
		_internal_set_page_limit(from._internal_page_limit());
	}
	if (from.order_by_asc() != 0) {
		_internal_set_order_by_asc(from._internal_order_by_asc());
	}
	switch (from.filter_case()) {
		case kLang: {
			_internal_set_lang(from._internal_lang());
			break;
		}
		case kCreatedAt: {
			_internal_set_created_at(from._internal_created_at());
			break;
		}
		case kCount: {
			_internal_set_count(from._internal_count());
			break;
		}
		case FILTER_NOT_SET: {
			break;
		}
	}
}

void TGroupsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsList::CopyFrom(const TGroupsList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsList::IsInitialized() const {
	return true;
}

void TGroupsList::InternalSwap(TGroupsList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TGroupsList, order_by_asc_) + sizeof(TGroupsList::order_by_asc_) - PROTOBUF_FIELD_OFFSET(TGroupsList, page_limit_)>(
			reinterpret_cast<char *>(&page_limit_),
			reinterpret_cast<char *>(&other->page_limit_));
	swap(filter_, other->filter_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroups::_Internal {
public:
};

TGroups::TGroups(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		groups_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroups)
}
TGroups::TGroups(const TGroups &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		groups_(from.groups_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TGroups)
}

void TGroups::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroups_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TGroups::~TGroups() {
	// @@protoc_insertion_point(destructor:server.TGroups)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroups::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TGroups::ArenaDtor(void *object) {
	TGroups *_this = reinterpret_cast<TGroups *>(object);
	(void)_this;
}
void TGroups::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroups::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroups &TGroups::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroups_api_2eproto.base);
	return *internal_default_instance();
}

void TGroups::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroups)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	groups_.Clear();
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroups::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.Group groups = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			// string cursor = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroups.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroups::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroups)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.Group groups = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_groups_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_groups(i), target, stream);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroups.cursor");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroups)
	return target;
}

size_t TGroups::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroups)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.Group groups = 1;
	total_size += 1UL * this->_internal_groups_size();
	for (const auto &msg : this->groups_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroups::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroups)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroups *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroups>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroups)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroups)
		MergeFrom(*source);
	}
}

void TGroups::MergeFrom(const TGroups &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroups)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	groups_.MergeFrom(from.groups_);
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
}

void TGroups::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroups)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroups::CopyFrom(const TGroups &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroups)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroups::IsInitialized() const {
	return true;
}

void TGroups::InternalSwap(TGroups *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	groups_.InternalSwap(&other->groups_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroups::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsSelf_GroupSelf::_Internal {
public:
	static const ::server::Group &group(const TGroupsSelf_GroupSelf *msg);
};

const ::server::Group &
TGroupsSelf_GroupSelf::_Internal::group(const TGroupsSelf_GroupSelf *msg) {
	return *msg->group_;
}
TGroupsSelf_GroupSelf::TGroupsSelf_GroupSelf(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsSelf.GroupSelf)
}
TGroupsSelf_GroupSelf::TGroupsSelf_GroupSelf(const TGroupsSelf_GroupSelf &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	if (from._internal_has_group()) {
		group_ = new ::server::Group(*from.group_);
	} else {
		group_ = nullptr;
	}
	state_ = from.state_;
	// @@protoc_insertion_point(copy_constructor:server.TGroupsSelf.GroupSelf)
}

void TGroupsSelf_GroupSelf::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsSelf_GroupSelf_api_2eproto.base);
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&group_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&state_) - reinterpret_cast<char *>(&group_)) + sizeof(state_));
}

TGroupsSelf_GroupSelf::~TGroupsSelf_GroupSelf() {
	// @@protoc_insertion_point(destructor:server.TGroupsSelf.GroupSelf)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsSelf_GroupSelf::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (this != internal_default_instance())
		delete group_;
}

void TGroupsSelf_GroupSelf::ArenaDtor(void *object) {
	TGroupsSelf_GroupSelf *_this = reinterpret_cast<TGroupsSelf_GroupSelf *>(object);
	(void)_this;
}
void TGroupsSelf_GroupSelf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsSelf_GroupSelf::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsSelf_GroupSelf &TGroupsSelf_GroupSelf::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsSelf_GroupSelf_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsSelf_GroupSelf::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsSelf.GroupSelf)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (GetArena() == nullptr && group_ != nullptr) {
		delete group_;
	}
	group_ = nullptr;
	state_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsSelf_GroupSelf::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.Group group = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 state = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsSelf_GroupSelf::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsSelf.GroupSelf)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.Group group = 1;
	if (this->has_group()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::group(this), target, stream);
	}

	// int64 state = 2;
	if (this->state() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_state(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsSelf.GroupSelf)
	return target;
}

size_t TGroupsSelf_GroupSelf::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsSelf.GroupSelf)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// .server.Group group = 1;
	if (this->has_group()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*group_);
	}

	// int64 state = 2;
	if (this->state() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_state());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsSelf_GroupSelf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsSelf.GroupSelf)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsSelf_GroupSelf *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsSelf_GroupSelf>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsSelf.GroupSelf)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsSelf.GroupSelf)
		MergeFrom(*source);
	}
}

void TGroupsSelf_GroupSelf::MergeFrom(const TGroupsSelf_GroupSelf &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsSelf.GroupSelf)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.has_group()) {
		_internal_mutable_group()->::server::Group::MergeFrom(from._internal_group());
	}
	if (from.state() != 0) {
		_internal_set_state(from._internal_state());
	}
}

void TGroupsSelf_GroupSelf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsSelf.GroupSelf)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsSelf_GroupSelf::CopyFrom(const TGroupsSelf_GroupSelf &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsSelf.GroupSelf)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsSelf_GroupSelf::IsInitialized() const {
	return true;
}

void TGroupsSelf_GroupSelf::InternalSwap(TGroupsSelf_GroupSelf *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TGroupsSelf_GroupSelf, state_) + sizeof(TGroupsSelf_GroupSelf::state_) - PROTOBUF_FIELD_OFFSET(TGroupsSelf_GroupSelf, group_)>(
			reinterpret_cast<char *>(&group_),
			reinterpret_cast<char *>(&other->group_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsSelf_GroupSelf::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsSelf::_Internal {
public:
};

TGroupsSelf::TGroupsSelf(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		groups_self_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsSelf)
}
TGroupsSelf::TGroupsSelf(const TGroupsSelf &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		groups_self_(from.groups_self_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupsSelf)
}

void TGroupsSelf::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsSelf_api_2eproto.base);
}

TGroupsSelf::~TGroupsSelf() {
	// @@protoc_insertion_point(destructor:server.TGroupsSelf)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsSelf::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupsSelf::ArenaDtor(void *object) {
	TGroupsSelf *_this = reinterpret_cast<TGroupsSelf *>(object);
	(void)_this;
}
void TGroupsSelf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsSelf::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsSelf &TGroupsSelf::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsSelf_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsSelf::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsSelf)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	groups_self_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsSelf::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_groups_self(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsSelf::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsSelf)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_groups_self_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_groups_self(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsSelf)
	return target;
}

size_t TGroupsSelf::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsSelf)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TGroupsSelf.GroupSelf groups_self = 1;
	total_size += 1UL * this->_internal_groups_self_size();
	for (const auto &msg : this->groups_self_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsSelf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsSelf)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsSelf *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsSelf>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsSelf)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsSelf)
		MergeFrom(*source);
	}
}

void TGroupsSelf::MergeFrom(const TGroupsSelf &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsSelf)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	groups_self_.MergeFrom(from.groups_self_);
}

void TGroupsSelf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsSelf)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsSelf::CopyFrom(const TGroupsSelf &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsSelf)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsSelf::IsInitialized() const {
	return true;
}

void TGroupsSelf::InternalSwap(TGroupsSelf *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	groups_self_.InternalSwap(&other->groups_self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsSelf::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class GroupUser::_Internal {
public:
	static const ::server::User &user(const GroupUser *msg);
};

const ::server::User &
GroupUser::_Internal::user(const GroupUser *msg) {
	return *msg->user_;
}
GroupUser::GroupUser(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.GroupUser)
}
GroupUser::GroupUser(const GroupUser &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	if (from._internal_has_user()) {
		user_ = new ::server::User(*from.user_);
	} else {
		user_ = nullptr;
	}
	state_ = from.state_;
	// @@protoc_insertion_point(copy_constructor:server.GroupUser)
}

void GroupUser::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroupUser_api_2eproto.base);
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&user_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&state_) - reinterpret_cast<char *>(&user_)) + sizeof(state_));
}

GroupUser::~GroupUser() {
	// @@protoc_insertion_point(destructor:server.GroupUser)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupUser::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (this != internal_default_instance())
		delete user_;
}

void GroupUser::ArenaDtor(void *object) {
	GroupUser *_this = reinterpret_cast<GroupUser *>(object);
	(void)_this;
}
void GroupUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void GroupUser::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const GroupUser &GroupUser::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroupUser_api_2eproto.base);
	return *internal_default_instance();
}

void GroupUser::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.GroupUser)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (GetArena() == nullptr && user_ != nullptr) {
		delete user_;
	}
	user_ = nullptr;
	state_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *GroupUser::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.User user = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 state = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *GroupUser::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.GroupUser)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.User user = 1;
	if (this->has_user()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::user(this), target, stream);
	}

	// int64 state = 2;
	if (this->state() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_state(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.GroupUser)
	return target;
}

size_t GroupUser::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.GroupUser)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// .server.User user = 1;
	if (this->has_user()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*user_);
	}

	// int64 state = 2;
	if (this->state() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_state());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void GroupUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.GroupUser)
	GOOGLE_DCHECK_NE(&from, this);
	const GroupUser *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupUser>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.GroupUser)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.GroupUser)
		MergeFrom(*source);
	}
}

void GroupUser::MergeFrom(const GroupUser &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.GroupUser)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.has_user()) {
		_internal_mutable_user()->::server::User::MergeFrom(from._internal_user());
	}
	if (from.state() != 0) {
		_internal_set_state(from._internal_state());
	}
}

void GroupUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.GroupUser)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void GroupUser::CopyFrom(const GroupUser &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.GroupUser)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool GroupUser::IsInitialized() const {
	return true;
}

void GroupUser::InternalSwap(GroupUser *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(GroupUser, state_) + sizeof(GroupUser::state_) - PROTOBUF_FIELD_OFFSET(GroupUser, user_)>(
			reinterpret_cast<char *>(&user_),
			reinterpret_cast<char *>(&other->user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupUser::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupUsersList::_Internal {
public:
};

TGroupUsersList::TGroupUsersList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupUsersList)
}
TGroupUsersList::TGroupUsersList(const TGroupUsersList &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_group_id().empty()) {
		group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TGroupUsersList)
}

void TGroupUsersList::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupUsersList_api_2eproto.base);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TGroupUsersList::~TGroupUsersList() {
	// @@protoc_insertion_point(destructor:server.TGroupUsersList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupUsersList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersList::ArenaDtor(void *object) {
	TGroupUsersList *_this = reinterpret_cast<TGroupUsersList *>(object);
	(void)_this;
}
void TGroupUsersList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupUsersList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupUsersList &TGroupUsersList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupUsersList_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupUsersList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupUsersList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupUsersList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string group_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupUsersList.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupUsersList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupUsersList.group_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_group_id(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersList)
	return target;
}

size_t TGroupUsersList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_group_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupUsersList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersList)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupUsersList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupUsersList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersList)
		MergeFrom(*source);
	}
}

void TGroupUsersList::MergeFrom(const TGroupUsersList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.group_id().size() > 0) {
		_internal_set_group_id(from._internal_group_id());
	}
}

void TGroupUsersList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupUsersList::CopyFrom(const TGroupUsersList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupUsersList::IsInitialized() const {
	return true;
}

void TGroupUsersList::InternalSwap(TGroupUsersList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupUsersList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupUsers::_Internal {
public:
};

TGroupUsers::TGroupUsers(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		users_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupUsers)
}
TGroupUsers::TGroupUsers(const TGroupUsers &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		users_(from.users_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupUsers)
}

void TGroupUsers::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupUsers_api_2eproto.base);
}

TGroupUsers::~TGroupUsers() {
	// @@protoc_insertion_point(destructor:server.TGroupUsers)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupUsers::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupUsers::ArenaDtor(void *object) {
	TGroupUsers *_this = reinterpret_cast<TGroupUsers *>(object);
	(void)_this;
}
void TGroupUsers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupUsers::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupUsers &TGroupUsers::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupUsers_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupUsers::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupUsers)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	users_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupUsers::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.GroupUser users = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_users(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupUsers::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsers)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.GroupUser users = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_users_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_users(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsers)
	return target;
}

size_t TGroupUsers::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsers)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.GroupUser users = 1;
	total_size += 1UL * this->_internal_users_size();
	for (const auto &msg : this->users_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupUsers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsers)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupUsers *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupUsers>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsers)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsers)
		MergeFrom(*source);
	}
}

void TGroupUsers::MergeFrom(const TGroupUsers &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsers)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	users_.MergeFrom(from.users_);
}

void TGroupUsers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsers)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupUsers::CopyFrom(const TGroupUsers &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsers)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupUsers::IsInitialized() const {
	return true;
}

void TGroupUsers::InternalSwap(TGroupUsers *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	users_.InternalSwap(&other->users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupUsers::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsJoin::_Internal {
public:
};

TGroupsJoin::TGroupsJoin(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		group_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsJoin)
}
TGroupsJoin::TGroupsJoin(const TGroupsJoin &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		group_ids_(from.group_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupsJoin)
}

void TGroupsJoin::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsJoin_api_2eproto.base);
}

TGroupsJoin::~TGroupsJoin() {
	// @@protoc_insertion_point(destructor:server.TGroupsJoin)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsJoin::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupsJoin::ArenaDtor(void *object) {
	TGroupsJoin *_this = reinterpret_cast<TGroupsJoin *>(object);
	(void)_this;
}
void TGroupsJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsJoin::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsJoin &TGroupsJoin::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsJoin_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsJoin::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_ids_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsJoin::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string group_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_group_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsJoin.group_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsJoin::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string group_ids = 1;
	for (int i = 0, n = this->_internal_group_ids_size(); i < n; i++) {
		const auto &s = this->_internal_group_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsJoin.group_ids");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsJoin)
	return target;
}

size_t TGroupsJoin::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsJoin)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string group_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_ids_.size());
	for (int i = 0, n = group_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				group_ids_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsJoin)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsJoin *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsJoin>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsJoin)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsJoin)
		MergeFrom(*source);
	}
}

void TGroupsJoin::MergeFrom(const TGroupsJoin &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsJoin)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	group_ids_.MergeFrom(from.group_ids_);
}

void TGroupsJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsJoin::CopyFrom(const TGroupsJoin &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsJoin::IsInitialized() const {
	return true;
}

void TGroupsJoin::InternalSwap(TGroupsJoin *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_ids_.InternalSwap(&other->group_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsJoin::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupsLeave::_Internal {
public:
};

TGroupsLeave::TGroupsLeave(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		group_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupsLeave)
}
TGroupsLeave::TGroupsLeave(const TGroupsLeave &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		group_ids_(from.group_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupsLeave)
}

void TGroupsLeave::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupsLeave_api_2eproto.base);
}

TGroupsLeave::~TGroupsLeave() {
	// @@protoc_insertion_point(destructor:server.TGroupsLeave)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupsLeave::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupsLeave::ArenaDtor(void *object) {
	TGroupsLeave *_this = reinterpret_cast<TGroupsLeave *>(object);
	(void)_this;
}
void TGroupsLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupsLeave::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupsLeave &TGroupsLeave::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupsLeave_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupsLeave::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupsLeave)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_ids_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupsLeave::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string group_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_group_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupsLeave.group_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupsLeave::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupsLeave)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string group_ids = 1;
	for (int i = 0, n = this->_internal_group_ids_size(); i < n; i++) {
		const auto &s = this->_internal_group_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupsLeave.group_ids");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupsLeave)
	return target;
}

size_t TGroupsLeave::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupsLeave)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string group_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_ids_.size());
	for (int i = 0, n = group_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				group_ids_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupsLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupsLeave)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupsLeave *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupsLeave>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupsLeave)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupsLeave)
		MergeFrom(*source);
	}
}

void TGroupsLeave::MergeFrom(const TGroupsLeave &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupsLeave)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	group_ids_.MergeFrom(from.group_ids_);
}

void TGroupsLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupsLeave)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupsLeave::CopyFrom(const TGroupsLeave &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupsLeave)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupsLeave::IsInitialized() const {
	return true;
}

void TGroupsLeave::InternalSwap(TGroupsLeave *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_ids_.InternalSwap(&other->group_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupsLeave::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupUsersAdd_GroupUserAdd::_Internal {
public:
};

TGroupUsersAdd_GroupUserAdd::TGroupUsersAdd_GroupUserAdd(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupUsersAdd.GroupUserAdd)
}
TGroupUsersAdd_GroupUserAdd::TGroupUsersAdd_GroupUserAdd(const TGroupUsersAdd_GroupUserAdd &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_group_id().empty()) {
		group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
				GetArena());
	}
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TGroupUsersAdd.GroupUserAdd)
}

void TGroupUsersAdd_GroupUserAdd::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupUsersAdd_GroupUserAdd_api_2eproto.base);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TGroupUsersAdd_GroupUserAdd::~TGroupUsersAdd_GroupUserAdd() {
	// @@protoc_insertion_point(destructor:server.TGroupUsersAdd.GroupUserAdd)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupUsersAdd_GroupUserAdd::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersAdd_GroupUserAdd::ArenaDtor(void *object) {
	TGroupUsersAdd_GroupUserAdd *_this = reinterpret_cast<TGroupUsersAdd_GroupUserAdd *>(object);
	(void)_this;
}
void TGroupUsersAdd_GroupUserAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupUsersAdd_GroupUserAdd::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupUsersAdd_GroupUserAdd &TGroupUsersAdd_GroupUserAdd::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupUsersAdd_GroupUserAdd_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupUsersAdd_GroupUserAdd::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupUsersAdd.GroupUserAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupUsersAdd_GroupUserAdd::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string group_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupUsersAdd.GroupUserAdd.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string user_id = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupUsersAdd.GroupUserAdd.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupUsersAdd_GroupUserAdd::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersAdd.GroupUserAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupUsersAdd.GroupUserAdd.group_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_group_id(), target);
	}

	// string user_id = 2;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupUsersAdd.GroupUserAdd.user_id");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_user_id(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersAdd.GroupUserAdd)
	return target;
}

size_t TGroupUsersAdd_GroupUserAdd::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersAdd.GroupUserAdd)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_group_id());
	}

	// string user_id = 2;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupUsersAdd_GroupUserAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersAdd.GroupUserAdd)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupUsersAdd_GroupUserAdd *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupUsersAdd_GroupUserAdd>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersAdd.GroupUserAdd)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersAdd.GroupUserAdd)
		MergeFrom(*source);
	}
}

void TGroupUsersAdd_GroupUserAdd::MergeFrom(const TGroupUsersAdd_GroupUserAdd &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersAdd.GroupUserAdd)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.group_id().size() > 0) {
		_internal_set_group_id(from._internal_group_id());
	}
	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
}

void TGroupUsersAdd_GroupUserAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersAdd.GroupUserAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupUsersAdd_GroupUserAdd::CopyFrom(const TGroupUsersAdd_GroupUserAdd &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersAdd.GroupUserAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupUsersAdd_GroupUserAdd::IsInitialized() const {
	return true;
}

void TGroupUsersAdd_GroupUserAdd::InternalSwap(TGroupUsersAdd_GroupUserAdd *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupUsersAdd_GroupUserAdd::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupUsersAdd::_Internal {
public:
};

TGroupUsersAdd::TGroupUsersAdd(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		group_users_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupUsersAdd)
}
TGroupUsersAdd::TGroupUsersAdd(const TGroupUsersAdd &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		group_users_(from.group_users_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupUsersAdd)
}

void TGroupUsersAdd::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupUsersAdd_api_2eproto.base);
}

TGroupUsersAdd::~TGroupUsersAdd() {
	// @@protoc_insertion_point(destructor:server.TGroupUsersAdd)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupUsersAdd::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupUsersAdd::ArenaDtor(void *object) {
	TGroupUsersAdd *_this = reinterpret_cast<TGroupUsersAdd *>(object);
	(void)_this;
}
void TGroupUsersAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupUsersAdd::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupUsersAdd &TGroupUsersAdd::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupUsersAdd_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupUsersAdd::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupUsersAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_users_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupUsersAdd::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_group_users(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupUsersAdd::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_group_users_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_group_users(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersAdd)
	return target;
}

size_t TGroupUsersAdd::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersAdd)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TGroupUsersAdd.GroupUserAdd group_users = 1;
	total_size += 1UL * this->_internal_group_users_size();
	for (const auto &msg : this->group_users_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupUsersAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersAdd)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupUsersAdd *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupUsersAdd>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersAdd)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersAdd)
		MergeFrom(*source);
	}
}

void TGroupUsersAdd::MergeFrom(const TGroupUsersAdd &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersAdd)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	group_users_.MergeFrom(from.group_users_);
}

void TGroupUsersAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupUsersAdd::CopyFrom(const TGroupUsersAdd &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupUsersAdd::IsInitialized() const {
	return true;
}

void TGroupUsersAdd::InternalSwap(TGroupUsersAdd *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_users_.InternalSwap(&other->group_users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupUsersAdd::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupUsersKick_GroupUserKick::_Internal {
public:
};

TGroupUsersKick_GroupUserKick::TGroupUsersKick_GroupUserKick(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupUsersKick.GroupUserKick)
}
TGroupUsersKick_GroupUserKick::TGroupUsersKick_GroupUserKick(const TGroupUsersKick_GroupUserKick &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_group_id().empty()) {
		group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
				GetArena());
	}
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TGroupUsersKick.GroupUserKick)
}

void TGroupUsersKick_GroupUserKick::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupUsersKick_GroupUserKick_api_2eproto.base);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TGroupUsersKick_GroupUserKick::~TGroupUsersKick_GroupUserKick() {
	// @@protoc_insertion_point(destructor:server.TGroupUsersKick.GroupUserKick)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupUsersKick_GroupUserKick::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersKick_GroupUserKick::ArenaDtor(void *object) {
	TGroupUsersKick_GroupUserKick *_this = reinterpret_cast<TGroupUsersKick_GroupUserKick *>(object);
	(void)_this;
}
void TGroupUsersKick_GroupUserKick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupUsersKick_GroupUserKick::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupUsersKick_GroupUserKick &TGroupUsersKick_GroupUserKick::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupUsersKick_GroupUserKick_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupUsersKick_GroupUserKick::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupUsersKick.GroupUserKick)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupUsersKick_GroupUserKick::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string group_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupUsersKick.GroupUserKick.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string user_id = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupUsersKick.GroupUserKick.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupUsersKick_GroupUserKick::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersKick.GroupUserKick)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupUsersKick.GroupUserKick.group_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_group_id(), target);
	}

	// string user_id = 2;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupUsersKick.GroupUserKick.user_id");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_user_id(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersKick.GroupUserKick)
	return target;
}

size_t TGroupUsersKick_GroupUserKick::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersKick.GroupUserKick)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_group_id());
	}

	// string user_id = 2;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupUsersKick_GroupUserKick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersKick.GroupUserKick)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupUsersKick_GroupUserKick *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupUsersKick_GroupUserKick>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersKick.GroupUserKick)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersKick.GroupUserKick)
		MergeFrom(*source);
	}
}

void TGroupUsersKick_GroupUserKick::MergeFrom(const TGroupUsersKick_GroupUserKick &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersKick.GroupUserKick)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.group_id().size() > 0) {
		_internal_set_group_id(from._internal_group_id());
	}
	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
}

void TGroupUsersKick_GroupUserKick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersKick.GroupUserKick)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupUsersKick_GroupUserKick::CopyFrom(const TGroupUsersKick_GroupUserKick &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersKick.GroupUserKick)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupUsersKick_GroupUserKick::IsInitialized() const {
	return true;
}

void TGroupUsersKick_GroupUserKick::InternalSwap(TGroupUsersKick_GroupUserKick *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupUsersKick_GroupUserKick::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupUsersKick::_Internal {
public:
};

TGroupUsersKick::TGroupUsersKick(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		group_users_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupUsersKick)
}
TGroupUsersKick::TGroupUsersKick(const TGroupUsersKick &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		group_users_(from.group_users_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupUsersKick)
}

void TGroupUsersKick::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupUsersKick_api_2eproto.base);
}

TGroupUsersKick::~TGroupUsersKick() {
	// @@protoc_insertion_point(destructor:server.TGroupUsersKick)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupUsersKick::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupUsersKick::ArenaDtor(void *object) {
	TGroupUsersKick *_this = reinterpret_cast<TGroupUsersKick *>(object);
	(void)_this;
}
void TGroupUsersKick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupUsersKick::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupUsersKick &TGroupUsersKick::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupUsersKick_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupUsersKick::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupUsersKick)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_users_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupUsersKick::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_group_users(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupUsersKick::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersKick)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_group_users_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_group_users(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersKick)
	return target;
}

size_t TGroupUsersKick::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersKick)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TGroupUsersKick.GroupUserKick group_users = 1;
	total_size += 1UL * this->_internal_group_users_size();
	for (const auto &msg : this->group_users_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupUsersKick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersKick)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupUsersKick *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupUsersKick>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersKick)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersKick)
		MergeFrom(*source);
	}
}

void TGroupUsersKick::MergeFrom(const TGroupUsersKick &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersKick)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	group_users_.MergeFrom(from.group_users_);
}

void TGroupUsersKick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersKick)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupUsersKick::CopyFrom(const TGroupUsersKick &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersKick)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupUsersKick::IsInitialized() const {
	return true;
}

void TGroupUsersKick::InternalSwap(TGroupUsersKick *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_users_.InternalSwap(&other->group_users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupUsersKick::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupUsersPromote_GroupUserPromote::_Internal {
public:
};

TGroupUsersPromote_GroupUserPromote::TGroupUsersPromote_GroupUserPromote(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupUsersPromote.GroupUserPromote)
}
TGroupUsersPromote_GroupUserPromote::TGroupUsersPromote_GroupUserPromote(const TGroupUsersPromote_GroupUserPromote &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_group_id().empty()) {
		group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_group_id(),
				GetArena());
	}
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TGroupUsersPromote.GroupUserPromote)
}

void TGroupUsersPromote_GroupUserPromote::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupUsersPromote_GroupUserPromote_api_2eproto.base);
	group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TGroupUsersPromote_GroupUserPromote::~TGroupUsersPromote_GroupUserPromote() {
	// @@protoc_insertion_point(destructor:server.TGroupUsersPromote.GroupUserPromote)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupUsersPromote_GroupUserPromote::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TGroupUsersPromote_GroupUserPromote::ArenaDtor(void *object) {
	TGroupUsersPromote_GroupUserPromote *_this = reinterpret_cast<TGroupUsersPromote_GroupUserPromote *>(object);
	(void)_this;
}
void TGroupUsersPromote_GroupUserPromote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupUsersPromote_GroupUserPromote::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupUsersPromote_GroupUserPromote &TGroupUsersPromote_GroupUserPromote::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupUsersPromote_GroupUserPromote_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupUsersPromote_GroupUserPromote::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupUsersPromote.GroupUserPromote)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupUsersPromote_GroupUserPromote::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string group_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupUsersPromote.GroupUserPromote.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string user_id = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TGroupUsersPromote.GroupUserPromote.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupUsersPromote_GroupUserPromote::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersPromote.GroupUserPromote)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupUsersPromote.GroupUserPromote.group_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_group_id(), target);
	}

	// string user_id = 2;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TGroupUsersPromote.GroupUserPromote.user_id");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_user_id(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersPromote.GroupUserPromote)
	return target;
}

size_t TGroupUsersPromote_GroupUserPromote::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersPromote.GroupUserPromote)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string group_id = 1;
	if (this->group_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_group_id());
	}

	// string user_id = 2;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupUsersPromote_GroupUserPromote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersPromote.GroupUserPromote)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupUsersPromote_GroupUserPromote *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupUsersPromote_GroupUserPromote>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersPromote.GroupUserPromote)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersPromote.GroupUserPromote)
		MergeFrom(*source);
	}
}

void TGroupUsersPromote_GroupUserPromote::MergeFrom(const TGroupUsersPromote_GroupUserPromote &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersPromote.GroupUserPromote)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.group_id().size() > 0) {
		_internal_set_group_id(from._internal_group_id());
	}
	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
}

void TGroupUsersPromote_GroupUserPromote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersPromote.GroupUserPromote)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupUsersPromote_GroupUserPromote::CopyFrom(const TGroupUsersPromote_GroupUserPromote &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersPromote.GroupUserPromote)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupUsersPromote_GroupUserPromote::IsInitialized() const {
	return true;
}

void TGroupUsersPromote_GroupUserPromote::InternalSwap(TGroupUsersPromote_GroupUserPromote *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_id_.Swap(&other->group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupUsersPromote_GroupUserPromote::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TGroupUsersPromote::_Internal {
public:
};

TGroupUsersPromote::TGroupUsersPromote(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		group_users_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TGroupUsersPromote)
}
TGroupUsersPromote::TGroupUsersPromote(const TGroupUsersPromote &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		group_users_(from.group_users_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TGroupUsersPromote)
}

void TGroupUsersPromote::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TGroupUsersPromote_api_2eproto.base);
}

TGroupUsersPromote::~TGroupUsersPromote() {
	// @@protoc_insertion_point(destructor:server.TGroupUsersPromote)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TGroupUsersPromote::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TGroupUsersPromote::ArenaDtor(void *object) {
	TGroupUsersPromote *_this = reinterpret_cast<TGroupUsersPromote *>(object);
	(void)_this;
}
void TGroupUsersPromote::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TGroupUsersPromote::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TGroupUsersPromote &TGroupUsersPromote::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TGroupUsersPromote_api_2eproto.base);
	return *internal_default_instance();
}

void TGroupUsersPromote::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TGroupUsersPromote)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	group_users_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TGroupUsersPromote::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_group_users(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TGroupUsersPromote::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TGroupUsersPromote)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_group_users_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_group_users(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TGroupUsersPromote)
	return target;
}

size_t TGroupUsersPromote::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TGroupUsersPromote)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TGroupUsersPromote.GroupUserPromote group_users = 1;
	total_size += 1UL * this->_internal_group_users_size();
	for (const auto &msg : this->group_users_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TGroupUsersPromote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TGroupUsersPromote)
	GOOGLE_DCHECK_NE(&from, this);
	const TGroupUsersPromote *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TGroupUsersPromote>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TGroupUsersPromote)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TGroupUsersPromote)
		MergeFrom(*source);
	}
}

void TGroupUsersPromote::MergeFrom(const TGroupUsersPromote &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TGroupUsersPromote)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	group_users_.MergeFrom(from.group_users_);
}

void TGroupUsersPromote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TGroupUsersPromote)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TGroupUsersPromote::CopyFrom(const TGroupUsersPromote &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TGroupUsersPromote)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TGroupUsersPromote::IsInitialized() const {
	return true;
}

void TGroupUsersPromote::InternalSwap(TGroupUsersPromote *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	group_users_.InternalSwap(&other->group_users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TGroupUsersPromote::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TopicId::_Internal {
public:
};

TopicId::TopicId(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TopicId)
}
TopicId::TopicId(const TopicId &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kDm: {
			_internal_set_dm(from._internal_dm());
			break;
		}
		case kRoom: {
			_internal_set_room(from._internal_room());
			break;
		}
		case kGroupId: {
			_internal_set_group_id(from._internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TopicId)
}

void TopicId::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicId_api_2eproto.base);
	clear_has_id();
}

TopicId::~TopicId() {
	// @@protoc_insertion_point(destructor:server.TopicId)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopicId::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TopicId::ArenaDtor(void *object) {
	TopicId *_this = reinterpret_cast<TopicId *>(object);
	(void)_this;
}
void TopicId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TopicId::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TopicId &TopicId::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicId_api_2eproto.base);
	return *internal_default_instance();
}

void TopicId::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TopicId)
	switch (id_case()) {
		case kDm: {
			id_.dm_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kRoom: {
			id_.room_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGroupId: {
			id_.group_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TopicId::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TopicId)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TopicId::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string dm = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_dm();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TopicId.dm"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string room = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_room();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TopicId.room"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string group_id = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TopicId.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TopicId::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TopicId)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string dm = 1;
	if (_internal_has_dm()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_dm().data(), static_cast<int>(this->_internal_dm().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TopicId.dm");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_dm(), target);
	}

	// string room = 2;
	if (_internal_has_room()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TopicId.room");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_room(), target);
	}

	// string group_id = 3;
	if (_internal_has_group_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TopicId.group_id");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_group_id(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TopicId)
	return target;
}

size_t TopicId::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TopicId)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// string dm = 1;
		case kDm: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_dm());
			break;
		}
		// string room = 2;
		case kRoom: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_room());
			break;
		}
		// string group_id = 3;
		case kGroupId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TopicId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TopicId)
	GOOGLE_DCHECK_NE(&from, this);
	const TopicId *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicId>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicId)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicId)
		MergeFrom(*source);
	}
}

void TopicId::MergeFrom(const TopicId &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicId)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kDm: {
			_internal_set_dm(from._internal_dm());
			break;
		}
		case kRoom: {
			_internal_set_room(from._internal_room());
			break;
		}
		case kGroupId: {
			_internal_set_group_id(from._internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TopicId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TopicId)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TopicId::CopyFrom(const TopicId &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicId)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TopicId::IsInitialized() const {
	return true;
}

void TopicId::InternalSwap(TopicId *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicId::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class UserPresence::_Internal {
public:
};

UserPresence::UserPresence(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.UserPresence)
}
UserPresence::UserPresence(const UserPresence &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_session_id().empty()) {
		session_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session_id(),
				GetArena());
	}
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_handle().empty()) {
		handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_handle(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.UserPresence)
}

void UserPresence::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserPresence_api_2eproto.base);
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserPresence::~UserPresence() {
	// @@protoc_insertion_point(destructor:server.UserPresence)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserPresence::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserPresence::ArenaDtor(void *object) {
	UserPresence *_this = reinterpret_cast<UserPresence *>(object);
	(void)_this;
}
void UserPresence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void UserPresence::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const UserPresence &UserPresence::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserPresence_api_2eproto.base);
	return *internal_default_instance();
}

void UserPresence::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.UserPresence)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	session_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *UserPresence::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string user_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.UserPresence.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string session_id = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_session_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.UserPresence.session_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string handle = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_handle();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.UserPresence.handle"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *UserPresence::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.UserPresence)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string user_id = 1;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.UserPresence.user_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_user_id(), target);
	}

	// string session_id = 2;
	if (this->session_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.UserPresence.session_id");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_session_id(), target);
	}

	// string handle = 3;
	if (this->handle().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.UserPresence.handle");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_handle(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.UserPresence)
	return target;
}

size_t UserPresence::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.UserPresence)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string user_id = 1;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	// string session_id = 2;
	if (this->session_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_session_id());
	}

	// string handle = 3;
	if (this->handle().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_handle());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void UserPresence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.UserPresence)
	GOOGLE_DCHECK_NE(&from, this);
	const UserPresence *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserPresence>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.UserPresence)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.UserPresence)
		MergeFrom(*source);
	}
}

void UserPresence::MergeFrom(const UserPresence &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.UserPresence)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
	if (from.session_id().size() > 0) {
		_internal_set_session_id(from._internal_session_id());
	}
	if (from.handle().size() > 0) {
		_internal_set_handle(from._internal_handle());
	}
}

void UserPresence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.UserPresence)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void UserPresence::CopyFrom(const UserPresence &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.UserPresence)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool UserPresence::IsInitialized() const {
	return true;
}

void UserPresence::InternalSwap(UserPresence *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.Swap(&other->handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserPresence::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopicsJoin_TopicJoin::_Internal {
public:
};

TTopicsJoin_TopicJoin::TTopicsJoin_TopicJoin(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopicsJoin.TopicJoin)
}
TTopicsJoin_TopicJoin::TTopicsJoin_TopicJoin(const TTopicsJoin_TopicJoin &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kUserId: {
			_internal_set_user_id(from._internal_user_id());
			break;
		}
		case kRoom: {
			_internal_set_room(from._internal_room());
			break;
		}
		case kGroupId: {
			_internal_set_group_id(from._internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TTopicsJoin.TopicJoin)
}

void TTopicsJoin_TopicJoin::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopicsJoin_TopicJoin_api_2eproto.base);
	clear_has_id();
}

TTopicsJoin_TopicJoin::~TTopicsJoin_TopicJoin() {
	// @@protoc_insertion_point(destructor:server.TTopicsJoin.TopicJoin)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopicsJoin_TopicJoin::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TTopicsJoin_TopicJoin::ArenaDtor(void *object) {
	TTopicsJoin_TopicJoin *_this = reinterpret_cast<TTopicsJoin_TopicJoin *>(object);
	(void)_this;
}
void TTopicsJoin_TopicJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopicsJoin_TopicJoin::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopicsJoin_TopicJoin &TTopicsJoin_TopicJoin::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopicsJoin_TopicJoin_api_2eproto.base);
	return *internal_default_instance();
}

void TTopicsJoin_TopicJoin::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TTopicsJoin.TopicJoin)
	switch (id_case()) {
		case kUserId: {
			id_.user_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kRoom: {
			id_.room_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGroupId: {
			id_.group_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TTopicsJoin_TopicJoin::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopicsJoin.TopicJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopicsJoin_TopicJoin::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string user_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicsJoin.TopicJoin.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string room = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_room();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicsJoin.TopicJoin.room"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string group_id = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicsJoin.TopicJoin.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopicsJoin_TopicJoin::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopicsJoin.TopicJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string user_id = 1;
	if (_internal_has_user_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicsJoin.TopicJoin.user_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_user_id(), target);
	}

	// string room = 2;
	if (_internal_has_room()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicsJoin.TopicJoin.room");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_room(), target);
	}

	// string group_id = 3;
	if (_internal_has_group_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicsJoin.TopicJoin.group_id");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_group_id(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopicsJoin.TopicJoin)
	return target;
}

size_t TTopicsJoin_TopicJoin::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopicsJoin.TopicJoin)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// string user_id = 1;
		case kUserId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_user_id());
			break;
		}
		// string room = 2;
		case kRoom: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_room());
			break;
		}
		// string group_id = 3;
		case kGroupId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopicsJoin_TopicJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicsJoin.TopicJoin)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopicsJoin_TopicJoin *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopicsJoin_TopicJoin>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicsJoin.TopicJoin)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicsJoin.TopicJoin)
		MergeFrom(*source);
	}
}

void TTopicsJoin_TopicJoin::MergeFrom(const TTopicsJoin_TopicJoin &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicsJoin.TopicJoin)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kUserId: {
			_internal_set_user_id(from._internal_user_id());
			break;
		}
		case kRoom: {
			_internal_set_room(from._internal_room());
			break;
		}
		case kGroupId: {
			_internal_set_group_id(from._internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TTopicsJoin_TopicJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicsJoin.TopicJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopicsJoin_TopicJoin::CopyFrom(const TTopicsJoin_TopicJoin &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicsJoin.TopicJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopicsJoin_TopicJoin::IsInitialized() const {
	return true;
}

void TTopicsJoin_TopicJoin::InternalSwap(TTopicsJoin_TopicJoin *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopicsJoin_TopicJoin::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopicsJoin::_Internal {
public:
};

TTopicsJoin::TTopicsJoin(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		joins_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopicsJoin)
}
TTopicsJoin::TTopicsJoin(const TTopicsJoin &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		joins_(from.joins_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TTopicsJoin)
}

void TTopicsJoin::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopicsJoin_api_2eproto.base);
}

TTopicsJoin::~TTopicsJoin() {
	// @@protoc_insertion_point(destructor:server.TTopicsJoin)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopicsJoin::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TTopicsJoin::ArenaDtor(void *object) {
	TTopicsJoin *_this = reinterpret_cast<TTopicsJoin *>(object);
	(void)_this;
}
void TTopicsJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopicsJoin::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopicsJoin &TTopicsJoin::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopicsJoin_api_2eproto.base);
	return *internal_default_instance();
}

void TTopicsJoin::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopicsJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	joins_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopicsJoin::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TTopicsJoin.TopicJoin joins = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_joins(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopicsJoin::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopicsJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TTopicsJoin.TopicJoin joins = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_joins_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_joins(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopicsJoin)
	return target;
}

size_t TTopicsJoin::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopicsJoin)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TTopicsJoin.TopicJoin joins = 1;
	total_size += 1UL * this->_internal_joins_size();
	for (const auto &msg : this->joins_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopicsJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicsJoin)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopicsJoin *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopicsJoin>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicsJoin)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicsJoin)
		MergeFrom(*source);
	}
}

void TTopicsJoin::MergeFrom(const TTopicsJoin &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicsJoin)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	joins_.MergeFrom(from.joins_);
}

void TTopicsJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicsJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopicsJoin::CopyFrom(const TTopicsJoin &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicsJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopicsJoin::IsInitialized() const {
	return true;
}

void TTopicsJoin::InternalSwap(TTopicsJoin *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	joins_.InternalSwap(&other->joins_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopicsJoin::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopics_Topic::_Internal {
public:
	static const ::server::TopicId &topic(const TTopics_Topic *msg);
	static const ::server::UserPresence &self(const TTopics_Topic *msg);
};

const ::server::TopicId &
TTopics_Topic::_Internal::topic(const TTopics_Topic *msg) {
	return *msg->topic_;
}
const ::server::UserPresence &
TTopics_Topic::_Internal::self(const TTopics_Topic *msg) {
	return *msg->self_;
}
TTopics_Topic::TTopics_Topic(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		presences_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopics.Topic)
}
TTopics_Topic::TTopics_Topic(const TTopics_Topic &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		presences_(from.presences_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	if (from._internal_has_topic()) {
		topic_ = new ::server::TopicId(*from.topic_);
	} else {
		topic_ = nullptr;
	}
	if (from._internal_has_self()) {
		self_ = new ::server::UserPresence(*from.self_);
	} else {
		self_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:server.TTopics.Topic)
}

void TTopics_Topic::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopics_Topic_api_2eproto.base);
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&topic_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&self_) - reinterpret_cast<char *>(&topic_)) + sizeof(self_));
}

TTopics_Topic::~TTopics_Topic() {
	// @@protoc_insertion_point(destructor:server.TTopics.Topic)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopics_Topic::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (this != internal_default_instance())
		delete topic_;
	if (this != internal_default_instance())
		delete self_;
}

void TTopics_Topic::ArenaDtor(void *object) {
	TTopics_Topic *_this = reinterpret_cast<TTopics_Topic *>(object);
	(void)_this;
}
void TTopics_Topic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopics_Topic::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopics_Topic &TTopics_Topic::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopics_Topic_api_2eproto.base);
	return *internal_default_instance();
}

void TTopics_Topic::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopics.Topic)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	presences_.Clear();
	if (GetArena() == nullptr && topic_ != nullptr) {
		delete topic_;
	}
	topic_ = nullptr;
	if (GetArena() == nullptr && self_ != nullptr) {
		delete self_;
	}
	self_ = nullptr;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopics_Topic::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.TopicId topic = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.UserPresence presences = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
				} else
					goto handle_unusual;
				continue;
			// .server.UserPresence self = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopics_Topic::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopics.Topic)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.TopicId topic = 1;
	if (this->has_topic()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::topic(this), target, stream);
	}

	// repeated .server.UserPresence presences = 2;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_presences_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(2, this->_internal_presences(i), target, stream);
	}

	// .server.UserPresence self = 3;
	if (this->has_self()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						3, _Internal::self(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopics.Topic)
	return target;
}

size_t TTopics_Topic::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopics.Topic)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.UserPresence presences = 2;
	total_size += 1UL * this->_internal_presences_size();
	for (const auto &msg : this->presences_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// .server.TopicId topic = 1;
	if (this->has_topic()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*topic_);
	}

	// .server.UserPresence self = 3;
	if (this->has_self()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*self_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopics_Topic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopics.Topic)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopics_Topic *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopics_Topic>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopics.Topic)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopics.Topic)
		MergeFrom(*source);
	}
}

void TTopics_Topic::MergeFrom(const TTopics_Topic &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopics.Topic)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	presences_.MergeFrom(from.presences_);
	if (from.has_topic()) {
		_internal_mutable_topic()->::server::TopicId::MergeFrom(from._internal_topic());
	}
	if (from.has_self()) {
		_internal_mutable_self()->::server::UserPresence::MergeFrom(from._internal_self());
	}
}

void TTopics_Topic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopics.Topic)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopics_Topic::CopyFrom(const TTopics_Topic &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopics.Topic)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopics_Topic::IsInitialized() const {
	return true;
}

void TTopics_Topic::InternalSwap(TTopics_Topic *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	presences_.InternalSwap(&other->presences_);
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TTopics_Topic, self_) + sizeof(TTopics_Topic::self_) - PROTOBUF_FIELD_OFFSET(TTopics_Topic, topic_)>(
			reinterpret_cast<char *>(&topic_),
			reinterpret_cast<char *>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopics_Topic::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopics::_Internal {
public:
};

TTopics::TTopics(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		topics_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopics)
}
TTopics::TTopics(const TTopics &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		topics_(from.topics_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TTopics)
}

void TTopics::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopics_api_2eproto.base);
}

TTopics::~TTopics() {
	// @@protoc_insertion_point(destructor:server.TTopics)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopics::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TTopics::ArenaDtor(void *object) {
	TTopics *_this = reinterpret_cast<TTopics *>(object);
	(void)_this;
}
void TTopics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopics::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopics &TTopics::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopics_api_2eproto.base);
	return *internal_default_instance();
}

void TTopics::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopics)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	topics_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopics::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TTopics.Topic topics = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopics::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopics)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TTopics.Topic topics = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_topics_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_topics(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopics)
	return target;
}

size_t TTopics::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopics)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TTopics.Topic topics = 1;
	total_size += 1UL * this->_internal_topics_size();
	for (const auto &msg : this->topics_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopics)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopics *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopics>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopics)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopics)
		MergeFrom(*source);
	}
}

void TTopics::MergeFrom(const TTopics &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopics)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	topics_.MergeFrom(from.topics_);
}

void TTopics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopics)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopics::CopyFrom(const TTopics &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopics)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopics::IsInitialized() const {
	return true;
}

void TTopics::InternalSwap(TTopics *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	topics_.InternalSwap(&other->topics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopics::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopicsLeave::_Internal {
public:
};

TTopicsLeave::TTopicsLeave(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		topics_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopicsLeave)
}
TTopicsLeave::TTopicsLeave(const TTopicsLeave &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		topics_(from.topics_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TTopicsLeave)
}

void TTopicsLeave::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopicsLeave_api_2eproto.base);
}

TTopicsLeave::~TTopicsLeave() {
	// @@protoc_insertion_point(destructor:server.TTopicsLeave)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopicsLeave::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TTopicsLeave::ArenaDtor(void *object) {
	TTopicsLeave *_this = reinterpret_cast<TTopicsLeave *>(object);
	(void)_this;
}
void TTopicsLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopicsLeave::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopicsLeave &TTopicsLeave::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopicsLeave_api_2eproto.base);
	return *internal_default_instance();
}

void TTopicsLeave::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopicsLeave)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	topics_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopicsLeave::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TopicId topics = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopicsLeave::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopicsLeave)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TopicId topics = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_topics_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_topics(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopicsLeave)
	return target;
}

size_t TTopicsLeave::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopicsLeave)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TopicId topics = 1;
	total_size += 1UL * this->_internal_topics_size();
	for (const auto &msg : this->topics_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopicsLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicsLeave)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopicsLeave *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopicsLeave>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicsLeave)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicsLeave)
		MergeFrom(*source);
	}
}

void TTopicsLeave::MergeFrom(const TTopicsLeave &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicsLeave)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	topics_.MergeFrom(from.topics_);
}

void TTopicsLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicsLeave)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopicsLeave::CopyFrom(const TTopicsLeave &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicsLeave)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopicsLeave::IsInitialized() const {
	return true;
}

void TTopicsLeave::InternalSwap(TTopicsLeave *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	topics_.InternalSwap(&other->topics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopicsLeave::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopicMessageSend::_Internal {
public:
	static const ::server::TopicId &topic(const TTopicMessageSend *msg);
};

const ::server::TopicId &
TTopicMessageSend::_Internal::topic(const TTopicMessageSend *msg) {
	return *msg->topic_;
}
TTopicMessageSend::TTopicMessageSend(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopicMessageSend)
}
TTopicMessageSend::TTopicMessageSend(const TTopicMessageSend &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_data().empty()) {
		data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
				GetArena());
	}
	if (from._internal_has_topic()) {
		topic_ = new ::server::TopicId(*from.topic_);
	} else {
		topic_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:server.TTopicMessageSend)
}

void TTopicMessageSend::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopicMessageSend_api_2eproto.base);
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	topic_ = nullptr;
}

TTopicMessageSend::~TTopicMessageSend() {
	// @@protoc_insertion_point(destructor:server.TTopicMessageSend)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopicMessageSend::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (this != internal_default_instance())
		delete topic_;
}

void TTopicMessageSend::ArenaDtor(void *object) {
	TTopicMessageSend *_this = reinterpret_cast<TTopicMessageSend *>(object);
	(void)_this;
}
void TTopicMessageSend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopicMessageSend::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopicMessageSend &TTopicMessageSend::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopicMessageSend_api_2eproto.base);
	return *internal_default_instance();
}

void TTopicMessageSend::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopicMessageSend)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	if (GetArena() == nullptr && topic_ != nullptr) {
		delete topic_;
	}
	topic_ = nullptr;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopicMessageSend::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.TopicId topic = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string data = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_data();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicMessageSend.data"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopicMessageSend::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessageSend)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.TopicId topic = 1;
	if (this->has_topic()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::topic(this), target, stream);
	}

	// string data = 2;
	if (this->data().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicMessageSend.data");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_data(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessageSend)
	return target;
}

size_t TTopicMessageSend::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessageSend)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string data = 2;
	if (this->data().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_data());
	}

	// .server.TopicId topic = 1;
	if (this->has_topic()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*topic_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopicMessageSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessageSend)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopicMessageSend *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopicMessageSend>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessageSend)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessageSend)
		MergeFrom(*source);
	}
}

void TTopicMessageSend::MergeFrom(const TTopicMessageSend &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessageSend)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.data().size() > 0) {
		_internal_set_data(from._internal_data());
	}
	if (from.has_topic()) {
		_internal_mutable_topic()->::server::TopicId::MergeFrom(from._internal_topic());
	}
}

void TTopicMessageSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessageSend)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopicMessageSend::CopyFrom(const TTopicMessageSend &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessageSend)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopicMessageSend::IsInitialized() const {
	return true;
}

void TTopicMessageSend::InternalSwap(TTopicMessageSend *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(topic_, other->topic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopicMessageSend::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopicMessageAck::_Internal {
public:
};

TTopicMessageAck::TTopicMessageAck(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopicMessageAck)
}
TTopicMessageAck::TTopicMessageAck(const TTopicMessageAck &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_message_id().empty()) {
		message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
				GetArena());
	}
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_handle().empty()) {
		handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_handle(),
				GetArena());
	}
	::memcpy(&created_at_, &from.created_at_,
			static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) -
					reinterpret_cast<char *>(&created_at_)) +
					sizeof(expires_at_));
	// @@protoc_insertion_point(copy_constructor:server.TTopicMessageAck)
}

void TTopicMessageAck::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopicMessageAck_api_2eproto.base);
	message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&created_at_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) - reinterpret_cast<char *>(&created_at_)) + sizeof(expires_at_));
}

TTopicMessageAck::~TTopicMessageAck() {
	// @@protoc_insertion_point(destructor:server.TTopicMessageAck)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopicMessageAck::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TTopicMessageAck::ArenaDtor(void *object) {
	TTopicMessageAck *_this = reinterpret_cast<TTopicMessageAck *>(object);
	(void)_this;
}
void TTopicMessageAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopicMessageAck::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopicMessageAck &TTopicMessageAck::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopicMessageAck_api_2eproto.base);
	return *internal_default_instance();
}

void TTopicMessageAck::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopicMessageAck)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&created_at_, 0, static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) - reinterpret_cast<char *>(&created_at_)) + sizeof(expires_at_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopicMessageAck::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string message_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_message_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicMessageAck.message_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 created_at = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 expires_at = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
					expires_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string handle = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_handle();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicMessageAck.handle"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopicMessageAck::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessageAck)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string message_id = 1;
	if (this->message_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicMessageAck.message_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_message_id(), target);
	}

	// int64 created_at = 2;
	if (this->created_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_created_at(), target);
	}

	// int64 expires_at = 3;
	if (this->expires_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expires_at(), target);
	}

	// string handle = 4;
	if (this->handle().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicMessageAck.handle");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_handle(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessageAck)
	return target;
}

size_t TTopicMessageAck::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessageAck)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string message_id = 1;
	if (this->message_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_message_id());
	}

	// string handle = 4;
	if (this->handle().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_handle());
	}

	// int64 created_at = 2;
	if (this->created_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_created_at());
	}

	// int64 expires_at = 3;
	if (this->expires_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_expires_at());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopicMessageAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessageAck)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopicMessageAck *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopicMessageAck>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessageAck)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessageAck)
		MergeFrom(*source);
	}
}

void TTopicMessageAck::MergeFrom(const TTopicMessageAck &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessageAck)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.message_id().size() > 0) {
		_internal_set_message_id(from._internal_message_id());
	}
	if (from.handle().size() > 0) {
		_internal_set_handle(from._internal_handle());
	}
	if (from.created_at() != 0) {
		_internal_set_created_at(from._internal_created_at());
	}
	if (from.expires_at() != 0) {
		_internal_set_expires_at(from._internal_expires_at());
	}
}

void TTopicMessageAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessageAck)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopicMessageAck::CopyFrom(const TTopicMessageAck &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessageAck)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopicMessageAck::IsInitialized() const {
	return true;
}

void TTopicMessageAck::InternalSwap(TTopicMessageAck *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.Swap(&other->handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TTopicMessageAck, expires_at_) + sizeof(TTopicMessageAck::expires_at_) - PROTOBUF_FIELD_OFFSET(TTopicMessageAck, created_at_)>(
			reinterpret_cast<char *>(&created_at_),
			reinterpret_cast<char *>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopicMessageAck::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TopicMessage::_Internal {
public:
	static const ::server::TopicId &topic(const TopicMessage *msg);
};

const ::server::TopicId &
TopicMessage::_Internal::topic(const TopicMessage *msg) {
	return *msg->topic_;
}
TopicMessage::TopicMessage(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TopicMessage)
}
TopicMessage::TopicMessage(const TopicMessage &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_message_id().empty()) {
		message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
				GetArena());
	}
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_handle().empty()) {
		handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_handle(),
				GetArena());
	}
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_data().empty()) {
		data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
				GetArena());
	}
	if (from._internal_has_topic()) {
		topic_ = new ::server::TopicId(*from.topic_);
	} else {
		topic_ = nullptr;
	}
	::memcpy(&created_at_, &from.created_at_,
			static_cast<size_t>(reinterpret_cast<char *>(&type_) -
					reinterpret_cast<char *>(&created_at_)) +
					sizeof(type_));
	// @@protoc_insertion_point(copy_constructor:server.TopicMessage)
}

void TopicMessage::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicMessage_api_2eproto.base);
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&topic_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&type_) - reinterpret_cast<char *>(&topic_)) + sizeof(type_));
}

TopicMessage::~TopicMessage() {
	// @@protoc_insertion_point(destructor:server.TopicMessage)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopicMessage::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (this != internal_default_instance())
		delete topic_;
}

void TopicMessage::ArenaDtor(void *object) {
	TopicMessage *_this = reinterpret_cast<TopicMessage *>(object);
	(void)_this;
}
void TopicMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TopicMessage::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TopicMessage &TopicMessage::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicMessage_api_2eproto.base);
	return *internal_default_instance();
}

void TopicMessage::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TopicMessage)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	if (GetArena() == nullptr && topic_ != nullptr) {
		delete topic_;
	}
	topic_ = nullptr;
	::memset(&created_at_, 0, static_cast<size_t>(reinterpret_cast<char *>(&type_) - reinterpret_cast<char *>(&created_at_)) + sizeof(type_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TopicMessage::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.TopicId topic = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string user_id = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TopicMessage.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string message_id = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_message_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TopicMessage.message_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 created_at = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
					created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 expires_at = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
					expires_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string handle = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_handle();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TopicMessage.handle"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 type = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
					type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string data = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					auto str = _internal_mutable_data();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TopicMessage.data"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TopicMessage::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TopicMessage)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.TopicId topic = 1;
	if (this->has_topic()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::topic(this), target, stream);
	}

	// string user_id = 2;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TopicMessage.user_id");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_user_id(), target);
	}

	// string message_id = 3;
	if (this->message_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TopicMessage.message_id");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_message_id(), target);
	}

	// int64 created_at = 4;
	if (this->created_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_created_at(), target);
	}

	// int64 expires_at = 5;
	if (this->expires_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_expires_at(), target);
	}

	// string handle = 6;
	if (this->handle().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TopicMessage.handle");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_handle(), target);
	}

	// int64 type = 7;
	if (this->type() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_type(), target);
	}

	// string data = 8;
	if (this->data().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TopicMessage.data");
		target = stream->WriteStringMaybeAliased(
				8, this->_internal_data(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TopicMessage)
	return target;
}

size_t TopicMessage::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TopicMessage)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string user_id = 2;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	// string message_id = 3;
	if (this->message_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_message_id());
	}

	// string handle = 6;
	if (this->handle().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_handle());
	}

	// string data = 8;
	if (this->data().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_data());
	}

	// .server.TopicId topic = 1;
	if (this->has_topic()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*topic_);
	}

	// int64 created_at = 4;
	if (this->created_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_created_at());
	}

	// int64 expires_at = 5;
	if (this->expires_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_expires_at());
	}

	// int64 type = 7;
	if (this->type() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_type());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TopicMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TopicMessage)
	GOOGLE_DCHECK_NE(&from, this);
	const TopicMessage *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicMessage>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicMessage)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicMessage)
		MergeFrom(*source);
	}
}

void TopicMessage::MergeFrom(const TopicMessage &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicMessage)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
	if (from.message_id().size() > 0) {
		_internal_set_message_id(from._internal_message_id());
	}
	if (from.handle().size() > 0) {
		_internal_set_handle(from._internal_handle());
	}
	if (from.data().size() > 0) {
		_internal_set_data(from._internal_data());
	}
	if (from.has_topic()) {
		_internal_mutable_topic()->::server::TopicId::MergeFrom(from._internal_topic());
	}
	if (from.created_at() != 0) {
		_internal_set_created_at(from._internal_created_at());
	}
	if (from.expires_at() != 0) {
		_internal_set_expires_at(from._internal_expires_at());
	}
	if (from.type() != 0) {
		_internal_set_type(from._internal_type());
	}
}

void TopicMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TopicMessage)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TopicMessage::CopyFrom(const TopicMessage &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicMessage)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TopicMessage::IsInitialized() const {
	return true;
}

void TopicMessage::InternalSwap(TopicMessage *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.Swap(&other->handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TopicMessage, type_) + sizeof(TopicMessage::type_) - PROTOBUF_FIELD_OFFSET(TopicMessage, topic_)>(
			reinterpret_cast<char *>(&topic_),
			reinterpret_cast<char *>(&other->topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicMessage::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopicMessagesList::_Internal {
public:
};

TTopicMessagesList::TTopicMessagesList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopicMessagesList)
}
TTopicMessagesList::TTopicMessagesList(const TTopicMessagesList &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	::memcpy(&forward_, &from.forward_,
			static_cast<size_t>(reinterpret_cast<char *>(&limit_) -
					reinterpret_cast<char *>(&forward_)) +
					sizeof(limit_));
	clear_has_id();
	switch (from.id_case()) {
		case kUserId: {
			_internal_set_user_id(from._internal_user_id());
			break;
		}
		case kRoom: {
			_internal_set_room(from._internal_room());
			break;
		}
		case kGroupId: {
			_internal_set_group_id(from._internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TTopicMessagesList)
}

void TTopicMessagesList::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopicMessagesList_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&forward_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&limit_) - reinterpret_cast<char *>(&forward_)) + sizeof(limit_));
	clear_has_id();
}

TTopicMessagesList::~TTopicMessagesList() {
	// @@protoc_insertion_point(destructor:server.TTopicMessagesList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopicMessagesList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_id()) {
		clear_id();
	}
}

void TTopicMessagesList::ArenaDtor(void *object) {
	TTopicMessagesList *_this = reinterpret_cast<TTopicMessagesList *>(object);
	(void)_this;
}
void TTopicMessagesList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopicMessagesList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopicMessagesList &TTopicMessagesList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopicMessagesList_api_2eproto.base);
	return *internal_default_instance();
}

void TTopicMessagesList::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TTopicMessagesList)
	switch (id_case()) {
		case kUserId: {
			id_.user_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kRoom: {
			id_.room_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kGroupId: {
			id_.group_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TTopicMessagesList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopicMessagesList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&forward_, 0, static_cast<size_t>(reinterpret_cast<char *>(&limit_) - reinterpret_cast<char *>(&forward_)) + sizeof(limit_));
	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopicMessagesList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string user_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicMessagesList.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string room = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_room();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicMessagesList.room"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string group_id = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_group_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicMessagesList.group_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string cursor = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicMessagesList.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool forward = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
					forward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 limit = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
					limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopicMessagesList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessagesList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string user_id = 1;
	if (_internal_has_user_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicMessagesList.user_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_user_id(), target);
	}

	// string room = 2;
	if (_internal_has_room()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_room().data(), static_cast<int>(this->_internal_room().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicMessagesList.room");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_room(), target);
	}

	// string group_id = 3;
	if (_internal_has_group_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_group_id().data(), static_cast<int>(this->_internal_group_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicMessagesList.group_id");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_group_id(), target);
	}

	// string cursor = 4;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicMessagesList.cursor");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_cursor(), target);
	}

	// bool forward = 5;
	if (this->forward() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_forward(), target);
	}

	// int64 limit = 6;
	if (this->limit() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_limit(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessagesList)
	return target;
}

size_t TTopicMessagesList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessagesList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string cursor = 4;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	// bool forward = 5;
	if (this->forward() != 0) {
		total_size += 1 + 1;
	}

	// int64 limit = 6;
	if (this->limit() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_limit());
	}

	switch (id_case()) {
		// string user_id = 1;
		case kUserId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_user_id());
			break;
		}
		// string room = 2;
		case kRoom: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_room());
			break;
		}
		// string group_id = 3;
		case kGroupId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopicMessagesList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessagesList)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopicMessagesList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopicMessagesList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessagesList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessagesList)
		MergeFrom(*source);
	}
}

void TTopicMessagesList::MergeFrom(const TTopicMessagesList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessagesList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
	if (from.forward() != 0) {
		_internal_set_forward(from._internal_forward());
	}
	if (from.limit() != 0) {
		_internal_set_limit(from._internal_limit());
	}
	switch (from.id_case()) {
		case kUserId: {
			_internal_set_user_id(from._internal_user_id());
			break;
		}
		case kRoom: {
			_internal_set_room(from._internal_room());
			break;
		}
		case kGroupId: {
			_internal_set_group_id(from._internal_group_id());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TTopicMessagesList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessagesList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopicMessagesList::CopyFrom(const TTopicMessagesList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessagesList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopicMessagesList::IsInitialized() const {
	return true;
}

void TTopicMessagesList::InternalSwap(TTopicMessagesList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TTopicMessagesList, limit_) + sizeof(TTopicMessagesList::limit_) - PROTOBUF_FIELD_OFFSET(TTopicMessagesList, forward_)>(
			reinterpret_cast<char *>(&forward_),
			reinterpret_cast<char *>(&other->forward_));
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopicMessagesList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TTopicMessages::_Internal {
public:
};

TTopicMessages::TTopicMessages(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		messages_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TTopicMessages)
}
TTopicMessages::TTopicMessages(const TTopicMessages &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		messages_(from.messages_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TTopicMessages)
}

void TTopicMessages::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TTopicMessages_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TTopicMessages::~TTopicMessages() {
	// @@protoc_insertion_point(destructor:server.TTopicMessages)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TTopicMessages::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TTopicMessages::ArenaDtor(void *object) {
	TTopicMessages *_this = reinterpret_cast<TTopicMessages *>(object);
	(void)_this;
}
void TTopicMessages::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TTopicMessages::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TTopicMessages &TTopicMessages::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TTopicMessages_api_2eproto.base);
	return *internal_default_instance();
}

void TTopicMessages::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TTopicMessages)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	messages_.Clear();
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TTopicMessages::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TopicMessage messages = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			// string cursor = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TTopicMessages.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TTopicMessages::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TTopicMessages)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TopicMessage messages = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_messages_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_messages(i), target, stream);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TTopicMessages.cursor");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TTopicMessages)
	return target;
}

size_t TTopicMessages::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TTopicMessages)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TopicMessage messages = 1;
	total_size += 1UL * this->_internal_messages_size();
	for (const auto &msg : this->messages_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TTopicMessages::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TTopicMessages)
	GOOGLE_DCHECK_NE(&from, this);
	const TTopicMessages *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TTopicMessages>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TTopicMessages)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TTopicMessages)
		MergeFrom(*source);
	}
}

void TTopicMessages::MergeFrom(const TTopicMessages &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TTopicMessages)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	messages_.MergeFrom(from.messages_);
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
}

void TTopicMessages::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TTopicMessages)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TTopicMessages::CopyFrom(const TTopicMessages &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TTopicMessages)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TTopicMessages::IsInitialized() const {
	return true;
}

void TTopicMessages::InternalSwap(TTopicMessages *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	messages_.InternalSwap(&other->messages_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TTopicMessages::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TopicPresence::_Internal {
public:
	static const ::server::TopicId &topic(const TopicPresence *msg);
};

const ::server::TopicId &
TopicPresence::_Internal::topic(const TopicPresence *msg) {
	return *msg->topic_;
}
TopicPresence::TopicPresence(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		joins_(arena),
		leaves_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TopicPresence)
}
TopicPresence::TopicPresence(const TopicPresence &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		joins_(from.joins_),
		leaves_(from.leaves_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	if (from._internal_has_topic()) {
		topic_ = new ::server::TopicId(*from.topic_);
	} else {
		topic_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:server.TopicPresence)
}

void TopicPresence::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicPresence_api_2eproto.base);
	topic_ = nullptr;
}

TopicPresence::~TopicPresence() {
	// @@protoc_insertion_point(destructor:server.TopicPresence)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TopicPresence::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (this != internal_default_instance())
		delete topic_;
}

void TopicPresence::ArenaDtor(void *object) {
	TopicPresence *_this = reinterpret_cast<TopicPresence *>(object);
	(void)_this;
}
void TopicPresence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TopicPresence::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TopicPresence &TopicPresence::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicPresence_api_2eproto.base);
	return *internal_default_instance();
}

void TopicPresence::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TopicPresence)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	joins_.Clear();
	leaves_.Clear();
	if (GetArena() == nullptr && topic_ != nullptr) {
		delete topic_;
	}
	topic_ = nullptr;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TopicPresence::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.TopicId topic = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.UserPresence joins = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_joins(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
				} else
					goto handle_unusual;
				continue;
			// repeated .server.UserPresence leaves = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_leaves(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TopicPresence::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TopicPresence)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.TopicId topic = 1;
	if (this->has_topic()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::topic(this), target, stream);
	}

	// repeated .server.UserPresence joins = 2;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_joins_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(2, this->_internal_joins(i), target, stream);
	}

	// repeated .server.UserPresence leaves = 3;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_leaves_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(3, this->_internal_leaves(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TopicPresence)
	return target;
}

size_t TopicPresence::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TopicPresence)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.UserPresence joins = 2;
	total_size += 1UL * this->_internal_joins_size();
	for (const auto &msg : this->joins_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// repeated .server.UserPresence leaves = 3;
	total_size += 1UL * this->_internal_leaves_size();
	for (const auto &msg : this->leaves_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// .server.TopicId topic = 1;
	if (this->has_topic()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*topic_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TopicPresence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TopicPresence)
	GOOGLE_DCHECK_NE(&from, this);
	const TopicPresence *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicPresence>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TopicPresence)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TopicPresence)
		MergeFrom(*source);
	}
}

void TopicPresence::MergeFrom(const TopicPresence &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TopicPresence)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	joins_.MergeFrom(from.joins_);
	leaves_.MergeFrom(from.leaves_);
	if (from.has_topic()) {
		_internal_mutable_topic()->::server::TopicId::MergeFrom(from._internal_topic());
	}
}

void TopicPresence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TopicPresence)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TopicPresence::CopyFrom(const TopicPresence &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TopicPresence)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TopicPresence::IsInitialized() const {
	return true;
}

void TopicPresence::InternalSwap(TopicPresence *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	joins_.InternalSwap(&other->joins_);
	leaves_.InternalSwap(&other->leaves_);
	swap(topic_, other->topic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicPresence::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class PropertyPair_StringSet::_Internal {
public:
};

PropertyPair_StringSet::PropertyPair_StringSet(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		values_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.PropertyPair.StringSet)
}
PropertyPair_StringSet::PropertyPair_StringSet(const PropertyPair_StringSet &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		values_(from.values_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.PropertyPair.StringSet)
}

void PropertyPair_StringSet::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyPair_StringSet_api_2eproto.base);
}

PropertyPair_StringSet::~PropertyPair_StringSet() {
	// @@protoc_insertion_point(destructor:server.PropertyPair.StringSet)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyPair_StringSet::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void PropertyPair_StringSet::ArenaDtor(void *object) {
	PropertyPair_StringSet *_this = reinterpret_cast<PropertyPair_StringSet *>(object);
	(void)_this;
}
void PropertyPair_StringSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void PropertyPair_StringSet::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const PropertyPair_StringSet &PropertyPair_StringSet::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyPair_StringSet_api_2eproto.base);
	return *internal_default_instance();
}

void PropertyPair_StringSet::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.PropertyPair.StringSet)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	values_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *PropertyPair_StringSet::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string values = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_values();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.PropertyPair.StringSet.values"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *PropertyPair_StringSet::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.PropertyPair.StringSet)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string values = 1;
	for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
		const auto &s = this->_internal_values(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.PropertyPair.StringSet.values");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.PropertyPair.StringSet)
	return target;
}

size_t PropertyPair_StringSet::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.PropertyPair.StringSet)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string values = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
	for (int i = 0, n = values_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				values_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void PropertyPair_StringSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.PropertyPair.StringSet)
	GOOGLE_DCHECK_NE(&from, this);
	const PropertyPair_StringSet *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyPair_StringSet>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.PropertyPair.StringSet)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.PropertyPair.StringSet)
		MergeFrom(*source);
	}
}

void PropertyPair_StringSet::MergeFrom(const PropertyPair_StringSet &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.PropertyPair.StringSet)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	values_.MergeFrom(from.values_);
}

void PropertyPair_StringSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.PropertyPair.StringSet)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void PropertyPair_StringSet::CopyFrom(const PropertyPair_StringSet &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.PropertyPair.StringSet)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool PropertyPair_StringSet::IsInitialized() const {
	return true;
}

void PropertyPair_StringSet::InternalSwap(PropertyPair_StringSet *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyPair_StringSet::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class PropertyPair::_Internal {
public:
	static const ::server::PropertyPair_StringSet &stringset(const PropertyPair *msg);
};

const ::server::PropertyPair_StringSet &
PropertyPair::_Internal::stringset(const PropertyPair *msg) {
	return *msg->value_.stringset_;
}
void PropertyPair::set_allocated_stringset(::server::PropertyPair_StringSet *stringset) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_value();
	if (stringset) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stringset);
		if (message_arena != submessage_arena) {
			stringset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, stringset, submessage_arena);
		}
		set_has_stringset();
		value_.stringset_ = stringset;
	}
	// @@protoc_insertion_point(field_set_allocated:server.PropertyPair.stringSet)
}
PropertyPair::PropertyPair(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.PropertyPair)
}
PropertyPair::PropertyPair(const PropertyPair &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_key().empty()) {
		key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
				GetArena());
	}
	clear_has_value();
	switch (from.value_case()) {
		case kStringSet: {
			_internal_mutable_stringset()->::server::PropertyPair_StringSet::MergeFrom(from._internal_stringset());
			break;
		}
		case kBoolValue: {
			_internal_set_boolvalue(from._internal_boolvalue());
			break;
		}
		case kIntValue: {
			_internal_set_intvalue(from._internal_intvalue());
			break;
		}
		case VALUE_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.PropertyPair)
}

void PropertyPair::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PropertyPair_api_2eproto.base);
	key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	clear_has_value();
}

PropertyPair::~PropertyPair() {
	// @@protoc_insertion_point(destructor:server.PropertyPair)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyPair::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_value()) {
		clear_value();
	}
}

void PropertyPair::ArenaDtor(void *object) {
	PropertyPair *_this = reinterpret_cast<PropertyPair *>(object);
	(void)_this;
}
void PropertyPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void PropertyPair::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const PropertyPair &PropertyPair::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PropertyPair_api_2eproto.base);
	return *internal_default_instance();
}

void PropertyPair::clear_value() {
	// @@protoc_insertion_point(one_of_clear_start:server.PropertyPair)
	switch (value_case()) {
		case kStringSet: {
			if (GetArena() == nullptr) {
				delete value_.stringset_;
			}
			break;
		}
		case kBoolValue: {
			// No need to clear
			break;
		}
		case kIntValue: {
			// No need to clear
			break;
		}
		case VALUE_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = VALUE_NOT_SET;
}

void PropertyPair::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.PropertyPair)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	clear_value();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *PropertyPair::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string key = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_key();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.PropertyPair.key"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.PropertyPair.StringSet stringSet = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_stringset(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool boolValue = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
					_internal_set_boolvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 intValue = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
					_internal_set_intvalue(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *PropertyPair::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.PropertyPair)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string key = 1;
	if (this->key().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.PropertyPair.key");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_key(), target);
	}

	// .server.PropertyPair.StringSet stringSet = 2;
	if (_internal_has_stringset()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						2, _Internal::stringset(this), target, stream);
	}

	// bool boolValue = 3;
	if (_internal_has_boolvalue()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_boolvalue(), target);
	}

	// int64 intValue = 4;
	if (_internal_has_intvalue()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_intvalue(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.PropertyPair)
	return target;
}

size_t PropertyPair::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.PropertyPair)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string key = 1;
	if (this->key().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_key());
	}

	switch (value_case()) {
		// .server.PropertyPair.StringSet stringSet = 2;
		case kStringSet: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*value_.stringset_);
			break;
		}
		// bool boolValue = 3;
		case kBoolValue: {
			total_size += 1 + 1;
			break;
		}
		// int64 intValue = 4;
		case kIntValue: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
							this->_internal_intvalue());
			break;
		}
		case VALUE_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void PropertyPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.PropertyPair)
	GOOGLE_DCHECK_NE(&from, this);
	const PropertyPair *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyPair>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.PropertyPair)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.PropertyPair)
		MergeFrom(*source);
	}
}

void PropertyPair::MergeFrom(const PropertyPair &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.PropertyPair)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.key().size() > 0) {
		_internal_set_key(from._internal_key());
	}
	switch (from.value_case()) {
		case kStringSet: {
			_internal_mutable_stringset()->::server::PropertyPair_StringSet::MergeFrom(from._internal_stringset());
			break;
		}
		case kBoolValue: {
			_internal_set_boolvalue(from._internal_boolvalue());
			break;
		}
		case kIntValue: {
			_internal_set_intvalue(from._internal_intvalue());
			break;
		}
		case VALUE_NOT_SET: {
			break;
		}
	}
}

void PropertyPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.PropertyPair)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void PropertyPair::CopyFrom(const PropertyPair &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.PropertyPair)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool PropertyPair::IsInitialized() const {
	return true;
}

void PropertyPair::InternalSwap(PropertyPair *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(value_, other->value_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyPair::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class MatchmakeFilter_TermFilter::_Internal {
public:
};

MatchmakeFilter_TermFilter::MatchmakeFilter_TermFilter(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		terms_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.MatchmakeFilter.TermFilter)
}
MatchmakeFilter_TermFilter::MatchmakeFilter_TermFilter(const MatchmakeFilter_TermFilter &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		terms_(from.terms_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	matchallterms_ = from.matchallterms_;
	// @@protoc_insertion_point(copy_constructor:server.MatchmakeFilter.TermFilter)
}

void MatchmakeFilter_TermFilter::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakeFilter_TermFilter_api_2eproto.base);
	matchallterms_ = false;
}

MatchmakeFilter_TermFilter::~MatchmakeFilter_TermFilter() {
	// @@protoc_insertion_point(destructor:server.MatchmakeFilter.TermFilter)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakeFilter_TermFilter::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void MatchmakeFilter_TermFilter::ArenaDtor(void *object) {
	MatchmakeFilter_TermFilter *_this = reinterpret_cast<MatchmakeFilter_TermFilter *>(object);
	(void)_this;
}
void MatchmakeFilter_TermFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void MatchmakeFilter_TermFilter::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MatchmakeFilter_TermFilter &MatchmakeFilter_TermFilter::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakeFilter_TermFilter_api_2eproto.base);
	return *internal_default_instance();
}

void MatchmakeFilter_TermFilter::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.MatchmakeFilter.TermFilter)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	terms_.Clear();
	matchallterms_ = false;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *MatchmakeFilter_TermFilter::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string terms = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_terms();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.MatchmakeFilter.TermFilter.terms"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			// bool matchAllTerms = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					matchallterms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *MatchmakeFilter_TermFilter::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeFilter.TermFilter)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string terms = 1;
	for (int i = 0, n = this->_internal_terms_size(); i < n; i++) {
		const auto &s = this->_internal_terms(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.MatchmakeFilter.TermFilter.terms");
		target = stream->WriteString(1, s, target);
	}

	// bool matchAllTerms = 2;
	if (this->matchallterms() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_matchallterms(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeFilter.TermFilter)
	return target;
}

size_t MatchmakeFilter_TermFilter::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeFilter.TermFilter)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string terms = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(terms_.size());
	for (int i = 0, n = terms_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				terms_.Get(i));
	}

	// bool matchAllTerms = 2;
	if (this->matchallterms() != 0) {
		total_size += 1 + 1;
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MatchmakeFilter_TermFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeFilter.TermFilter)
	GOOGLE_DCHECK_NE(&from, this);
	const MatchmakeFilter_TermFilter *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakeFilter_TermFilter>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeFilter.TermFilter)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeFilter.TermFilter)
		MergeFrom(*source);
	}
}

void MatchmakeFilter_TermFilter::MergeFrom(const MatchmakeFilter_TermFilter &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeFilter.TermFilter)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	terms_.MergeFrom(from.terms_);
	if (from.matchallterms() != 0) {
		_internal_set_matchallterms(from._internal_matchallterms());
	}
}

void MatchmakeFilter_TermFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeFilter.TermFilter)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void MatchmakeFilter_TermFilter::CopyFrom(const MatchmakeFilter_TermFilter &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeFilter.TermFilter)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool MatchmakeFilter_TermFilter::IsInitialized() const {
	return true;
}

void MatchmakeFilter_TermFilter::InternalSwap(MatchmakeFilter_TermFilter *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	terms_.InternalSwap(&other->terms_);
	swap(matchallterms_, other->matchallterms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakeFilter_TermFilter::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class MatchmakeFilter_RangeFilter::_Internal {
public:
};

MatchmakeFilter_RangeFilter::MatchmakeFilter_RangeFilter(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.MatchmakeFilter.RangeFilter)
}
MatchmakeFilter_RangeFilter::MatchmakeFilter_RangeFilter(const MatchmakeFilter_RangeFilter &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::memcpy(&lower_bound_, &from.lower_bound_,
			static_cast<size_t>(reinterpret_cast<char *>(&upper_bound_) -
					reinterpret_cast<char *>(&lower_bound_)) +
					sizeof(upper_bound_));
	// @@protoc_insertion_point(copy_constructor:server.MatchmakeFilter.RangeFilter)
}

void MatchmakeFilter_RangeFilter::SharedCtor() {
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&lower_bound_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&upper_bound_) - reinterpret_cast<char *>(&lower_bound_)) + sizeof(upper_bound_));
}

MatchmakeFilter_RangeFilter::~MatchmakeFilter_RangeFilter() {
	// @@protoc_insertion_point(destructor:server.MatchmakeFilter.RangeFilter)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakeFilter_RangeFilter::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void MatchmakeFilter_RangeFilter::ArenaDtor(void *object) {
	MatchmakeFilter_RangeFilter *_this = reinterpret_cast<MatchmakeFilter_RangeFilter *>(object);
	(void)_this;
}
void MatchmakeFilter_RangeFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void MatchmakeFilter_RangeFilter::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MatchmakeFilter_RangeFilter &MatchmakeFilter_RangeFilter::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakeFilter_RangeFilter_api_2eproto.base);
	return *internal_default_instance();
}

void MatchmakeFilter_RangeFilter::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.MatchmakeFilter.RangeFilter)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	::memset(&lower_bound_, 0, static_cast<size_t>(reinterpret_cast<char *>(&upper_bound_) - reinterpret_cast<char *>(&lower_bound_)) + sizeof(upper_bound_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *MatchmakeFilter_RangeFilter::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int64 lower_bound = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					lower_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 upper_bound = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					upper_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *MatchmakeFilter_RangeFilter::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeFilter.RangeFilter)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int64 lower_bound = 1;
	if (this->lower_bound() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_lower_bound(), target);
	}

	// int64 upper_bound = 2;
	if (this->upper_bound() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_upper_bound(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeFilter.RangeFilter)
	return target;
}

size_t MatchmakeFilter_RangeFilter::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeFilter.RangeFilter)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// int64 lower_bound = 1;
	if (this->lower_bound() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_lower_bound());
	}

	// int64 upper_bound = 2;
	if (this->upper_bound() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_upper_bound());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MatchmakeFilter_RangeFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeFilter.RangeFilter)
	GOOGLE_DCHECK_NE(&from, this);
	const MatchmakeFilter_RangeFilter *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakeFilter_RangeFilter>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeFilter.RangeFilter)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeFilter.RangeFilter)
		MergeFrom(*source);
	}
}

void MatchmakeFilter_RangeFilter::MergeFrom(const MatchmakeFilter_RangeFilter &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeFilter.RangeFilter)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.lower_bound() != 0) {
		_internal_set_lower_bound(from._internal_lower_bound());
	}
	if (from.upper_bound() != 0) {
		_internal_set_upper_bound(from._internal_upper_bound());
	}
}

void MatchmakeFilter_RangeFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeFilter.RangeFilter)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void MatchmakeFilter_RangeFilter::CopyFrom(const MatchmakeFilter_RangeFilter &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeFilter.RangeFilter)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool MatchmakeFilter_RangeFilter::IsInitialized() const {
	return true;
}

void MatchmakeFilter_RangeFilter::InternalSwap(MatchmakeFilter_RangeFilter *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(MatchmakeFilter_RangeFilter, upper_bound_) + sizeof(MatchmakeFilter_RangeFilter::upper_bound_) - PROTOBUF_FIELD_OFFSET(MatchmakeFilter_RangeFilter, lower_bound_)>(
			reinterpret_cast<char *>(&lower_bound_),
			reinterpret_cast<char *>(&other->lower_bound_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakeFilter_RangeFilter::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class MatchmakeFilter::_Internal {
public:
	static const ::server::MatchmakeFilter_TermFilter &term(const MatchmakeFilter *msg);
	static const ::server::MatchmakeFilter_RangeFilter &range(const MatchmakeFilter *msg);
};

const ::server::MatchmakeFilter_TermFilter &
MatchmakeFilter::_Internal::term(const MatchmakeFilter *msg) {
	return *msg->value_.term_;
}
const ::server::MatchmakeFilter_RangeFilter &
MatchmakeFilter::_Internal::range(const MatchmakeFilter *msg) {
	return *msg->value_.range_;
}
void MatchmakeFilter::set_allocated_term(::server::MatchmakeFilter_TermFilter *term) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_value();
	if (term) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(term);
		if (message_arena != submessage_arena) {
			term = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, term, submessage_arena);
		}
		set_has_term();
		value_.term_ = term;
	}
	// @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.term)
}
void MatchmakeFilter::set_allocated_range(::server::MatchmakeFilter_RangeFilter *range) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_value();
	if (range) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range);
		if (message_arena != submessage_arena) {
			range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, range, submessage_arena);
		}
		set_has_range();
		value_.range_ = range;
	}
	// @@protoc_insertion_point(field_set_allocated:server.MatchmakeFilter.range)
}
MatchmakeFilter::MatchmakeFilter(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.MatchmakeFilter)
}
MatchmakeFilter::MatchmakeFilter(const MatchmakeFilter &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_name().empty()) {
		name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
				GetArena());
	}
	clear_has_value();
	switch (from.value_case()) {
		case kTerm: {
			_internal_mutable_term()->::server::MatchmakeFilter_TermFilter::MergeFrom(from._internal_term());
			break;
		}
		case kRange: {
			_internal_mutable_range()->::server::MatchmakeFilter_RangeFilter::MergeFrom(from._internal_range());
			break;
		}
		case kCheck: {
			_internal_set_check(from._internal_check());
			break;
		}
		case VALUE_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.MatchmakeFilter)
}

void MatchmakeFilter::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakeFilter_api_2eproto.base);
	name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	clear_has_value();
}

MatchmakeFilter::~MatchmakeFilter() {
	// @@protoc_insertion_point(destructor:server.MatchmakeFilter)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakeFilter::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_value()) {
		clear_value();
	}
}

void MatchmakeFilter::ArenaDtor(void *object) {
	MatchmakeFilter *_this = reinterpret_cast<MatchmakeFilter *>(object);
	(void)_this;
}
void MatchmakeFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void MatchmakeFilter::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MatchmakeFilter &MatchmakeFilter::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakeFilter_api_2eproto.base);
	return *internal_default_instance();
}

void MatchmakeFilter::clear_value() {
	// @@protoc_insertion_point(one_of_clear_start:server.MatchmakeFilter)
	switch (value_case()) {
		case kTerm: {
			if (GetArena() == nullptr) {
				delete value_.term_;
			}
			break;
		}
		case kRange: {
			if (GetArena() == nullptr) {
				delete value_.range_;
			}
			break;
		}
		case kCheck: {
			// No need to clear
			break;
		}
		case VALUE_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = VALUE_NOT_SET;
}

void MatchmakeFilter::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.MatchmakeFilter)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	clear_value();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *MatchmakeFilter::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string name = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_name();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.MatchmakeFilter.name"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.MatchmakeFilter.TermFilter term = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_term(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.MatchmakeFilter.RangeFilter range = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool check = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
					_internal_set_check(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *MatchmakeFilter::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeFilter)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string name = 1;
	if (this->name().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.MatchmakeFilter.name");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_name(), target);
	}

	// .server.MatchmakeFilter.TermFilter term = 2;
	if (_internal_has_term()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						2, _Internal::term(this), target, stream);
	}

	// .server.MatchmakeFilter.RangeFilter range = 3;
	if (_internal_has_range()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						3, _Internal::range(this), target, stream);
	}

	// bool check = 4;
	if (_internal_has_check()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_check(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeFilter)
	return target;
}

size_t MatchmakeFilter::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeFilter)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string name = 1;
	if (this->name().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_name());
	}

	switch (value_case()) {
		// .server.MatchmakeFilter.TermFilter term = 2;
		case kTerm: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*value_.term_);
			break;
		}
		// .server.MatchmakeFilter.RangeFilter range = 3;
		case kRange: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*value_.range_);
			break;
		}
		// bool check = 4;
		case kCheck: {
			total_size += 1 + 1;
			break;
		}
		case VALUE_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MatchmakeFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeFilter)
	GOOGLE_DCHECK_NE(&from, this);
	const MatchmakeFilter *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakeFilter>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeFilter)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeFilter)
		MergeFrom(*source);
	}
}

void MatchmakeFilter::MergeFrom(const MatchmakeFilter &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeFilter)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.name().size() > 0) {
		_internal_set_name(from._internal_name());
	}
	switch (from.value_case()) {
		case kTerm: {
			_internal_mutable_term()->::server::MatchmakeFilter_TermFilter::MergeFrom(from._internal_term());
			break;
		}
		case kRange: {
			_internal_mutable_range()->::server::MatchmakeFilter_RangeFilter::MergeFrom(from._internal_range());
			break;
		}
		case kCheck: {
			_internal_set_check(from._internal_check());
			break;
		}
		case VALUE_NOT_SET: {
			break;
		}
	}
}

void MatchmakeFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeFilter)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void MatchmakeFilter::CopyFrom(const MatchmakeFilter &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeFilter)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool MatchmakeFilter::IsInitialized() const {
	return true;
}

void MatchmakeFilter::InternalSwap(MatchmakeFilter *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(value_, other->value_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakeFilter::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatchmakeAdd::_Internal {
public:
};

TMatchmakeAdd::TMatchmakeAdd(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		filters_(arena),
		properties_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatchmakeAdd)
}
TMatchmakeAdd::TMatchmakeAdd(const TMatchmakeAdd &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		filters_(from.filters_),
		properties_(from.properties_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	required_count_ = from.required_count_;
	// @@protoc_insertion_point(copy_constructor:server.TMatchmakeAdd)
}

void TMatchmakeAdd::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TMatchmakeAdd_api_2eproto.base);
	required_count_ = PROTOBUF_LONGLONG(0);
}

TMatchmakeAdd::~TMatchmakeAdd() {
	// @@protoc_insertion_point(destructor:server.TMatchmakeAdd)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatchmakeAdd::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TMatchmakeAdd::ArenaDtor(void *object) {
	TMatchmakeAdd *_this = reinterpret_cast<TMatchmakeAdd *>(object);
	(void)_this;
}
void TMatchmakeAdd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatchmakeAdd::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatchmakeAdd &TMatchmakeAdd::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatchmakeAdd_api_2eproto.base);
	return *internal_default_instance();
}

void TMatchmakeAdd::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatchmakeAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	filters_.Clear();
	properties_.Clear();
	required_count_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatchmakeAdd::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int64 required_count = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					required_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.MatchmakeFilter filters = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
				} else
					goto handle_unusual;
				continue;
			// repeated .server.PropertyPair properties = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatchmakeAdd::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatchmakeAdd)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int64 required_count = 1;
	if (this->required_count() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_required_count(), target);
	}

	// repeated .server.MatchmakeFilter filters = 2;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_filters_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(2, this->_internal_filters(i), target, stream);
	}

	// repeated .server.PropertyPair properties = 3;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_properties_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(3, this->_internal_properties(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatchmakeAdd)
	return target;
}

size_t TMatchmakeAdd::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatchmakeAdd)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.MatchmakeFilter filters = 2;
	total_size += 1UL * this->_internal_filters_size();
	for (const auto &msg : this->filters_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// repeated .server.PropertyPair properties = 3;
	total_size += 1UL * this->_internal_properties_size();
	for (const auto &msg : this->properties_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// int64 required_count = 1;
	if (this->required_count() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_required_count());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatchmakeAdd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchmakeAdd)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatchmakeAdd *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatchmakeAdd>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchmakeAdd)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchmakeAdd)
		MergeFrom(*source);
	}
}

void TMatchmakeAdd::MergeFrom(const TMatchmakeAdd &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchmakeAdd)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	filters_.MergeFrom(from.filters_);
	properties_.MergeFrom(from.properties_);
	if (from.required_count() != 0) {
		_internal_set_required_count(from._internal_required_count());
	}
}

void TMatchmakeAdd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchmakeAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatchmakeAdd::CopyFrom(const TMatchmakeAdd &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchmakeAdd)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatchmakeAdd::IsInitialized() const {
	return true;
}

void TMatchmakeAdd::InternalSwap(TMatchmakeAdd *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	filters_.InternalSwap(&other->filters_);
	properties_.InternalSwap(&other->properties_);
	swap(required_count_, other->required_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatchmakeAdd::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatchmakeTicket::_Internal {
public:
};

TMatchmakeTicket::TMatchmakeTicket(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatchmakeTicket)
}
TMatchmakeTicket::TMatchmakeTicket(const TMatchmakeTicket &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_ticket().empty()) {
		ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ticket(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TMatchmakeTicket)
}

void TMatchmakeTicket::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TMatchmakeTicket_api_2eproto.base);
	ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TMatchmakeTicket::~TMatchmakeTicket() {
	// @@protoc_insertion_point(destructor:server.TMatchmakeTicket)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatchmakeTicket::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TMatchmakeTicket::ArenaDtor(void *object) {
	TMatchmakeTicket *_this = reinterpret_cast<TMatchmakeTicket *>(object);
	(void)_this;
}
void TMatchmakeTicket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatchmakeTicket::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatchmakeTicket &TMatchmakeTicket::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatchmakeTicket_api_2eproto.base);
	return *internal_default_instance();
}

void TMatchmakeTicket::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatchmakeTicket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatchmakeTicket::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string ticket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_ticket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TMatchmakeTicket.ticket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatchmakeTicket::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatchmakeTicket)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string ticket = 1;
	if (this->ticket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TMatchmakeTicket.ticket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_ticket(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatchmakeTicket)
	return target;
}

size_t TMatchmakeTicket::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatchmakeTicket)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string ticket = 1;
	if (this->ticket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_ticket());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatchmakeTicket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchmakeTicket)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatchmakeTicket *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatchmakeTicket>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchmakeTicket)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchmakeTicket)
		MergeFrom(*source);
	}
}

void TMatchmakeTicket::MergeFrom(const TMatchmakeTicket &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchmakeTicket)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.ticket().size() > 0) {
		_internal_set_ticket(from._internal_ticket());
	}
}

void TMatchmakeTicket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchmakeTicket)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatchmakeTicket::CopyFrom(const TMatchmakeTicket &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchmakeTicket)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatchmakeTicket::IsInitialized() const {
	return true;
}

void TMatchmakeTicket::InternalSwap(TMatchmakeTicket *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatchmakeTicket::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatchmakeRemove::_Internal {
public:
};

TMatchmakeRemove::TMatchmakeRemove(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatchmakeRemove)
}
TMatchmakeRemove::TMatchmakeRemove(const TMatchmakeRemove &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_ticket().empty()) {
		ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ticket(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TMatchmakeRemove)
}

void TMatchmakeRemove::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TMatchmakeRemove_api_2eproto.base);
	ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TMatchmakeRemove::~TMatchmakeRemove() {
	// @@protoc_insertion_point(destructor:server.TMatchmakeRemove)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatchmakeRemove::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TMatchmakeRemove::ArenaDtor(void *object) {
	TMatchmakeRemove *_this = reinterpret_cast<TMatchmakeRemove *>(object);
	(void)_this;
}
void TMatchmakeRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatchmakeRemove::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatchmakeRemove &TMatchmakeRemove::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatchmakeRemove_api_2eproto.base);
	return *internal_default_instance();
}

void TMatchmakeRemove::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatchmakeRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatchmakeRemove::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string ticket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_ticket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TMatchmakeRemove.ticket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatchmakeRemove::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatchmakeRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string ticket = 1;
	if (this->ticket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TMatchmakeRemove.ticket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_ticket(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatchmakeRemove)
	return target;
}

size_t TMatchmakeRemove::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatchmakeRemove)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string ticket = 1;
	if (this->ticket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_ticket());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatchmakeRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchmakeRemove)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatchmakeRemove *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatchmakeRemove>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchmakeRemove)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchmakeRemove)
		MergeFrom(*source);
	}
}

void TMatchmakeRemove::MergeFrom(const TMatchmakeRemove &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchmakeRemove)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.ticket().size() > 0) {
		_internal_set_ticket(from._internal_ticket());
	}
}

void TMatchmakeRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchmakeRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatchmakeRemove::CopyFrom(const TMatchmakeRemove &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchmakeRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatchmakeRemove::IsInitialized() const {
	return true;
}

void TMatchmakeRemove::InternalSwap(TMatchmakeRemove *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatchmakeRemove::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class MatchmakeMatched_UserProperty::_Internal {
public:
};

MatchmakeMatched_UserProperty::MatchmakeMatched_UserProperty(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		properties_(arena),
		filters_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.MatchmakeMatched.UserProperty)
}
MatchmakeMatched_UserProperty::MatchmakeMatched_UserProperty(const MatchmakeMatched_UserProperty &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		properties_(from.properties_),
		filters_(from.filters_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.MatchmakeMatched.UserProperty)
}

void MatchmakeMatched_UserProperty::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakeMatched_UserProperty_api_2eproto.base);
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MatchmakeMatched_UserProperty::~MatchmakeMatched_UserProperty() {
	// @@protoc_insertion_point(destructor:server.MatchmakeMatched.UserProperty)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakeMatched_UserProperty::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchmakeMatched_UserProperty::ArenaDtor(void *object) {
	MatchmakeMatched_UserProperty *_this = reinterpret_cast<MatchmakeMatched_UserProperty *>(object);
	(void)_this;
}
void MatchmakeMatched_UserProperty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void MatchmakeMatched_UserProperty::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MatchmakeMatched_UserProperty &MatchmakeMatched_UserProperty::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakeMatched_UserProperty_api_2eproto.base);
	return *internal_default_instance();
}

void MatchmakeMatched_UserProperty::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.MatchmakeMatched.UserProperty)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	properties_.Clear();
	filters_.Clear();
	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *MatchmakeMatched_UserProperty::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string user_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.MatchmakeMatched.UserProperty.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.PropertyPair properties = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
				} else
					goto handle_unusual;
				continue;
			// repeated .server.MatchmakeFilter filters = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *MatchmakeMatched_UserProperty::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeMatched.UserProperty)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string user_id = 1;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.MatchmakeMatched.UserProperty.user_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_user_id(), target);
	}

	// repeated .server.PropertyPair properties = 2;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_properties_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(2, this->_internal_properties(i), target, stream);
	}

	// repeated .server.MatchmakeFilter filters = 3;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_filters_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(3, this->_internal_filters(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeMatched.UserProperty)
	return target;
}

size_t MatchmakeMatched_UserProperty::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeMatched.UserProperty)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.PropertyPair properties = 2;
	total_size += 1UL * this->_internal_properties_size();
	for (const auto &msg : this->properties_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// repeated .server.MatchmakeFilter filters = 3;
	total_size += 1UL * this->_internal_filters_size();
	for (const auto &msg : this->filters_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string user_id = 1;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MatchmakeMatched_UserProperty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeMatched.UserProperty)
	GOOGLE_DCHECK_NE(&from, this);
	const MatchmakeMatched_UserProperty *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakeMatched_UserProperty>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeMatched.UserProperty)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeMatched.UserProperty)
		MergeFrom(*source);
	}
}

void MatchmakeMatched_UserProperty::MergeFrom(const MatchmakeMatched_UserProperty &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeMatched.UserProperty)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	properties_.MergeFrom(from.properties_);
	filters_.MergeFrom(from.filters_);
	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
}

void MatchmakeMatched_UserProperty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeMatched.UserProperty)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void MatchmakeMatched_UserProperty::CopyFrom(const MatchmakeMatched_UserProperty &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeMatched.UserProperty)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool MatchmakeMatched_UserProperty::IsInitialized() const {
	return true;
}

void MatchmakeMatched_UserProperty::InternalSwap(MatchmakeMatched_UserProperty *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	properties_.InternalSwap(&other->properties_);
	filters_.InternalSwap(&other->filters_);
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakeMatched_UserProperty::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class MatchmakeMatched::_Internal {
public:
	static const ::server::UserPresence &self(const MatchmakeMatched *msg);
};

const ::server::UserPresence &
MatchmakeMatched::_Internal::self(const MatchmakeMatched *msg) {
	return *msg->self_;
}
MatchmakeMatched::MatchmakeMatched(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		presences_(arena),
		properties_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.MatchmakeMatched)
}
MatchmakeMatched::MatchmakeMatched(const MatchmakeMatched &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		presences_(from.presences_),
		properties_(from.properties_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_ticket().empty()) {
		ticket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ticket(),
				GetArena());
	}
	token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_token().empty()) {
		token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
				GetArena());
	}
	if (from._internal_has_self()) {
		self_ = new ::server::UserPresence(*from.self_);
	} else {
		self_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:server.MatchmakeMatched)
}

void MatchmakeMatched::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchmakeMatched_api_2eproto.base);
	ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	self_ = nullptr;
}

MatchmakeMatched::~MatchmakeMatched() {
	// @@protoc_insertion_point(destructor:server.MatchmakeMatched)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchmakeMatched::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (this != internal_default_instance())
		delete self_;
}

void MatchmakeMatched::ArenaDtor(void *object) {
	MatchmakeMatched *_this = reinterpret_cast<MatchmakeMatched *>(object);
	(void)_this;
}
void MatchmakeMatched::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void MatchmakeMatched::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MatchmakeMatched &MatchmakeMatched::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchmakeMatched_api_2eproto.base);
	return *internal_default_instance();
}

void MatchmakeMatched::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.MatchmakeMatched)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	presences_.Clear();
	properties_.Clear();
	ticket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	if (GetArena() == nullptr && self_ != nullptr) {
		delete self_;
	}
	self_ = nullptr;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *MatchmakeMatched::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string ticket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_ticket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.MatchmakeMatched.ticket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string token = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_token();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.MatchmakeMatched.token"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.UserPresence presences = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
				} else
					goto handle_unusual;
				continue;
			// .server.UserPresence self = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.MatchmakeMatched.UserProperty properties = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *MatchmakeMatched::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.MatchmakeMatched)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string ticket = 1;
	if (this->ticket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_ticket().data(), static_cast<int>(this->_internal_ticket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.MatchmakeMatched.ticket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_ticket(), target);
	}

	// string token = 2;
	if (this->token().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.MatchmakeMatched.token");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_token(), target);
	}

	// repeated .server.UserPresence presences = 3;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_presences_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(3, this->_internal_presences(i), target, stream);
	}

	// .server.UserPresence self = 4;
	if (this->has_self()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						4, _Internal::self(this), target, stream);
	}

	// repeated .server.MatchmakeMatched.UserProperty properties = 5;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_properties_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(5, this->_internal_properties(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.MatchmakeMatched)
	return target;
}

size_t MatchmakeMatched::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.MatchmakeMatched)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.UserPresence presences = 3;
	total_size += 1UL * this->_internal_presences_size();
	for (const auto &msg : this->presences_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// repeated .server.MatchmakeMatched.UserProperty properties = 5;
	total_size += 1UL * this->_internal_properties_size();
	for (const auto &msg : this->properties_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string ticket = 1;
	if (this->ticket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_ticket());
	}

	// string token = 2;
	if (this->token().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_token());
	}

	// .server.UserPresence self = 4;
	if (this->has_self()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*self_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MatchmakeMatched::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.MatchmakeMatched)
	GOOGLE_DCHECK_NE(&from, this);
	const MatchmakeMatched *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchmakeMatched>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchmakeMatched)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchmakeMatched)
		MergeFrom(*source);
	}
}

void MatchmakeMatched::MergeFrom(const MatchmakeMatched &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchmakeMatched)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	presences_.MergeFrom(from.presences_);
	properties_.MergeFrom(from.properties_);
	if (from.ticket().size() > 0) {
		_internal_set_ticket(from._internal_ticket());
	}
	if (from.token().size() > 0) {
		_internal_set_token(from._internal_token());
	}
	if (from.has_self()) {
		_internal_mutable_self()->::server::UserPresence::MergeFrom(from._internal_self());
	}
}

void MatchmakeMatched::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.MatchmakeMatched)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void MatchmakeMatched::CopyFrom(const MatchmakeMatched &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchmakeMatched)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool MatchmakeMatched::IsInitialized() const {
	return true;
}

void MatchmakeMatched::InternalSwap(MatchmakeMatched *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	presences_.InternalSwap(&other->presences_);
	properties_.InternalSwap(&other->properties_);
	ticket_.Swap(&other->ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(self_, other->self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchmakeMatched::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Match::_Internal {
public:
	static const ::server::UserPresence &self(const Match *msg);
};

const ::server::UserPresence &
Match::_Internal::self(const Match *msg) {
	return *msg->self_;
}
Match::Match(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		presences_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Match)
}
Match::Match(const Match &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		presences_(from.presences_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_match_id().empty()) {
		match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_match_id(),
				GetArena());
	}
	if (from._internal_has_self()) {
		self_ = new ::server::UserPresence(*from.self_);
	} else {
		self_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:server.Match)
}

void Match::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Match_api_2eproto.base);
	match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	self_ = nullptr;
}

Match::~Match() {
	// @@protoc_insertion_point(destructor:server.Match)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Match::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (this != internal_default_instance())
		delete self_;
}

void Match::ArenaDtor(void *object) {
	Match *_this = reinterpret_cast<Match *>(object);
	(void)_this;
}
void Match::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Match::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Match &Match::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Match_api_2eproto.base);
	return *internal_default_instance();
}

void Match::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Match)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	presences_.Clear();
	match_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	if (GetArena() == nullptr && self_ != nullptr) {
		delete self_;
	}
	self_ = nullptr;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Match::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string match_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_match_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Match.match_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.UserPresence presences = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
				} else
					goto handle_unusual;
				continue;
			// .server.UserPresence self = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_self(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Match::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Match)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string match_id = 1;
	if (this->match_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Match.match_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_match_id(), target);
	}

	// repeated .server.UserPresence presences = 2;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_presences_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(2, this->_internal_presences(i), target, stream);
	}

	// .server.UserPresence self = 3;
	if (this->has_self()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						3, _Internal::self(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Match)
	return target;
}

size_t Match::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Match)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.UserPresence presences = 2;
	total_size += 1UL * this->_internal_presences_size();
	for (const auto &msg : this->presences_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string match_id = 1;
	if (this->match_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_match_id());
	}

	// .server.UserPresence self = 3;
	if (this->has_self()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*self_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Match::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Match)
	GOOGLE_DCHECK_NE(&from, this);
	const Match *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Match>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Match)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Match)
		MergeFrom(*source);
	}
}

void Match::MergeFrom(const Match &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Match)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	presences_.MergeFrom(from.presences_);
	if (from.match_id().size() > 0) {
		_internal_set_match_id(from._internal_match_id());
	}
	if (from.has_self()) {
		_internal_mutable_self()->::server::UserPresence::MergeFrom(from._internal_self());
	}
}

void Match::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Match)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Match::CopyFrom(const Match &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Match)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Match::IsInitialized() const {
	return true;
}

void Match::InternalSwap(Match *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	presences_.InternalSwap(&other->presences_);
	match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(self_, other->self_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Match::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class MatchPresence::_Internal {
public:
};

MatchPresence::MatchPresence(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		joins_(arena),
		leaves_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.MatchPresence)
}
MatchPresence::MatchPresence(const MatchPresence &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		joins_(from.joins_),
		leaves_(from.leaves_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_match_id().empty()) {
		match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_match_id(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.MatchPresence)
}

void MatchPresence::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchPresence_api_2eproto.base);
	match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MatchPresence::~MatchPresence() {
	// @@protoc_insertion_point(destructor:server.MatchPresence)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchPresence::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchPresence::ArenaDtor(void *object) {
	MatchPresence *_this = reinterpret_cast<MatchPresence *>(object);
	(void)_this;
}
void MatchPresence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void MatchPresence::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MatchPresence &MatchPresence::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchPresence_api_2eproto.base);
	return *internal_default_instance();
}

void MatchPresence::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.MatchPresence)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	joins_.Clear();
	leaves_.Clear();
	match_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *MatchPresence::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string match_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_match_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.MatchPresence.match_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.UserPresence joins = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_joins(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
				} else
					goto handle_unusual;
				continue;
			// repeated .server.UserPresence leaves = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_leaves(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *MatchPresence::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.MatchPresence)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string match_id = 1;
	if (this->match_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.MatchPresence.match_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_match_id(), target);
	}

	// repeated .server.UserPresence joins = 2;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_joins_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(2, this->_internal_joins(i), target, stream);
	}

	// repeated .server.UserPresence leaves = 3;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_leaves_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(3, this->_internal_leaves(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.MatchPresence)
	return target;
}

size_t MatchPresence::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.MatchPresence)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.UserPresence joins = 2;
	total_size += 1UL * this->_internal_joins_size();
	for (const auto &msg : this->joins_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// repeated .server.UserPresence leaves = 3;
	total_size += 1UL * this->_internal_leaves_size();
	for (const auto &msg : this->leaves_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string match_id = 1;
	if (this->match_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_match_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MatchPresence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.MatchPresence)
	GOOGLE_DCHECK_NE(&from, this);
	const MatchPresence *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchPresence>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchPresence)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchPresence)
		MergeFrom(*source);
	}
}

void MatchPresence::MergeFrom(const MatchPresence &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchPresence)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	joins_.MergeFrom(from.joins_);
	leaves_.MergeFrom(from.leaves_);
	if (from.match_id().size() > 0) {
		_internal_set_match_id(from._internal_match_id());
	}
}

void MatchPresence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.MatchPresence)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void MatchPresence::CopyFrom(const MatchPresence &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchPresence)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool MatchPresence::IsInitialized() const {
	return true;
}

void MatchPresence::InternalSwap(MatchPresence *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	joins_.InternalSwap(&other->joins_);
	leaves_.InternalSwap(&other->leaves_);
	match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchPresence::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatchCreate::_Internal {
public:
};

TMatchCreate::TMatchCreate(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatchCreate)
}
TMatchCreate::TMatchCreate(const TMatchCreate &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TMatchCreate)
}

void TMatchCreate::SharedCtor() {
}

TMatchCreate::~TMatchCreate() {
	// @@protoc_insertion_point(destructor:server.TMatchCreate)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatchCreate::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TMatchCreate::ArenaDtor(void *object) {
	TMatchCreate *_this = reinterpret_cast<TMatchCreate *>(object);
	(void)_this;
}
void TMatchCreate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatchCreate::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatchCreate &TMatchCreate::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatchCreate_api_2eproto.base);
	return *internal_default_instance();
}

void TMatchCreate::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatchCreate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatchCreate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		if ((tag & 7) == 4 || tag == 0) {
			ctx->SetLastTag(tag);
			goto success;
		}
		ptr = UnknownFieldParse(tag,
				_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
				ptr, ctx);
		CHK_(ptr != nullptr);
		continue;
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatchCreate::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatchCreate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatchCreate)
	return target;
}

size_t TMatchCreate::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatchCreate)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatchCreate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchCreate)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatchCreate *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatchCreate>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchCreate)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchCreate)
		MergeFrom(*source);
	}
}

void TMatchCreate::MergeFrom(const TMatchCreate &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchCreate)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;
}

void TMatchCreate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchCreate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatchCreate::CopyFrom(const TMatchCreate &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchCreate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatchCreate::IsInitialized() const {
	return true;
}

void TMatchCreate::InternalSwap(TMatchCreate *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatchCreate::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatch::_Internal {
public:
	static const ::server::Match &match(const TMatch *msg);
};

const ::server::Match &
TMatch::_Internal::match(const TMatch *msg) {
	return *msg->match_;
}
TMatch::TMatch(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatch)
}
TMatch::TMatch(const TMatch &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	if (from._internal_has_match()) {
		match_ = new ::server::Match(*from.match_);
	} else {
		match_ = nullptr;
	}
	// @@protoc_insertion_point(copy_constructor:server.TMatch)
}

void TMatch::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TMatch_api_2eproto.base);
	match_ = nullptr;
}

TMatch::~TMatch() {
	// @@protoc_insertion_point(destructor:server.TMatch)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatch::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (this != internal_default_instance())
		delete match_;
}

void TMatch::ArenaDtor(void *object) {
	TMatch *_this = reinterpret_cast<TMatch *>(object);
	(void)_this;
}
void TMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatch::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatch &TMatch::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatch_api_2eproto.base);
	return *internal_default_instance();
}

void TMatch::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	if (GetArena() == nullptr && match_ != nullptr) {
		delete match_;
	}
	match_ = nullptr;
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatch::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.Match match = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatch::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.Match match = 1;
	if (this->has_match()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::match(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatch)
	return target;
}

size_t TMatch::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatch)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// .server.Match match = 1;
	if (this->has_match()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*match_);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatch)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatch *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatch>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatch)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatch)
		MergeFrom(*source);
	}
}

void TMatch::MergeFrom(const TMatch &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatch)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.has_match()) {
		_internal_mutable_match()->::server::Match::MergeFrom(from._internal_match());
	}
}

void TMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatch::CopyFrom(const TMatch &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatch::IsInitialized() const {
	return true;
}

void TMatch::InternalSwap(TMatch *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(match_, other->match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatch::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatchesJoin_MatchJoin::_Internal {
public:
};

TMatchesJoin_MatchJoin::TMatchesJoin_MatchJoin(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatchesJoin.MatchJoin)
}
TMatchesJoin_MatchJoin::TMatchesJoin_MatchJoin(const TMatchesJoin_MatchJoin &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kMatchId: {
			_internal_set_match_id(from._internal_match_id());
			break;
		}
		case kToken: {
			_internal_set_token(from._internal_token());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TMatchesJoin.MatchJoin)
}

void TMatchesJoin_MatchJoin::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TMatchesJoin_MatchJoin_api_2eproto.base);
	clear_has_id();
}

TMatchesJoin_MatchJoin::~TMatchesJoin_MatchJoin() {
	// @@protoc_insertion_point(destructor:server.TMatchesJoin.MatchJoin)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatchesJoin_MatchJoin::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TMatchesJoin_MatchJoin::ArenaDtor(void *object) {
	TMatchesJoin_MatchJoin *_this = reinterpret_cast<TMatchesJoin_MatchJoin *>(object);
	(void)_this;
}
void TMatchesJoin_MatchJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatchesJoin_MatchJoin::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatchesJoin_MatchJoin &TMatchesJoin_MatchJoin::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatchesJoin_MatchJoin_api_2eproto.base);
	return *internal_default_instance();
}

void TMatchesJoin_MatchJoin::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TMatchesJoin.MatchJoin)
	switch (id_case()) {
		case kMatchId: {
			id_.match_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kToken: {
			id_.token_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TMatchesJoin_MatchJoin::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatchesJoin.MatchJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatchesJoin_MatchJoin::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string match_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_match_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TMatchesJoin.MatchJoin.match_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string token = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_token();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TMatchesJoin.MatchJoin.token"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatchesJoin_MatchJoin::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatchesJoin.MatchJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string match_id = 1;
	if (_internal_has_match_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TMatchesJoin.MatchJoin.match_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_match_id(), target);
	}

	// string token = 2;
	if (_internal_has_token()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TMatchesJoin.MatchJoin.token");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_token(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatchesJoin.MatchJoin)
	return target;
}

size_t TMatchesJoin_MatchJoin::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatchesJoin.MatchJoin)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// string match_id = 1;
		case kMatchId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_match_id());
			break;
		}
		// string token = 2;
		case kToken: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_token());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatchesJoin_MatchJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchesJoin.MatchJoin)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatchesJoin_MatchJoin *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatchesJoin_MatchJoin>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchesJoin.MatchJoin)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchesJoin.MatchJoin)
		MergeFrom(*source);
	}
}

void TMatchesJoin_MatchJoin::MergeFrom(const TMatchesJoin_MatchJoin &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchesJoin.MatchJoin)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kMatchId: {
			_internal_set_match_id(from._internal_match_id());
			break;
		}
		case kToken: {
			_internal_set_token(from._internal_token());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TMatchesJoin_MatchJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchesJoin.MatchJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatchesJoin_MatchJoin::CopyFrom(const TMatchesJoin_MatchJoin &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchesJoin.MatchJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatchesJoin_MatchJoin::IsInitialized() const {
	return true;
}

void TMatchesJoin_MatchJoin::InternalSwap(TMatchesJoin_MatchJoin *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatchesJoin_MatchJoin::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatchesJoin::_Internal {
public:
};

TMatchesJoin::TMatchesJoin(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		matches_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatchesJoin)
}
TMatchesJoin::TMatchesJoin(const TMatchesJoin &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		matches_(from.matches_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TMatchesJoin)
}

void TMatchesJoin::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TMatchesJoin_api_2eproto.base);
}

TMatchesJoin::~TMatchesJoin() {
	// @@protoc_insertion_point(destructor:server.TMatchesJoin)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatchesJoin::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TMatchesJoin::ArenaDtor(void *object) {
	TMatchesJoin *_this = reinterpret_cast<TMatchesJoin *>(object);
	(void)_this;
}
void TMatchesJoin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatchesJoin::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatchesJoin &TMatchesJoin::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatchesJoin_api_2eproto.base);
	return *internal_default_instance();
}

void TMatchesJoin::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatchesJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	matches_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatchesJoin::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TMatchesJoin.MatchJoin matches = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatchesJoin::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatchesJoin)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TMatchesJoin.MatchJoin matches = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_matches_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_matches(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatchesJoin)
	return target;
}

size_t TMatchesJoin::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatchesJoin)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TMatchesJoin.MatchJoin matches = 1;
	total_size += 1UL * this->_internal_matches_size();
	for (const auto &msg : this->matches_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatchesJoin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchesJoin)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatchesJoin *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatchesJoin>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchesJoin)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchesJoin)
		MergeFrom(*source);
	}
}

void TMatchesJoin::MergeFrom(const TMatchesJoin &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchesJoin)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	matches_.MergeFrom(from.matches_);
}

void TMatchesJoin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchesJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatchesJoin::CopyFrom(const TMatchesJoin &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchesJoin)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatchesJoin::IsInitialized() const {
	return true;
}

void TMatchesJoin::InternalSwap(TMatchesJoin *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	matches_.InternalSwap(&other->matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatchesJoin::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatches::_Internal {
public:
};

TMatches::TMatches(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		matches_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatches)
}
TMatches::TMatches(const TMatches &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		matches_(from.matches_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TMatches)
}

void TMatches::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TMatches_api_2eproto.base);
}

TMatches::~TMatches() {
	// @@protoc_insertion_point(destructor:server.TMatches)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatches::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TMatches::ArenaDtor(void *object) {
	TMatches *_this = reinterpret_cast<TMatches *>(object);
	(void)_this;
}
void TMatches::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatches::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatches &TMatches::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatches_api_2eproto.base);
	return *internal_default_instance();
}

void TMatches::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatches)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	matches_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatches::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.Match matches = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatches::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatches)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.Match matches = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_matches_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_matches(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatches)
	return target;
}

size_t TMatches::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatches)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.Match matches = 1;
	total_size += 1UL * this->_internal_matches_size();
	for (const auto &msg : this->matches_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatches::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatches)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatches *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatches>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatches)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatches)
		MergeFrom(*source);
	}
}

void TMatches::MergeFrom(const TMatches &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatches)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	matches_.MergeFrom(from.matches_);
}

void TMatches::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatches)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatches::CopyFrom(const TMatches &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatches)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatches::IsInitialized() const {
	return true;
}

void TMatches::InternalSwap(TMatches *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	matches_.InternalSwap(&other->matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatches::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class MatchDataSend::_Internal {
public:
};

MatchDataSend::MatchDataSend(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		presences_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.MatchDataSend)
}
MatchDataSend::MatchDataSend(const MatchDataSend &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		presences_(from.presences_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_match_id().empty()) {
		match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_match_id(),
				GetArena());
	}
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_data().empty()) {
		data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
				GetArena());
	}
	op_code_ = from.op_code_;
	// @@protoc_insertion_point(copy_constructor:server.MatchDataSend)
}

void MatchDataSend::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchDataSend_api_2eproto.base);
	match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	op_code_ = PROTOBUF_LONGLONG(0);
}

MatchDataSend::~MatchDataSend() {
	// @@protoc_insertion_point(destructor:server.MatchDataSend)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchDataSend::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchDataSend::ArenaDtor(void *object) {
	MatchDataSend *_this = reinterpret_cast<MatchDataSend *>(object);
	(void)_this;
}
void MatchDataSend::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void MatchDataSend::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MatchDataSend &MatchDataSend::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchDataSend_api_2eproto.base);
	return *internal_default_instance();
}

void MatchDataSend::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.MatchDataSend)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	presences_.Clear();
	match_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	op_code_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *MatchDataSend::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string match_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_match_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.MatchDataSend.match_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 op_code = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					op_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bytes data = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_data();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.UserPresence presences = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_presences(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *MatchDataSend::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.MatchDataSend)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string match_id = 1;
	if (this->match_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.MatchDataSend.match_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_match_id(), target);
	}

	// int64 op_code = 2;
	if (this->op_code() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_op_code(), target);
	}

	// bytes data = 3;
	if (this->data().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
				3, this->_internal_data(), target);
	}

	// repeated .server.UserPresence presences = 4;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_presences_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(4, this->_internal_presences(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.MatchDataSend)
	return target;
}

size_t MatchDataSend::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.MatchDataSend)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.UserPresence presences = 4;
	total_size += 1UL * this->_internal_presences_size();
	for (const auto &msg : this->presences_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string match_id = 1;
	if (this->match_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_match_id());
	}

	// bytes data = 3;
	if (this->data().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
						this->_internal_data());
	}

	// int64 op_code = 2;
	if (this->op_code() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_op_code());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MatchDataSend::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.MatchDataSend)
	GOOGLE_DCHECK_NE(&from, this);
	const MatchDataSend *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchDataSend>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchDataSend)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchDataSend)
		MergeFrom(*source);
	}
}

void MatchDataSend::MergeFrom(const MatchDataSend &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchDataSend)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	presences_.MergeFrom(from.presences_);
	if (from.match_id().size() > 0) {
		_internal_set_match_id(from._internal_match_id());
	}
	if (from.data().size() > 0) {
		_internal_set_data(from._internal_data());
	}
	if (from.op_code() != 0) {
		_internal_set_op_code(from._internal_op_code());
	}
}

void MatchDataSend::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.MatchDataSend)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void MatchDataSend::CopyFrom(const MatchDataSend &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchDataSend)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool MatchDataSend::IsInitialized() const {
	return true;
}

void MatchDataSend::InternalSwap(MatchDataSend *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	presences_.InternalSwap(&other->presences_);
	match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(op_code_, other->op_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchDataSend::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class MatchData::_Internal {
public:
	static const ::server::UserPresence &presence(const MatchData *msg);
};

const ::server::UserPresence &
MatchData::_Internal::presence(const MatchData *msg) {
	return *msg->presence_;
}
MatchData::MatchData(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.MatchData)
}
MatchData::MatchData(const MatchData &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_match_id().empty()) {
		match_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_match_id(),
				GetArena());
	}
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_data().empty()) {
		data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
				GetArena());
	}
	if (from._internal_has_presence()) {
		presence_ = new ::server::UserPresence(*from.presence_);
	} else {
		presence_ = nullptr;
	}
	op_code_ = from.op_code_;
	// @@protoc_insertion_point(copy_constructor:server.MatchData)
}

void MatchData::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchData_api_2eproto.base);
	match_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&presence_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&op_code_) - reinterpret_cast<char *>(&presence_)) + sizeof(op_code_));
}

MatchData::~MatchData() {
	// @@protoc_insertion_point(destructor:server.MatchData)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MatchData::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	match_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (this != internal_default_instance())
		delete presence_;
}

void MatchData::ArenaDtor(void *object) {
	MatchData *_this = reinterpret_cast<MatchData *>(object);
	(void)_this;
}
void MatchData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void MatchData::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const MatchData &MatchData::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchData_api_2eproto.base);
	return *internal_default_instance();
}

void MatchData::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.MatchData)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	match_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	if (GetArena() == nullptr && presence_ != nullptr) {
		delete presence_;
	}
	presence_ = nullptr;
	op_code_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *MatchData::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string match_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_match_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.MatchData.match_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.UserPresence presence = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_presence(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 op_code = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
					op_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bytes data = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_data();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *MatchData::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.MatchData)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string match_id = 1;
	if (this->match_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_match_id().data(), static_cast<int>(this->_internal_match_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.MatchData.match_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_match_id(), target);
	}

	// .server.UserPresence presence = 2;
	if (this->has_presence()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						2, _Internal::presence(this), target, stream);
	}

	// int64 op_code = 3;
	if (this->op_code() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_op_code(), target);
	}

	// bytes data = 4;
	if (this->data().size() > 0) {
		target = stream->WriteBytesMaybeAliased(
				4, this->_internal_data(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.MatchData)
	return target;
}

size_t MatchData::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.MatchData)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string match_id = 1;
	if (this->match_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_match_id());
	}

	// bytes data = 4;
	if (this->data().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
						this->_internal_data());
	}

	// .server.UserPresence presence = 2;
	if (this->has_presence()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*presence_);
	}

	// int64 op_code = 3;
	if (this->op_code() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_op_code());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void MatchData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.MatchData)
	GOOGLE_DCHECK_NE(&from, this);
	const MatchData *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchData>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.MatchData)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.MatchData)
		MergeFrom(*source);
	}
}

void MatchData::MergeFrom(const MatchData &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.MatchData)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.match_id().size() > 0) {
		_internal_set_match_id(from._internal_match_id());
	}
	if (from.data().size() > 0) {
		_internal_set_data(from._internal_data());
	}
	if (from.has_presence()) {
		_internal_mutable_presence()->::server::UserPresence::MergeFrom(from._internal_presence());
	}
	if (from.op_code() != 0) {
		_internal_set_op_code(from._internal_op_code());
	}
}

void MatchData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.MatchData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void MatchData::CopyFrom(const MatchData &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.MatchData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool MatchData::IsInitialized() const {
	return true;
}

void MatchData::InternalSwap(MatchData *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	match_id_.Swap(&other->match_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(MatchData, op_code_) + sizeof(MatchData::op_code_) - PROTOBUF_FIELD_OFFSET(MatchData, presence_)>(
			reinterpret_cast<char *>(&presence_),
			reinterpret_cast<char *>(&other->presence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchData::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TMatchesLeave::_Internal {
public:
};

TMatchesLeave::TMatchesLeave(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		match_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TMatchesLeave)
}
TMatchesLeave::TMatchesLeave(const TMatchesLeave &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		match_ids_(from.match_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TMatchesLeave)
}

void TMatchesLeave::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TMatchesLeave_api_2eproto.base);
}

TMatchesLeave::~TMatchesLeave() {
	// @@protoc_insertion_point(destructor:server.TMatchesLeave)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TMatchesLeave::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TMatchesLeave::ArenaDtor(void *object) {
	TMatchesLeave *_this = reinterpret_cast<TMatchesLeave *>(object);
	(void)_this;
}
void TMatchesLeave::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TMatchesLeave::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TMatchesLeave &TMatchesLeave::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TMatchesLeave_api_2eproto.base);
	return *internal_default_instance();
}

void TMatchesLeave::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TMatchesLeave)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	match_ids_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TMatchesLeave::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string match_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_match_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TMatchesLeave.match_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TMatchesLeave::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TMatchesLeave)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string match_ids = 1;
	for (int i = 0, n = this->_internal_match_ids_size(); i < n; i++) {
		const auto &s = this->_internal_match_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TMatchesLeave.match_ids");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TMatchesLeave)
	return target;
}

size_t TMatchesLeave::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TMatchesLeave)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string match_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(match_ids_.size());
	for (int i = 0, n = match_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				match_ids_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TMatchesLeave::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TMatchesLeave)
	GOOGLE_DCHECK_NE(&from, this);
	const TMatchesLeave *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TMatchesLeave>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TMatchesLeave)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TMatchesLeave)
		MergeFrom(*source);
	}
}

void TMatchesLeave::MergeFrom(const TMatchesLeave &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TMatchesLeave)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	match_ids_.MergeFrom(from.match_ids_);
}

void TMatchesLeave::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TMatchesLeave)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TMatchesLeave::CopyFrom(const TMatchesLeave &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TMatchesLeave)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TMatchesLeave::IsInitialized() const {
	return true;
}

void TMatchesLeave::InternalSwap(TMatchesLeave *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	match_ids_.InternalSwap(&other->match_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TMatchesLeave::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageList::_Internal {
public:
};

TStorageList::TStorageList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageList)
}
TStorageList::TStorageList(const TStorageList &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_bucket().empty()) {
		bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
				GetArena());
	}
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collection().empty()) {
		collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection(),
				GetArena());
	}
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	limit_ = from.limit_;
	// @@protoc_insertion_point(copy_constructor:server.TStorageList)
}

void TStorageList::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageList_api_2eproto.base);
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	limit_ = PROTOBUF_LONGLONG(0);
}

TStorageList::~TStorageList() {
	// @@protoc_insertion_point(destructor:server.TStorageList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageList::ArenaDtor(void *object) {
	TStorageList *_this = reinterpret_cast<TStorageList *>(object);
	(void)_this;
}
void TStorageList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageList &TStorageList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageList_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	limit_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string user_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageList.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string bucket = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_bucket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageList.bucket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string collection = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_collection();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageList.collection"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 limit = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
					limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string cursor = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageList.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string user_id = 1;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageList.user_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_user_id(), target);
	}

	// string bucket = 2;
	if (this->bucket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageList.bucket");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_bucket(), target);
	}

	// string collection = 3;
	if (this->collection().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageList.collection");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_collection(), target);
	}

	// int64 limit = 4;
	if (this->limit() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_limit(), target);
	}

	// string cursor = 5;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageList.cursor");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageList)
	return target;
}

size_t TStorageList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string user_id = 1;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	// string bucket = 2;
	if (this->bucket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_bucket());
	}

	// string collection = 3;
	if (this->collection().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collection());
	}

	// string cursor = 5;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	// int64 limit = 4;
	if (this->limit() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_limit());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageList)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageList)
		MergeFrom(*source);
	}
}

void TStorageList::MergeFrom(const TStorageList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
	if (from.bucket().size() > 0) {
		_internal_set_bucket(from._internal_bucket());
	}
	if (from.collection().size() > 0) {
		_internal_set_collection(from._internal_collection());
	}
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
	if (from.limit() != 0) {
		_internal_set_limit(from._internal_limit());
	}
}

void TStorageList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageList::CopyFrom(const TStorageList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageList::IsInitialized() const {
	return true;
}

void TStorageList::InternalSwap(TStorageList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageFetch_StorageKey::_Internal {
public:
};

TStorageFetch_StorageKey::TStorageFetch_StorageKey(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageFetch.StorageKey)
}
TStorageFetch_StorageKey::TStorageFetch_StorageKey(const TStorageFetch_StorageKey &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_bucket().empty()) {
		bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
				GetArena());
	}
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collection().empty()) {
		collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection(),
				GetArena());
	}
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_record().empty()) {
		record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record(),
				GetArena());
	}
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TStorageFetch.StorageKey)
}

void TStorageFetch_StorageKey::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageFetch_StorageKey_api_2eproto.base);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TStorageFetch_StorageKey::~TStorageFetch_StorageKey() {
	// @@protoc_insertion_point(destructor:server.TStorageFetch.StorageKey)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageFetch_StorageKey::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageFetch_StorageKey::ArenaDtor(void *object) {
	TStorageFetch_StorageKey *_this = reinterpret_cast<TStorageFetch_StorageKey *>(object);
	(void)_this;
}
void TStorageFetch_StorageKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageFetch_StorageKey::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageFetch_StorageKey &TStorageFetch_StorageKey::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageFetch_StorageKey_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageFetch_StorageKey::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageFetch.StorageKey)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageFetch_StorageKey::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string bucket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_bucket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageFetch.StorageKey.bucket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string collection = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_collection();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageFetch.StorageKey.collection"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string record = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_record();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageFetch.StorageKey.record"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string user_id = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageFetch.StorageKey.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageFetch_StorageKey::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageFetch.StorageKey)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageFetch.StorageKey.bucket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_bucket(), target);
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageFetch.StorageKey.collection");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_collection(), target);
	}

	// string record = 3;
	if (this->record().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_record().data(), static_cast<int>(this->_internal_record().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageFetch.StorageKey.record");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_record(), target);
	}

	// string user_id = 4;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageFetch.StorageKey.user_id");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_user_id(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageFetch.StorageKey)
	return target;
}

size_t TStorageFetch_StorageKey::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageFetch.StorageKey)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_bucket());
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collection());
	}

	// string record = 3;
	if (this->record().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_record());
	}

	// string user_id = 4;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageFetch_StorageKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageFetch.StorageKey)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageFetch_StorageKey *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageFetch_StorageKey>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageFetch.StorageKey)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageFetch.StorageKey)
		MergeFrom(*source);
	}
}

void TStorageFetch_StorageKey::MergeFrom(const TStorageFetch_StorageKey &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageFetch.StorageKey)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.bucket().size() > 0) {
		_internal_set_bucket(from._internal_bucket());
	}
	if (from.collection().size() > 0) {
		_internal_set_collection(from._internal_collection());
	}
	if (from.record().size() > 0) {
		_internal_set_record(from._internal_record());
	}
	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
}

void TStorageFetch_StorageKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageFetch.StorageKey)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageFetch_StorageKey::CopyFrom(const TStorageFetch_StorageKey &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageFetch.StorageKey)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageFetch_StorageKey::IsInitialized() const {
	return true;
}

void TStorageFetch_StorageKey::InternalSwap(TStorageFetch_StorageKey *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.Swap(&other->record_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageFetch_StorageKey::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageFetch::_Internal {
public:
};

TStorageFetch::TStorageFetch(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		keys_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageFetch)
}
TStorageFetch::TStorageFetch(const TStorageFetch &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		keys_(from.keys_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TStorageFetch)
}

void TStorageFetch::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageFetch_api_2eproto.base);
}

TStorageFetch::~TStorageFetch() {
	// @@protoc_insertion_point(destructor:server.TStorageFetch)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageFetch::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TStorageFetch::ArenaDtor(void *object) {
	TStorageFetch *_this = reinterpret_cast<TStorageFetch *>(object);
	(void)_this;
}
void TStorageFetch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageFetch::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageFetch &TStorageFetch::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageFetch_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageFetch::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	keys_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageFetch::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TStorageFetch.StorageKey keys = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageFetch::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TStorageFetch.StorageKey keys = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_keys_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_keys(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageFetch)
	return target;
}

size_t TStorageFetch::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageFetch)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TStorageFetch.StorageKey keys = 1;
	total_size += 1UL * this->_internal_keys_size();
	for (const auto &msg : this->keys_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageFetch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageFetch)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageFetch *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageFetch>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageFetch)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageFetch)
		MergeFrom(*source);
	}
}

void TStorageFetch::MergeFrom(const TStorageFetch &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageFetch)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	keys_.MergeFrom(from.keys_);
}

void TStorageFetch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageFetch::CopyFrom(const TStorageFetch &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageFetch::IsInitialized() const {
	return true;
}

void TStorageFetch::InternalSwap(TStorageFetch *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageFetch::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageData_StorageData::_Internal {
public:
};

TStorageData_StorageData::TStorageData_StorageData(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageData.StorageData)
}
TStorageData_StorageData::TStorageData_StorageData(const TStorageData_StorageData &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_bucket().empty()) {
		bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
				GetArena());
	}
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collection().empty()) {
		collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection(),
				GetArena());
	}
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_record().empty()) {
		record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record(),
				GetArena());
	}
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_user_id().empty()) {
		user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
				GetArena());
	}
	value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_value().empty()) {
		value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
				GetArena());
	}
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_version().empty()) {
		version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
				GetArena());
	}
	::memcpy(&permission_read_, &from.permission_read_,
			static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) -
					reinterpret_cast<char *>(&permission_read_)) +
					sizeof(expires_at_));
	// @@protoc_insertion_point(copy_constructor:server.TStorageData.StorageData)
}

void TStorageData_StorageData::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageData_StorageData_api_2eproto.base);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&permission_read_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) - reinterpret_cast<char *>(&permission_read_)) + sizeof(expires_at_));
}

TStorageData_StorageData::~TStorageData_StorageData() {
	// @@protoc_insertion_point(destructor:server.TStorageData.StorageData)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageData_StorageData::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageData_StorageData::ArenaDtor(void *object) {
	TStorageData_StorageData *_this = reinterpret_cast<TStorageData_StorageData *>(object);
	(void)_this;
}
void TStorageData_StorageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageData_StorageData::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageData_StorageData &TStorageData_StorageData::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageData_StorageData_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageData_StorageData::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageData.StorageData)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&permission_read_, 0, static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) - reinterpret_cast<char *>(&permission_read_)) + sizeof(expires_at_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageData_StorageData::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string bucket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_bucket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageData.StorageData.bucket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string collection = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_collection();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageData.StorageData.collection"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string record = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_record();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageData.StorageData.record"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string user_id = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_user_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageData.StorageData.user_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string value = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_value();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageData.StorageData.value"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string version = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_version();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageData.StorageData.version"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int32 permission_read = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
					permission_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int32 permission_write = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
					permission_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 created_at = 9;
			case 9:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
					created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 updated_at = 10;
			case 10:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
					updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 expires_at = 11;
			case 11:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
					expires_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageData_StorageData::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageData.StorageData)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageData.StorageData.bucket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_bucket(), target);
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageData.StorageData.collection");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_collection(), target);
	}

	// string record = 3;
	if (this->record().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_record().data(), static_cast<int>(this->_internal_record().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageData.StorageData.record");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_record(), target);
	}

	// string user_id = 4;
	if (this->user_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageData.StorageData.user_id");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_user_id(), target);
	}

	// string value = 5;
	if (this->value().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageData.StorageData.value");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_value(), target);
	}

	// string version = 6;
	if (this->version().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageData.StorageData.version");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_version(), target);
	}

	// int32 permission_read = 7;
	if (this->permission_read() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_permission_read(), target);
	}

	// int32 permission_write = 8;
	if (this->permission_write() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_permission_write(), target);
	}

	// int64 created_at = 9;
	if (this->created_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_created_at(), target);
	}

	// int64 updated_at = 10;
	if (this->updated_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_updated_at(), target);
	}

	// int64 expires_at = 11;
	if (this->expires_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_expires_at(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageData.StorageData)
	return target;
}

size_t TStorageData_StorageData::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageData.StorageData)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_bucket());
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collection());
	}

	// string record = 3;
	if (this->record().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_record());
	}

	// string user_id = 4;
	if (this->user_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_user_id());
	}

	// string value = 5;
	if (this->value().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_value());
	}

	// string version = 6;
	if (this->version().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_version());
	}

	// int32 permission_read = 7;
	if (this->permission_read() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_permission_read());
	}

	// int32 permission_write = 8;
	if (this->permission_write() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_permission_write());
	}

	// int64 created_at = 9;
	if (this->created_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_created_at());
	}

	// int64 updated_at = 10;
	if (this->updated_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_updated_at());
	}

	// int64 expires_at = 11;
	if (this->expires_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_expires_at());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageData_StorageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageData.StorageData)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageData_StorageData *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageData_StorageData>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageData.StorageData)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageData.StorageData)
		MergeFrom(*source);
	}
}

void TStorageData_StorageData::MergeFrom(const TStorageData_StorageData &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageData.StorageData)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.bucket().size() > 0) {
		_internal_set_bucket(from._internal_bucket());
	}
	if (from.collection().size() > 0) {
		_internal_set_collection(from._internal_collection());
	}
	if (from.record().size() > 0) {
		_internal_set_record(from._internal_record());
	}
	if (from.user_id().size() > 0) {
		_internal_set_user_id(from._internal_user_id());
	}
	if (from.value().size() > 0) {
		_internal_set_value(from._internal_value());
	}
	if (from.version().size() > 0) {
		_internal_set_version(from._internal_version());
	}
	if (from.permission_read() != 0) {
		_internal_set_permission_read(from._internal_permission_read());
	}
	if (from.permission_write() != 0) {
		_internal_set_permission_write(from._internal_permission_write());
	}
	if (from.created_at() != 0) {
		_internal_set_created_at(from._internal_created_at());
	}
	if (from.updated_at() != 0) {
		_internal_set_updated_at(from._internal_updated_at());
	}
	if (from.expires_at() != 0) {
		_internal_set_expires_at(from._internal_expires_at());
	}
}

void TStorageData_StorageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageData.StorageData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageData_StorageData::CopyFrom(const TStorageData_StorageData &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageData.StorageData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageData_StorageData::IsInitialized() const {
	return true;
}

void TStorageData_StorageData::InternalSwap(TStorageData_StorageData *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.Swap(&other->record_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TStorageData_StorageData, expires_at_) + sizeof(TStorageData_StorageData::expires_at_) - PROTOBUF_FIELD_OFFSET(TStorageData_StorageData, permission_read_)>(
			reinterpret_cast<char *>(&permission_read_),
			reinterpret_cast<char *>(&other->permission_read_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageData_StorageData::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageData::_Internal {
public:
};

TStorageData::TStorageData(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		data_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageData)
}
TStorageData::TStorageData(const TStorageData &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		data_(from.data_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TStorageData)
}

void TStorageData::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageData_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TStorageData::~TStorageData() {
	// @@protoc_insertion_point(destructor:server.TStorageData)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageData::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageData::ArenaDtor(void *object) {
	TStorageData *_this = reinterpret_cast<TStorageData *>(object);
	(void)_this;
}
void TStorageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageData::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageData &TStorageData::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageData_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageData::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageData)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	data_.Clear();
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageData::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TStorageData.StorageData data = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_data(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			// string cursor = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageData.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageData::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageData)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TStorageData.StorageData data = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_data_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_data(i), target, stream);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageData.cursor");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageData)
	return target;
}

size_t TStorageData::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageData)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TStorageData.StorageData data = 1;
	total_size += 1UL * this->_internal_data_size();
	for (const auto &msg : this->data_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageData)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageData *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageData>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageData)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageData)
		MergeFrom(*source);
	}
}

void TStorageData::MergeFrom(const TStorageData &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageData)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	data_.MergeFrom(from.data_);
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
}

void TStorageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageData::CopyFrom(const TStorageData &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageData::IsInitialized() const {
	return true;
}

void TStorageData::InternalSwap(TStorageData *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	data_.InternalSwap(&other->data_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageData::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageWrite_StorageData::_Internal {
public:
};

TStorageWrite_StorageData::TStorageWrite_StorageData(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageWrite.StorageData)
}
TStorageWrite_StorageData::TStorageWrite_StorageData(const TStorageWrite_StorageData &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_bucket().empty()) {
		bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
				GetArena());
	}
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collection().empty()) {
		collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection(),
				GetArena());
	}
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_record().empty()) {
		record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record(),
				GetArena());
	}
	value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_value().empty()) {
		value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
				GetArena());
	}
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_version().empty()) {
		version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
				GetArena());
	}
	::memcpy(&permission_read_, &from.permission_read_,
			static_cast<size_t>(reinterpret_cast<char *>(&permission_write_) -
					reinterpret_cast<char *>(&permission_read_)) +
					sizeof(permission_write_));
	// @@protoc_insertion_point(copy_constructor:server.TStorageWrite.StorageData)
}

void TStorageWrite_StorageData::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageWrite_StorageData_api_2eproto.base);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&permission_read_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&permission_write_) - reinterpret_cast<char *>(&permission_read_)) + sizeof(permission_write_));
}

TStorageWrite_StorageData::~TStorageWrite_StorageData() {
	// @@protoc_insertion_point(destructor:server.TStorageWrite.StorageData)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageWrite_StorageData::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageWrite_StorageData::ArenaDtor(void *object) {
	TStorageWrite_StorageData *_this = reinterpret_cast<TStorageWrite_StorageData *>(object);
	(void)_this;
}
void TStorageWrite_StorageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageWrite_StorageData::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageWrite_StorageData &TStorageWrite_StorageData::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageWrite_StorageData_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageWrite_StorageData::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageWrite.StorageData)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&permission_read_, 0, static_cast<size_t>(reinterpret_cast<char *>(&permission_write_) - reinterpret_cast<char *>(&permission_read_)) + sizeof(permission_write_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageWrite_StorageData::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string bucket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_bucket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageWrite.StorageData.bucket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string collection = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_collection();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageWrite.StorageData.collection"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string record = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_record();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageWrite.StorageData.record"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string value = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_value();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageWrite.StorageData.value"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string version = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_version();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageWrite.StorageData.version"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int32 permission_read = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
					permission_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int32 permission_write = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
					permission_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageWrite_StorageData::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageWrite.StorageData)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageWrite.StorageData.bucket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_bucket(), target);
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageWrite.StorageData.collection");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_collection(), target);
	}

	// string record = 3;
	if (this->record().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_record().data(), static_cast<int>(this->_internal_record().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageWrite.StorageData.record");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_record(), target);
	}

	// string value = 4;
	if (this->value().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageWrite.StorageData.value");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_value(), target);
	}

	// string version = 5;
	if (this->version().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageWrite.StorageData.version");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_version(), target);
	}

	// int32 permission_read = 6;
	if (this->permission_read() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_permission_read(), target);
	}

	// int32 permission_write = 7;
	if (this->permission_write() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_permission_write(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageWrite.StorageData)
	return target;
}

size_t TStorageWrite_StorageData::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageWrite.StorageData)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_bucket());
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collection());
	}

	// string record = 3;
	if (this->record().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_record());
	}

	// string value = 4;
	if (this->value().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_value());
	}

	// string version = 5;
	if (this->version().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_version());
	}

	// int32 permission_read = 6;
	if (this->permission_read() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_permission_read());
	}

	// int32 permission_write = 7;
	if (this->permission_write() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_permission_write());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageWrite_StorageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageWrite.StorageData)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageWrite_StorageData *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageWrite_StorageData>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageWrite.StorageData)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageWrite.StorageData)
		MergeFrom(*source);
	}
}

void TStorageWrite_StorageData::MergeFrom(const TStorageWrite_StorageData &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageWrite.StorageData)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.bucket().size() > 0) {
		_internal_set_bucket(from._internal_bucket());
	}
	if (from.collection().size() > 0) {
		_internal_set_collection(from._internal_collection());
	}
	if (from.record().size() > 0) {
		_internal_set_record(from._internal_record());
	}
	if (from.value().size() > 0) {
		_internal_set_value(from._internal_value());
	}
	if (from.version().size() > 0) {
		_internal_set_version(from._internal_version());
	}
	if (from.permission_read() != 0) {
		_internal_set_permission_read(from._internal_permission_read());
	}
	if (from.permission_write() != 0) {
		_internal_set_permission_write(from._internal_permission_write());
	}
}

void TStorageWrite_StorageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageWrite.StorageData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageWrite_StorageData::CopyFrom(const TStorageWrite_StorageData &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageWrite.StorageData)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageWrite_StorageData::IsInitialized() const {
	return true;
}

void TStorageWrite_StorageData::InternalSwap(TStorageWrite_StorageData *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.Swap(&other->record_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TStorageWrite_StorageData, permission_write_) + sizeof(TStorageWrite_StorageData::permission_write_) - PROTOBUF_FIELD_OFFSET(TStorageWrite_StorageData, permission_read_)>(
			reinterpret_cast<char *>(&permission_read_),
			reinterpret_cast<char *>(&other->permission_read_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageWrite_StorageData::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageWrite::_Internal {
public:
};

TStorageWrite::TStorageWrite(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		data_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageWrite)
}
TStorageWrite::TStorageWrite(const TStorageWrite &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		data_(from.data_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TStorageWrite)
}

void TStorageWrite::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageWrite_api_2eproto.base);
}

TStorageWrite::~TStorageWrite() {
	// @@protoc_insertion_point(destructor:server.TStorageWrite)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageWrite::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TStorageWrite::ArenaDtor(void *object) {
	TStorageWrite *_this = reinterpret_cast<TStorageWrite *>(object);
	(void)_this;
}
void TStorageWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageWrite::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageWrite &TStorageWrite::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageWrite_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageWrite::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageWrite)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	data_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageWrite::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TStorageWrite.StorageData data = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_data(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageWrite::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageWrite)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TStorageWrite.StorageData data = 3;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_data_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(3, this->_internal_data(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageWrite)
	return target;
}

size_t TStorageWrite::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageWrite)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TStorageWrite.StorageData data = 3;
	total_size += 1UL * this->_internal_data_size();
	for (const auto &msg : this->data_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageWrite)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageWrite *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageWrite>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageWrite)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageWrite)
		MergeFrom(*source);
	}
}

void TStorageWrite::MergeFrom(const TStorageWrite &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageWrite)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	data_.MergeFrom(from.data_);
}

void TStorageWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageWrite)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageWrite::CopyFrom(const TStorageWrite &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageWrite)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageWrite::IsInitialized() const {
	return true;
}

void TStorageWrite::InternalSwap(TStorageWrite *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageWrite::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageUpdate_StorageUpdate_UpdateOp::_Internal {
public:
};

TStorageUpdate_StorageUpdate_UpdateOp::TStorageUpdate_StorageUpdate_UpdateOp(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		ops_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageUpdate.StorageUpdate.UpdateOp)
}
TStorageUpdate_StorageUpdate_UpdateOp::TStorageUpdate_StorageUpdate_UpdateOp(const TStorageUpdate_StorageUpdate_UpdateOp &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		ops_(from.ops_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_path().empty()) {
		path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_path(),
				GetArena());
	}
	value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_value().empty()) {
		value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
				GetArena());
	}
	from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_from().empty()) {
		from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
				GetArena());
	}
	::memcpy(&op_, &from.op_,
			static_cast<size_t>(reinterpret_cast<char *>(&assert_) -
					reinterpret_cast<char *>(&op_)) +
					sizeof(assert_));
	// @@protoc_insertion_point(copy_constructor:server.TStorageUpdate.StorageUpdate.UpdateOp)
}

void TStorageUpdate_StorageUpdate_UpdateOp::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageUpdate_StorageUpdate_UpdateOp_api_2eproto.base);
	path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&op_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&assert_) - reinterpret_cast<char *>(&op_)) + sizeof(assert_));
}

TStorageUpdate_StorageUpdate_UpdateOp::~TStorageUpdate_StorageUpdate_UpdateOp() {
	// @@protoc_insertion_point(destructor:server.TStorageUpdate.StorageUpdate.UpdateOp)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageUpdate_StorageUpdate_UpdateOp::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageUpdate_StorageUpdate_UpdateOp::ArenaDtor(void *object) {
	TStorageUpdate_StorageUpdate_UpdateOp *_this = reinterpret_cast<TStorageUpdate_StorageUpdate_UpdateOp *>(object);
	(void)_this;
}
void TStorageUpdate_StorageUpdate_UpdateOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageUpdate_StorageUpdate_UpdateOp::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageUpdate_StorageUpdate_UpdateOp &TStorageUpdate_StorageUpdate_UpdateOp::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageUpdate_StorageUpdate_UpdateOp_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageUpdate_StorageUpdate_UpdateOp::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	ops_.Clear();
	path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&op_, 0, static_cast<size_t>(reinterpret_cast<char *>(&assert_) - reinterpret_cast<char *>(&op_)) + sizeof(assert_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageUpdate_StorageUpdate_UpdateOp::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int32 op = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					op_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string path = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_path();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageUpdate.StorageUpdate.UpdateOp.path"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string value = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_value();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageUpdate.StorageUpdate.UpdateOp.value"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string from = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_from();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageUpdate.StorageUpdate.UpdateOp.from"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool conditional = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
					conditional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 assert = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
					assert_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageUpdate_StorageUpdate_UpdateOp::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int32 op = 1;
	if (this->op() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_op(), target);
	}

	// string path = 2;
	if (this->path().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageUpdate.StorageUpdate.UpdateOp.path");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_path(), target);
	}

	// string value = 3;
	if (this->value().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageUpdate.StorageUpdate.UpdateOp.value");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_value(), target);
	}

	// string from = 4;
	if (this->from().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageUpdate.StorageUpdate.UpdateOp.from");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_from(), target);
	}

	// bool conditional = 5;
	if (this->conditional() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_conditional(), target);
	}

	// int64 assert = 6;
	if (this->assert() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_assert(), target);
	}

	// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_ops_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(7, this->_internal_ops(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageUpdate.StorageUpdate.UpdateOp)
	return target;
}

size_t TStorageUpdate_StorageUpdate_UpdateOp::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 7;
	total_size += 1UL * this->_internal_ops_size();
	for (const auto &msg : this->ops_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string path = 2;
	if (this->path().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_path());
	}

	// string value = 3;
	if (this->value().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_value());
	}

	// string from = 4;
	if (this->from().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_from());
	}

	// int32 op = 1;
	if (this->op() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_op());
	}

	// bool conditional = 5;
	if (this->conditional() != 0) {
		total_size += 1 + 1;
	}

	// int64 assert = 6;
	if (this->assert() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_assert());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageUpdate_StorageUpdate_UpdateOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageUpdate_StorageUpdate_UpdateOp *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageUpdate_StorageUpdate_UpdateOp>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageUpdate.StorageUpdate.UpdateOp)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageUpdate.StorageUpdate.UpdateOp)
		MergeFrom(*source);
	}
}

void TStorageUpdate_StorageUpdate_UpdateOp::MergeFrom(const TStorageUpdate_StorageUpdate_UpdateOp &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	ops_.MergeFrom(from.ops_);
	if (from.path().size() > 0) {
		_internal_set_path(from._internal_path());
	}
	if (from.value().size() > 0) {
		_internal_set_value(from._internal_value());
	}
	if (from.from().size() > 0) {
		_internal_set_from(from._internal_from());
	}
	if (from.op() != 0) {
		_internal_set_op(from._internal_op());
	}
	if (from.conditional() != 0) {
		_internal_set_conditional(from._internal_conditional());
	}
	if (from.assert() != 0) {
		_internal_set_assert(from._internal_assert());
	}
}

void TStorageUpdate_StorageUpdate_UpdateOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageUpdate_StorageUpdate_UpdateOp::CopyFrom(const TStorageUpdate_StorageUpdate_UpdateOp &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageUpdate.StorageUpdate.UpdateOp)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageUpdate_StorageUpdate_UpdateOp::IsInitialized() const {
	return true;
}

void TStorageUpdate_StorageUpdate_UpdateOp::InternalSwap(TStorageUpdate_StorageUpdate_UpdateOp *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	ops_.InternalSwap(&other->ops_);
	path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, assert_) + sizeof(TStorageUpdate_StorageUpdate_UpdateOp::assert_) - PROTOBUF_FIELD_OFFSET(TStorageUpdate_StorageUpdate_UpdateOp, op_)>(
			reinterpret_cast<char *>(&op_),
			reinterpret_cast<char *>(&other->op_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageUpdate_StorageUpdate_UpdateOp::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageUpdate_StorageUpdate_StorageKey::_Internal {
public:
};

TStorageUpdate_StorageUpdate_StorageKey::TStorageUpdate_StorageUpdate_StorageKey(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageUpdate.StorageUpdate.StorageKey)
}
TStorageUpdate_StorageUpdate_StorageKey::TStorageUpdate_StorageUpdate_StorageKey(const TStorageUpdate_StorageUpdate_StorageKey &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_bucket().empty()) {
		bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
				GetArena());
	}
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collection().empty()) {
		collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection(),
				GetArena());
	}
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_record().empty()) {
		record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record(),
				GetArena());
	}
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_version().empty()) {
		version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TStorageUpdate.StorageUpdate.StorageKey)
}

void TStorageUpdate_StorageUpdate_StorageKey::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageUpdate_StorageUpdate_StorageKey_api_2eproto.base);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TStorageUpdate_StorageUpdate_StorageKey::~TStorageUpdate_StorageUpdate_StorageKey() {
	// @@protoc_insertion_point(destructor:server.TStorageUpdate.StorageUpdate.StorageKey)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageUpdate_StorageUpdate_StorageKey::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageUpdate_StorageUpdate_StorageKey::ArenaDtor(void *object) {
	TStorageUpdate_StorageUpdate_StorageKey *_this = reinterpret_cast<TStorageUpdate_StorageUpdate_StorageKey *>(object);
	(void)_this;
}
void TStorageUpdate_StorageUpdate_StorageKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageUpdate_StorageUpdate_StorageKey::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageUpdate_StorageUpdate_StorageKey &TStorageUpdate_StorageUpdate_StorageKey::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageUpdate_StorageUpdate_StorageKey_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageUpdate_StorageUpdate_StorageKey::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageUpdate.StorageUpdate.StorageKey)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageUpdate_StorageUpdate_StorageKey::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string bucket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_bucket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageUpdate.StorageUpdate.StorageKey.bucket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string collection = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_collection();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageUpdate.StorageUpdate.StorageKey.collection"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string record = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_record();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageUpdate.StorageUpdate.StorageKey.record"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string version = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_version();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageUpdate.StorageUpdate.StorageKey.version"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageUpdate_StorageUpdate_StorageKey::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageUpdate.StorageUpdate.StorageKey)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageUpdate.StorageUpdate.StorageKey.bucket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_bucket(), target);
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageUpdate.StorageUpdate.StorageKey.collection");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_collection(), target);
	}

	// string record = 3;
	if (this->record().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_record().data(), static_cast<int>(this->_internal_record().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageUpdate.StorageUpdate.StorageKey.record");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_record(), target);
	}

	// string version = 4;
	if (this->version().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageUpdate.StorageUpdate.StorageKey.version");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_version(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageUpdate.StorageUpdate.StorageKey)
	return target;
}

size_t TStorageUpdate_StorageUpdate_StorageKey::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageUpdate.StorageUpdate.StorageKey)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_bucket());
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collection());
	}

	// string record = 3;
	if (this->record().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_record());
	}

	// string version = 4;
	if (this->version().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_version());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageUpdate_StorageUpdate_StorageKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageUpdate.StorageUpdate.StorageKey)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageUpdate_StorageUpdate_StorageKey *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageUpdate_StorageUpdate_StorageKey>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageUpdate.StorageUpdate.StorageKey)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageUpdate.StorageUpdate.StorageKey)
		MergeFrom(*source);
	}
}

void TStorageUpdate_StorageUpdate_StorageKey::MergeFrom(const TStorageUpdate_StorageUpdate_StorageKey &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageUpdate.StorageUpdate.StorageKey)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.bucket().size() > 0) {
		_internal_set_bucket(from._internal_bucket());
	}
	if (from.collection().size() > 0) {
		_internal_set_collection(from._internal_collection());
	}
	if (from.record().size() > 0) {
		_internal_set_record(from._internal_record());
	}
	if (from.version().size() > 0) {
		_internal_set_version(from._internal_version());
	}
}

void TStorageUpdate_StorageUpdate_StorageKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageUpdate.StorageUpdate.StorageKey)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageUpdate_StorageUpdate_StorageKey::CopyFrom(const TStorageUpdate_StorageUpdate_StorageKey &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageUpdate.StorageUpdate.StorageKey)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageUpdate_StorageUpdate_StorageKey::IsInitialized() const {
	return true;
}

void TStorageUpdate_StorageUpdate_StorageKey::InternalSwap(TStorageUpdate_StorageUpdate_StorageKey *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.Swap(&other->record_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageUpdate_StorageUpdate_StorageKey::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageUpdate_StorageUpdate::_Internal {
public:
	static const ::server::TStorageUpdate_StorageUpdate_StorageKey &key(const TStorageUpdate_StorageUpdate *msg);
};

const ::server::TStorageUpdate_StorageUpdate_StorageKey &
TStorageUpdate_StorageUpdate::_Internal::key(const TStorageUpdate_StorageUpdate *msg) {
	return *msg->key_;
}
TStorageUpdate_StorageUpdate::TStorageUpdate_StorageUpdate(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		ops_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageUpdate.StorageUpdate)
}
TStorageUpdate_StorageUpdate::TStorageUpdate_StorageUpdate(const TStorageUpdate_StorageUpdate &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		ops_(from.ops_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	if (from._internal_has_key()) {
		key_ = new ::server::TStorageUpdate_StorageUpdate_StorageKey(*from.key_);
	} else {
		key_ = nullptr;
	}
	::memcpy(&permission_read_, &from.permission_read_,
			static_cast<size_t>(reinterpret_cast<char *>(&permission_write_) -
					reinterpret_cast<char *>(&permission_read_)) +
					sizeof(permission_write_));
	// @@protoc_insertion_point(copy_constructor:server.TStorageUpdate.StorageUpdate)
}

void TStorageUpdate_StorageUpdate::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageUpdate_StorageUpdate_api_2eproto.base);
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&key_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&permission_write_) - reinterpret_cast<char *>(&key_)) + sizeof(permission_write_));
}

TStorageUpdate_StorageUpdate::~TStorageUpdate_StorageUpdate() {
	// @@protoc_insertion_point(destructor:server.TStorageUpdate.StorageUpdate)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageUpdate_StorageUpdate::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (this != internal_default_instance())
		delete key_;
}

void TStorageUpdate_StorageUpdate::ArenaDtor(void *object) {
	TStorageUpdate_StorageUpdate *_this = reinterpret_cast<TStorageUpdate_StorageUpdate *>(object);
	(void)_this;
}
void TStorageUpdate_StorageUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageUpdate_StorageUpdate::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageUpdate_StorageUpdate &TStorageUpdate_StorageUpdate::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageUpdate_StorageUpdate_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageUpdate_StorageUpdate::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageUpdate.StorageUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	ops_.Clear();
	if (GetArena() == nullptr && key_ != nullptr) {
		delete key_;
	}
	key_ = nullptr;
	::memset(&permission_read_, 0, static_cast<size_t>(reinterpret_cast<char *>(&permission_write_) - reinterpret_cast<char *>(&permission_read_)) + sizeof(permission_write_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageUpdate_StorageUpdate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int32 permission_read = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					permission_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int32 permission_write = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
					permission_write_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageUpdate_StorageUpdate::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageUpdate.StorageUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
	if (this->has_key()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::key(this), target, stream);
	}

	// int32 permission_read = 2;
	if (this->permission_read() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_permission_read(), target);
	}

	// int32 permission_write = 3;
	if (this->permission_write() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_permission_write(), target);
	}

	// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_ops_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(4, this->_internal_ops(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageUpdate.StorageUpdate)
	return target;
}

size_t TStorageUpdate_StorageUpdate::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageUpdate.StorageUpdate)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TStorageUpdate.StorageUpdate.UpdateOp ops = 4;
	total_size += 1UL * this->_internal_ops_size();
	for (const auto &msg : this->ops_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// .server.TStorageUpdate.StorageUpdate.StorageKey key = 1;
	if (this->has_key()) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
						*key_);
	}

	// int32 permission_read = 2;
	if (this->permission_read() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_permission_read());
	}

	// int32 permission_write = 3;
	if (this->permission_write() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
						this->_internal_permission_write());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageUpdate_StorageUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageUpdate.StorageUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageUpdate_StorageUpdate *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageUpdate_StorageUpdate>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageUpdate.StorageUpdate)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageUpdate.StorageUpdate)
		MergeFrom(*source);
	}
}

void TStorageUpdate_StorageUpdate::MergeFrom(const TStorageUpdate_StorageUpdate &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageUpdate.StorageUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	ops_.MergeFrom(from.ops_);
	if (from.has_key()) {
		_internal_mutable_key()->::server::TStorageUpdate_StorageUpdate_StorageKey::MergeFrom(from._internal_key());
	}
	if (from.permission_read() != 0) {
		_internal_set_permission_read(from._internal_permission_read());
	}
	if (from.permission_write() != 0) {
		_internal_set_permission_write(from._internal_permission_write());
	}
}

void TStorageUpdate_StorageUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageUpdate.StorageUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageUpdate_StorageUpdate::CopyFrom(const TStorageUpdate_StorageUpdate &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageUpdate.StorageUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageUpdate_StorageUpdate::IsInitialized() const {
	return true;
}

void TStorageUpdate_StorageUpdate::InternalSwap(TStorageUpdate_StorageUpdate *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	ops_.InternalSwap(&other->ops_);
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TStorageUpdate_StorageUpdate, permission_write_) + sizeof(TStorageUpdate_StorageUpdate::permission_write_) - PROTOBUF_FIELD_OFFSET(TStorageUpdate_StorageUpdate, key_)>(
			reinterpret_cast<char *>(&key_),
			reinterpret_cast<char *>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageUpdate_StorageUpdate::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageUpdate::_Internal {
public:
};

TStorageUpdate::TStorageUpdate(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		updates_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageUpdate)
}
TStorageUpdate::TStorageUpdate(const TStorageUpdate &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		updates_(from.updates_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TStorageUpdate)
}

void TStorageUpdate::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageUpdate_api_2eproto.base);
}

TStorageUpdate::~TStorageUpdate() {
	// @@protoc_insertion_point(destructor:server.TStorageUpdate)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageUpdate::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TStorageUpdate::ArenaDtor(void *object) {
	TStorageUpdate *_this = reinterpret_cast<TStorageUpdate *>(object);
	(void)_this;
}
void TStorageUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageUpdate::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageUpdate &TStorageUpdate::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageUpdate_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageUpdate::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	updates_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageUpdate::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TStorageUpdate.StorageUpdate updates = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageUpdate::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageUpdate)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TStorageUpdate.StorageUpdate updates = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_updates_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_updates(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageUpdate)
	return target;
}

size_t TStorageUpdate::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageUpdate)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TStorageUpdate.StorageUpdate updates = 1;
	total_size += 1UL * this->_internal_updates_size();
	for (const auto &msg : this->updates_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageUpdate *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageUpdate>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageUpdate)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageUpdate)
		MergeFrom(*source);
	}
}

void TStorageUpdate::MergeFrom(const TStorageUpdate &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageUpdate)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	updates_.MergeFrom(from.updates_);
}

void TStorageUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageUpdate::CopyFrom(const TStorageUpdate &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageUpdate)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageUpdate::IsInitialized() const {
	return true;
}

void TStorageUpdate::InternalSwap(TStorageUpdate *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	updates_.InternalSwap(&other->updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageUpdate::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageKeys_StorageKey::_Internal {
public:
};

TStorageKeys_StorageKey::TStorageKeys_StorageKey(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageKeys.StorageKey)
}
TStorageKeys_StorageKey::TStorageKeys_StorageKey(const TStorageKeys_StorageKey &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_bucket().empty()) {
		bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
				GetArena());
	}
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collection().empty()) {
		collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection(),
				GetArena());
	}
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_record().empty()) {
		record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record(),
				GetArena());
	}
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_version().empty()) {
		version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TStorageKeys.StorageKey)
}

void TStorageKeys_StorageKey::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageKeys_StorageKey_api_2eproto.base);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TStorageKeys_StorageKey::~TStorageKeys_StorageKey() {
	// @@protoc_insertion_point(destructor:server.TStorageKeys.StorageKey)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageKeys_StorageKey::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageKeys_StorageKey::ArenaDtor(void *object) {
	TStorageKeys_StorageKey *_this = reinterpret_cast<TStorageKeys_StorageKey *>(object);
	(void)_this;
}
void TStorageKeys_StorageKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageKeys_StorageKey::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageKeys_StorageKey &TStorageKeys_StorageKey::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageKeys_StorageKey_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageKeys_StorageKey::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageKeys.StorageKey)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageKeys_StorageKey::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string bucket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_bucket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageKeys.StorageKey.bucket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string collection = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_collection();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageKeys.StorageKey.collection"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string record = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_record();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageKeys.StorageKey.record"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string version = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_version();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageKeys.StorageKey.version"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageKeys_StorageKey::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageKeys.StorageKey)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageKeys.StorageKey.bucket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_bucket(), target);
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageKeys.StorageKey.collection");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_collection(), target);
	}

	// string record = 3;
	if (this->record().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_record().data(), static_cast<int>(this->_internal_record().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageKeys.StorageKey.record");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_record(), target);
	}

	// string version = 4;
	if (this->version().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageKeys.StorageKey.version");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_version(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageKeys.StorageKey)
	return target;
}

size_t TStorageKeys_StorageKey::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageKeys.StorageKey)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_bucket());
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collection());
	}

	// string record = 3;
	if (this->record().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_record());
	}

	// string version = 4;
	if (this->version().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_version());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageKeys_StorageKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageKeys.StorageKey)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageKeys_StorageKey *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageKeys_StorageKey>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageKeys.StorageKey)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageKeys.StorageKey)
		MergeFrom(*source);
	}
}

void TStorageKeys_StorageKey::MergeFrom(const TStorageKeys_StorageKey &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageKeys.StorageKey)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.bucket().size() > 0) {
		_internal_set_bucket(from._internal_bucket());
	}
	if (from.collection().size() > 0) {
		_internal_set_collection(from._internal_collection());
	}
	if (from.record().size() > 0) {
		_internal_set_record(from._internal_record());
	}
	if (from.version().size() > 0) {
		_internal_set_version(from._internal_version());
	}
}

void TStorageKeys_StorageKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageKeys.StorageKey)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageKeys_StorageKey::CopyFrom(const TStorageKeys_StorageKey &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageKeys.StorageKey)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageKeys_StorageKey::IsInitialized() const {
	return true;
}

void TStorageKeys_StorageKey::InternalSwap(TStorageKeys_StorageKey *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.Swap(&other->record_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageKeys_StorageKey::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageKeys::_Internal {
public:
};

TStorageKeys::TStorageKeys(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		keys_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageKeys)
}
TStorageKeys::TStorageKeys(const TStorageKeys &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		keys_(from.keys_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TStorageKeys)
}

void TStorageKeys::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageKeys_api_2eproto.base);
}

TStorageKeys::~TStorageKeys() {
	// @@protoc_insertion_point(destructor:server.TStorageKeys)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageKeys::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TStorageKeys::ArenaDtor(void *object) {
	TStorageKeys *_this = reinterpret_cast<TStorageKeys *>(object);
	(void)_this;
}
void TStorageKeys::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageKeys::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageKeys &TStorageKeys::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageKeys_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageKeys::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageKeys)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	keys_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageKeys::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TStorageKeys.StorageKey keys = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageKeys::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageKeys)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TStorageKeys.StorageKey keys = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_keys_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_keys(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageKeys)
	return target;
}

size_t TStorageKeys::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageKeys)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TStorageKeys.StorageKey keys = 1;
	total_size += 1UL * this->_internal_keys_size();
	for (const auto &msg : this->keys_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageKeys::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageKeys)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageKeys *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageKeys>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageKeys)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageKeys)
		MergeFrom(*source);
	}
}

void TStorageKeys::MergeFrom(const TStorageKeys &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageKeys)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	keys_.MergeFrom(from.keys_);
}

void TStorageKeys::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageKeys)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageKeys::CopyFrom(const TStorageKeys &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageKeys)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageKeys::IsInitialized() const {
	return true;
}

void TStorageKeys::InternalSwap(TStorageKeys *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageKeys::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageRemove_StorageKey::_Internal {
public:
};

TStorageRemove_StorageKey::TStorageRemove_StorageKey(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageRemove.StorageKey)
}
TStorageRemove_StorageKey::TStorageRemove_StorageKey(const TStorageRemove_StorageKey &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_bucket().empty()) {
		bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_bucket(),
				GetArena());
	}
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_collection().empty()) {
		collection_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_collection(),
				GetArena());
	}
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_record().empty()) {
		record_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_record(),
				GetArena());
	}
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_version().empty()) {
		version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TStorageRemove.StorageKey)
}

void TStorageRemove_StorageKey::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageRemove_StorageKey_api_2eproto.base);
	bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TStorageRemove_StorageKey::~TStorageRemove_StorageKey() {
	// @@protoc_insertion_point(destructor:server.TStorageRemove.StorageKey)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageRemove_StorageKey::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	collection_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	record_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TStorageRemove_StorageKey::ArenaDtor(void *object) {
	TStorageRemove_StorageKey *_this = reinterpret_cast<TStorageRemove_StorageKey *>(object);
	(void)_this;
}
void TStorageRemove_StorageKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageRemove_StorageKey::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageRemove_StorageKey &TStorageRemove_StorageKey::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageRemove_StorageKey_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageRemove_StorageKey::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageRemove.StorageKey)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	bucket_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageRemove_StorageKey::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string bucket = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_bucket();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageRemove.StorageKey.bucket"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string collection = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_collection();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageRemove.StorageKey.collection"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string record = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_record();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageRemove.StorageKey.record"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string version = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_version();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TStorageRemove.StorageKey.version"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageRemove_StorageKey::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageRemove.StorageKey)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_bucket().data(), static_cast<int>(this->_internal_bucket().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageRemove.StorageKey.bucket");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_bucket(), target);
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_collection().data(), static_cast<int>(this->_internal_collection().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageRemove.StorageKey.collection");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_collection(), target);
	}

	// string record = 3;
	if (this->record().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_record().data(), static_cast<int>(this->_internal_record().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageRemove.StorageKey.record");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_record(), target);
	}

	// string version = 4;
	if (this->version().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TStorageRemove.StorageKey.version");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_version(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageRemove.StorageKey)
	return target;
}

size_t TStorageRemove_StorageKey::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageRemove.StorageKey)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string bucket = 1;
	if (this->bucket().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_bucket());
	}

	// string collection = 2;
	if (this->collection().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_collection());
	}

	// string record = 3;
	if (this->record().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_record());
	}

	// string version = 4;
	if (this->version().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_version());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageRemove_StorageKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageRemove.StorageKey)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageRemove_StorageKey *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageRemove_StorageKey>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageRemove.StorageKey)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageRemove.StorageKey)
		MergeFrom(*source);
	}
}

void TStorageRemove_StorageKey::MergeFrom(const TStorageRemove_StorageKey &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageRemove.StorageKey)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.bucket().size() > 0) {
		_internal_set_bucket(from._internal_bucket());
	}
	if (from.collection().size() > 0) {
		_internal_set_collection(from._internal_collection());
	}
	if (from.record().size() > 0) {
		_internal_set_record(from._internal_record());
	}
	if (from.version().size() > 0) {
		_internal_set_version(from._internal_version());
	}
}

void TStorageRemove_StorageKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageRemove.StorageKey)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageRemove_StorageKey::CopyFrom(const TStorageRemove_StorageKey &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageRemove.StorageKey)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageRemove_StorageKey::IsInitialized() const {
	return true;
}

void TStorageRemove_StorageKey::InternalSwap(TStorageRemove_StorageKey *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	collection_.Swap(&other->collection_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	record_.Swap(&other->record_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageRemove_StorageKey::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TStorageRemove::_Internal {
public:
};

TStorageRemove::TStorageRemove(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		keys_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TStorageRemove)
}
TStorageRemove::TStorageRemove(const TStorageRemove &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		keys_(from.keys_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TStorageRemove)
}

void TStorageRemove::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TStorageRemove_api_2eproto.base);
}

TStorageRemove::~TStorageRemove() {
	// @@protoc_insertion_point(destructor:server.TStorageRemove)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TStorageRemove::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TStorageRemove::ArenaDtor(void *object) {
	TStorageRemove *_this = reinterpret_cast<TStorageRemove *>(object);
	(void)_this;
}
void TStorageRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TStorageRemove::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TStorageRemove &TStorageRemove::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TStorageRemove_api_2eproto.base);
	return *internal_default_instance();
}

void TStorageRemove::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TStorageRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	keys_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TStorageRemove::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TStorageRemove.StorageKey keys = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TStorageRemove::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TStorageRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TStorageRemove.StorageKey keys = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_keys_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_keys(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TStorageRemove)
	return target;
}

size_t TStorageRemove::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TStorageRemove)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TStorageRemove.StorageKey keys = 1;
	total_size += 1UL * this->_internal_keys_size();
	for (const auto &msg : this->keys_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TStorageRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TStorageRemove)
	GOOGLE_DCHECK_NE(&from, this);
	const TStorageRemove *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TStorageRemove>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TStorageRemove)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TStorageRemove)
		MergeFrom(*source);
	}
}

void TStorageRemove::MergeFrom(const TStorageRemove &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TStorageRemove)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	keys_.MergeFrom(from.keys_);
}

void TStorageRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TStorageRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TStorageRemove::CopyFrom(const TStorageRemove &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TStorageRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TStorageRemove::IsInitialized() const {
	return true;
}

void TStorageRemove::InternalSwap(TStorageRemove *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TStorageRemove::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Leaderboard::_Internal {
public:
};

Leaderboard::Leaderboard(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Leaderboard)
}
Leaderboard::Leaderboard(const Leaderboard &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_id().empty()) {
		id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
				GetArena());
	}
	reset_schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_reset_schedule().empty()) {
		reset_schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reset_schedule(),
				GetArena());
	}
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_metadata().empty()) {
		metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata(),
				GetArena());
	}
	::memcpy(&sort_, &from.sort_,
			static_cast<size_t>(reinterpret_cast<char *>(&authoritative_) -
					reinterpret_cast<char *>(&sort_)) +
					sizeof(authoritative_));
	// @@protoc_insertion_point(copy_constructor:server.Leaderboard)
}

void Leaderboard::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Leaderboard_api_2eproto.base);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	reset_schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&sort_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&authoritative_) - reinterpret_cast<char *>(&sort_)) + sizeof(authoritative_));
}

Leaderboard::~Leaderboard() {
	// @@protoc_insertion_point(destructor:server.Leaderboard)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Leaderboard::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	reset_schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Leaderboard::ArenaDtor(void *object) {
	Leaderboard *_this = reinterpret_cast<Leaderboard *>(object);
	(void)_this;
}
void Leaderboard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Leaderboard::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Leaderboard &Leaderboard::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Leaderboard_api_2eproto.base);
	return *internal_default_instance();
}

void Leaderboard::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Leaderboard)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	reset_schedule_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&sort_, 0, static_cast<size_t>(reinterpret_cast<char *>(&authoritative_) - reinterpret_cast<char *>(&sort_)) + sizeof(authoritative_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Leaderboard::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Leaderboard.id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool authoritative = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					authoritative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 sort = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
					sort_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 count = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
					count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string reset_schedule = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_reset_schedule();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Leaderboard.reset_schedule"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string metadata = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_metadata();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Leaderboard.metadata"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Leaderboard::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Leaderboard)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Leaderboard.id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_id(), target);
	}

	// bool authoritative = 2;
	if (this->authoritative() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_authoritative(), target);
	}

	// int64 sort = 3;
	if (this->sort() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_sort(), target);
	}

	// int64 count = 4;
	if (this->count() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_count(), target);
	}

	// string reset_schedule = 5;
	if (this->reset_schedule().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_reset_schedule().data(), static_cast<int>(this->_internal_reset_schedule().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Leaderboard.reset_schedule");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_reset_schedule(), target);
	}

	// string metadata = 6;
	if (this->metadata().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Leaderboard.metadata");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_metadata(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Leaderboard)
	return target;
}

size_t Leaderboard::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Leaderboard)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_id());
	}

	// string reset_schedule = 5;
	if (this->reset_schedule().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_reset_schedule());
	}

	// string metadata = 6;
	if (this->metadata().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_metadata());
	}

	// int64 sort = 3;
	if (this->sort() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_sort());
	}

	// int64 count = 4;
	if (this->count() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_count());
	}

	// bool authoritative = 2;
	if (this->authoritative() != 0) {
		total_size += 1 + 1;
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Leaderboard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Leaderboard)
	GOOGLE_DCHECK_NE(&from, this);
	const Leaderboard *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Leaderboard>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Leaderboard)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Leaderboard)
		MergeFrom(*source);
	}
}

void Leaderboard::MergeFrom(const Leaderboard &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Leaderboard)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.id().size() > 0) {
		_internal_set_id(from._internal_id());
	}
	if (from.reset_schedule().size() > 0) {
		_internal_set_reset_schedule(from._internal_reset_schedule());
	}
	if (from.metadata().size() > 0) {
		_internal_set_metadata(from._internal_metadata());
	}
	if (from.sort() != 0) {
		_internal_set_sort(from._internal_sort());
	}
	if (from.count() != 0) {
		_internal_set_count(from._internal_count());
	}
	if (from.authoritative() != 0) {
		_internal_set_authoritative(from._internal_authoritative());
	}
}

void Leaderboard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Leaderboard)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Leaderboard::CopyFrom(const Leaderboard &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Leaderboard)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Leaderboard::IsInitialized() const {
	return true;
}

void Leaderboard::InternalSwap(Leaderboard *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	reset_schedule_.Swap(&other->reset_schedule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(Leaderboard, authoritative_) + sizeof(Leaderboard::authoritative_) - PROTOBUF_FIELD_OFFSET(Leaderboard, sort_)>(
			reinterpret_cast<char *>(&sort_),
			reinterpret_cast<char *>(&other->sort_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Leaderboard::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class LeaderboardRecord::_Internal {
public:
};

LeaderboardRecord::LeaderboardRecord(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.LeaderboardRecord)
}
LeaderboardRecord::LeaderboardRecord(const LeaderboardRecord &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_leaderboard_id().empty()) {
		leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leaderboard_id(),
				GetArena());
	}
	owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_owner_id().empty()) {
		owner_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_owner_id(),
				GetArena());
	}
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_handle().empty()) {
		handle_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_handle(),
				GetArena());
	}
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_lang().empty()) {
		lang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lang(),
				GetArena());
	}
	location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_location().empty()) {
		location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location(),
				GetArena());
	}
	timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_timezone().empty()) {
		timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezone(),
				GetArena());
	}
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_metadata().empty()) {
		metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata(),
				GetArena());
	}
	::memcpy(&rank_, &from.rank_,
			static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) -
					reinterpret_cast<char *>(&rank_)) +
					sizeof(expires_at_));
	// @@protoc_insertion_point(copy_constructor:server.LeaderboardRecord)
}

void LeaderboardRecord::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaderboardRecord_api_2eproto.base);
	leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	owner_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&rank_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) - reinterpret_cast<char *>(&rank_)) + sizeof(expires_at_));
}

LeaderboardRecord::~LeaderboardRecord() {
	// @@protoc_insertion_point(destructor:server.LeaderboardRecord)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaderboardRecord::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	leaderboard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	owner_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	handle_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	lang_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LeaderboardRecord::ArenaDtor(void *object) {
	LeaderboardRecord *_this = reinterpret_cast<LeaderboardRecord *>(object);
	(void)_this;
}
void LeaderboardRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void LeaderboardRecord::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const LeaderboardRecord &LeaderboardRecord::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaderboardRecord_api_2eproto.base);
	return *internal_default_instance();
}

void LeaderboardRecord::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.LeaderboardRecord)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	leaderboard_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	owner_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&rank_, 0, static_cast<size_t>(reinterpret_cast<char *>(&expires_at_) - reinterpret_cast<char *>(&rank_)) + sizeof(expires_at_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *LeaderboardRecord::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string leaderboard_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_leaderboard_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.LeaderboardRecord.leaderboard_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string owner_id = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_owner_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.LeaderboardRecord.owner_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string handle = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_handle();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.LeaderboardRecord.handle"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string lang = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_lang();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.LeaderboardRecord.lang"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string location = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_location();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.LeaderboardRecord.location"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string timezone = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_timezone();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.LeaderboardRecord.timezone"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 rank = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
					rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 score = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
					score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 num_score = 9;
			case 9:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
					num_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string metadata = 10;
			case 10:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
					auto str = _internal_mutable_metadata();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.LeaderboardRecord.metadata"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 ranked_at = 11;
			case 11:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
					ranked_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 updated_at = 12;
			case 12:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
					updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 expires_at = 13;
			case 13:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
					expires_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *LeaderboardRecord::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.LeaderboardRecord)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string leaderboard_id = 1;
	if (this->leaderboard_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_leaderboard_id().data(), static_cast<int>(this->_internal_leaderboard_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.LeaderboardRecord.leaderboard_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_leaderboard_id(), target);
	}

	// string owner_id = 2;
	if (this->owner_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.LeaderboardRecord.owner_id");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_owner_id(), target);
	}

	// string handle = 3;
	if (this->handle().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_handle().data(), static_cast<int>(this->_internal_handle().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.LeaderboardRecord.handle");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_handle(), target);
	}

	// string lang = 4;
	if (this->lang().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.LeaderboardRecord.lang");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_lang(), target);
	}

	// string location = 5;
	if (this->location().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.LeaderboardRecord.location");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_location(), target);
	}

	// string timezone = 6;
	if (this->timezone().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.LeaderboardRecord.timezone");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_timezone(), target);
	}

	// int64 rank = 7;
	if (this->rank() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_rank(), target);
	}

	// int64 score = 8;
	if (this->score() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_score(), target);
	}

	// int64 num_score = 9;
	if (this->num_score() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_num_score(), target);
	}

	// string metadata = 10;
	if (this->metadata().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.LeaderboardRecord.metadata");
		target = stream->WriteStringMaybeAliased(
				10, this->_internal_metadata(), target);
	}

	// int64 ranked_at = 11;
	if (this->ranked_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_ranked_at(), target);
	}

	// int64 updated_at = 12;
	if (this->updated_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_updated_at(), target);
	}

	// int64 expires_at = 13;
	if (this->expires_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_expires_at(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.LeaderboardRecord)
	return target;
}

size_t LeaderboardRecord::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.LeaderboardRecord)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string leaderboard_id = 1;
	if (this->leaderboard_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_leaderboard_id());
	}

	// string owner_id = 2;
	if (this->owner_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_owner_id());
	}

	// string handle = 3;
	if (this->handle().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_handle());
	}

	// string lang = 4;
	if (this->lang().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_lang());
	}

	// string location = 5;
	if (this->location().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_location());
	}

	// string timezone = 6;
	if (this->timezone().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_timezone());
	}

	// string metadata = 10;
	if (this->metadata().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_metadata());
	}

	// int64 rank = 7;
	if (this->rank() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_rank());
	}

	// int64 score = 8;
	if (this->score() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_score());
	}

	// int64 num_score = 9;
	if (this->num_score() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_num_score());
	}

	// int64 ranked_at = 11;
	if (this->ranked_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_ranked_at());
	}

	// int64 updated_at = 12;
	if (this->updated_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_updated_at());
	}

	// int64 expires_at = 13;
	if (this->expires_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_expires_at());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void LeaderboardRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.LeaderboardRecord)
	GOOGLE_DCHECK_NE(&from, this);
	const LeaderboardRecord *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaderboardRecord>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.LeaderboardRecord)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.LeaderboardRecord)
		MergeFrom(*source);
	}
}

void LeaderboardRecord::MergeFrom(const LeaderboardRecord &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.LeaderboardRecord)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.leaderboard_id().size() > 0) {
		_internal_set_leaderboard_id(from._internal_leaderboard_id());
	}
	if (from.owner_id().size() > 0) {
		_internal_set_owner_id(from._internal_owner_id());
	}
	if (from.handle().size() > 0) {
		_internal_set_handle(from._internal_handle());
	}
	if (from.lang().size() > 0) {
		_internal_set_lang(from._internal_lang());
	}
	if (from.location().size() > 0) {
		_internal_set_location(from._internal_location());
	}
	if (from.timezone().size() > 0) {
		_internal_set_timezone(from._internal_timezone());
	}
	if (from.metadata().size() > 0) {
		_internal_set_metadata(from._internal_metadata());
	}
	if (from.rank() != 0) {
		_internal_set_rank(from._internal_rank());
	}
	if (from.score() != 0) {
		_internal_set_score(from._internal_score());
	}
	if (from.num_score() != 0) {
		_internal_set_num_score(from._internal_num_score());
	}
	if (from.ranked_at() != 0) {
		_internal_set_ranked_at(from._internal_ranked_at());
	}
	if (from.updated_at() != 0) {
		_internal_set_updated_at(from._internal_updated_at());
	}
	if (from.expires_at() != 0) {
		_internal_set_expires_at(from._internal_expires_at());
	}
}

void LeaderboardRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.LeaderboardRecord)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void LeaderboardRecord::CopyFrom(const LeaderboardRecord &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.LeaderboardRecord)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool LeaderboardRecord::IsInitialized() const {
	return true;
}

void LeaderboardRecord::InternalSwap(LeaderboardRecord *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	leaderboard_id_.Swap(&other->leaderboard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	owner_id_.Swap(&other->owner_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	handle_.Swap(&other->handle_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	lang_.Swap(&other->lang_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(LeaderboardRecord, expires_at_) + sizeof(LeaderboardRecord::expires_at_) - PROTOBUF_FIELD_OFFSET(LeaderboardRecord, rank_)>(
			reinterpret_cast<char *>(&rank_),
			reinterpret_cast<char *>(&other->rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaderboardRecord::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLeaderboardsList::_Internal {
public:
};

TLeaderboardsList::TLeaderboardsList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		filter_leaderboard_id_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLeaderboardsList)
}
TLeaderboardsList::TLeaderboardsList(const TLeaderboardsList &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		filter_leaderboard_id_(from.filter_leaderboard_id_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	limit_ = from.limit_;
	// @@protoc_insertion_point(copy_constructor:server.TLeaderboardsList)
}

void TLeaderboardsList::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLeaderboardsList_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	limit_ = PROTOBUF_LONGLONG(0);
}

TLeaderboardsList::~TLeaderboardsList() {
	// @@protoc_insertion_point(destructor:server.TLeaderboardsList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLeaderboardsList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TLeaderboardsList::ArenaDtor(void *object) {
	TLeaderboardsList *_this = reinterpret_cast<TLeaderboardsList *>(object);
	(void)_this;
}
void TLeaderboardsList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLeaderboardsList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLeaderboardsList &TLeaderboardsList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLeaderboardsList_api_2eproto.base);
	return *internal_default_instance();
}

void TLeaderboardsList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLeaderboardsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	filter_leaderboard_id_.Clear();
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	limit_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLeaderboardsList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int64 limit = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string cursor = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardsList.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// repeated string filter_leaderboard_id = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_filter_leaderboard_id();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardsList.filter_leaderboard_id"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLeaderboardsList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int64 limit = 1;
	if (this->limit() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_limit(), target);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardsList.cursor");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_cursor(), target);
	}

	// repeated string filter_leaderboard_id = 3;
	for (int i = 0, n = this->_internal_filter_leaderboard_id_size(); i < n; i++) {
		const auto &s = this->_internal_filter_leaderboard_id(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardsList.filter_leaderboard_id");
		target = stream->WriteString(3, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardsList)
	return target;
}

size_t TLeaderboardsList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardsList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string filter_leaderboard_id = 3;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filter_leaderboard_id_.size());
	for (int i = 0, n = filter_leaderboard_id_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				filter_leaderboard_id_.Get(i));
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	// int64 limit = 1;
	if (this->limit() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_limit());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLeaderboardsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardsList)
	GOOGLE_DCHECK_NE(&from, this);
	const TLeaderboardsList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLeaderboardsList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardsList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardsList)
		MergeFrom(*source);
	}
}

void TLeaderboardsList::MergeFrom(const TLeaderboardsList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardsList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	filter_leaderboard_id_.MergeFrom(from.filter_leaderboard_id_);
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
	if (from.limit() != 0) {
		_internal_set_limit(from._internal_limit());
	}
}

void TLeaderboardsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLeaderboardsList::CopyFrom(const TLeaderboardsList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLeaderboardsList::IsInitialized() const {
	return true;
}

void TLeaderboardsList::InternalSwap(TLeaderboardsList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	filter_leaderboard_id_.InternalSwap(&other->filter_leaderboard_id_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLeaderboardsList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLeaderboards::_Internal {
public:
};

TLeaderboards::TLeaderboards(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		leaderboards_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLeaderboards)
}
TLeaderboards::TLeaderboards(const TLeaderboards &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		leaderboards_(from.leaderboards_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TLeaderboards)
}

void TLeaderboards::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLeaderboards_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TLeaderboards::~TLeaderboards() {
	// @@protoc_insertion_point(destructor:server.TLeaderboards)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLeaderboards::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TLeaderboards::ArenaDtor(void *object) {
	TLeaderboards *_this = reinterpret_cast<TLeaderboards *>(object);
	(void)_this;
}
void TLeaderboards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLeaderboards::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLeaderboards &TLeaderboards::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLeaderboards_api_2eproto.base);
	return *internal_default_instance();
}

void TLeaderboards::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLeaderboards)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	leaderboards_.Clear();
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLeaderboards::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.Leaderboard leaderboards = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_leaderboards(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			// string cursor = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboards.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLeaderboards::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboards)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.Leaderboard leaderboards = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_leaderboards_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_leaderboards(i), target, stream);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboards.cursor");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboards)
	return target;
}

size_t TLeaderboards::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboards)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.Leaderboard leaderboards = 1;
	total_size += 1UL * this->_internal_leaderboards_size();
	for (const auto &msg : this->leaderboards_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLeaderboards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboards)
	GOOGLE_DCHECK_NE(&from, this);
	const TLeaderboards *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLeaderboards>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboards)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboards)
		MergeFrom(*source);
	}
}

void TLeaderboards::MergeFrom(const TLeaderboards &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboards)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	leaderboards_.MergeFrom(from.leaderboards_);
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
}

void TLeaderboards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboards)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLeaderboards::CopyFrom(const TLeaderboards &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboards)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLeaderboards::IsInitialized() const {
	return true;
}

void TLeaderboards::InternalSwap(TLeaderboards *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	leaderboards_.InternalSwap(&other->leaderboards_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TLeaderboards::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLeaderboardRecordsWrite_LeaderboardRecordWrite::_Internal {
public:
};

TLeaderboardRecordsWrite_LeaderboardRecordWrite::TLeaderboardRecordsWrite_LeaderboardRecordWrite(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
}
TLeaderboardRecordsWrite_LeaderboardRecordWrite::TLeaderboardRecordsWrite_LeaderboardRecordWrite(const TLeaderboardRecordsWrite_LeaderboardRecordWrite &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_leaderboard_id().empty()) {
		leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leaderboard_id(),
				GetArena());
	}
	location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_location().empty()) {
		location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_location(),
				GetArena());
	}
	timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_timezone().empty()) {
		timezone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timezone(),
				GetArena());
	}
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_metadata().empty()) {
		metadata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metadata(),
				GetArena());
	}
	clear_has_op();
	switch (from.op_case()) {
		case kIncr: {
			_internal_set_incr(from._internal_incr());
			break;
		}
		case kDecr: {
			_internal_set_decr(from._internal_decr());
			break;
		}
		case kSet: {
			_internal_set_set(from._internal_set());
			break;
		}
		case kBest: {
			_internal_set_best(from._internal_best());
			break;
		}
		case OP_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLeaderboardRecordsWrite_LeaderboardRecordWrite_api_2eproto.base);
	leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	clear_has_op();
}

TLeaderboardRecordsWrite_LeaderboardRecordWrite::~TLeaderboardRecordsWrite_LeaderboardRecordWrite() {
	// @@protoc_insertion_point(destructor:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	leaderboard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_op()) {
		clear_op();
	}
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::ArenaDtor(void *object) {
	TLeaderboardRecordsWrite_LeaderboardRecordWrite *_this = reinterpret_cast<TLeaderboardRecordsWrite_LeaderboardRecordWrite *>(object);
	(void)_this;
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLeaderboardRecordsWrite_LeaderboardRecordWrite::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLeaderboardRecordsWrite_LeaderboardRecordWrite &TLeaderboardRecordsWrite_LeaderboardRecordWrite::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLeaderboardRecordsWrite_LeaderboardRecordWrite_api_2eproto.base);
	return *internal_default_instance();
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::clear_op() {
	// @@protoc_insertion_point(one_of_clear_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	switch (op_case()) {
		case kIncr: {
			// No need to clear
			break;
		}
		case kDecr: {
			// No need to clear
			break;
		}
		case kSet: {
			// No need to clear
			break;
		}
		case kBest: {
			// No need to clear
			break;
		}
		case OP_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = OP_NOT_SET;
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	leaderboard_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timezone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	clear_op();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLeaderboardRecordsWrite_LeaderboardRecordWrite::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string leaderboard_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_leaderboard_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 incr = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					_internal_set_incr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 decr = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
					_internal_set_decr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 set = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
					_internal_set_set(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 best = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
					_internal_set_best(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string location = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_location();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string timezone = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
					auto str = _internal_mutable_timezone();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string metadata = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					auto str = _internal_mutable_metadata();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLeaderboardRecordsWrite_LeaderboardRecordWrite::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string leaderboard_id = 1;
	if (this->leaderboard_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_leaderboard_id().data(), static_cast<int>(this->_internal_leaderboard_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.leaderboard_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_leaderboard_id(), target);
	}

	// int64 incr = 2;
	if (_internal_has_incr()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_incr(), target);
	}

	// int64 decr = 3;
	if (_internal_has_decr()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_decr(), target);
	}

	// int64 set = 4;
	if (_internal_has_set()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_set(), target);
	}

	// int64 best = 5;
	if (_internal_has_best()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_best(), target);
	}

	// string location = 6;
	if (this->location().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.location");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_location(), target);
	}

	// string timezone = 7;
	if (this->timezone().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.timezone");
		target = stream->WriteStringMaybeAliased(
				7, this->_internal_timezone(), target);
	}

	// string metadata = 8;
	if (this->metadata().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_metadata().data(), static_cast<int>(this->_internal_metadata().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsWrite.LeaderboardRecordWrite.metadata");
		target = stream->WriteStringMaybeAliased(
				8, this->_internal_metadata(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	return target;
}

size_t TLeaderboardRecordsWrite_LeaderboardRecordWrite::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string leaderboard_id = 1;
	if (this->leaderboard_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_leaderboard_id());
	}

	// string location = 6;
	if (this->location().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_location());
	}

	// string timezone = 7;
	if (this->timezone().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_timezone());
	}

	// string metadata = 8;
	if (this->metadata().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_metadata());
	}

	switch (op_case()) {
		// int64 incr = 2;
		case kIncr: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
							this->_internal_incr());
			break;
		}
		// int64 decr = 3;
		case kDecr: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
							this->_internal_decr());
			break;
		}
		// int64 set = 4;
		case kSet: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
							this->_internal_set());
			break;
		}
		// int64 best = 5;
		case kBest: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
							this->_internal_best());
			break;
		}
		case OP_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	GOOGLE_DCHECK_NE(&from, this);
	const TLeaderboardRecordsWrite_LeaderboardRecordWrite *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLeaderboardRecordsWrite_LeaderboardRecordWrite>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
		MergeFrom(*source);
	}
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::MergeFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.leaderboard_id().size() > 0) {
		_internal_set_leaderboard_id(from._internal_leaderboard_id());
	}
	if (from.location().size() > 0) {
		_internal_set_location(from._internal_location());
	}
	if (from.timezone().size() > 0) {
		_internal_set_timezone(from._internal_timezone());
	}
	if (from.metadata().size() > 0) {
		_internal_set_metadata(from._internal_metadata());
	}
	switch (from.op_case()) {
		case kIncr: {
			_internal_set_incr(from._internal_incr());
			break;
		}
		case kDecr: {
			_internal_set_decr(from._internal_decr());
			break;
		}
		case kSet: {
			_internal_set_set(from._internal_set());
			break;
		}
		case kBest: {
			_internal_set_best(from._internal_best());
			break;
		}
		case OP_NOT_SET: {
			break;
		}
	}
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::CopyFrom(const TLeaderboardRecordsWrite_LeaderboardRecordWrite &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsWrite.LeaderboardRecordWrite)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLeaderboardRecordsWrite_LeaderboardRecordWrite::IsInitialized() const {
	return true;
}

void TLeaderboardRecordsWrite_LeaderboardRecordWrite::InternalSwap(TLeaderboardRecordsWrite_LeaderboardRecordWrite *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	leaderboard_id_.Swap(&other->leaderboard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	timezone_.Swap(&other->timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(op_, other->op_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLeaderboardRecordsWrite_LeaderboardRecordWrite::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLeaderboardRecordsWrite::_Internal {
public:
};

TLeaderboardRecordsWrite::TLeaderboardRecordsWrite(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		records_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLeaderboardRecordsWrite)
}
TLeaderboardRecordsWrite::TLeaderboardRecordsWrite(const TLeaderboardRecordsWrite &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		records_(from.records_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsWrite)
}

void TLeaderboardRecordsWrite::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLeaderboardRecordsWrite_api_2eproto.base);
}

TLeaderboardRecordsWrite::~TLeaderboardRecordsWrite() {
	// @@protoc_insertion_point(destructor:server.TLeaderboardRecordsWrite)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLeaderboardRecordsWrite::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TLeaderboardRecordsWrite::ArenaDtor(void *object) {
	TLeaderboardRecordsWrite *_this = reinterpret_cast<TLeaderboardRecordsWrite *>(object);
	(void)_this;
}
void TLeaderboardRecordsWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLeaderboardRecordsWrite::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLeaderboardRecordsWrite &TLeaderboardRecordsWrite::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLeaderboardRecordsWrite_api_2eproto.base);
	return *internal_default_instance();
}

void TLeaderboardRecordsWrite::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsWrite)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	records_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLeaderboardRecordsWrite::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_records(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLeaderboardRecordsWrite::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsWrite)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_records_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_records(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsWrite)
	return target;
}

size_t TLeaderboardRecordsWrite::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsWrite)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.TLeaderboardRecordsWrite.LeaderboardRecordWrite records = 1;
	total_size += 1UL * this->_internal_records_size();
	for (const auto &msg : this->records_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLeaderboardRecordsWrite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsWrite)
	GOOGLE_DCHECK_NE(&from, this);
	const TLeaderboardRecordsWrite *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLeaderboardRecordsWrite>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsWrite)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsWrite)
		MergeFrom(*source);
	}
}

void TLeaderboardRecordsWrite::MergeFrom(const TLeaderboardRecordsWrite &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsWrite)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	records_.MergeFrom(from.records_);
}

void TLeaderboardRecordsWrite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsWrite)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLeaderboardRecordsWrite::CopyFrom(const TLeaderboardRecordsWrite &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsWrite)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLeaderboardRecordsWrite::IsInitialized() const {
	return true;
}

void TLeaderboardRecordsWrite::InternalSwap(TLeaderboardRecordsWrite *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	records_.InternalSwap(&other->records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLeaderboardRecordsWrite::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLeaderboardRecordsFetch::_Internal {
public:
};

TLeaderboardRecordsFetch::TLeaderboardRecordsFetch(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		leaderboard_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLeaderboardRecordsFetch)
}
TLeaderboardRecordsFetch::TLeaderboardRecordsFetch(const TLeaderboardRecordsFetch &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		leaderboard_ids_(from.leaderboard_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	limit_ = from.limit_;
	// @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsFetch)
}

void TLeaderboardRecordsFetch::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLeaderboardRecordsFetch_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	limit_ = PROTOBUF_LONGLONG(0);
}

TLeaderboardRecordsFetch::~TLeaderboardRecordsFetch() {
	// @@protoc_insertion_point(destructor:server.TLeaderboardRecordsFetch)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLeaderboardRecordsFetch::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TLeaderboardRecordsFetch::ArenaDtor(void *object) {
	TLeaderboardRecordsFetch *_this = reinterpret_cast<TLeaderboardRecordsFetch *>(object);
	(void)_this;
}
void TLeaderboardRecordsFetch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLeaderboardRecordsFetch::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLeaderboardRecordsFetch &TLeaderboardRecordsFetch::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLeaderboardRecordsFetch_api_2eproto.base);
	return *internal_default_instance();
}

void TLeaderboardRecordsFetch::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	leaderboard_ids_.Clear();
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	limit_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLeaderboardRecordsFetch::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string leaderboard_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_leaderboard_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsFetch.leaderboard_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			// int64 limit = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string cursor = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsFetch.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLeaderboardRecordsFetch::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsFetch)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string leaderboard_ids = 1;
	for (int i = 0, n = this->_internal_leaderboard_ids_size(); i < n; i++) {
		const auto &s = this->_internal_leaderboard_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsFetch.leaderboard_ids");
		target = stream->WriteString(1, s, target);
	}

	// int64 limit = 2;
	if (this->limit() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limit(), target);
	}

	// string cursor = 3;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsFetch.cursor");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsFetch)
	return target;
}

size_t TLeaderboardRecordsFetch::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsFetch)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string leaderboard_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(leaderboard_ids_.size());
	for (int i = 0, n = leaderboard_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				leaderboard_ids_.Get(i));
	}

	// string cursor = 3;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	// int64 limit = 2;
	if (this->limit() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_limit());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLeaderboardRecordsFetch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsFetch)
	GOOGLE_DCHECK_NE(&from, this);
	const TLeaderboardRecordsFetch *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLeaderboardRecordsFetch>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsFetch)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsFetch)
		MergeFrom(*source);
	}
}

void TLeaderboardRecordsFetch::MergeFrom(const TLeaderboardRecordsFetch &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsFetch)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	leaderboard_ids_.MergeFrom(from.leaderboard_ids_);
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
	if (from.limit() != 0) {
		_internal_set_limit(from._internal_limit());
	}
}

void TLeaderboardRecordsFetch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLeaderboardRecordsFetch::CopyFrom(const TLeaderboardRecordsFetch &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsFetch)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLeaderboardRecordsFetch::IsInitialized() const {
	return true;
}

void TLeaderboardRecordsFetch::InternalSwap(TLeaderboardRecordsFetch *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	leaderboard_ids_.InternalSwap(&other->leaderboard_ids_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLeaderboardRecordsFetch::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLeaderboardRecordsList_Owners::_Internal {
public:
};

TLeaderboardRecordsList_Owners::TLeaderboardRecordsList_Owners(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		owner_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLeaderboardRecordsList.Owners)
}
TLeaderboardRecordsList_Owners::TLeaderboardRecordsList_Owners(const TLeaderboardRecordsList_Owners &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		owner_ids_(from.owner_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsList.Owners)
}

void TLeaderboardRecordsList_Owners::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLeaderboardRecordsList_Owners_api_2eproto.base);
}

TLeaderboardRecordsList_Owners::~TLeaderboardRecordsList_Owners() {
	// @@protoc_insertion_point(destructor:server.TLeaderboardRecordsList.Owners)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLeaderboardRecordsList_Owners::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TLeaderboardRecordsList_Owners::ArenaDtor(void *object) {
	TLeaderboardRecordsList_Owners *_this = reinterpret_cast<TLeaderboardRecordsList_Owners *>(object);
	(void)_this;
}
void TLeaderboardRecordsList_Owners::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLeaderboardRecordsList_Owners::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLeaderboardRecordsList_Owners &TLeaderboardRecordsList_Owners::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLeaderboardRecordsList_Owners_api_2eproto.base);
	return *internal_default_instance();
}

void TLeaderboardRecordsList_Owners::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsList.Owners)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	owner_ids_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLeaderboardRecordsList_Owners::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string owner_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_owner_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsList.Owners.owner_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLeaderboardRecordsList_Owners::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsList.Owners)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string owner_ids = 1;
	for (int i = 0, n = this->_internal_owner_ids_size(); i < n; i++) {
		const auto &s = this->_internal_owner_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsList.Owners.owner_ids");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsList.Owners)
	return target;
}

size_t TLeaderboardRecordsList_Owners::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsList.Owners)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string owner_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(owner_ids_.size());
	for (int i = 0, n = owner_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				owner_ids_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLeaderboardRecordsList_Owners::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsList.Owners)
	GOOGLE_DCHECK_NE(&from, this);
	const TLeaderboardRecordsList_Owners *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLeaderboardRecordsList_Owners>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsList.Owners)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsList.Owners)
		MergeFrom(*source);
	}
}

void TLeaderboardRecordsList_Owners::MergeFrom(const TLeaderboardRecordsList_Owners &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsList.Owners)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	owner_ids_.MergeFrom(from.owner_ids_);
}

void TLeaderboardRecordsList_Owners::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsList.Owners)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLeaderboardRecordsList_Owners::CopyFrom(const TLeaderboardRecordsList_Owners &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsList.Owners)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLeaderboardRecordsList_Owners::IsInitialized() const {
	return true;
}

void TLeaderboardRecordsList_Owners::InternalSwap(TLeaderboardRecordsList_Owners *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	owner_ids_.InternalSwap(&other->owner_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLeaderboardRecordsList_Owners::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLeaderboardRecordsList::_Internal {
public:
	static const ::server::TLeaderboardRecordsList_Owners &owner_ids(const TLeaderboardRecordsList *msg);
};

const ::server::TLeaderboardRecordsList_Owners &
TLeaderboardRecordsList::_Internal::owner_ids(const TLeaderboardRecordsList *msg) {
	return *msg->filter_.owner_ids_;
}
void TLeaderboardRecordsList::set_allocated_owner_ids(::server::TLeaderboardRecordsList_Owners *owner_ids) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_filter();
	if (owner_ids) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(owner_ids);
		if (message_arena != submessage_arena) {
			owner_ids = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, owner_ids, submessage_arena);
		}
		set_has_owner_ids();
		filter_.owner_ids_ = owner_ids;
	}
	// @@protoc_insertion_point(field_set_allocated:server.TLeaderboardRecordsList.owner_ids)
}
TLeaderboardRecordsList::TLeaderboardRecordsList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLeaderboardRecordsList)
}
TLeaderboardRecordsList::TLeaderboardRecordsList(const TLeaderboardRecordsList &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_leaderboard_id().empty()) {
		leaderboard_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_leaderboard_id(),
				GetArena());
	}
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	limit_ = from.limit_;
	clear_has_filter();
	switch (from.filter_case()) {
		case kOwnerId: {
			_internal_set_owner_id(from._internal_owner_id());
			break;
		}
		case kOwnerIds: {
			_internal_mutable_owner_ids()->::server::TLeaderboardRecordsList_Owners::MergeFrom(from._internal_owner_ids());
			break;
		}
		case kLang: {
			_internal_set_lang(from._internal_lang());
			break;
		}
		case kLocation: {
			_internal_set_location(from._internal_location());
			break;
		}
		case kTimezone: {
			_internal_set_timezone(from._internal_timezone());
			break;
		}
		case FILTER_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecordsList)
}

void TLeaderboardRecordsList::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLeaderboardRecordsList_api_2eproto.base);
	leaderboard_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	limit_ = PROTOBUF_LONGLONG(0);
	clear_has_filter();
}

TLeaderboardRecordsList::~TLeaderboardRecordsList() {
	// @@protoc_insertion_point(destructor:server.TLeaderboardRecordsList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLeaderboardRecordsList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	leaderboard_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (has_filter()) {
		clear_filter();
	}
}

void TLeaderboardRecordsList::ArenaDtor(void *object) {
	TLeaderboardRecordsList *_this = reinterpret_cast<TLeaderboardRecordsList *>(object);
	(void)_this;
}
void TLeaderboardRecordsList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLeaderboardRecordsList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLeaderboardRecordsList &TLeaderboardRecordsList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLeaderboardRecordsList_api_2eproto.base);
	return *internal_default_instance();
}

void TLeaderboardRecordsList::clear_filter() {
	// @@protoc_insertion_point(one_of_clear_start:server.TLeaderboardRecordsList)
	switch (filter_case()) {
		case kOwnerId: {
			filter_.owner_id_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kOwnerIds: {
			if (GetArena() == nullptr) {
				delete filter_.owner_ids_;
			}
			break;
		}
		case kLang: {
			filter_.lang_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kLocation: {
			filter_.location_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case kTimezone: {
			filter_.timezone_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
			break;
		}
		case FILTER_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = FILTER_NOT_SET;
}

void TLeaderboardRecordsList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecordsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	leaderboard_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	limit_ = PROTOBUF_LONGLONG(0);
	clear_filter();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLeaderboardRecordsList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string leaderboard_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_leaderboard_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsList.leaderboard_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string owner_id = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_owner_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsList.owner_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TLeaderboardRecordsList.Owners owner_ids = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					ptr = ctx->ParseMessage(_internal_mutable_owner_ids(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string lang = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
					auto str = _internal_mutable_lang();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsList.lang"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string location = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_location();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsList.location"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string timezone = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_timezone();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsList.timezone"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 limit = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
					limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string cursor = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecordsList.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLeaderboardRecordsList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecordsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string leaderboard_id = 1;
	if (this->leaderboard_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_leaderboard_id().data(), static_cast<int>(this->_internal_leaderboard_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsList.leaderboard_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_leaderboard_id(), target);
	}

	// string owner_id = 2;
	if (_internal_has_owner_id()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsList.owner_id");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_owner_id(), target);
	}

	// .server.TLeaderboardRecordsList.Owners owner_ids = 3;
	if (_internal_has_owner_ids()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						3, _Internal::owner_ids(this), target, stream);
	}

	// string lang = 4;
	if (_internal_has_lang()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_lang().data(), static_cast<int>(this->_internal_lang().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsList.lang");
		target = stream->WriteStringMaybeAliased(
				4, this->_internal_lang(), target);
	}

	// string location = 5;
	if (_internal_has_location()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsList.location");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_location(), target);
	}

	// string timezone = 6;
	if (_internal_has_timezone()) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_timezone().data(), static_cast<int>(this->_internal_timezone().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsList.timezone");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_timezone(), target);
	}

	// int64 limit = 7;
	if (this->limit() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_limit(), target);
	}

	// string cursor = 8;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecordsList.cursor");
		target = stream->WriteStringMaybeAliased(
				8, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecordsList)
	return target;
}

size_t TLeaderboardRecordsList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecordsList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string leaderboard_id = 1;
	if (this->leaderboard_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_leaderboard_id());
	}

	// string cursor = 8;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	// int64 limit = 7;
	if (this->limit() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_limit());
	}

	switch (filter_case()) {
		// string owner_id = 2;
		case kOwnerId: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_owner_id());
			break;
		}
		// .server.TLeaderboardRecordsList.Owners owner_ids = 3;
		case kOwnerIds: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*filter_.owner_ids_);
			break;
		}
		// string lang = 4;
		case kLang: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_lang());
			break;
		}
		// string location = 5;
		case kLocation: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_location());
			break;
		}
		// string timezone = 6;
		case kTimezone: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
							this->_internal_timezone());
			break;
		}
		case FILTER_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLeaderboardRecordsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecordsList)
	GOOGLE_DCHECK_NE(&from, this);
	const TLeaderboardRecordsList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLeaderboardRecordsList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecordsList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecordsList)
		MergeFrom(*source);
	}
}

void TLeaderboardRecordsList::MergeFrom(const TLeaderboardRecordsList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecordsList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.leaderboard_id().size() > 0) {
		_internal_set_leaderboard_id(from._internal_leaderboard_id());
	}
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
	if (from.limit() != 0) {
		_internal_set_limit(from._internal_limit());
	}
	switch (from.filter_case()) {
		case kOwnerId: {
			_internal_set_owner_id(from._internal_owner_id());
			break;
		}
		case kOwnerIds: {
			_internal_mutable_owner_ids()->::server::TLeaderboardRecordsList_Owners::MergeFrom(from._internal_owner_ids());
			break;
		}
		case kLang: {
			_internal_set_lang(from._internal_lang());
			break;
		}
		case kLocation: {
			_internal_set_location(from._internal_location());
			break;
		}
		case kTimezone: {
			_internal_set_timezone(from._internal_timezone());
			break;
		}
		case FILTER_NOT_SET: {
			break;
		}
	}
}

void TLeaderboardRecordsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecordsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLeaderboardRecordsList::CopyFrom(const TLeaderboardRecordsList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecordsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLeaderboardRecordsList::IsInitialized() const {
	return true;
}

void TLeaderboardRecordsList::InternalSwap(TLeaderboardRecordsList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	leaderboard_id_.Swap(&other->leaderboard_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(limit_, other->limit_);
	swap(filter_, other->filter_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLeaderboardRecordsList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TLeaderboardRecords::_Internal {
public:
};

TLeaderboardRecords::TLeaderboardRecords(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		records_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TLeaderboardRecords)
}
TLeaderboardRecords::TLeaderboardRecords(const TLeaderboardRecords &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		records_(from.records_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_cursor().empty()) {
		cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cursor(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TLeaderboardRecords)
}

void TLeaderboardRecords::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TLeaderboardRecords_api_2eproto.base);
	cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TLeaderboardRecords::~TLeaderboardRecords() {
	// @@protoc_insertion_point(destructor:server.TLeaderboardRecords)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TLeaderboardRecords::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TLeaderboardRecords::ArenaDtor(void *object) {
	TLeaderboardRecords *_this = reinterpret_cast<TLeaderboardRecords *>(object);
	(void)_this;
}
void TLeaderboardRecords::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TLeaderboardRecords::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TLeaderboardRecords &TLeaderboardRecords::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TLeaderboardRecords_api_2eproto.base);
	return *internal_default_instance();
}

void TLeaderboardRecords::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TLeaderboardRecords)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	records_.Clear();
	cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TLeaderboardRecords::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.LeaderboardRecord records = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_records(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			// string cursor = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TLeaderboardRecords.cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TLeaderboardRecords::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TLeaderboardRecords)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.LeaderboardRecord records = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_records_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_records(i), target, stream);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_cursor().data(), static_cast<int>(this->_internal_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TLeaderboardRecords.cursor");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TLeaderboardRecords)
	return target;
}

size_t TLeaderboardRecords::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TLeaderboardRecords)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.LeaderboardRecord records = 1;
	total_size += 1UL * this->_internal_records_size();
	for (const auto &msg : this->records_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string cursor = 2;
	if (this->cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_cursor());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TLeaderboardRecords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TLeaderboardRecords)
	GOOGLE_DCHECK_NE(&from, this);
	const TLeaderboardRecords *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TLeaderboardRecords>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TLeaderboardRecords)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TLeaderboardRecords)
		MergeFrom(*source);
	}
}

void TLeaderboardRecords::MergeFrom(const TLeaderboardRecords &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TLeaderboardRecords)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	records_.MergeFrom(from.records_);
	if (from.cursor().size() > 0) {
		_internal_set_cursor(from._internal_cursor());
	}
}

void TLeaderboardRecords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TLeaderboardRecords)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TLeaderboardRecords::CopyFrom(const TLeaderboardRecords &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TLeaderboardRecords)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TLeaderboardRecords::IsInitialized() const {
	return true;
}

void TLeaderboardRecords::InternalSwap(TLeaderboardRecords *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	records_.InternalSwap(&other->records_);
	cursor_.Swap(&other->cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TLeaderboardRecords::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TRpc::_Internal {
public:
};

TRpc::TRpc(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TRpc)
}
TRpc::TRpc(const TRpc &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_id().empty()) {
		id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
				GetArena());
	}
	payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_payload().empty()) {
		payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_payload(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TRpc)
}

void TRpc::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TRpc_api_2eproto.base);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TRpc::~TRpc() {
	// @@protoc_insertion_point(destructor:server.TRpc)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TRpc::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TRpc::ArenaDtor(void *object) {
	TRpc *_this = reinterpret_cast<TRpc *>(object);
	(void)_this;
}
void TRpc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TRpc::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TRpc &TRpc::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TRpc_api_2eproto.base);
	return *internal_default_instance();
}

void TRpc::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TRpc)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TRpc::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TRpc.id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string payload = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_payload();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TRpc.payload"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TRpc::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TRpc)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TRpc.id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_id(), target);
	}

	// string payload = 2;
	if (this->payload().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TRpc.payload");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_payload(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TRpc)
	return target;
}

size_t TRpc::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TRpc)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_id());
	}

	// string payload = 2;
	if (this->payload().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_payload());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TRpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TRpc)
	GOOGLE_DCHECK_NE(&from, this);
	const TRpc *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TRpc>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TRpc)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TRpc)
		MergeFrom(*source);
	}
}

void TRpc::MergeFrom(const TRpc &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TRpc)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.id().size() > 0) {
		_internal_set_id(from._internal_id());
	}
	if (from.payload().size() > 0) {
		_internal_set_payload(from._internal_payload());
	}
}

void TRpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TRpc)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TRpc::CopyFrom(const TRpc &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TRpc)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TRpc::IsInitialized() const {
	return true;
}

void TRpc::InternalSwap(TRpc *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TRpc::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TPurchaseValidation_ApplePurchase::_Internal {
public:
};

TPurchaseValidation_ApplePurchase::TPurchaseValidation_ApplePurchase(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TPurchaseValidation.ApplePurchase)
}
TPurchaseValidation_ApplePurchase::TPurchaseValidation_ApplePurchase(const TPurchaseValidation_ApplePurchase &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_product_id().empty()) {
		product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_id(),
				GetArena());
	}
	receipt_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_receipt_data().empty()) {
		receipt_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_receipt_data(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TPurchaseValidation.ApplePurchase)
}

void TPurchaseValidation_ApplePurchase::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TPurchaseValidation_ApplePurchase_api_2eproto.base);
	product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	receipt_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TPurchaseValidation_ApplePurchase::~TPurchaseValidation_ApplePurchase() {
	// @@protoc_insertion_point(destructor:server.TPurchaseValidation.ApplePurchase)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TPurchaseValidation_ApplePurchase::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	receipt_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TPurchaseValidation_ApplePurchase::ArenaDtor(void *object) {
	TPurchaseValidation_ApplePurchase *_this = reinterpret_cast<TPurchaseValidation_ApplePurchase *>(object);
	(void)_this;
}
void TPurchaseValidation_ApplePurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TPurchaseValidation_ApplePurchase::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TPurchaseValidation_ApplePurchase &TPurchaseValidation_ApplePurchase::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPurchaseValidation_ApplePurchase_api_2eproto.base);
	return *internal_default_instance();
}

void TPurchaseValidation_ApplePurchase::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TPurchaseValidation.ApplePurchase)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	receipt_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TPurchaseValidation_ApplePurchase::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string product_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_product_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TPurchaseValidation.ApplePurchase.product_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string receipt_data = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_receipt_data();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TPurchaseValidation.ApplePurchase.receipt_data"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TPurchaseValidation_ApplePurchase::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TPurchaseValidation.ApplePurchase)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string product_id = 1;
	if (this->product_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TPurchaseValidation.ApplePurchase.product_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_product_id(), target);
	}

	// string receipt_data = 2;
	if (this->receipt_data().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_receipt_data().data(), static_cast<int>(this->_internal_receipt_data().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TPurchaseValidation.ApplePurchase.receipt_data");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_receipt_data(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TPurchaseValidation.ApplePurchase)
	return target;
}

size_t TPurchaseValidation_ApplePurchase::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TPurchaseValidation.ApplePurchase)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string product_id = 1;
	if (this->product_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_product_id());
	}

	// string receipt_data = 2;
	if (this->receipt_data().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_receipt_data());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TPurchaseValidation_ApplePurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TPurchaseValidation.ApplePurchase)
	GOOGLE_DCHECK_NE(&from, this);
	const TPurchaseValidation_ApplePurchase *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TPurchaseValidation_ApplePurchase>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TPurchaseValidation.ApplePurchase)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TPurchaseValidation.ApplePurchase)
		MergeFrom(*source);
	}
}

void TPurchaseValidation_ApplePurchase::MergeFrom(const TPurchaseValidation_ApplePurchase &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TPurchaseValidation.ApplePurchase)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.product_id().size() > 0) {
		_internal_set_product_id(from._internal_product_id());
	}
	if (from.receipt_data().size() > 0) {
		_internal_set_receipt_data(from._internal_receipt_data());
	}
}

void TPurchaseValidation_ApplePurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TPurchaseValidation.ApplePurchase)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TPurchaseValidation_ApplePurchase::CopyFrom(const TPurchaseValidation_ApplePurchase &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TPurchaseValidation.ApplePurchase)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TPurchaseValidation_ApplePurchase::IsInitialized() const {
	return true;
}

void TPurchaseValidation_ApplePurchase::InternalSwap(TPurchaseValidation_ApplePurchase *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	product_id_.Swap(&other->product_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	receipt_data_.Swap(&other->receipt_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TPurchaseValidation_ApplePurchase::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TPurchaseValidation_GooglePurchase::_Internal {
public:
};

TPurchaseValidation_GooglePurchase::TPurchaseValidation_GooglePurchase(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TPurchaseValidation.GooglePurchase)
}
TPurchaseValidation_GooglePurchase::TPurchaseValidation_GooglePurchase(const TPurchaseValidation_GooglePurchase &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_product_id().empty()) {
		product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_id(),
				GetArena());
	}
	product_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_product_type().empty()) {
		product_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_type(),
				GetArena());
	}
	purchase_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_purchase_token().empty()) {
		purchase_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_purchase_token(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TPurchaseValidation.GooglePurchase)
}

void TPurchaseValidation_GooglePurchase::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TPurchaseValidation_GooglePurchase_api_2eproto.base);
	product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	product_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	purchase_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TPurchaseValidation_GooglePurchase::~TPurchaseValidation_GooglePurchase() {
	// @@protoc_insertion_point(destructor:server.TPurchaseValidation.GooglePurchase)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TPurchaseValidation_GooglePurchase::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	product_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	purchase_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TPurchaseValidation_GooglePurchase::ArenaDtor(void *object) {
	TPurchaseValidation_GooglePurchase *_this = reinterpret_cast<TPurchaseValidation_GooglePurchase *>(object);
	(void)_this;
}
void TPurchaseValidation_GooglePurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TPurchaseValidation_GooglePurchase::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TPurchaseValidation_GooglePurchase &TPurchaseValidation_GooglePurchase::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPurchaseValidation_GooglePurchase_api_2eproto.base);
	return *internal_default_instance();
}

void TPurchaseValidation_GooglePurchase::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TPurchaseValidation.GooglePurchase)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	product_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	purchase_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TPurchaseValidation_GooglePurchase::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string product_id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_product_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TPurchaseValidation.GooglePurchase.product_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string product_type = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_product_type();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TPurchaseValidation.GooglePurchase.product_type"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string purchase_token = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_purchase_token();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TPurchaseValidation.GooglePurchase.purchase_token"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TPurchaseValidation_GooglePurchase::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TPurchaseValidation.GooglePurchase)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string product_id = 1;
	if (this->product_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TPurchaseValidation.GooglePurchase.product_id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_product_id(), target);
	}

	// string product_type = 2;
	if (this->product_type().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_product_type().data(), static_cast<int>(this->_internal_product_type().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TPurchaseValidation.GooglePurchase.product_type");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_product_type(), target);
	}

	// string purchase_token = 3;
	if (this->purchase_token().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_purchase_token().data(), static_cast<int>(this->_internal_purchase_token().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TPurchaseValidation.GooglePurchase.purchase_token");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_purchase_token(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TPurchaseValidation.GooglePurchase)
	return target;
}

size_t TPurchaseValidation_GooglePurchase::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TPurchaseValidation.GooglePurchase)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string product_id = 1;
	if (this->product_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_product_id());
	}

	// string product_type = 2;
	if (this->product_type().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_product_type());
	}

	// string purchase_token = 3;
	if (this->purchase_token().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_purchase_token());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TPurchaseValidation_GooglePurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TPurchaseValidation.GooglePurchase)
	GOOGLE_DCHECK_NE(&from, this);
	const TPurchaseValidation_GooglePurchase *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TPurchaseValidation_GooglePurchase>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TPurchaseValidation.GooglePurchase)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TPurchaseValidation.GooglePurchase)
		MergeFrom(*source);
	}
}

void TPurchaseValidation_GooglePurchase::MergeFrom(const TPurchaseValidation_GooglePurchase &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TPurchaseValidation.GooglePurchase)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.product_id().size() > 0) {
		_internal_set_product_id(from._internal_product_id());
	}
	if (from.product_type().size() > 0) {
		_internal_set_product_type(from._internal_product_type());
	}
	if (from.purchase_token().size() > 0) {
		_internal_set_purchase_token(from._internal_purchase_token());
	}
}

void TPurchaseValidation_GooglePurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TPurchaseValidation.GooglePurchase)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TPurchaseValidation_GooglePurchase::CopyFrom(const TPurchaseValidation_GooglePurchase &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TPurchaseValidation.GooglePurchase)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TPurchaseValidation_GooglePurchase::IsInitialized() const {
	return true;
}

void TPurchaseValidation_GooglePurchase::InternalSwap(TPurchaseValidation_GooglePurchase *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	product_id_.Swap(&other->product_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	product_type_.Swap(&other->product_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	purchase_token_.Swap(&other->purchase_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TPurchaseValidation_GooglePurchase::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TPurchaseValidation::_Internal {
public:
	static const ::server::TPurchaseValidation_ApplePurchase &apple_purchase(const TPurchaseValidation *msg);
	static const ::server::TPurchaseValidation_GooglePurchase &google_purchase(const TPurchaseValidation *msg);
};

const ::server::TPurchaseValidation_ApplePurchase &
TPurchaseValidation::_Internal::apple_purchase(const TPurchaseValidation *msg) {
	return *msg->id_.apple_purchase_;
}
const ::server::TPurchaseValidation_GooglePurchase &
TPurchaseValidation::_Internal::google_purchase(const TPurchaseValidation *msg) {
	return *msg->id_.google_purchase_;
}
void TPurchaseValidation::set_allocated_apple_purchase(::server::TPurchaseValidation_ApplePurchase *apple_purchase) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_id();
	if (apple_purchase) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apple_purchase);
		if (message_arena != submessage_arena) {
			apple_purchase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, apple_purchase, submessage_arena);
		}
		set_has_apple_purchase();
		id_.apple_purchase_ = apple_purchase;
	}
	// @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.apple_purchase)
}
void TPurchaseValidation::set_allocated_google_purchase(::server::TPurchaseValidation_GooglePurchase *google_purchase) {
	::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
	clear_id();
	if (google_purchase) {
		::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
				::PROTOBUF_NAMESPACE_ID::Arena::GetArena(google_purchase);
		if (message_arena != submessage_arena) {
			google_purchase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
					message_arena, google_purchase, submessage_arena);
		}
		set_has_google_purchase();
		id_.google_purchase_ = google_purchase;
	}
	// @@protoc_insertion_point(field_set_allocated:server.TPurchaseValidation.google_purchase)
}
TPurchaseValidation::TPurchaseValidation(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TPurchaseValidation)
}
TPurchaseValidation::TPurchaseValidation(const TPurchaseValidation &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	clear_has_id();
	switch (from.id_case()) {
		case kApplePurchase: {
			_internal_mutable_apple_purchase()->::server::TPurchaseValidation_ApplePurchase::MergeFrom(from._internal_apple_purchase());
			break;
		}
		case kGooglePurchase: {
			_internal_mutable_google_purchase()->::server::TPurchaseValidation_GooglePurchase::MergeFrom(from._internal_google_purchase());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	// @@protoc_insertion_point(copy_constructor:server.TPurchaseValidation)
}

void TPurchaseValidation::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TPurchaseValidation_api_2eproto.base);
	clear_has_id();
}

TPurchaseValidation::~TPurchaseValidation() {
	// @@protoc_insertion_point(destructor:server.TPurchaseValidation)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TPurchaseValidation::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	if (has_id()) {
		clear_id();
	}
}

void TPurchaseValidation::ArenaDtor(void *object) {
	TPurchaseValidation *_this = reinterpret_cast<TPurchaseValidation *>(object);
	(void)_this;
}
void TPurchaseValidation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TPurchaseValidation::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TPurchaseValidation &TPurchaseValidation::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPurchaseValidation_api_2eproto.base);
	return *internal_default_instance();
}

void TPurchaseValidation::clear_id() {
	// @@protoc_insertion_point(one_of_clear_start:server.TPurchaseValidation)
	switch (id_case()) {
		case kApplePurchase: {
			if (GetArena() == nullptr) {
				delete id_.apple_purchase_;
			}
			break;
		}
		case kGooglePurchase: {
			if (GetArena() == nullptr) {
				delete id_.google_purchase_;
			}
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	_oneof_case_[0] = ID_NOT_SET;
}

void TPurchaseValidation::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TPurchaseValidation)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	clear_id();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TPurchaseValidation::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr = ctx->ParseMessage(_internal_mutable_apple_purchase(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					ptr = ctx->ParseMessage(_internal_mutable_google_purchase(), ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TPurchaseValidation::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TPurchaseValidation)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
	if (_internal_has_apple_purchase()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						1, _Internal::apple_purchase(this), target, stream);
	}

	// .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
	if (_internal_has_google_purchase()) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(
						2, _Internal::google_purchase(this), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TPurchaseValidation)
	return target;
}

size_t TPurchaseValidation::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TPurchaseValidation)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	switch (id_case()) {
		// .server.TPurchaseValidation.ApplePurchase apple_purchase = 1;
		case kApplePurchase: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*id_.apple_purchase_);
			break;
		}
		// .server.TPurchaseValidation.GooglePurchase google_purchase = 2;
		case kGooglePurchase: {
			total_size += 1 +
					::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
							*id_.google_purchase_);
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TPurchaseValidation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TPurchaseValidation)
	GOOGLE_DCHECK_NE(&from, this);
	const TPurchaseValidation *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TPurchaseValidation>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TPurchaseValidation)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TPurchaseValidation)
		MergeFrom(*source);
	}
}

void TPurchaseValidation::MergeFrom(const TPurchaseValidation &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TPurchaseValidation)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	switch (from.id_case()) {
		case kApplePurchase: {
			_internal_mutable_apple_purchase()->::server::TPurchaseValidation_ApplePurchase::MergeFrom(from._internal_apple_purchase());
			break;
		}
		case kGooglePurchase: {
			_internal_mutable_google_purchase()->::server::TPurchaseValidation_GooglePurchase::MergeFrom(from._internal_google_purchase());
			break;
		}
		case ID_NOT_SET: {
			break;
		}
	}
}

void TPurchaseValidation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TPurchaseValidation)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TPurchaseValidation::CopyFrom(const TPurchaseValidation &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TPurchaseValidation)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TPurchaseValidation::IsInitialized() const {
	return true;
}

void TPurchaseValidation::InternalSwap(TPurchaseValidation *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	swap(id_, other->id_);
	swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TPurchaseValidation::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TPurchaseRecord::_Internal {
public:
};

TPurchaseRecord::TPurchaseRecord(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TPurchaseRecord)
}
TPurchaseRecord::TPurchaseRecord(const TPurchaseRecord &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_data().empty()) {
		data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
				GetArena());
	}
	message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_message().empty()) {
		message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
				GetArena());
	}
	::memcpy(&success_, &from.success_,
			static_cast<size_t>(reinterpret_cast<char *>(&purchase_provider_reachable_) -
					reinterpret_cast<char *>(&success_)) +
					sizeof(purchase_provider_reachable_));
	// @@protoc_insertion_point(copy_constructor:server.TPurchaseRecord)
}

void TPurchaseRecord::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TPurchaseRecord_api_2eproto.base);
	data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&success_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&purchase_provider_reachable_) - reinterpret_cast<char *>(&success_)) + sizeof(purchase_provider_reachable_));
}

TPurchaseRecord::~TPurchaseRecord() {
	// @@protoc_insertion_point(destructor:server.TPurchaseRecord)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TPurchaseRecord::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TPurchaseRecord::ArenaDtor(void *object) {
	TPurchaseRecord *_this = reinterpret_cast<TPurchaseRecord *>(object);
	(void)_this;
}
void TPurchaseRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TPurchaseRecord::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TPurchaseRecord &TPurchaseRecord::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TPurchaseRecord_api_2eproto.base);
	return *internal_default_instance();
}

void TPurchaseRecord::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TPurchaseRecord)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&success_, 0, static_cast<size_t>(reinterpret_cast<char *>(&purchase_provider_reachable_) - reinterpret_cast<char *>(&success_)) + sizeof(purchase_provider_reachable_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TPurchaseRecord::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// bool success = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool seen_before = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
					seen_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool purchase_provider_reachable = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
					purchase_provider_reachable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string data = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_data();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TPurchaseRecord.data"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string message = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
					auto str = _internal_mutable_message();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TPurchaseRecord.message"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TPurchaseRecord::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TPurchaseRecord)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// bool success = 1;
	if (this->success() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
	}

	// bool seen_before = 2;
	if (this->seen_before() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_seen_before(), target);
	}

	// bool purchase_provider_reachable = 3;
	if (this->purchase_provider_reachable() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_purchase_provider_reachable(), target);
	}

	// string data = 5;
	if (this->data().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TPurchaseRecord.data");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_data(), target);
	}

	// string message = 6;
	if (this->message().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TPurchaseRecord.message");
		target = stream->WriteStringMaybeAliased(
				6, this->_internal_message(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TPurchaseRecord)
	return target;
}

size_t TPurchaseRecord::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TPurchaseRecord)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string data = 5;
	if (this->data().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_data());
	}

	// string message = 6;
	if (this->message().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_message());
	}

	// bool success = 1;
	if (this->success() != 0) {
		total_size += 1 + 1;
	}

	// bool seen_before = 2;
	if (this->seen_before() != 0) {
		total_size += 1 + 1;
	}

	// bool purchase_provider_reachable = 3;
	if (this->purchase_provider_reachable() != 0) {
		total_size += 1 + 1;
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TPurchaseRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TPurchaseRecord)
	GOOGLE_DCHECK_NE(&from, this);
	const TPurchaseRecord *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TPurchaseRecord>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TPurchaseRecord)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TPurchaseRecord)
		MergeFrom(*source);
	}
}

void TPurchaseRecord::MergeFrom(const TPurchaseRecord &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TPurchaseRecord)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.data().size() > 0) {
		_internal_set_data(from._internal_data());
	}
	if (from.message().size() > 0) {
		_internal_set_message(from._internal_message());
	}
	if (from.success() != 0) {
		_internal_set_success(from._internal_success());
	}
	if (from.seen_before() != 0) {
		_internal_set_seen_before(from._internal_seen_before());
	}
	if (from.purchase_provider_reachable() != 0) {
		_internal_set_purchase_provider_reachable(from._internal_purchase_provider_reachable());
	}
}

void TPurchaseRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TPurchaseRecord)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TPurchaseRecord::CopyFrom(const TPurchaseRecord &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TPurchaseRecord)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TPurchaseRecord::IsInitialized() const {
	return true;
}

void TPurchaseRecord::InternalSwap(TPurchaseRecord *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(TPurchaseRecord, purchase_provider_reachable_) + sizeof(TPurchaseRecord::purchase_provider_reachable_) - PROTOBUF_FIELD_OFFSET(TPurchaseRecord, success_)>(
			reinterpret_cast<char *>(&success_),
			reinterpret_cast<char *>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPurchaseRecord::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Notification::_Internal {
public:
};

Notification::Notification(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Notification)
}
Notification::Notification(const Notification &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_id().empty()) {
		id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
				GetArena());
	}
	subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_subject().empty()) {
		subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subject(),
				GetArena());
	}
	content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_content().empty()) {
		content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
				GetArena());
	}
	sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_sender_id().empty()) {
		sender_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sender_id(),
				GetArena());
	}
	::memcpy(&code_, &from.code_,
			static_cast<size_t>(reinterpret_cast<char *>(&persistent_) -
					reinterpret_cast<char *>(&code_)) +
					sizeof(persistent_));
	// @@protoc_insertion_point(copy_constructor:server.Notification)
}

void Notification::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Notification_api_2eproto.base);
	id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	sender_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	::memset(reinterpret_cast<char *>(this) + static_cast<size_t>(reinterpret_cast<char *>(&code_) - reinterpret_cast<char *>(this)),
			0, static_cast<size_t>(reinterpret_cast<char *>(&persistent_) - reinterpret_cast<char *>(&code_)) + sizeof(persistent_));
}

Notification::~Notification() {
	// @@protoc_insertion_point(destructor:server.Notification)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Notification::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	sender_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Notification::ArenaDtor(void *object) {
	Notification *_this = reinterpret_cast<Notification *>(object);
	(void)_this;
}
void Notification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Notification::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Notification &Notification::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Notification_api_2eproto.base);
	return *internal_default_instance();
}

void Notification::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Notification)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	sender_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::memset(&code_, 0, static_cast<size_t>(reinterpret_cast<char *>(&persistent_) - reinterpret_cast<char *>(&code_)) + sizeof(persistent_));
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Notification::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// string id = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					auto str = _internal_mutable_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Notification.id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string subject = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_subject();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Notification.subject"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string content = 3;
			case 3:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
					auto str = _internal_mutable_content();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Notification.content"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 code = 4;
			case 4:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
					code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string sender_id = 5;
			case 5:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
					auto str = _internal_mutable_sender_id();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.Notification.sender_id"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 created_at = 6;
			case 6:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
					created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// int64 expires_at = 7;
			case 7:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
					expires_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// bool persistent = 8;
			case 8:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
					persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Notification::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Notification)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Notification.id");
		target = stream->WriteStringMaybeAliased(
				1, this->_internal_id(), target);
	}

	// string subject = 2;
	if (this->subject().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Notification.subject");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_subject(), target);
	}

	// string content = 3;
	if (this->content().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Notification.content");
		target = stream->WriteStringMaybeAliased(
				3, this->_internal_content(), target);
	}

	// int64 code = 4;
	if (this->code() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_code(), target);
	}

	// string sender_id = 5;
	if (this->sender_id().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_sender_id().data(), static_cast<int>(this->_internal_sender_id().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.Notification.sender_id");
		target = stream->WriteStringMaybeAliased(
				5, this->_internal_sender_id(), target);
	}

	// int64 created_at = 6;
	if (this->created_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_created_at(), target);
	}

	// int64 expires_at = 7;
	if (this->expires_at() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_expires_at(), target);
	}

	// bool persistent = 8;
	if (this->persistent() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_persistent(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Notification)
	return target;
}

size_t Notification::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Notification)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string id = 1;
	if (this->id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_id());
	}

	// string subject = 2;
	if (this->subject().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_subject());
	}

	// string content = 3;
	if (this->content().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_content());
	}

	// string sender_id = 5;
	if (this->sender_id().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_sender_id());
	}

	// int64 code = 4;
	if (this->code() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_code());
	}

	// int64 created_at = 6;
	if (this->created_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_created_at());
	}

	// int64 expires_at = 7;
	if (this->expires_at() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_expires_at());
	}

	// bool persistent = 8;
	if (this->persistent() != 0) {
		total_size += 1 + 1;
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Notification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Notification)
	GOOGLE_DCHECK_NE(&from, this);
	const Notification *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Notification>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Notification)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Notification)
		MergeFrom(*source);
	}
}

void Notification::MergeFrom(const Notification &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Notification)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.id().size() > 0) {
		_internal_set_id(from._internal_id());
	}
	if (from.subject().size() > 0) {
		_internal_set_subject(from._internal_subject());
	}
	if (from.content().size() > 0) {
		_internal_set_content(from._internal_content());
	}
	if (from.sender_id().size() > 0) {
		_internal_set_sender_id(from._internal_sender_id());
	}
	if (from.code() != 0) {
		_internal_set_code(from._internal_code());
	}
	if (from.created_at() != 0) {
		_internal_set_created_at(from._internal_created_at());
	}
	if (from.expires_at() != 0) {
		_internal_set_expires_at(from._internal_expires_at());
	}
	if (from.persistent() != 0) {
		_internal_set_persistent(from._internal_persistent());
	}
}

void Notification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Notification)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Notification::CopyFrom(const Notification &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Notification)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Notification::IsInitialized() const {
	return true;
}

void Notification::InternalSwap(Notification *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	sender_id_.Swap(&other->sender_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	::PROTOBUF_NAMESPACE_ID::internal::memswap<
			PROTOBUF_FIELD_OFFSET(Notification, persistent_) + sizeof(Notification::persistent_) - PROTOBUF_FIELD_OFFSET(Notification, code_)>(
			reinterpret_cast<char *>(&code_),
			reinterpret_cast<char *>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Notification::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class Notifications::_Internal {
public:
};

Notifications::Notifications(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		notifications_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.Notifications)
}
Notifications::Notifications(const Notifications &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		notifications_(from.notifications_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.Notifications)
}

void Notifications::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Notifications_api_2eproto.base);
}

Notifications::~Notifications() {
	// @@protoc_insertion_point(destructor:server.Notifications)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Notifications::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void Notifications::ArenaDtor(void *object) {
	Notifications *_this = reinterpret_cast<Notifications *>(object);
	(void)_this;
}
void Notifications::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void Notifications::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const Notifications &Notifications::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Notifications_api_2eproto.base);
	return *internal_default_instance();
}

void Notifications::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.Notifications)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	notifications_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *Notifications::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.Notification notifications = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *Notifications::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.Notifications)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.Notification notifications = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_notifications_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_notifications(i), target, stream);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.Notifications)
	return target;
}

size_t Notifications::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.Notifications)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.Notification notifications = 1;
	total_size += 1UL * this->_internal_notifications_size();
	for (const auto &msg : this->notifications_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void Notifications::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.Notifications)
	GOOGLE_DCHECK_NE(&from, this);
	const Notifications *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Notifications>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.Notifications)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.Notifications)
		MergeFrom(*source);
	}
}

void Notifications::MergeFrom(const Notifications &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.Notifications)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	notifications_.MergeFrom(from.notifications_);
}

void Notifications::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.Notifications)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void Notifications::CopyFrom(const Notifications &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.Notifications)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool Notifications::IsInitialized() const {
	return true;
}

void Notifications::InternalSwap(Notifications *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	notifications_.InternalSwap(&other->notifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Notifications::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TNotificationsList::_Internal {
public:
};

TNotificationsList::TNotificationsList(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TNotificationsList)
}
TNotificationsList::TNotificationsList(const TNotificationsList &from) :
		::PROTOBUF_NAMESPACE_ID::Message() {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	resumable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_resumable_cursor().empty()) {
		resumable_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resumable_cursor(),
				GetArena());
	}
	limit_ = from.limit_;
	// @@protoc_insertion_point(copy_constructor:server.TNotificationsList)
}

void TNotificationsList::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TNotificationsList_api_2eproto.base);
	resumable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	limit_ = PROTOBUF_LONGLONG(0);
}

TNotificationsList::~TNotificationsList() {
	// @@protoc_insertion_point(destructor:server.TNotificationsList)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TNotificationsList::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	resumable_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TNotificationsList::ArenaDtor(void *object) {
	TNotificationsList *_this = reinterpret_cast<TNotificationsList *>(object);
	(void)_this;
}
void TNotificationsList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TNotificationsList::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TNotificationsList &TNotificationsList::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TNotificationsList_api_2eproto.base);
	return *internal_default_instance();
}

void TNotificationsList::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TNotificationsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	resumable_cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	limit_ = PROTOBUF_LONGLONG(0);
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TNotificationsList::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// int64 limit = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
					limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			// string resumable_cursor = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_resumable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TNotificationsList.resumable_cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TNotificationsList::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TNotificationsList)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// int64 limit = 1;
	if (this->limit() != 0) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_limit(), target);
	}

	// string resumable_cursor = 2;
	if (this->resumable_cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_resumable_cursor().data(), static_cast<int>(this->_internal_resumable_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TNotificationsList.resumable_cursor");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_resumable_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TNotificationsList)
	return target;
}

size_t TNotificationsList::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TNotificationsList)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// string resumable_cursor = 2;
	if (this->resumable_cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_resumable_cursor());
	}

	// int64 limit = 1;
	if (this->limit() != 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
						this->_internal_limit());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TNotificationsList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TNotificationsList)
	GOOGLE_DCHECK_NE(&from, this);
	const TNotificationsList *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TNotificationsList>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TNotificationsList)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TNotificationsList)
		MergeFrom(*source);
	}
}

void TNotificationsList::MergeFrom(const TNotificationsList &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TNotificationsList)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	if (from.resumable_cursor().size() > 0) {
		_internal_set_resumable_cursor(from._internal_resumable_cursor());
	}
	if (from.limit() != 0) {
		_internal_set_limit(from._internal_limit());
	}
}

void TNotificationsList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TNotificationsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TNotificationsList::CopyFrom(const TNotificationsList &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TNotificationsList)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TNotificationsList::IsInitialized() const {
	return true;
}

void TNotificationsList::InternalSwap(TNotificationsList *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	resumable_cursor_.Swap(&other->resumable_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TNotificationsList::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TNotifications::_Internal {
public:
};

TNotifications::TNotifications(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		notifications_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TNotifications)
}
TNotifications::TNotifications(const TNotifications &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		notifications_(from.notifications_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	resumable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
	if (!from._internal_resumable_cursor().empty()) {
		resumable_cursor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resumable_cursor(),
				GetArena());
	}
	// @@protoc_insertion_point(copy_constructor:server.TNotifications)
}

void TNotifications::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TNotifications_api_2eproto.base);
	resumable_cursor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TNotifications::~TNotifications() {
	// @@protoc_insertion_point(destructor:server.TNotifications)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TNotifications::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
	resumable_cursor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TNotifications::ArenaDtor(void *object) {
	TNotifications *_this = reinterpret_cast<TNotifications *>(object);
	(void)_this;
}
void TNotifications::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TNotifications::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TNotifications &TNotifications::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TNotifications_api_2eproto.base);
	return *internal_default_instance();
}

void TNotifications::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TNotifications)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	notifications_.Clear();
	resumable_cursor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TNotifications::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated .server.Notification notifications = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						ptr = ctx->ParseMessage(_internal_add_notifications(), ptr);
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			// string resumable_cursor = 2;
			case 2:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
					auto str = _internal_mutable_resumable_cursor();
					ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
					CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TNotifications.resumable_cursor"));
					CHK_(ptr);
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TNotifications::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TNotifications)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated .server.Notification notifications = 1;
	for (unsigned int i = 0,
					  n = static_cast<unsigned int>(this->_internal_notifications_size());
			i < n; i++) {
		target = stream->EnsureSpace(target);
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
				InternalWriteMessage(1, this->_internal_notifications(i), target, stream);
	}

	// string resumable_cursor = 2;
	if (this->resumable_cursor().size() > 0) {
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				this->_internal_resumable_cursor().data(), static_cast<int>(this->_internal_resumable_cursor().length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TNotifications.resumable_cursor");
		target = stream->WriteStringMaybeAliased(
				2, this->_internal_resumable_cursor(), target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TNotifications)
	return target;
}

size_t TNotifications::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TNotifications)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated .server.Notification notifications = 1;
	total_size += 1UL * this->_internal_notifications_size();
	for (const auto &msg : this->notifications_) {
		total_size +=
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
	}

	// string resumable_cursor = 2;
	if (this->resumable_cursor().size() > 0) {
		total_size += 1 +
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
						this->_internal_resumable_cursor());
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TNotifications::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TNotifications)
	GOOGLE_DCHECK_NE(&from, this);
	const TNotifications *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TNotifications>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TNotifications)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TNotifications)
		MergeFrom(*source);
	}
}

void TNotifications::MergeFrom(const TNotifications &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TNotifications)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	notifications_.MergeFrom(from.notifications_);
	if (from.resumable_cursor().size() > 0) {
		_internal_set_resumable_cursor(from._internal_resumable_cursor());
	}
}

void TNotifications::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TNotifications)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TNotifications::CopyFrom(const TNotifications &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TNotifications)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TNotifications::IsInitialized() const {
	return true;
}

void TNotifications::InternalSwap(TNotifications *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	notifications_.InternalSwap(&other->notifications_);
	resumable_cursor_.Swap(&other->resumable_cursor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TNotifications::GetMetadata() const {
	return GetMetadataStatic();
}

// ===================================================================

class TNotificationsRemove::_Internal {
public:
};

TNotificationsRemove::TNotificationsRemove(::PROTOBUF_NAMESPACE_ID::Arena *arena) :
		::PROTOBUF_NAMESPACE_ID::Message(arena),
		notification_ids_(arena) {
	SharedCtor();
	RegisterArenaDtor(arena);
	// @@protoc_insertion_point(arena_constructor:server.TNotificationsRemove)
}
TNotificationsRemove::TNotificationsRemove(const TNotificationsRemove &from) :
		::PROTOBUF_NAMESPACE_ID::Message(),
		notification_ids_(from.notification_ids_) {
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	// @@protoc_insertion_point(copy_constructor:server.TNotificationsRemove)
}

void TNotificationsRemove::SharedCtor() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TNotificationsRemove_api_2eproto.base);
}

TNotificationsRemove::~TNotificationsRemove() {
	// @@protoc_insertion_point(destructor:server.TNotificationsRemove)
	SharedDtor();
	_internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TNotificationsRemove::SharedDtor() {
	GOOGLE_DCHECK(GetArena() == nullptr);
}

void TNotificationsRemove::ArenaDtor(void *object) {
	TNotificationsRemove *_this = reinterpret_cast<TNotificationsRemove *>(object);
	(void)_this;
}
void TNotificationsRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}
void TNotificationsRemove::SetCachedSize(int size) const {
	_cached_size_.Set(size);
}
const TNotificationsRemove &TNotificationsRemove::default_instance() {
	::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TNotificationsRemove_api_2eproto.base);
	return *internal_default_instance();
}

void TNotificationsRemove::Clear() {
	// @@protoc_insertion_point(message_clear_start:server.TNotificationsRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	notification_ids_.Clear();
	_internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *TNotificationsRemove::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                       \
	if (PROTOBUF_PREDICT_FALSE(!(x))) \
	goto failure
	while (!ctx->Done(&ptr)) {
		::PROTOBUF_NAMESPACE_ID::uint32 tag;
		ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
		CHK_(ptr);
		switch (tag >> 3) {
			// repeated string notification_ids = 1;
			case 1:
				if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
					ptr -= 1;
					do {
						ptr += 1;
						auto str = _internal_add_notification_ids();
						ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
						CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server.TNotificationsRemove.notification_ids"));
						CHK_(ptr);
						if (!ctx->DataAvailable(ptr))
							break;
					} while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
				} else
					goto handle_unusual;
				continue;
			default: {
			handle_unusual:
				if ((tag & 7) == 4 || tag == 0) {
					ctx->SetLastTag(tag);
					goto success;
				}
				ptr = UnknownFieldParse(tag,
						_internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
						ptr, ctx);
				CHK_(ptr != nullptr);
				continue;
			}
		} // switch
	} // while
success:
	return ptr;
failure:
	ptr = nullptr;
	goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *TNotificationsRemove::_InternalSerialize(
		::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
	// @@protoc_insertion_point(serialize_to_array_start:server.TNotificationsRemove)
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	// repeated string notification_ids = 1;
	for (int i = 0, n = this->_internal_notification_ids_size(); i < n; i++) {
		const auto &s = this->_internal_notification_ids(i);
		::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
				s.data(), static_cast<int>(s.length()),
				::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
				"server.TNotificationsRemove.notification_ids");
		target = stream->WriteString(1, s, target);
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
				_internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
	}
	// @@protoc_insertion_point(serialize_to_array_end:server.TNotificationsRemove)
	return target;
}

size_t TNotificationsRemove::ByteSizeLong() const {
	// @@protoc_insertion_point(message_byte_size_start:server.TNotificationsRemove)
	size_t total_size = 0;

	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	// Prevent compiler warnings about cached_has_bits being unused
	(void)cached_has_bits;

	// repeated string notification_ids = 1;
	total_size += 1 *
			::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notification_ids_.size());
	for (int i = 0, n = notification_ids_.size(); i < n; i++) {
		total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
				notification_ids_.Get(i));
	}

	if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
		return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
				_internal_metadata_, total_size, &_cached_size_);
	}
	int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
	SetCachedSize(cached_size);
	return total_size;
}

void TNotificationsRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_merge_from_start:server.TNotificationsRemove)
	GOOGLE_DCHECK_NE(&from, this);
	const TNotificationsRemove *source =
			::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TNotificationsRemove>(
					&from);
	if (source == nullptr) {
		// @@protoc_insertion_point(generalized_merge_from_cast_fail:server.TNotificationsRemove)
		::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
	} else {
		// @@protoc_insertion_point(generalized_merge_from_cast_success:server.TNotificationsRemove)
		MergeFrom(*source);
	}
}

void TNotificationsRemove::MergeFrom(const TNotificationsRemove &from) {
	// @@protoc_insertion_point(class_specific_merge_from_start:server.TNotificationsRemove)
	GOOGLE_DCHECK_NE(&from, this);
	_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
	::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
	(void)cached_has_bits;

	notification_ids_.MergeFrom(from.notification_ids_);
}

void TNotificationsRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
	// @@protoc_insertion_point(generalized_copy_from_start:server.TNotificationsRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

void TNotificationsRemove::CopyFrom(const TNotificationsRemove &from) {
	// @@protoc_insertion_point(class_specific_copy_from_start:server.TNotificationsRemove)
	if (&from == this)
		return;
	Clear();
	MergeFrom(from);
}

bool TNotificationsRemove::IsInitialized() const {
	return true;
}

void TNotificationsRemove::InternalSwap(TNotificationsRemove *other) {
	using std::swap;
	_internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
	notification_ids_.InternalSwap(&other->notification_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TNotificationsRemove::GetMetadata() const {
	return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
} // namespace server
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::server::Heartbeat *Arena::CreateMaybeMessage<::server::Heartbeat>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Heartbeat>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Error *Arena::CreateMaybeMessage<::server::Error>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Error>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::AuthenticateRequest_Email *Arena::CreateMaybeMessage<::server::AuthenticateRequest_Email>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::AuthenticateRequest_Email>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::AuthenticateRequest_GameCenter *Arena::CreateMaybeMessage<::server::AuthenticateRequest_GameCenter>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::AuthenticateRequest_GameCenter>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::AuthenticateRequest *Arena::CreateMaybeMessage<::server::AuthenticateRequest>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::AuthenticateRequest>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::AuthenticateResponse_Session *Arena::CreateMaybeMessage<::server::AuthenticateResponse_Session>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::AuthenticateResponse_Session>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::AuthenticateResponse_Error *Arena::CreateMaybeMessage<::server::AuthenticateResponse_Error>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::AuthenticateResponse_Error>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::AuthenticateResponse *Arena::CreateMaybeMessage<::server::AuthenticateResponse>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::AuthenticateResponse>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Envelope *Arena::CreateMaybeMessage<::server::Envelope>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Envelope>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Logout *Arena::CreateMaybeMessage<::server::Logout>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Logout>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLink *Arena::CreateMaybeMessage<::server::TLink>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLink>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TUnlink *Arena::CreateMaybeMessage<::server::TUnlink>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TUnlink>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::User *Arena::CreateMaybeMessage<::server::User>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::User>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Self *Arena::CreateMaybeMessage<::server::Self>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Self>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TSelfFetch *Arena::CreateMaybeMessage<::server::TSelfFetch>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TSelfFetch>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TSelf *Arena::CreateMaybeMessage<::server::TSelf>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TSelf>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TSelfUpdate *Arena::CreateMaybeMessage<::server::TSelfUpdate>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TSelfUpdate>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TUsersFetch_UsersFetch *Arena::CreateMaybeMessage<::server::TUsersFetch_UsersFetch>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TUsersFetch_UsersFetch>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TUsersFetch *Arena::CreateMaybeMessage<::server::TUsersFetch>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TUsersFetch>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TUsers *Arena::CreateMaybeMessage<::server::TUsers>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TUsers>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Friend *Arena::CreateMaybeMessage<::server::Friend>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Friend>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TFriendsAdd_FriendsAdd *Arena::CreateMaybeMessage<::server::TFriendsAdd_FriendsAdd>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TFriendsAdd_FriendsAdd>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TFriendsAdd *Arena::CreateMaybeMessage<::server::TFriendsAdd>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TFriendsAdd>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TFriendsRemove *Arena::CreateMaybeMessage<::server::TFriendsRemove>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TFriendsRemove>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TFriendsBlock *Arena::CreateMaybeMessage<::server::TFriendsBlock>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TFriendsBlock>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TFriendsList *Arena::CreateMaybeMessage<::server::TFriendsList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TFriendsList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TFriends *Arena::CreateMaybeMessage<::server::TFriends>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TFriends>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Group *Arena::CreateMaybeMessage<::server::Group>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Group>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsCreate_GroupCreate *Arena::CreateMaybeMessage<::server::TGroupsCreate_GroupCreate>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsCreate_GroupCreate>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsCreate *Arena::CreateMaybeMessage<::server::TGroupsCreate>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsCreate>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsUpdate_GroupUpdate *Arena::CreateMaybeMessage<::server::TGroupsUpdate_GroupUpdate>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsUpdate_GroupUpdate>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsUpdate *Arena::CreateMaybeMessage<::server::TGroupsUpdate>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsUpdate>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsRemove *Arena::CreateMaybeMessage<::server::TGroupsRemove>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsRemove>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsSelfList *Arena::CreateMaybeMessage<::server::TGroupsSelfList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsSelfList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsFetch_GroupFetch *Arena::CreateMaybeMessage<::server::TGroupsFetch_GroupFetch>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsFetch_GroupFetch>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsFetch *Arena::CreateMaybeMessage<::server::TGroupsFetch>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsFetch>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsList *Arena::CreateMaybeMessage<::server::TGroupsList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroups *Arena::CreateMaybeMessage<::server::TGroups>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroups>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsSelf_GroupSelf *Arena::CreateMaybeMessage<::server::TGroupsSelf_GroupSelf>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsSelf_GroupSelf>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsSelf *Arena::CreateMaybeMessage<::server::TGroupsSelf>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsSelf>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::GroupUser *Arena::CreateMaybeMessage<::server::GroupUser>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::GroupUser>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupUsersList *Arena::CreateMaybeMessage<::server::TGroupUsersList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupUsersList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupUsers *Arena::CreateMaybeMessage<::server::TGroupUsers>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupUsers>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsJoin *Arena::CreateMaybeMessage<::server::TGroupsJoin>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsJoin>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupsLeave *Arena::CreateMaybeMessage<::server::TGroupsLeave>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupsLeave>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupUsersAdd_GroupUserAdd *Arena::CreateMaybeMessage<::server::TGroupUsersAdd_GroupUserAdd>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupUsersAdd_GroupUserAdd>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupUsersAdd *Arena::CreateMaybeMessage<::server::TGroupUsersAdd>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupUsersAdd>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupUsersKick_GroupUserKick *Arena::CreateMaybeMessage<::server::TGroupUsersKick_GroupUserKick>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupUsersKick_GroupUserKick>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupUsersKick *Arena::CreateMaybeMessage<::server::TGroupUsersKick>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupUsersKick>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupUsersPromote_GroupUserPromote *Arena::CreateMaybeMessage<::server::TGroupUsersPromote_GroupUserPromote>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupUsersPromote_GroupUserPromote>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TGroupUsersPromote *Arena::CreateMaybeMessage<::server::TGroupUsersPromote>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TGroupUsersPromote>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TopicId *Arena::CreateMaybeMessage<::server::TopicId>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TopicId>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::UserPresence *Arena::CreateMaybeMessage<::server::UserPresence>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::UserPresence>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopicsJoin_TopicJoin *Arena::CreateMaybeMessage<::server::TTopicsJoin_TopicJoin>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopicsJoin_TopicJoin>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopicsJoin *Arena::CreateMaybeMessage<::server::TTopicsJoin>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopicsJoin>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopics_Topic *Arena::CreateMaybeMessage<::server::TTopics_Topic>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopics_Topic>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopics *Arena::CreateMaybeMessage<::server::TTopics>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopics>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopicsLeave *Arena::CreateMaybeMessage<::server::TTopicsLeave>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopicsLeave>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopicMessageSend *Arena::CreateMaybeMessage<::server::TTopicMessageSend>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopicMessageSend>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopicMessageAck *Arena::CreateMaybeMessage<::server::TTopicMessageAck>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopicMessageAck>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TopicMessage *Arena::CreateMaybeMessage<::server::TopicMessage>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TopicMessage>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopicMessagesList *Arena::CreateMaybeMessage<::server::TTopicMessagesList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopicMessagesList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TTopicMessages *Arena::CreateMaybeMessage<::server::TTopicMessages>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TTopicMessages>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TopicPresence *Arena::CreateMaybeMessage<::server::TopicPresence>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TopicPresence>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::PropertyPair_StringSet *Arena::CreateMaybeMessage<::server::PropertyPair_StringSet>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::PropertyPair_StringSet>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::PropertyPair *Arena::CreateMaybeMessage<::server::PropertyPair>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::PropertyPair>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::MatchmakeFilter_TermFilter *Arena::CreateMaybeMessage<::server::MatchmakeFilter_TermFilter>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::MatchmakeFilter_TermFilter>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::MatchmakeFilter_RangeFilter *Arena::CreateMaybeMessage<::server::MatchmakeFilter_RangeFilter>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::MatchmakeFilter_RangeFilter>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::MatchmakeFilter *Arena::CreateMaybeMessage<::server::MatchmakeFilter>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::MatchmakeFilter>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatchmakeAdd *Arena::CreateMaybeMessage<::server::TMatchmakeAdd>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatchmakeAdd>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatchmakeTicket *Arena::CreateMaybeMessage<::server::TMatchmakeTicket>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatchmakeTicket>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatchmakeRemove *Arena::CreateMaybeMessage<::server::TMatchmakeRemove>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatchmakeRemove>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::MatchmakeMatched_UserProperty *Arena::CreateMaybeMessage<::server::MatchmakeMatched_UserProperty>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::MatchmakeMatched_UserProperty>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::MatchmakeMatched *Arena::CreateMaybeMessage<::server::MatchmakeMatched>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::MatchmakeMatched>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Match *Arena::CreateMaybeMessage<::server::Match>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Match>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::MatchPresence *Arena::CreateMaybeMessage<::server::MatchPresence>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::MatchPresence>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatchCreate *Arena::CreateMaybeMessage<::server::TMatchCreate>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatchCreate>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatch *Arena::CreateMaybeMessage<::server::TMatch>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatch>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatchesJoin_MatchJoin *Arena::CreateMaybeMessage<::server::TMatchesJoin_MatchJoin>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatchesJoin_MatchJoin>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatchesJoin *Arena::CreateMaybeMessage<::server::TMatchesJoin>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatchesJoin>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatches *Arena::CreateMaybeMessage<::server::TMatches>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatches>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::MatchDataSend *Arena::CreateMaybeMessage<::server::MatchDataSend>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::MatchDataSend>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::MatchData *Arena::CreateMaybeMessage<::server::MatchData>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::MatchData>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TMatchesLeave *Arena::CreateMaybeMessage<::server::TMatchesLeave>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TMatchesLeave>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageList *Arena::CreateMaybeMessage<::server::TStorageList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageFetch_StorageKey *Arena::CreateMaybeMessage<::server::TStorageFetch_StorageKey>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageFetch_StorageKey>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageFetch *Arena::CreateMaybeMessage<::server::TStorageFetch>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageFetch>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageData_StorageData *Arena::CreateMaybeMessage<::server::TStorageData_StorageData>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageData_StorageData>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageData *Arena::CreateMaybeMessage<::server::TStorageData>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageData>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageWrite_StorageData *Arena::CreateMaybeMessage<::server::TStorageWrite_StorageData>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageWrite_StorageData>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageWrite *Arena::CreateMaybeMessage<::server::TStorageWrite>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageWrite>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageUpdate_StorageUpdate_UpdateOp *Arena::CreateMaybeMessage<::server::TStorageUpdate_StorageUpdate_UpdateOp>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageUpdate_StorageUpdate_UpdateOp>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageUpdate_StorageUpdate_StorageKey *Arena::CreateMaybeMessage<::server::TStorageUpdate_StorageUpdate_StorageKey>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageUpdate_StorageUpdate_StorageKey>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageUpdate_StorageUpdate *Arena::CreateMaybeMessage<::server::TStorageUpdate_StorageUpdate>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageUpdate_StorageUpdate>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageUpdate *Arena::CreateMaybeMessage<::server::TStorageUpdate>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageUpdate>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageKeys_StorageKey *Arena::CreateMaybeMessage<::server::TStorageKeys_StorageKey>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageKeys_StorageKey>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageKeys *Arena::CreateMaybeMessage<::server::TStorageKeys>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageKeys>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageRemove_StorageKey *Arena::CreateMaybeMessage<::server::TStorageRemove_StorageKey>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageRemove_StorageKey>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TStorageRemove *Arena::CreateMaybeMessage<::server::TStorageRemove>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TStorageRemove>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Leaderboard *Arena::CreateMaybeMessage<::server::Leaderboard>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Leaderboard>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::LeaderboardRecord *Arena::CreateMaybeMessage<::server::LeaderboardRecord>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::LeaderboardRecord>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLeaderboardsList *Arena::CreateMaybeMessage<::server::TLeaderboardsList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLeaderboardsList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLeaderboards *Arena::CreateMaybeMessage<::server::TLeaderboards>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLeaderboards>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite *Arena::CreateMaybeMessage<::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLeaderboardRecordsWrite_LeaderboardRecordWrite>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLeaderboardRecordsWrite *Arena::CreateMaybeMessage<::server::TLeaderboardRecordsWrite>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLeaderboardRecordsWrite>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLeaderboardRecordsFetch *Arena::CreateMaybeMessage<::server::TLeaderboardRecordsFetch>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLeaderboardRecordsFetch>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLeaderboardRecordsList_Owners *Arena::CreateMaybeMessage<::server::TLeaderboardRecordsList_Owners>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLeaderboardRecordsList_Owners>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLeaderboardRecordsList *Arena::CreateMaybeMessage<::server::TLeaderboardRecordsList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLeaderboardRecordsList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TLeaderboardRecords *Arena::CreateMaybeMessage<::server::TLeaderboardRecords>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TLeaderboardRecords>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TRpc *Arena::CreateMaybeMessage<::server::TRpc>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TRpc>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TPurchaseValidation_ApplePurchase *Arena::CreateMaybeMessage<::server::TPurchaseValidation_ApplePurchase>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TPurchaseValidation_ApplePurchase>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TPurchaseValidation_GooglePurchase *Arena::CreateMaybeMessage<::server::TPurchaseValidation_GooglePurchase>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TPurchaseValidation_GooglePurchase>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TPurchaseValidation *Arena::CreateMaybeMessage<::server::TPurchaseValidation>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TPurchaseValidation>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TPurchaseRecord *Arena::CreateMaybeMessage<::server::TPurchaseRecord>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TPurchaseRecord>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Notification *Arena::CreateMaybeMessage<::server::Notification>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Notification>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::Notifications *Arena::CreateMaybeMessage<::server::Notifications>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::Notifications>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TNotificationsList *Arena::CreateMaybeMessage<::server::TNotificationsList>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TNotificationsList>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TNotifications *Arena::CreateMaybeMessage<::server::TNotifications>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TNotifications>(arena);
}
template <>
PROTOBUF_NOINLINE ::server::TNotificationsRemove *Arena::CreateMaybeMessage<::server::TNotificationsRemove>(Arena *arena) {
	return Arena::CreateMessageInternal<::server::TNotificationsRemove>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
