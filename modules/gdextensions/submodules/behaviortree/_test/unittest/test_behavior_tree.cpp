#include "catch.hpp"
#include "utils.h"

TEST_CASE( "Behavior Tree", "[bt_comp]" ) {
    VMRunningData data;
    BTStructure structure_data;
    NodeList node_list;
    VirtualMachine vm(node_list, structure_data);

    SECTION( "{R,[S,F,R],(F,+S,R)}->{S,[S,S,R],(R,+S,R)}->{F,[R,S,R],(F,+F,S)}" ) {
        MockParallel parallel;
        MockSelector selector;
        MockSequence sequence;
        MockDecorator decorator;
        MockAction action[7];

        MockAgent agent;
        agent.data_list.resize(11);
        const MockAgent::NodeData& parallel_data = agent.data_list[0];
        const MockAgent::NodeData& sequence_data = agent.data_list[2];
        const MockAgent::NodeData& selector_data = agent.data_list[6];
        const MockAgent::NodeData& decorator_data = agent.data_list[8];
        const MockAgent::NodeData& action_data0 = agent.data_list[1];
        const MockAgent::NodeData& action_data1 = agent.data_list[3];
        const MockAgent::NodeData& action_data2 = agent.data_list[4];
        const MockAgent::NodeData& action_data3 = agent.data_list[5];
        const MockAgent::NodeData& action_data4 = agent.data_list[7];
        const MockAgent::NodeData& action_data5 = agent.data_list[9];
        const MockAgent::NodeData& action_data6 = agent.data_list[10];

        decorator.inner_node.children.push_back(action[5].inner_node);
        sequence.inner_node.children.push_back(action[1].inner_node);
        sequence.inner_node.children.push_back(action[2].inner_node);
        sequence.inner_node.children.push_back(action[3].inner_node);
        selector.inner_node.children.push_back(action[4].inner_node);
        selector.inner_node.children.push_back(decorator.inner_node);
        selector.inner_node.children.push_back(action[6].inner_node);
        parallel.inner_node.children.push_back(action[0].inner_node);
        parallel.inner_node.children.push_back(sequence.inner_node);
        parallel.inner_node.children.push_back(selector.inner_node);
        to_vm(structure_data, node_list, parallel.inner_node);

        action[0].update_result = BH_RUNNING;
        action[1].update_result = BH_SUCCESS;
        action[2].update_result = BH_FAILURE;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_FAILURE;
        action[5].update_result = BH_SUCCESS;
        action[6].update_result = BH_RUNNING;
        tick_vm(vm, agent, data);
        // {R,[S,F,R],(F,+S,R)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_FAILURE);
        REQUIRE(sequence_data.counter.prepare == 1);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 2);
        REQUIRE(selector_data.child_update_result == BH_SUCCESS);
        REQUIRE(selector_data.counter.prepare == 1);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 2);
        REQUIRE(decorator_data.child_update_result == BH_SUCCESS);
        REQUIRE(decorator_data.counter.prepare == 1);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 1);
        REQUIRE(decorator_data.counter.child_update == 1);
        REQUIRE(action_data0.counter.prepare == 1);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 1);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 1);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 1);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 1);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 0);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 0);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 1);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 1);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 1);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 0);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 0);
        REQUIRE(action_data6.counter.child_update == 0);

        action[0].update_result = BH_SUCCESS;
        action[1].update_result = BH_SUCCESS;
        action[2].update_result = BH_SUCCESS;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_RUNNING;
        action[5].update_result = BH_SUCCESS;
        action[6].update_result = BH_RUNNING;
        tick_vm(vm, agent, data);
        // {R,[S,F,R],(F,+S,R)}->{S,[S,S,R],(R,+S,R)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_RUNNING);
        REQUIRE(sequence_data.counter.prepare == 1);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 3);
        REQUIRE(selector_data.child_update_result == BH_RUNNING);
        REQUIRE(selector_data.counter.prepare == 1);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 1);
        REQUIRE(decorator_data.counter.prepare == 0);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 0);
        REQUIRE(decorator_data.counter.child_update == 0);
        REQUIRE(action_data0.counter.prepare == 0);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 1);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 1);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 1);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 1);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 1);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 1);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 1);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 0);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 0);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 0);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 0);
        REQUIRE(action_data6.counter.child_update == 0);

        action[0].update_result = BH_FAILURE;
        action[1].update_result = BH_RUNNING;
        action[2].update_result = BH_SUCCESS;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_FAILURE;
        action[5].update_result = BH_FAILURE;
        action[6].update_result = BH_SUCCESS;
        tick_vm(vm, agent, data);
        // {S,[S,S,R],(R,+S,R)}->{F,[R,S,R],(F,+F,S)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_RUNNING);
        REQUIRE(sequence_data.counter.prepare == 0);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 1);
        REQUIRE(selector_data.child_update_result == BH_SUCCESS);
        REQUIRE(selector_data.counter.prepare == 0);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 3);
        REQUIRE(decorator_data.counter.prepare == 1);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 1);
        REQUIRE(decorator_data.counter.child_update == 1);
        REQUIRE(action_data0.counter.prepare == 1);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 0);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 0);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 0);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 0);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 0);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 1);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 0);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 1);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 1);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 1);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 1);
        REQUIRE(action_data6.counter.child_update == 0);
    }
}

TEST_CASE( "Behavior Tree Reuse", "[bt_reuse]" ) {
    BTStructure structure_data;
    NodeList node_list;
    VirtualMachine vm(node_list, structure_data);

    MockParallel parallel;
    MockSelector selector;
    MockSequence sequence;
    MockDecorator decorator;
    MockAction action[7];

    decorator.inner_node.children.push_back(action[5].inner_node);
    sequence.inner_node.children.push_back(action[1].inner_node);
    sequence.inner_node.children.push_back(action[2].inner_node);
    sequence.inner_node.children.push_back(action[3].inner_node);
    selector.inner_node.children.push_back(action[4].inner_node);
    selector.inner_node.children.push_back(decorator.inner_node);
    selector.inner_node.children.push_back(action[6].inner_node);
    parallel.inner_node.children.push_back(action[0].inner_node);
    parallel.inner_node.children.push_back(sequence.inner_node);
    parallel.inner_node.children.push_back(selector.inner_node);
    to_vm(structure_data, node_list, parallel.inner_node);

    SECTION( "{R,[S,F,R],(F,+S,R)}->{S,[S,S,R],(R,+S,R)}->{F,[R,S,R],(F,+F,S)}" ) {
        VMRunningData data;
        MockAgent agent;
        agent.data_list.resize(11);
        const MockAgent::NodeData& parallel_data = agent.data_list[0];
        const MockAgent::NodeData& sequence_data = agent.data_list[2];
        const MockAgent::NodeData& selector_data = agent.data_list[6];
        const MockAgent::NodeData& decorator_data = agent.data_list[8];
        const MockAgent::NodeData& action_data0 = agent.data_list[1];
        const MockAgent::NodeData& action_data1 = agent.data_list[3];
        const MockAgent::NodeData& action_data2 = agent.data_list[4];
        const MockAgent::NodeData& action_data3 = agent.data_list[5];
        const MockAgent::NodeData& action_data4 = agent.data_list[7];
        const MockAgent::NodeData& action_data5 = agent.data_list[9];
        const MockAgent::NodeData& action_data6 = agent.data_list[10];

        action[0].update_result = BH_RUNNING;
        action[1].update_result = BH_SUCCESS;
        action[2].update_result = BH_FAILURE;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_FAILURE;
        action[5].update_result = BH_SUCCESS;
        action[6].update_result = BH_RUNNING;
        tick_vm(vm, agent, data);
        // {R,[S,F,R],(F,+S,R)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_FAILURE);
        REQUIRE(sequence_data.counter.prepare == 1);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 2);
        REQUIRE(selector_data.child_update_result == BH_SUCCESS);
        REQUIRE(selector_data.counter.prepare == 1);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 2);
        REQUIRE(decorator_data.child_update_result == BH_SUCCESS);
        REQUIRE(decorator_data.counter.prepare == 1);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 1);
        REQUIRE(decorator_data.counter.child_update == 1);
        REQUIRE(action_data0.counter.prepare == 1);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 1);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 1);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 1);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 1);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 0);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 0);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 1);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 1);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 1);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 0);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 0);
        REQUIRE(action_data6.counter.child_update == 0);

        action[0].update_result = BH_SUCCESS;
        action[1].update_result = BH_SUCCESS;
        action[2].update_result = BH_SUCCESS;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_RUNNING;
        action[5].update_result = BH_SUCCESS;
        action[6].update_result = BH_RUNNING;
        tick_vm(vm, agent, data);
        // {R,[S,F,R],(F,+S,R)}->{S,[S,S,R],(R,+S,R)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_RUNNING);
        REQUIRE(sequence_data.counter.prepare == 1);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 3);
        REQUIRE(selector_data.child_update_result == BH_RUNNING);
        REQUIRE(selector_data.counter.prepare == 1);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 1);
        REQUIRE(decorator_data.counter.prepare == 0);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 0);
        REQUIRE(decorator_data.counter.child_update == 0);
        REQUIRE(action_data0.counter.prepare == 0);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 1);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 1);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 1);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 1);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 1);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 1);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 1);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 0);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 0);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 0);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 0);
        REQUIRE(action_data6.counter.child_update == 0);

        action[0].update_result = BH_FAILURE;
        action[1].update_result = BH_RUNNING;
        action[2].update_result = BH_SUCCESS;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_FAILURE;
        action[5].update_result = BH_FAILURE;
        action[6].update_result = BH_SUCCESS;
        tick_vm(vm, agent, data);
        // {S,[S,S,R],(R,+S,R)}->{F,[R,S,R],(F,+F,S)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_RUNNING);
        REQUIRE(sequence_data.counter.prepare == 0);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 1);
        REQUIRE(selector_data.child_update_result == BH_SUCCESS);
        REQUIRE(selector_data.counter.prepare == 0);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 3);
        REQUIRE(decorator_data.counter.prepare == 1);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 1);
        REQUIRE(decorator_data.counter.child_update == 1);
        REQUIRE(action_data0.counter.prepare == 1);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 0);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 0);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 0);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 0);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 0);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 1);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 0);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 1);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 1);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 1);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 1);
        REQUIRE(action_data6.counter.child_update == 0);
    }

    SECTION( "{R,[S,F,R],(F,+S,R)}->{S,[S,S,R],(R,+S,R)}->{F,[R,S,R],(F,+F,S)}" ) {
        VMRunningData data;
        MockAgent agent;
        agent.data_list.resize(11);
        const MockAgent::NodeData& parallel_data = agent.data_list[0];
        const MockAgent::NodeData& sequence_data = agent.data_list[2];
        const MockAgent::NodeData& selector_data = agent.data_list[6];
        const MockAgent::NodeData& decorator_data = agent.data_list[8];
        const MockAgent::NodeData& action_data0 = agent.data_list[1];
        const MockAgent::NodeData& action_data1 = agent.data_list[3];
        const MockAgent::NodeData& action_data2 = agent.data_list[4];
        const MockAgent::NodeData& action_data3 = agent.data_list[5];
        const MockAgent::NodeData& action_data4 = agent.data_list[7];
        const MockAgent::NodeData& action_data5 = agent.data_list[9];
        const MockAgent::NodeData& action_data6 = agent.data_list[10];

        action[0].update_result = BH_RUNNING;
        action[1].update_result = BH_SUCCESS;
        action[2].update_result = BH_FAILURE;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_FAILURE;
        action[5].update_result = BH_SUCCESS;
        action[6].update_result = BH_RUNNING;
        tick_vm(vm, agent, data);
        // {R,[S,F,R],(F,+S,R)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_FAILURE);
        REQUIRE(sequence_data.counter.prepare == 1);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 2);
        REQUIRE(selector_data.child_update_result == BH_SUCCESS);
        REQUIRE(selector_data.counter.prepare == 1);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 2);
        REQUIRE(decorator_data.child_update_result == BH_SUCCESS);
        REQUIRE(decorator_data.counter.prepare == 1);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 1);
        REQUIRE(decorator_data.counter.child_update == 1);
        REQUIRE(action_data0.counter.prepare == 1);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 1);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 1);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 1);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 1);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 0);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 0);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 1);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 1);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 1);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 0);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 0);
        REQUIRE(action_data6.counter.child_update == 0);

        action[0].update_result = BH_SUCCESS;
        action[1].update_result = BH_SUCCESS;
        action[2].update_result = BH_SUCCESS;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_RUNNING;
        action[5].update_result = BH_SUCCESS;
        action[6].update_result = BH_RUNNING;
        tick_vm(vm, agent, data);
        // {R,[S,F,R],(F,+S,R)}->{S,[S,S,R],(R,+S,R)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_RUNNING);
        REQUIRE(sequence_data.counter.prepare == 1);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 3);
        REQUIRE(selector_data.child_update_result == BH_RUNNING);
        REQUIRE(selector_data.counter.prepare == 1);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 1);
        REQUIRE(decorator_data.counter.prepare == 0);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 0);
        REQUIRE(decorator_data.counter.child_update == 0);
        REQUIRE(action_data0.counter.prepare == 0);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 1);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 1);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 1);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 1);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 1);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 1);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 1);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 0);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 0);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 0);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 0);
        REQUIRE(action_data6.counter.child_update == 0);

        action[0].update_result = BH_FAILURE;
        action[1].update_result = BH_RUNNING;
        action[2].update_result = BH_SUCCESS;
        action[3].update_result = BH_RUNNING;
        action[4].update_result = BH_FAILURE;
        action[5].update_result = BH_FAILURE;
        action[6].update_result = BH_SUCCESS;
        tick_vm(vm, agent, data);
        // {S,[S,S,R],(R,+S,R)}->{F,[R,S,R],(F,+F,S)}
        REQUIRE(parallel_data.child_update_result == BH_SUCCESS);
        REQUIRE(parallel_data.counter.prepare == 1);
        REQUIRE(parallel_data.counter.abort == 0);
        REQUIRE(parallel_data.counter.self_update == 1);
        REQUIRE(parallel_data.counter.child_update == 3);
        REQUIRE(sequence_data.child_update_result == BH_RUNNING);
        REQUIRE(sequence_data.counter.prepare == 0);
        REQUIRE(sequence_data.counter.abort == 0);
        REQUIRE(sequence_data.counter.self_update == 1);
        REQUIRE(sequence_data.counter.child_update == 1);
        REQUIRE(selector_data.child_update_result == BH_SUCCESS);
        REQUIRE(selector_data.counter.prepare == 0);
        REQUIRE(selector_data.counter.abort == 0);
        REQUIRE(selector_data.counter.self_update == 1);
        REQUIRE(selector_data.counter.child_update == 3);
        REQUIRE(decorator_data.counter.prepare == 1);
        REQUIRE(decorator_data.counter.abort == 0);
        REQUIRE(decorator_data.counter.self_update == 1);
        REQUIRE(decorator_data.counter.child_update == 1);
        REQUIRE(action_data0.counter.prepare == 1);
        REQUIRE(action_data0.counter.abort == 0);
        REQUIRE(action_data0.counter.self_update == 1);
        REQUIRE(action_data0.counter.child_update == 0);
        REQUIRE(action_data1.counter.prepare == 0);
        REQUIRE(action_data1.counter.abort == 0);
        REQUIRE(action_data1.counter.self_update == 0);
        REQUIRE(action_data1.counter.child_update == 0);
        REQUIRE(action_data2.counter.prepare == 0);
        REQUIRE(action_data2.counter.abort == 0);
        REQUIRE(action_data2.counter.self_update == 0);
        REQUIRE(action_data2.counter.child_update == 0);
        REQUIRE(action_data3.counter.prepare == 0);
        REQUIRE(action_data3.counter.abort == 0);
        REQUIRE(action_data3.counter.self_update == 1);
        REQUIRE(action_data3.counter.child_update == 0);
        REQUIRE(action_data4.counter.prepare == 0);
        REQUIRE(action_data4.counter.abort == 0);
        REQUIRE(action_data4.counter.self_update == 1);
        REQUIRE(action_data4.counter.child_update == 0);
        REQUIRE(action_data5.counter.prepare == 1);
        REQUIRE(action_data5.counter.abort == 0);
        REQUIRE(action_data5.counter.self_update == 1);
        REQUIRE(action_data5.counter.child_update == 0);
        REQUIRE(action_data6.counter.prepare == 1);
        REQUIRE(action_data6.counter.abort == 0);
        REQUIRE(action_data6.counter.self_update == 1);
        REQUIRE(action_data6.counter.child_update == 0);
    }
}
